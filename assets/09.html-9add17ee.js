import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-1240ea23.js";const i="/assets/浏览器相关面试题66-17817d43.png",u="/assets/浏览器相关面试题01-9f5a5ebc.png",r="/assets/浏览器相关面试题02-ca11da45.png",k="/assets/浏览器相关面试题03-c4ddccec.png",d="/assets/浏览器相关面试题04-c4a40b8e.png",v="/assets/浏览器相关面试题05-9b4d0ec6.png",m="/assets/浏览器相关面试题06-545309f0.png",b="/assets/浏览器相关面试题07-8867d51d.png",g="/assets/浏览器相关面试题08-713ae1a1.png",h="/assets/浏览器相关面试题09-bc0daaf4.png",f="/assets/浏览器相关面试题10-3f488396.png",q="/assets/浏览器相关面试题11-1eec3ca3.png",y="/assets/浏览器相关面试题12-7e120c6e.png",w="/assets/浏览器相关面试题13-bc4ade2a.png",x="/assets/浏览器相关面试题14-5242b386.png",_="/assets/浏览器相关面试题15-51dacaf9.png",S="/assets/浏览器相关面试题16-0e5d7391.png",j="/assets/浏览器相关面试题17-7c0fd112.png",D="/assets/浏览器相关面试题19-f3060d47.png",I="/assets/浏览器相关面试题20-d5587053.png",M="/assets/浏览器相关面试题21-dca4a3e9.png",T="/assets/浏览器相关面试题22-8aaba398.png",B="/assets/浏览器相关面试题23-b79d667b.png",C="/assets/浏览器相关面试题24-9feef41d.png",N="/assets/浏览器相关面试题25-98567cca.png",W="/assets/浏览器相关面试题26-22622431.png",L="/assets/浏览器相关面试题27-c947281e.png",A="/assets/浏览器相关面试题28-c7dbec74.png",E="/assets/浏览器相关面试题29-13c9dd08.png",P="/assets/浏览器相关面试题30-f1794bd3.png",O="/assets/浏览器相关面试题31-1b9366d9.png",H="/assets/浏览器相关面试题32-e48bba0e.png",R="/assets/浏览器相关面试题33-010e2b4e.gif",F="/assets/浏览器相关面试题34-60f60b9d.gif",U="/assets/浏览器相关面试题35-5fc8a03d.png",J="/assets/浏览器相关面试题36-cc3694db.png",V="/assets/浏览器相关面试题37-68915d52.gif",K="/assets/浏览器相关面试题38-0e00243a.png",Q="/assets/浏览器相关面试题39-9632a829.png",z="/assets/浏览器相关面试题40-60fa6edc.gif",G="/assets/浏览器相关面试题41-04144fde.png",$="/assets/浏览器相关面试题42-f6d4b768.png",X="/assets/浏览器相关面试题43-6f0b8d12.png",Y="/assets/浏览器相关面试题44-43b10d1a.png",Z="/assets/浏览器相关面试题45-cf0e0fcf.png",nn="/assets/浏览器相关面试题46-bd24449c.png",sn="/assets/浏览器相关面试题47-5fca3c18.png",an="/assets/浏览器相关面试题48-d8e3537f.png",tn="/assets/浏览器相关面试题49-181a3eab.png",pn="/assets/浏览器相关面试题50-1a3fa848.png",en="/assets/浏览器相关面试题51-7e63f4d7.png",on="/assets/浏览器相关面试题52-6e1b55ad.png",cn="/assets/浏览器相关面试题53-6e412aca.png",ln="/assets/浏览器相关面试题54-cb481db6.png",un="/assets/浏览器相关面试题55-3d9d33cb.png",rn="/assets/浏览器相关面试题56-a99b620a.png",kn="/assets/浏览器相关面试题57-100a2835.png",dn="/assets/浏览器相关面试题58-0e9d176e.png",vn="/assets/浏览器相关面试题59-0ccd71ac.png",mn="/assets/浏览器相关面试题60-39a833fe.png",bn="/assets/浏览器相关面试题61-61f091a2.png",gn="/assets/浏览器相关面试题62-f90c4105.png",hn="/assets/浏览器相关面试题63-3b6489cd.png",fn="/assets/浏览器相关面试题64-9ec784e5.png",qn="/assets/浏览器相关面试题65-d78b18a0.gif",yn={},wn=p('<p><img src="'+i+'" alt=""></p><h2 id="一-浏览器的渲染流程" tabindex="-1"><a class="header-anchor" href="#一-浏览器的渲染流程" aria-hidden="true">#</a> （一）浏览器的渲染流程</h2><h3 id="_1-浏览器渲染整体流程" tabindex="-1"><a class="header-anchor" href="#_1-浏览器渲染整体流程" aria-hidden="true">#</a> 1.浏览器渲染整体流程</h3><ul><li>浏览器，用户浏览网页最基本的一个入口</li><li>整个流程可以分为网络和渲染</li></ul><p><img src="'+u+'" alt=""></p><ul><li>浏览器的网络线程会发送 http 请求，和服务器之间进行通信</li><li>之后将拿到的 html 封装成一个渲染任务，并将其传递给渲染主线程的消息队列</li><li>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程</li><li>整个渲染流程分为多个阶段 <ul><li>HTML 解析</li><li>样式计算</li><li>布局</li><li>分层</li><li>生成绘制指令</li><li>分块</li><li>光栅化</li><li>绘制</li></ul></li></ul><p><img src="'+r+'" alt=""></p><ul><li>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入</li><li>形成了一套组织严密的生产流水线</li></ul><h3 id="_2-解析-html" tabindex="-1"><a class="header-anchor" href="#_2-解析-html" aria-hidden="true">#</a> 2.解析 HTML</h3><ul><li>第一步是 <mark>解析 html，生成 DOM 树</mark></li></ul><h4 id="_1-解析-html" tabindex="-1"><a class="header-anchor" href="#_1-解析-html" aria-hidden="true">#</a> 1）解析 HTML</h4><ul><li>打开一个网页时，浏览器都会去请求对应的 HTML 文件 <ul><li>虽然平时写代码时都会分为 HTML、CSS、JS 文件，也就是字符串</li><li>但是计算机硬件是不理解这些字符串的</li></ul></li><li>所以在网络中传输的内容其实都是 0 和 1 这些字节数据</li><li>当浏览器接收到这些字节数据以后，会将这些字节数据转换为字符串，也就是代码</li></ul><p><img src="'+k+`" alt=""></p><ul><li>当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为标记（token） <ul><li>这一过程在词法分析中叫做标记化（tokenization）</li></ul></li></ul><blockquote><p>为什么需要标记化？</p><p>原因很简单，现在浏览器虽然将字节数据转为了字符串，但是此时的字符串就如何一篇标题段落全部写在一行的文章一样，浏览器此时仍然是不能理解的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;this is a test&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此标记化本质就是要将这长长的字符串分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思</p></blockquote><p><img src="`+d+'" alt=""></p><ul><li>将整个字符串标记化之后，就能够在此基础上构建出对应的 DOM 树</li></ul><p><img src="'+v+'" alt=""></p><ul><li>整个流程如下</li></ul><p><img src="'+m+'" alt=""></p><h4 id="_2-解析-css" tabindex="-1"><a class="header-anchor" href="#_2-解析-css" aria-hidden="true">#</a> 2）解析 CSS</h4><ul><li>在解析 HTML 的过程中，可以能会遇到诸如 style、link 这些标签，此时就会涉及到 CSS 的解析</li><li>为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和外部的 JS 文件</li><li>如果主线程解析到 link 位置，此时外部的 CSS 文件还没有下载解析好， <mark>主线程不会等待</mark> ，继续解析后续的 HTML <ul><li>因为下载和解析 CSS 的工作是在 <mark>预解析线程</mark> 中进行的</li><li>这就是 CSS 不会阻塞 HTML 解析的根本原因</li></ul></li></ul><p><img src="'+b+'" alt=""></p><ul><li>CSS 的解析在经历了从字节数据、字符串、标记化后，最终也会形成一棵 CSSOM 树</li></ul><p><img src="'+g+'" alt=""></p><h4 id="_3-解析-js" tabindex="-1"><a class="header-anchor" href="#_3-解析-js" aria-hidden="true">#</a> 3）解析 JS</h4><ul><li>预解析线程除了下载外部 CSS 文件以外，还会下载外部 JS 文件</li><li>如果主线程解析到 script 位置，会停止解析 HTML， <mark>转而等待 JS 文件下载好</mark> ，并将全局代码解析执行完成后，才能继续解析 HTML <ul><li>因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停</li><li>这就是 JS 会阻塞 HTML 解析的根本原因</li></ul></li></ul><p><img src="'+h+'" alt=""></p><blockquote><p>因此，如果想首屏渲染的越快，就越不应该在最前面就加载 JS 文件</p><p>这也是建议将 script 标签都放在 body 标签底部的原因</p></blockquote><ul><li>现代浏览器提供了新的方式来避免 JS 代码阻塞渲染的情况 <ul><li>async</li><li>defer</li><li>prefetch</li><li>preload</li></ul></li></ul><h4 id="_4-第一步成果" tabindex="-1"><a class="header-anchor" href="#_4-第一步成果" aria-hidden="true">#</a> 4）第一步成果</h4><ul><li>第一步完成后，会得到 DOM 树和 CSSOM 树</li><li>浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中</li></ul><p><img src="'+f+'" alt=""></p><h3 id="_3-样式计算" tabindex="-1"><a class="header-anchor" href="#_3-样式计算" aria-hidden="true">#</a> 3.样式计算</h3><ul><li>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称为 Computed Style</li><li>在这一过程中 <ul><li>预设值会变成绝对值 <ul><li>如：red 会变成 rgb(255,0,0)</li></ul></li><li>相对单位会变成绝对单位 <ul><li>如：em 会变成 px</li></ul></li></ul></li></ul><p><img src="'+q+'" alt=""></p><ul><li>浏览器会确定每一个节点的样式到底是什么，并最终生成一颗样式规则树</li><li>这棵树上面记录了每一个 DOM 节点的 <mark>所有的样式属性值</mark></li><li>这一步完成后，就得到一棵带有样式的 DOM 树 <ul><li>即：经过样式计算后，之前的 DOM 树和 CSSOM 树合并成了一颗带有样式的 DOM 树</li></ul></li></ul><p><img src="'+y+'" alt=""></p><h3 id="_4-布局" tabindex="-1"><a class="header-anchor" href="#_4-布局" aria-hidden="true">#</a> 4.布局</h3><ul><li>只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容</li><li>还需要通过布局（layout）来计算出每个节点的几何信息（geometry）</li></ul><h4 id="_1-生成布局树的具体过程" tabindex="-1"><a class="header-anchor" href="#_1-生成布局树的具体过程" aria-hidden="true">#</a> 1）生成布局树的具体过程</h4><ul><li>主线程会遍历刚刚构建的 DOM 树，根据 DOM 节点的计算样式计算出布局树（layout tree）</li><li>布局树上每个节点会有它在页面上的 x，y 坐标以及盒子大小（bounding box sizes）的具体信息</li></ul><p><img src="'+w+'" alt=""></p><h4 id="_2-布局树结构" tabindex="-1"><a class="header-anchor" href="#_2-布局树结构" aria-hidden="true">#</a> 2）布局树结构</h4><ul><li>布局树大部分时候，并非和 DOM 树一一对应</li><li>只有可见的（visible）节点信息</li><li>如：<code>display: none;</code> 的节点没有几何信息，因此不会生成到布局树</li></ul><p><img src="'+x+'" alt=""></p><ul><li>如：使用伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中</li></ul><p><img src="'+_+'" alt=""></p><ul><li>如：匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应</li></ul><p><img src="'+S+'" alt=""></p><h3 id="_5-分层" tabindex="-1"><a class="header-anchor" href="#_5-分层" aria-hidden="true">#</a> 5.分层</h3><p><img src="'+j+'" alt=""></p><ul><li>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率</li><li>主线程需要遍历整棵布局树来创建一棵层次树（Layer Tree）</li></ul><ul><li>滚动条、堆叠上下文、transform、opacity 等样式都会影响分层结果</li><li>可以通过使用 will-change 属性来告诉浏览器对其分层</li></ul><h3 id="_6-生成绘制指令" tabindex="-1"><a class="header-anchor" href="#_6-生成绘制指令" aria-hidden="true">#</a> 6.生成绘制指令</h3><ul><li>主线程会为每个层单独产生绘制指令集</li><li>用于描述这一层的内容该如何画出来</li><li>只是生成绘制指令集，没有开始执行</li></ul><p><img src="'+D+'" alt=""></p><blockquote><p>这里的绘制指令，类似于“将画笔移动到 xx 位置，放下画笔，绘制一条 xx 像素长度的线”</p><p>在浏览器所看到的各种复杂的页面，实际上都是这样一条指令一条指令的执行所绘制出来的</p></blockquote><ul><li>生成绘制指令集后， <mark>渲染主线程的工程就暂时告一段落</mark></li><li>接下来主线程将每个图层的绘制信息提交给合成线程，剩余工作将由 <mark>合成线程</mark> 完成</li></ul><p><img src="'+I+'" alt=""></p><h3 id="_7-分块" tabindex="-1"><a class="header-anchor" href="#_7-分块" aria-hidden="true">#</a> 7.分块</h3><ul><li>合成线程首先对每个图层进行分块，将其划分为更多的小区域</li></ul><p><img src="'+M+'" alt=""></p><ul><li>会从线程池中拿取多个线程来完成分块工作</li></ul><p><img src="'+T+'" alt=""></p><h3 id="_8-光栅化" tabindex="-1"><a class="header-anchor" href="#_8-光栅化" aria-hidden="true">#</a> 8.光栅化</h3><ul><li>将每个块变成位图</li><li>即：确认每一个像素点的 rgb 信息</li></ul><p><img src="'+B+'" alt=""></p><ul><li>光栅化由合成线程将块信息交给 GPU 进程完成，以极高的速度完成光栅化</li></ul><p><img src="'+C+'" alt=""></p><ul><li>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块</li></ul><p><img src="'+N+'" alt=""></p><h3 id="_9-绘制" tabindex="-1"><a class="header-anchor" href="#_9-绘制" aria-hidden="true">#</a> 9.绘制</h3><ul><li>当所有的图块都被栅格化后，合成线程会拿到每个层、每个块的位图</li><li>从而生成一个个指引（quad）信息</li></ul><p><img src="'+W+'" alt=""></p><ul><li>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形</li><li>变形发生在合成线程，与渲染主线程无关 <ul><li>这就是 transform 效率高的本质原因</li></ul></li><li>合成线程会通过 IPC 向浏览器进程（browser process）提交（commit）一个渲染帧 <ul><li>这个时候可能有另外一个合成帧被浏览器进程的 UI 线程（UI thread）提交以改变浏览器的 UI</li><li>这些合成帧都会被发送给 GPU 完成最终的屏幕成像</li></ul></li><li>如果合成线程收到页面滚动的事件 <ul><li>合成线程会构建另外一个合成帧发送给 GPU 来更新页面</li></ul></li></ul><p><img src="'+L+'" alt=""></p><h3 id="_10-浏览器拿到-html-文档到最终渲染页面的整体流程" tabindex="-1"><a class="header-anchor" href="#_10-浏览器拿到-html-文档到最终渲染页面的整体流程" aria-hidden="true">#</a> 10.浏览器拿到 HTML 文档到最终渲染页面的整体流程</h3><p><img src="'+A+'" alt=""></p><h3 id="_11-常见面试题" tabindex="-1"><a class="header-anchor" href="#_11-常见面试题" aria-hidden="true">#</a> 11.常见面试题</h3><h4 id="_1-什么是-reflow" tabindex="-1"><a class="header-anchor" href="#_1-什么是-reflow" aria-hidden="true">#</a> 1）什么是 reflow？</h4><blockquote><p>reflow 的本质就是重新计算 layout 树</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息</p><p>浏览器在反复权衡下，最终决定获取属性立即 reflow</p><p><img src="'+E+'" alt=""></p></blockquote><h4 id="_2-什么是-repaint" tabindex="-1"><a class="header-anchor" href="#_2-什么是-repaint" aria-hidden="true">#</a> 2）什么是 repaint？</h4><blockquote><p>repaint 的本质就是重新根据分层信息计算了绘制指令</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</p><p><img src="'+P+'" alt=""></p></blockquote><h4 id="_3-为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#_3-为什么-transform-的效率高" aria-hidden="true">#</a> 3）为什么 transform 的效率高？</h4><blockquote><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化</p><p><img src="'+O+'" alt=""></p></blockquote><h2 id="二-资源提示关键词" tabindex="-1"><a class="header-anchor" href="#二-资源提示关键词" aria-hidden="true">#</a> （二）资源提示关键词</h2><h3 id="_1-渲染阻塞" tabindex="-1"><a class="header-anchor" href="#_1-渲染阻塞" aria-hidden="true">#</a> 1.渲染阻塞</h3><h4 id="_1-构建-dom-树" tabindex="-1"><a class="header-anchor" href="#_1-构建-dom-树" aria-hidden="true">#</a> 1）构建 DOM 树</h4><ul><li>HTML 用于描述网页的整体结构</li><li>为了理解 HTML，浏览器必须将它转为自己能够理解的格式，也就是 DOM（文档对象模型）</li><li>浏览器引擎有一段特殊的代码，称为解析器 <ul><li>用于将数据从一种格式转换为另一种格式</li></ul></li></ul><p><img src="'+H+'" alt=""></p><ul><li>浏览器一点一点地构建 DOM</li><li>一旦第一块代码进来，就会开始解析 HTML，将节点添加到树结构中</li></ul><p><img src="'+R+'" alt=""></p><ul><li>构建出来的 DOM 对象有 2 个作用 <ul><li>HTML 文档的结构以对象的方式体现出来，形成 DOM 树</li><li>作为外界的接口供外界使用，如：JavaScript</li></ul></li><li>当调用诸如 document.getElementById 的方法时，返回的元素是一个 DOM 节点</li><li>每个 DOM 节点都有许多可以用来访问和更改的函数，用户看到的内容也会相应地发生变化</li></ul><p><img src="'+F+'" alt=""></p><h4 id="_2-构建-cssom-树" tabindex="-1"><a class="header-anchor" href="#_2-构建-cssom-树" aria-hidden="true">#</a> 2）构建 CSSOM 树</h4><ul><li>CSS 样式会被映射为 CSSOM（CSS 对象模型） <ul><li>和 DOM 很相似，但是针对的是 CSS 而不是 HTML</li></ul></li><li>在构建 CSSOM 的时候，无法进行增量构建</li></ul><blockquote><p>不像构建 DOM 一样，解析到一个 DOM 节点就挂到 DOM 树结构里面</p><p>因为 CSS 规则是可以相互覆盖的，浏览器引擎需要经过复杂的计算才能弄清楚 CSS 代码如何应用于 DOM</p></blockquote><p><img src="'+U+'" alt=""></p><h4 id="_3-js-代码阻塞渲染" tabindex="-1"><a class="header-anchor" href="#_3-js-代码阻塞渲染" aria-hidden="true">#</a> 3）JS 代码阻塞渲染</h4><ul><li>当浏览器正在构建 DOM 时 <ul><li>如果遇到 HTML 中的 <code>&lt;script&gt;...&lt;/script&gt;</code> 标记，必须立即执行</li><li>如果脚本是外部的，必须先下载脚本</li></ul></li><li>过去，为了执行脚本，必须暂停解析</li><li>解析会在 JavaScript 引擎执行完脚本中的代码后再次启动</li></ul><p><img src="'+J+'" alt=""></p><blockquote><p>为什么解析必须停止？</p><p>因为 Javascript 脚本可以改变 HTML 以及根据 HTML 生成的 DOM 树结构</p><p>如：脚本可以通过使用 document.createElement() 来添加节点从而更改 DOM 结构</p><p>所以建议将 script 标签写在 body 元素结束标签前面</p></blockquote><p><img src="'+V+'" alt=""></p><h4 id="_4-css-阻塞渲染" tabindex="-1"><a class="header-anchor" href="#_4-css-阻塞渲染" aria-hidden="true">#</a> 4）CSS 阻塞渲染</h4><ul><li>在 JavaScript 中完全可以访问到 DOM 节点的某些样式，或者使用 JavaScript 直接访问 CSSOM</li></ul><p><img src="'+K+'" alt=""></p><ul><li>CSS 可能会根据文档中的外部样式表和脚本的顺序阻止解析</li><li>如果在文档中的脚本之前放置了外部样式表，则 DOM 和 CSSOM 对象的构建可能会相互干扰</li></ul><blockquote><p>当解析器到达一个脚本标签时，在 JavaScript 执行完成之前无法继续构建 DOM</p><p>然而如果这一段 JavaScript 中涉及到访问和使用 CSSOM，那么必须等待 CSS 文件被下载、解析并且 CSSOM 可用</p><p>如果 CSSOM 处于未可用状态，则会阻塞 JavaScript 的执行</p></blockquote><p><img src="'+Q+'" alt=""></p><ul><li>虽然 CSS 不会阻塞 DOM 的构建，但也会阻塞渲染</li><li>DOM 树和 CSSOM 树都构建完成才会生成渲染树（Render Tree） <ul><li>浏览器在拥有 DOM 和 CSSOM 之前不会显示任何内容</li><li>因为没有 CSS 的页面通常无法使用</li></ul></li></ul><h4 id="_5-无样式内容闪现" tabindex="-1"><a class="header-anchor" href="#_5-无样式内容闪现" aria-hidden="true">#</a> 5）无样式内容闪现</h4><ul><li>如果浏览器展示了一个没有 CSS 的凌乱页面</li><li>片刻之后就会进入一个有样式的页面</li><li>不断变化的内容和突然的视觉变化会给用户带来混乱的用户体验</li><li>这种体验称为无样式内容闪现，Flash of Unstyled Content，FOUC</li></ul><p><img src="'+z+`" alt=""></p><ul><li>为了解决这些问题，需要尽快的交付 CSS</li><li>所以 <mark>“顶部样式，底部脚本”</mark> 被称为“最佳实践”</li></ul><h3 id="_2-defer-和-async" tabindex="-1"><a class="header-anchor" href="#_2-defer-和-async" aria-hidden="true">#</a> 2.defer 和 async</h3><ul><li>现代浏览器引入了 defer 和 async</li></ul><h4 id="_1-async" tabindex="-1"><a class="header-anchor" href="#_1-async" aria-hidden="true">#</a> 1）async</h4><ul><li>表示 <mark>加载和渲染后续文档元素的过程</mark> 将和 <mark>script.js 的加载与执行</mark> 并行进行【异步】</li><li>即：下载 JS 文件的时候不会阻塞 DOM 树的构建，但是执行该 JS 代码会阻塞 DOM 树的构建</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-defer" tabindex="-1"><a class="header-anchor" href="#_2-defer" aria-hidden="true">#</a> 2）defer</h4><ul><li>表示 <mark>加载后续文档元素的过程</mark> 将和 <mark>script.js 的加载</mark> 并行进行【异步】</li><li>但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成</li><li>即：下载 JS 文件的时候不会阻塞 DOM 树的构建，然后等待 DOM 树构建完毕后再执行此 JS 文件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-具体加载瀑布图" tabindex="-1"><a class="header-anchor" href="#_3-具体加载瀑布图" aria-hidden="true">#</a> 3）具体加载瀑布图</h4><p><img src="`+G+`" alt=""></p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-12-08-032125.png" alt="image20211208112125053"></p><h3 id="_3-preload" tabindex="-1"><a class="header-anchor" href="#_3-preload" aria-hidden="true">#</a> 3.preload</h3><ul><li>一种预加载的方式</li><li>通过声明向浏览器声明一个需要提前加载的资源</li><li>当资源真正被使用的时候立即执行，就无需等待网络的消耗</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style2.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style1.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main1.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>先加载 style1.css 和 main1.js 文件（但不会生效）</p><p>在随后的页面渲染中，一旦需要使用它们，就会立即可用</p></blockquote><ul><li>可以使用 <code>as</code> 来指定将要预加载的内容类型</li></ul><p><img src="`+$+`" alt=""></p><h4 id="_1-preload-指令的优点" tabindex="-1"><a class="header-anchor" href="#_1-preload-指令的优点" aria-hidden="true">#</a> 1）preload 指令的优点</h4><ul><li>允许浏览器设置资源优先级，从而允许 Web 开发人员优化某些资源的交付</li><li>使浏览器能够确定资源类型，因此可以判断将来是否可以重用相同的资源</li><li>浏览器可以通过引用 as 属性中定义的内容来确定请求是否符合内容安全策略</li><li>浏览器可以根据资源类型发送合适的 Accept 头（如：image/webp）</li></ul><h3 id="_4-prefetch" tabindex="-1"><a class="header-anchor" href="#_4-prefetch" aria-hidden="true">#</a> 4.prefetch</h3><ul><li>一种利用浏览器的空闲时间加载页面将来可能用到的资源的一种机制</li><li>通常可以用于加载 <mark>非首页</mark> 的其他页面所需要的资源，以便加快后续页面的首屏速度</li><li>可以获取非当前页面所需要的资源，并且将其放入缓存至少 5 分钟（无论资源是否可以缓存）</li><li>当页面跳转时，未完成的 prefetch 请求不会被中断</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-dns-prefetching" tabindex="-1"><a class="header-anchor" href="#_1-dns-prefetching" aria-hidden="true">#</a> 1）DNS prefetching</h4><ul><li>允许浏览器在用户浏览时在后台对页面执行 DNS 查找</li><li>最大限度地减少了延迟，因为一旦用户单击链接就已经开始进行 DNS 查找</li><li>通过将 <code>rel=&quot;dns-prefetch&quot;</code> 标记添加到链接属性 <ul><li>可以将 DNS prefetching 添加到特定 URL</li><li>建议在诸如 Web 字体、CDN 之类的链接上使用</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Prefetch DNS for external assets --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//fonts.googleapis.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//www.google-analytics.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//cdn.domain.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-prerender" tabindex="-1"><a class="header-anchor" href="#_5-prerender" aria-hidden="true">#</a> 5.prerender</h3><ul><li>与 prefetch 非常相似，同样会收集用户接下来可能会用到的资源</li><li>不同之处在于 prerender 实际上是 <mark>在后台渲染整个页面</mark></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prerender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.keycdn.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-preconnect" tabindex="-1"><a class="header-anchor" href="#_6-preconnect" aria-hidden="true">#</a> 6.preconnect</h3><ul><li>允许浏览器在 HTTP 请求实际发送到服务器之前设置早期连接</li><li>浏览器要建立一个连接 <ul><li>需要经过 DNS 查找、TCP 三次握手和 TLS 协商（如果是 https）</li><li>这些过程都是相当耗时的</li></ul></li><li>preconnet 使浏览器能够预先建立一个连接，等真正需要加载资源的时候就能够直接请求了</li></ul><p><img src="`+X+`" alt=""></p><ul><li>CDN URL 启用 preconnect</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.domain.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>浏览器会进行以下步骤</p><ol><li>解释 href 的属性值，判断是否是合法的 URL</li><li>如果是合法的 URL，继续判断 URL 的协议是否是 http 或者 https</li><li>如果不是合法的 URL，则结束处理</li><li>如果当前页面 host 不同于 href 属性中的 host，将不会带上 cookie</li><li>如果希望带上 cookie 等信息，可以加上 crossorign 属性</li></ol></blockquote><h2 id="三-浏览器的组成部分" tabindex="-1"><a class="header-anchor" href="#三-浏览器的组成部分" aria-hidden="true">#</a> （三）浏览器的组成部分</h2><h3 id="_1-浏览器" tabindex="-1"><a class="header-anchor" href="#_1-浏览器" aria-hidden="true">#</a> 1.浏览器</h3><ul><li>Web 浏览器简称为浏览器，是一种用于访问互联网上信息的应用软件</li><li>主要功能是从服务器检索 Web 资源并将其显示在 Web 浏览器窗口中</li></ul><h4 id="_1-web-资源" tabindex="-1"><a class="header-anchor" href="#_1-web-资源" aria-hidden="true">#</a> 1）Web 资源</h4><ul><li>通常是 HTML 文档，也可能是 PDF、图像、音频、视频或其他类型的内容</li><li>资源的位置是通过使用 URI（统一资源标识符）指定的</li></ul><h4 id="_2-浏览器架构" tabindex="-1"><a class="header-anchor" href="#_2-浏览器架构" aria-hidden="true">#</a> 2）浏览器架构</h4><ul><li>浏览器包含结构良好的组件 <ul><li>这些组件执行一系列任务让浏览器窗口能显示 Web 资源</li></ul></li></ul><p><img src="`+Y+'" alt=""></p><ul><li>用户界面 user interface</li><li>浏览器引擎 browser engine</li><li>渲染引擎 rendering engine</li><li>网络 networking</li><li>JS 解释器 JavaScript interpreter</li><li>用户界面后端 UI backend</li><li>数据存储 data storage</li></ul><h3 id="_2-用户界面-user-interface" tabindex="-1"><a class="header-anchor" href="#_2-用户界面-user-interface" aria-hidden="true">#</a> 2.用户界面（user interface）</h3><ul><li>用于呈现浏览器窗口部件</li><li>如：地址栏、前进后退按钮、书签、顶部菜单等</li></ul><h3 id="_3-浏览器引擎-browser-engine" tabindex="-1"><a class="header-anchor" href="#_3-浏览器引擎-browser-engine" aria-hidden="true">#</a> 3.浏览器引擎（browser engine）</h3><ul><li>是 UI 和渲染引擎之间的桥梁</li><li>接收来自 UI 的输入，然后通过操纵渲染引擎将网页或者其他资源显示在浏览器中</li></ul><h3 id="_4-渲染引擎-rendering-engine" tabindex="-1"><a class="header-anchor" href="#_4-渲染引擎-rendering-engine" aria-hidden="true">#</a> 4.渲染引擎（rendering engine）</h3><ul><li>负责在浏览器窗口上显示请求的内容</li><li>如：用户请求一个 HTML 页面，负责解析 HTML 文档和 CSS，并将解析和格式化的内容显示在屏幕上</li><li>也就是平时说的 <mark>浏览器内核</mark></li></ul><h4 id="_1-现代网络浏览器的渲染引擎" tabindex="-1"><a class="header-anchor" href="#_1-现代网络浏览器的渲染引擎" aria-hidden="true">#</a> 1）现代网络浏览器的渲染引擎</h4><ul><li>Firefox：Gecko Software</li><li>Safari：WebKit</li><li>Chrome、Opera (15 版本之后)：Blink</li><li>Internet Explorer：Trident</li></ul><h4 id="_2-渲染页面的整体流程" tabindex="-1"><a class="header-anchor" href="#_2-渲染页面的整体流程" aria-hidden="true">#</a> 2）渲染页面的整体流程</h4><ul><li>为了在屏幕上绘制像素（第一次渲染），浏览器在从网络接收数据（HTML、CSS、JavaScript）后必须经过一系列称为 <mark>关键渲染路径</mark> 的过程/技术</li><li>包括：DOM、CSSOM、渲染树、布局和绘画</li></ul><h5 id="a-从-html-数据到-dom" tabindex="-1"><a class="header-anchor" href="#a-从-html-数据到-dom" aria-hidden="true">#</a> a）从 HTML 数据到 DOM</h5><ul><li>渲染引擎以二进制流的格式接收来自网络层的请求内容（通常为 8kb 块） <ul><li>然后将原始字节转换为 HTML 文件的字符（基于字符编码）</li><li>然后将字符转换为标记</li></ul></li><li>词法分析器执行词法分析，将输入分解为标记 <ul><li>在标记化期间，文件中的每个开始和结束标记都被考虑在内</li><li>知道如何去除不相关的字符，如：空格和换行符</li></ul></li><li>解析器进行语法分析，通过分析文档结构，应用语言语法规则来构建解析树 <ul><li>解析过程是迭代的</li><li>将向词法分析器询问新的标记 <ul><li>如果语言语法规则匹配，则该标记将被添加到解析树中，然后解析器将要求另一个令牌</li><li>如果没有规则匹配，解析器将在内部存储令牌并不断询问令牌，直到找到与所有内部存储的令牌匹配的规则</li></ul></li><li>如果未找到规则，则解析器将引发异常。这意味着该文档无效并且包含语法错误</li></ul></li><li>这些节点在 DOM（文档对象模型）树的数据结构中链接，该结构建立了父子关系、相邻兄弟关系</li></ul><p><img src="'+Z+'" alt=""></p><h5 id="b-从-css-数据到-cssom" tabindex="-1"><a class="header-anchor" href="#b-从-css-数据到-cssom" aria-hidden="true">#</a> b）从 CSS 数据到 CSSOM</h5><ul><li>CSS 数据的原始字节被转换成字符、标记、节点，最后存储在 CSSOM（CSS 对象模型）中</li><li>因为 CSS 存在层叠机制，该机制决定了将什么样式应用于元素 <ul><li>即：元素的样式数据可以来自父项（通过继承）或设置为元素本身</li></ul></li><li>因此浏览器必须递归遍历 CSS 树结构并确定特定元素的样式</li></ul><p><img src="'+nn+'" alt=""></p><h5 id="c-dom-和-cssom-渲染树" tabindex="-1"><a class="header-anchor" href="#c-dom-和-cssom-渲染树" aria-hidden="true">#</a> c）DOM 和 CSSOM 渲染树</h5><ul><li>DOM 树包含有关 HTML 元素关系的信息，而 CSSOM 树包含有关如何设置这些元素样式的信息</li><li>渲染引擎会将样式信息和 HTML 元素关系信息进行汇总，用于创建渲染树</li><li>渲染树包含具有视觉属性（如：颜色、尺寸）的矩形，按正确的顺序显示在屏幕上</li></ul><p><img src="'+sn+'" alt=""></p><h5 id="d-布局" tabindex="-1"><a class="header-anchor" href="#d-布局" aria-hidden="true">#</a> d）布局</h5><ul><li>构建渲染树后，会经历一个“布局”过程</li><li>布局过程的输出是一个“盒子模型” <ul><li>精确地捕获视口内每个元素的确切位置和大小</li><li>所有相对测量值都转换为屏幕上的绝对像素</li></ul></li></ul><h5 id="e-绘制" tabindex="-1"><a class="header-anchor" href="#e-绘制" aria-hidden="true">#</a> e）绘制</h5><ul><li>会遍历渲染树且只用 UI 后端层绘制每个节点</li><li>这个过程也被称为“光栅化”</li><li>渲染树中每个节点的计算布局信息被转换为屏幕上的实际像素</li><li>是一个渐进的过程，其中一些部分被解析和渲染，而该过程继续处理来自网络的项目的其余部分</li></ul><h5 id="f-整体流程图" tabindex="-1"><a class="header-anchor" href="#f-整体流程图" aria-hidden="true">#</a> f）整体流程图</h5><p><img src="'+an+`" alt=""></p><h3 id="_5-网络-networking" tabindex="-1"><a class="header-anchor" href="#_5-网络-networking" aria-hidden="true">#</a> 5.网络（networking）</h3><ul><li>该模块处理浏览器内的各种网络通信</li><li>使用一组通信协议 <ul><li>如：HTTP、HTTPs、FTP</li></ul></li><li>同时通过 URL 获取请求的资源</li></ul><h3 id="_6-js-解释器-javascript-interpreter" tabindex="-1"><a class="header-anchor" href="#_6-js-解释器-javascript-interpreter" aria-hidden="true">#</a> 6.JS 解释器（JavaScript interpreter）</h3><ul><li>JavaScript 是一种脚本语言，允许动态更新 Web 内容、控制由浏览器的 JS 引擎执行的多媒体和动画图像</li><li>DOM 和 CSSOM 为 JS 提供了一个接口，可以改变 DOM 和 CSSOM <ul><li>由于浏览器不确定特定的 JS 会做什么，会在遇到 script 标签后立即暂停 DOM 树的构建</li></ul></li><li>每个脚本都是一个解析拦截器，会让 DOM 树的构建停止</li><li>JS 引擎在从服务器获取并输入 JS 解析器后立即开始解析代码 <ul><li>转换为机器理解的代表性对象</li><li>这些对象被送入一个解释器，该解释器将这些对象翻译成字节码</li><li>在抽象句法结构的树表示中，存储所有解析器信息的对象称为对象语法树（AST）</li></ul></li><li>这些是即时 (JIT) 编译器 <ul><li>即：从服务器下载的 JavaScript 文件在客户端的计算机上是实时编译的</li></ul></li><li>解释器和编译器是结合在一起的 <ul><li>解释器几乎立即执行源代码</li><li>编译器生成客户端系统直接执行的机器代码</li></ul></li></ul><h4 id="_1-不同的浏览器使用不同的-js-引擎" tabindex="-1"><a class="header-anchor" href="#_1-不同的浏览器使用不同的-js-引擎" aria-hidden="true">#</a> 1）不同的浏览器使用不同的 JS 引擎</h4><ul><li>Chrome： V8 (JavaScript 引擎) <ul><li>Node JS 建立在此引擎之上</li></ul></li><li>Mozilla： SpiderMonkey (旧称“松鼠鱼”)</li><li>Microsoft Edge：Chakra</li><li>Safari：JavaScriptCore / Nitro WebKit</li></ul><h3 id="_7-用户界面后端-ui-backend" tabindex="-1"><a class="header-anchor" href="#_7-用户界面后端-ui-backend" aria-hidden="true">#</a> 7.用户界面后端（UI backend）</h3><ul><li>用于绘制基本的窗口小部件 <ul><li>如：下拉列表、文本框、按钮等</li></ul></li><li>向上提供公开的接口</li><li>向下调用操作系统的用户界面</li></ul><h3 id="_8-数据存储-data-storage" tabindex="-1"><a class="header-anchor" href="#_8-数据存储-data-storage" aria-hidden="true">#</a> 8.数据存储（data storage）</h3><ul><li>这是一个持久层</li><li>浏览器可能需要在本地保存各种数据 <ul><li>如：cookie</li></ul></li><li>浏览器还支持 localStorage、IndexedDB、WebSQL 和 FileSystem 等存储机制</li></ul><h3 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9.总结</h3><blockquote><p>浏览器由以下几个部分组成</p><ol><li>用户界面（user interface）</li></ol><p>用于呈现浏览器窗口部件，如：地址栏、前进后退按钮、书签、顶部菜单等</p><ol start="2"><li>浏览器引擎（browser engine）</li></ol><p>用户在用户界面和渲染引擎中传递指令</p><ol start="3"><li>渲染引擎（rendering engine）</li></ol><p>负责解析 HTML、CSS，并将解析的内容显示到屏幕上（浏览器内核）</p><ol start="4"><li>网络（networking）</li></ol><p>用户网络调用，如：发送 http 请求</p><ol start="5"><li>用户界面后端（UI backend）</li></ol><p>用于绘制基本的窗口小部件，如：下拉列表、文本框、按钮等，向上提供公开的接口，向下调用操作系统的用户&gt; 界面</p><ol start="6"><li>JS 解释器（JavaScript interpreter）</li></ol><p>解释执行 JS 代码（JS 引擎）</p><ol start="7"><li>数据存储（data storage）</li></ol><p>用户保存数据到磁盘中，如：cookie、localStorage 等都是使用的这部分功能</p></blockquote><h2 id="四-浏览器离线存储概述" tabindex="-1"><a class="header-anchor" href="#四-浏览器离线存储概述" aria-hidden="true">#</a> （四）浏览器离线存储概述</h2><ul><li>Data Persistence/storage，浏览器离线存储或者本地存储</li><li>即：内容存储在浏览器这一边</li><li>目前常见的浏览器离线存储的方式 <ul><li>Cookie</li><li>Web Storage</li><li>WebSQL</li><li>IndexedDB</li><li>File System</li></ul></li></ul><h2 id="五-websql" tabindex="-1"><a class="header-anchor" href="#五-websql" aria-hidden="true">#</a> （五）WebSQL</h2><ul><li>WebSQL 数据库 API 并不是 HTML5 规范的一部分，是一个独立的规范</li><li>引入了一组使用 SQL 操作客户端数据库的 APIs</li><li>最新版的 Safari、Chrome 和 Opera 浏览器都支持 WebSQL</li><li>在 WebSQL 中，有 3 个核心方法</li></ul><table><thead><tr><th>核心方法</th><th>说明</th></tr></thead><tbody><tr><td>openDatabase</td><td>使用现有的数据库或者新建的数据库创建一个数据库对象</td></tr><tr><td>transaction</td><td>控制一个事务，以及基于这种情况执行提交或者回滚</td></tr><tr><td>executeSql</td><td>执行实际的 SQL 查询</td></tr></tbody></table><h3 id="_1-打开数据库" tabindex="-1"><a class="header-anchor" href="#_1-打开数据库" aria-hidden="true">#</a> 1.打开数据库</h3><ul><li>使用 openDatabase() 方法来打开已存在的数据库</li><li>如果数据库不存在，则会创建一个新的数据库</li></ul><h4 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1）语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test DB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>尝试打开一个名为 mydb 的数据库</p><p>因为第一次不存在此数据库，所以会创建该数据库</p><p>版本号为 1.0，大小为 2M</p></blockquote><p><img src="`+tn+`" alt=""></p><h4 id="_2-参数" tabindex="-1"><a class="header-anchor" href="#_2-参数" aria-hidden="true">#</a> 2）参数</h4><ul><li>数据库名称</li><li>版本号</li><li>描述文本</li><li>数据库大小</li><li>创建回调 <ul><li>会在创建数据库后被调用</li></ul></li></ul><h3 id="_2-执行操作" tabindex="-1"><a class="header-anchor" href="#_2-执行操作" aria-hidden="true">#</a> 2.执行操作</h3><ul><li>执行操作使用 database.transaction() 函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test DB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE IF NOT EXISTS LOGS (id unique, log)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行后会在 mydb 数据库中创建一个名为 LOGS 的表</p><p>该表存在 2 个字段 id 和 log，其中 id 是唯一的</p></blockquote><p><img src="`+pn+`" alt=""></p><h3 id="_3-插入数据" tabindex="-1"><a class="header-anchor" href="#_3-插入数据" aria-hidden="true">#</a> 3.插入数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test DB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建了一张名为 STU 的表，该表存在 3 个字段 id，name 和 age</p><p>之后插入了 2 条数据</p></blockquote><p><img src="`+en+`" alt=""></p><ul><li>也可以使用动态值插入数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test DB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// tx.executeSql(&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;);</span>
  <span class="token comment">// tx.executeSql(&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;);</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO STU (id, name, age) VALUES (3, ?, ?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    stuName<span class="token punctuation">,</span>
    stuAge<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>stuName 和 stuAge 是外部变量，executeSql 会映射数组参数中的每个条目给 &quot;?&quot;</p><p>注意：由于上一次操作已经插入了 id 为 1 和 2 的数据，所以这一次插入内容时，要将前面两次插入语句注释调</p><p>否则插入操作不会成功，因为这里是一个事务，前面失败了会导致后面也失败</p></blockquote><h3 id="_4-读取数据" tabindex="-1"><a class="header-anchor" href="#_4-读取数据" aria-hidden="true">#</a> 4.读取数据</h3><h4 id="_1-示例-读取数据库中已经存在的数据" tabindex="-1"><a class="header-anchor" href="#_1-示例-读取数据库中已经存在的数据" aria-hidden="true">#</a> 1）示例：读取数据库中已经存在的数据</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token comment">// 打开数据库</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&quot;mydb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Test DB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 插入数据</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE IF NOT EXISTS STU (id unique, name, age)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (1, &quot;张三&quot;, 18)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO STU (id, name, age) VALUES (2, &quot;李四&quot;, 20)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO STU (id, name, age) VALUES (3, ?, ?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    stuName<span class="token punctuation">,</span>
    stuAge<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span>
    <span class="token string">&quot;SELECT * FROM STU&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> len <span class="token operator">=</span> results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        i<span class="token punctuation">;</span>
      msg <span class="token operator">=</span> <span class="token string">&quot;&lt;p&gt;查询记录条数: &quot;</span> <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> msg<span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        msg <span class="token operator">=</span>
          <span class="token string">&quot;&lt;p&gt;&lt;b&gt;&quot;</span> <span class="token operator">+</span>
          results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span>
          <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span>
          results<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">+</span>
          <span class="token string">&quot;&lt;/b&gt;&lt;/p&gt;&quot;</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> msg<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-完整语法" tabindex="-1"><a class="header-anchor" href="#_2-完整语法" aria-hidden="true">#</a> 2）完整语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">executeSql</span><span class="token punctuation">(</span>sqlStatement<span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>接收 4 个参数 <ul><li>SQL 语句</li><li>参数</li><li>执行 SQL 语句后的回调</li><li>错误回调</li></ul></li></ul><h3 id="_5-删除数据" tabindex="-1"><a class="header-anchor" href="#_5-删除数据" aria-hidden="true">#</a> 5.删除数据</h3><ul><li>使用 SQL 中的语法，同样也支持动态指定的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 删除操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE FROM STU  WHERE id=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE FROM STU WHERE id=?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stuID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-修改数据" tabindex="-1"><a class="header-anchor" href="#_6-修改数据" aria-hidden="true">#</a> 6.修改数据</h3><ul><li>使用 SQL 中的语法，同样也支持动态指定的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stuID <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 更新操作</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE STU SET name=&#39;王羲之&#39; WHERE id=3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE STU SET age=21 WHERE id=?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stuID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结" aria-hidden="true">#</a> 7.总结</h3><ul><li>目前 WebSQL 已经不再是 W3C 推荐规范，官方也已经不再维护了 <ul><li>因为当前的 SQL 规范采用 SQLite 的 SQL 方言</li></ul></li><li>WebSQL 使用 SQL 语言来进行操作，更像是一个关系型数据库</li><li>而 IndexedDB 则更像是一个 NoSQL 数据库 <ul><li>这也是目前 W3C 强推的浏览端数据库解决方案</li></ul></li></ul>`,235),xn={href:"https://developer.chrome.com/docs/devtools/storage/websql/?utm_source=devtools#run",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://blog.csdn.net/weixin_45389633/article/details/107308968",target:"_blank",rel:"noopener noreferrer"},Sn=p(`<h2 id="六-indexeddb" tabindex="-1"><a class="header-anchor" href="#六-indexeddb" aria-hidden="true">#</a> （六）IndexedDB</h2><h3 id="_1-indexeddb-简介" tabindex="-1"><a class="header-anchor" href="#_1-indexeddb-简介" aria-hidden="true">#</a> 1.IndexedDB 简介</h3><blockquote><p>随着浏览器的功能不断增强，越来越多的网站开始考虑，将大量数据储存在客户端，这样可以减少从服务器获取数据，直接从本地获取数据</p><p>现有的浏览器数据储存方案，都不适合储存大量数据</p><ul><li>Cookie 的大小不超过 4KB，且每次请求都会发送回服务器</li><li>LocalStorage 在 2.5MB 到 10MB 之间（各浏览器不同），而且不提供搜索功能，不能建立自定义的索引</li></ul><p>所以，需要一种新的解决方案，这就是 IndexedDB 诞生的背景</p><br><p>MDN 官网对 IndexedDB 的解释</p><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））</p><p>该 API 使用索引实现对数据的高性能搜索</p><p>虽然 Web Storage 在存储较少量的数据很有用，但对于存储更大量的结构化数据来说力不从心</p><p>而 IndexedDB 提供了这种场景的解决方案</p></blockquote><ul><li>IndexedDB 就是浏览器提供的本地数据库，可以被网页脚本创建和操作</li><li>IndexedDB 允许储存大量数据，提供查找接口，还能建立索引 <ul><li>这些都是 LocalStorage 所不具备的</li></ul></li><li>IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库</li></ul><h4 id="_1-常见的客户端存储方式对比" tabindex="-1"><a class="header-anchor" href="#_1-常见的客户端存储方式对比" aria-hidden="true">#</a> 1）常见的客户端存储方式对比</h4><table><thead><tr><th>客户端存储方式</th><th>存储大小</th><th>失效时间</th></tr></thead><tbody><tr><td>会话期 Cookie</td><td>4kb</td><td>浏览器关闭自动清除</td></tr><tr><td>持久性 Cookie</td><td>4kb</td><td>设置过期时间，到期后清除</td></tr><tr><td>sessionStorage</td><td>2.5~10MB</td><td>浏览器关闭后清除</td></tr><tr><td>localStorage</td><td>2.5~10MB</td><td>永久保存（除非手动清除）</td></tr><tr><td>IndexedDB</td><td>&gt;250MB</td><td>手动更新或删除</td></tr><tr><td>WebSQL</td><td>已废弃</td><td>已废弃</td></tr></tbody></table><h4 id="_2-indexeddb-的特点" tabindex="-1"><a class="header-anchor" href="#_2-indexeddb-的特点" aria-hidden="true">#</a> 2）IndexedDB 的特点</h4><h5 id="a-键值对储存" tabindex="-1"><a class="header-anchor" href="#a-键值对储存" aria-hidden="true">#</a> a）键值对储存</h5><ul><li>IndexedDB 内部采用对象仓库（object store）存放数据</li><li>所有类型的数据都可以直接存入，包括 JavaScript 对象</li><li>对象仓库中，数据以“键值对”的形式保存</li><li>每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误</li></ul><h5 id="b-异步" tabindex="-1"><a class="header-anchor" href="#b-异步" aria-hidden="true">#</a> b）异步</h5><ul><li>IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作 <ul><li>这与 LocalStorage 形成对比，后者的操作是同步的</li></ul></li><li>异步设计是为了防止大量数据的读写，拖慢网页的表现</li></ul><h5 id="c-支持事务" tabindex="-1"><a class="header-anchor" href="#c-支持事务" aria-hidden="true">#</a> c）支持事务</h5><ul><li>IndexedDB 支持事务（transaction）</li><li>即：在一系列操作步骤中，只要有一步失败，整个事务就取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况</li><li>这和 MySQL 等数据库的事务类似</li></ul><h5 id="d-同源限制" tabindex="-1"><a class="header-anchor" href="#d-同源限制" aria-hidden="true">#</a> d）同源限制</h5><ul><li>IndexedDB 受到同源限制，每一个数据库对应创建它的域名</li><li>网页只能访问自身域名下的数据库，而不能访问跨域的数据库</li></ul><h5 id="e-储存空间大" tabindex="-1"><a class="header-anchor" href="#e-储存空间大" aria-hidden="true">#</a> e）储存空间大</h5><ul><li>这是 IndexedDB 最显著的特点之一</li><li>IndexedDB 的储存空间比 LocalStorage 大得多</li><li>一般来说不少于 250MB，甚至没有上限</li></ul><h5 id="f-支持二进制储存" tabindex="-1"><a class="header-anchor" href="#f-支持二进制储存" aria-hidden="true">#</a> f）支持二进制储存</h5><ul><li>IndexedDB 不仅可以储存字符串</li><li>还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</li></ul><h4 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景" aria-hidden="true">#</a> 3）应用场景</h4><ul><li>主要使用在于客户端需要存储大量的数据的场景下 <ul><li>数据可视化等界面，大量数据，每次请求会消耗很大性能</li><li>即时聊天工具，大量消息需要存在本地</li><li>其它存储方式容量不满足时，不得已使用 IndexedDB</li></ul></li></ul><h3 id="_2-indexeddb-重要概念" tabindex="-1"><a class="header-anchor" href="#_2-indexeddb-重要概念" aria-hidden="true">#</a> 2.IndexedDB 重要概念</h3><ul><li>IndexedDB 是一个比较复杂的 API，把不同的实体抽象成一个个对象接口</li></ul><table><thead><tr><th>实体</th><th>对象接口</th></tr></thead><tbody><tr><td>数据库</td><td>IDBDatabase 对象</td></tr><tr><td>对象仓库</td><td>IDBObjectStore 对象</td></tr><tr><td>索引</td><td>IDBIndex 对象</td></tr><tr><td>事务</td><td>IDBTransaction 对象</td></tr><tr><td>操作请求</td><td>IDBRequest 对象</td></tr><tr><td>指针</td><td>IDBCursor 对象</td></tr><tr><td>主键集合</td><td>IDBKeyRange 对象</td></tr></tbody></table><h4 id="_1-数据库" tabindex="-1"><a class="header-anchor" href="#_1-数据库" aria-hidden="true">#</a> 1）数据库</h4><ul><li>数据库是一系列相关数据的容器</li><li>每个域名（严格的说，是协议 + 域名 + 端口）都可以新建任意多个数据库</li><li>IndexedDB 数据库有版本的概念，同一个时刻，只能有一个版本的数据库存在</li><li>如果要修改数据库结构（新增或删除表、索引或者主键），只能通过升级数据库版本完成</li></ul><h4 id="_2-对象仓库" tabindex="-1"><a class="header-anchor" href="#_2-对象仓库" aria-hidden="true">#</a> 2）对象仓库</h4><ul><li>每个数据库包含若干个对象仓库（object store）</li><li>类似于关系型数据库的表格</li></ul><h4 id="_3-数据记录" tabindex="-1"><a class="header-anchor" href="#_3-数据记录" aria-hidden="true">#</a> 3）数据记录</h4><ul><li>对象仓库保存的是数据记录</li><li>每条记录类似于关系型数据库的行，但是只有 <mark>主键和数据体</mark> 两部分</li><li>主键用来建立默认的索引，必须是不同的，否则会报错</li><li>主键可以是数据记录里面的一个属性，也可以指定为一个递增的整数编号</li><li>数据体可以是任意数据类型，不限于对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-索引" tabindex="-1"><a class="header-anchor" href="#_4-索引" aria-hidden="true">#</a> 4）索引</h4><ul><li>为了加速数据的检索，可以在对象仓库里面，为不同的属性建立索引</li><li>在关系型数据库当中有索引的概念 <ul><li>可以给对应的表字段添加索引，以便加快查找速率</li></ul></li><li>在 IndexedDB 中同样有索引 <ul><li>可以在创建 store 的时候同时创建索引</li><li>在后续对 store 进行查询的时候，即可通过索引来筛选</li><li>给某个字段添加索引后，后续插入数据时索引字段便不能为空</li></ul></li></ul><h4 id="_5-事务" tabindex="-1"><a class="header-anchor" href="#_5-事务" aria-hidden="true">#</a> 5）事务</h4><ul><li>数据记录的读写和删改，都要通过事务完成</li><li>事务对象提供 error、abort 和 complete 三个事件，用来监听操作结果</li></ul><h4 id="_6-指针-游标" tabindex="-1"><a class="header-anchor" href="#_6-指针-游标" aria-hidden="true">#</a> 6）指针（游标）</h4><ul><li>游标是 IndexedDB 数据库的新概念，可以想象为一个指针</li><li>如：要查询满足某一条件的所有数据时，就需要用到游标 <ul><li>让游标一行一行的往下走，游标走到的地方便会返回这一行数据</li><li>此时便可对此行数据进行判断，是否满足条件</li></ul></li></ul><h3 id="_3-操作-indexeddb-数据库" tabindex="-1"><a class="header-anchor" href="#_3-操作-indexeddb-数据库" aria-hidden="true">#</a> 3.操作 IndexedDB 数据库</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>IndexedDB 所有针对仓库的操作都是基于事务的</p></div><h4 id="_1-创建以及连接数据库" tabindex="-1"><a class="header-anchor" href="#_1-创建以及连接数据库" aria-hidden="true">#</a> 1）创建以及连接数据库</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// db.js</span>
<span class="token doc-comment comment">/**
 * 打开数据库
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">dbName</span> 数据库的名字
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">version</span> 数据库的版本
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> 该函数会返回一个数据库实例
 */</span>
<span class="token keyword">function</span> <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token parameter">dbName<span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> db<span class="token punctuation">;</span> <span class="token comment">// 存储创建的数据库</span>
    <span class="token comment">// 打开数据库，若没有则会创建</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>dbName<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库打开成功回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment">// 存储数据库对象</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库打开成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库打开失败的回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库打开报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库有更新时候的回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 数据库创建或升级的时候会触发</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onupgradeneeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment">// 存储数据库对象</span>
      <span class="token keyword">var</span> objectStore<span class="token punctuation">;</span>
      <span class="token comment">// 创建存储库</span>
      objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 这是主键</span>
        <span class="token literal-property property">autoIncrement</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 实现自增</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建索引，在后面查询数据的时候可以根据索引查</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuAge&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuAge&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>indexedDB.open 方法返回一个对象</li><li>在这个对象上面分别监听了成功、错误以及更新这三个事件</li><li>onupgradeneeded 更新事件会在数据库发生更新时触发 <ul><li>即：添加或删除表，以及数据库版本号更新的时候</li><li>因为一开始创建数据库时，版本是从无到有，所以也会触发这个事件</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- index.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+on+`" alt=""></p><h4 id="_2-关闭数据库" tabindex="-1"><a class="header-anchor" href="#_2-关闭数据库" aria-hidden="true">#</a> 2）关闭数据库</h4><ul><li>使用完数据库后，建议关闭数据库，以节约资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 关闭数据库
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 */</span>
<span class="token keyword">function</span> <span class="token function">closeDB</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库已关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除数据库" tabindex="-1"><a class="header-anchor" href="#_3-删除数据库" aria-hidden="true">#</a> 3）删除数据库</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 删除数据库
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">dbName</span> 数据库名称
 */</span>
<span class="token keyword">function</span> <span class="token function">deleteDBAll</span><span class="token punctuation">(</span><span class="token parameter">dbName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> deleteRequest <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">deleteDatabase</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-插入数据" tabindex="-1"><a class="header-anchor" href="#_4-插入数据" aria-hidden="true">#</a> 4.插入数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 新增数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">data</span> 数据
 */</span>
<span class="token keyword">function</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> request <span class="token operator">=</span> db
    <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 事务对象 指定表格名称和操作模式（&quot;只读&quot;或&quot;读写&quot;）</span>
    <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span> <span class="token comment">// 仓库对象</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据写入失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>需要通过事务来进行操作，利用 IndexedDB 提供的 add 方法</li><li>将插入数据的操作封装成一个函数，接收三个参数 <ul><li>db：在创建或连接数据库时，返回的 db 实例 <ul><li>需要保存下来</li></ul></li><li>storeName：仓库名称（或者表名） <ul><li>在创建或连接数据库时就已经创建好了仓库</li></ul></li><li>data：需要插入的数据，通常是一个对象 <ul><li>必须包含声明的索引键值对</li></ul></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;雅静&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢希之&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+cn+`" alt=""></p><h3 id="_5-读取数据" tabindex="-1"><a class="header-anchor" href="#_5-读取数据" aria-hidden="true">#</a> 5.读取数据</h3><ul><li>根据需求的不同有不同的读取方式</li></ul><h4 id="_1-通过主键读取数据" tabindex="-1"><a class="header-anchor" href="#_1-通过主键读取数据" aria-hidden="true">#</a> 1）通过主键读取数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过主键读取数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">key</span> 主键值
 */</span>
<span class="token keyword">function</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事务</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仓库对象</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过主键获取数据</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;事务失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;主键查询结果: &quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;雅静&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢希之&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stuInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {stuId: 2, stuName: &#39;雅静&#39;, stuAge: 20}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过主键读取所有数据" tabindex="-1"><a class="header-anchor" href="#_2-通过主键读取所有数据" aria-hidden="true">#</a> 2）通过主键读取所有数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过主键读取数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">key</span> 主键值
 */</span>
<span class="token keyword">function</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过主键获取数据</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;雅静&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢希之&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stuInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会查询到该表的所有数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-通过主键和指针读取数据" tabindex="-1"><a class="header-anchor" href="#_3-通过主键和指针读取数据" aria-hidden="true">#</a> 3）通过主键和指针读取数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过游标读取数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 */</span>
<span class="token keyword">function</span> <span class="token function">cursorGetData</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> store <span class="token operator">=</span> db
      <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>storeName<span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 事务</span>
      <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仓库对象</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针对象</span>
    <span class="token comment">// 游标开启成功，逐行读数据</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 必须要检查</span>
        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历了存储对象中的所有内容</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过仓库对象的 openCursor 方法开启了一个指针 <ul><li>这个指针会指向数据表的第一条数据</li><li>之后指针逐项进行偏移从而遍历整个数据表</li></ul></li><li>每次偏移拿到数据后，push 到 list 数组里面</li><li>如果某一次没有拿到数据，说明已经读取完了所有的数据，就返回 list 数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;雅静&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢希之&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">cursorGetData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stuInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>精准查询只能通过主键来进行查询</p></div><h4 id="_4-通过索引读取满足条件的数据" tabindex="-1"><a class="header-anchor" href="#_4-通过索引读取满足条件的数据" aria-hidden="true">#</a> 4）通过索引读取满足条件的数据</h4><ul><li>当不知道某一条数据的主键时，可以通过索引来查询数据</li><li>只能查找到第一条符合条件的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过索引读取数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexName</span> 索引名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexValue</span> 索引值
 */</span>
<span class="token keyword">function</span> <span class="token function">getDataByIndex</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> indexName<span class="token punctuation">,</span> indexValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> store <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>storeName<span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;事务失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> result <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;牛牛&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">getDataByIndex</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuAge&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stuInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {stuId: 3, stuName: &#39;谢希之&#39;, stuAge: 4}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-通过索引和指针读取所有满足条件的数据" tabindex="-1"><a class="header-anchor" href="#_5-通过索引和指针读取所有满足条件的数据" aria-hidden="true">#</a> 5）通过索引和指针读取所有满足条件的数据</h4><ul><li>查询出索引中满足某些条件的所有数据，可以将索引和游标结合起来</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过索引和游标查询记录
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexName</span> 索引名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexValue</span> 索引值
 */</span>
<span class="token keyword">function</span> <span class="token function">cursorGetDataByIndex</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> indexName<span class="token punctuation">,</span> indexValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> store <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>storeName<span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仓库对象</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> store
      <span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span> <span class="token comment">// 索引对象</span>
      <span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span>IDBKeyRange<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>indexValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针对象</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 必须要检查</span>
        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历了存储对象中的所有内容</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>IDBKeyRange 对象代表数据仓库（object store）里面的一组主键 <ul><li>根据这组主键，可以获取数据仓库或索引里面的一组记录</li></ul></li><li>可以只包含一个值，也可以指定上限和下限</li><li>有四个静态方法，用来指定主键的范围</li></ul><table><thead><tr><th>静态方法</th><th>指定范围</th></tr></thead><tbody><tr><td>IDBKeyRange.lowerBound()</td><td>指定下限</td></tr><tr><td>IDBKeyRange.upperBound()</td><td>指定上限</td></tr><tr><td>IDBKeyRange.bound()</td><td>同时指定上下限</td></tr><tr><td>IDBKeyRange.only()</td><td>指定只包含一个值</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// All keys ≤ x</span>
<span class="token keyword">var</span> r1 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">upperBound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys &lt; x</span>
<span class="token keyword">var</span> r2 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">upperBound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys ≥ y</span>
<span class="token keyword">var</span> r3 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">lowerBound</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys &gt; y</span>
<span class="token keyword">var</span> r4 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">lowerBound</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys ≥ x &amp;&amp; ≤ y</span>
<span class="token keyword">var</span> r5 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys &gt; x &amp;&amp;&lt; y</span>
<span class="token keyword">var</span> r6 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys &gt; x &amp;&amp; ≤ y</span>
<span class="token keyword">var</span> r7 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// All keys ≥ x &amp;&amp;&lt; y</span>
<span class="token keyword">var</span> r8 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">bound</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The key = z</span>
<span class="token keyword">var</span> r9 <span class="token operator">=</span> IDBKeyRange<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>索引和游标结合查询，可以查询出索引值满足传入函数值的所有数据对象</li><li>而不是只查询出一条数据或者所有数据</li></ul><h4 id="_5-通过索引和指针分页读取满足条件的数据" tabindex="-1"><a class="header-anchor" href="#_5-通过索引和指针分页读取满足条件的数据" aria-hidden="true">#</a> 5）通过索引和指针分页读取满足条件的数据</h4><ul><li>IndexedDB 分页查询不像 MySQL 分页查询那么简单</li><li>没有提供现成的 API，如：limit 等 <ul><li>需要自己实现分页</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过索引和游标分页查询记录
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexName</span> 索引名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexValue</span> 索引值
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">page</span> 页码
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">pageSize</span> 查询条数
 */</span>
<span class="token keyword">function</span> <span class="token function">cursorGetDataByIndexAndPage</span><span class="token punctuation">(</span>
  <span class="token parameter">db<span class="token punctuation">,</span>
  storeName<span class="token punctuation">,</span>
  indexName<span class="token punctuation">,</span>
  indexValue<span class="token punctuation">,</span>
  page<span class="token punctuation">,</span>
  pageSize</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 计数器</span>
    <span class="token keyword">var</span> advanced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是否跳过多少条查询</span>
    <span class="token keyword">var</span> store <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>storeName<span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仓库对象</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> store
      <span class="token comment">// .index(indexName) // 索引对象</span>
      <span class="token comment">// .openCursor(IDBKeyRange.only(indexValue)); // 按照指定值分页查询（配合索引）</span>
      <span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针对象</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> advanced<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        advanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        cursor<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跳过多少条</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 必须要检查</span>
        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历了存储对象中的所有内容</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>advance 函数可以让游标跳过多少条开始查询</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;王武&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">32</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;刘德华&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">34</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;张学友&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;郭富城&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;黎明&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;邓超&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;刘翔&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;洋洋&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;林佳音&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;袁进&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">34</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;老闫&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">36</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;沈爷&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">34</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">cursorGetDataByIndexAndPage</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stuInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {stuId: 3, stuName: &#39;谢希之&#39;, stuAge: 4}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了实现分页效果，添加了一些数据，然后查询第 3 页的内容</p></blockquote><p><img src="`+ln+`" alt=""></p><h3 id="_6-更新数据" tabindex="-1"><a class="header-anchor" href="#_6-更新数据" aria-hidden="true">#</a> 6.更新数据</h3><ul><li>直接使用 put 方法</li><li>如果数据库中没有该条数据，则会默认增加该条数据，否则更新</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 更新数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">data</span> 数据
 */</span>
<span class="token keyword">function</span> <span class="token function">updateDB</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> db
      <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 事务对象</span>
      <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span> <span class="token comment">// 仓库对象</span>
      <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;更新数据成功&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;更新数据失败&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用仓库对象的 put 方法来修改数据</li><li>在调用该方法时，需要传入 <mark>整条数据对象</mark> ，特别是主键 <ul><li>因为需要通过主键来查询到要修改的数据</li></ul></li><li>如果传入的数据没有主键，则新增数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">updateDB</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stuId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">stuName</span><span class="token operator">:</span> <span class="token string">&quot;谢杰2&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">stuAge</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-删除数据" tabindex="-1"><a class="header-anchor" href="#_7-删除数据" aria-hidden="true">#</a> 7.删除数据</h3><h4 id="_1-通过主键删除" tabindex="-1"><a class="header-anchor" href="#_1-通过主键删除" aria-hidden="true">#</a> 1）通过主键删除</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过主键删除数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">id</span> 主键值
 */</span>
<span class="token keyword">function</span> <span class="token function">deleteDB</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> db
      <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;删除数据成功&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;删除数据失败&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">deleteDB</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过索引删除" tabindex="-1"><a class="header-anchor" href="#_2-通过索引删除" aria-hidden="true">#</a> 2）通过索引删除</h4><ul><li>拿不到主键值时，只能通过索引值来删除</li><li>可以删除一条数据（索引值唯一）或者所有满足条件的数据（索引值不唯一）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 通过索引和游标删除指定的数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">indexName</span> 索引名
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">indexValue</span> 索引值
 */</span>
<span class="token keyword">function</span> <span class="token function">cursorDelete</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> indexName<span class="token punctuation">,</span> indexValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> store <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>storeName<span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> store
      <span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexName<span class="token punctuation">)</span> <span class="token comment">// 索引对象</span>
      <span class="token punctuation">.</span><span class="token function">openCursor</span><span class="token punctuation">(</span>IDBKeyRange<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>indexValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指针对象</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> cursor <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
      <span class="token keyword">var</span> deleteRequest<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        deleteRequest <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请求删除当前项</span>
        deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;游标删除该记录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;游标删除该记录成功&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        deleteRequest<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;游标删除该记录失败&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        cursor<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">cursorDelete</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;雅静&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> message <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-第三方库" tabindex="-1"><a class="header-anchor" href="#_8-第三方库" aria-hidden="true">#</a> 8.第三方库</h3>`,99),jn=n("li",null,"出现了基于 IndexedDB 封装的库",-1),Dn={href:"https://dexie.org/",target:"_blank",rel:"noopener noreferrer"},In=n("li",null,"该库和 IndexedDB 之间的关系，就类似于 jQuery 和 JavaScript 之间的关系",-1),Mn={href:"https://www.wangdoc.com/javascript/bom/indexeddb.html",target:"_blank",rel:"noopener noreferrer"},Tn=p(`<h2 id="七-file-api" tabindex="-1"><a class="header-anchor" href="#七-file-api" aria-hidden="true">#</a> （七）File API</h2><h3 id="_1-file-api-介绍" tabindex="-1"><a class="header-anchor" href="#_1-file-api-介绍" aria-hidden="true">#</a> 1.File API 介绍</h3><ul><li>HTML 的 input 表单控件的 type 属性可以设置为 file，表示这是一个上传控件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>这种做法用户体验非常的差 <ul><li>无法 <mark>在客户端</mark> 对用户选取的文件进行 validate</li><li>无法读取文件大小</li><li>无法判断文件类型</li><li>无法预览</li></ul></li><li>多文件上传体验更差 <ul><li>只能显示文件数量</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>File API 允许 JavaScript 读取本地文件</li><li>但并不能直接访问本地文件，而是要依赖于用户行为</li><li>如：用户在 <code>type=&#39;file&#39;</code> 控件上选择了某个文件或者用户将文件拖拽到浏览器上</li><li>File API 提供了以下几个接口来访问本地文件系统</li></ul><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>File</td><td>单个文件，提供了诸如 name、file size、mimetype 等只读文件属性</td></tr><tr><td>FileList</td><td>一个类数组 File 对象集合</td></tr><tr><td>FileReader</td><td>异步读取文件的接口</td></tr><tr><td>Blob</td><td>文件对象的二进制原始数据</td></tr></tbody></table><h3 id="_2-file-对象" tabindex="-1"><a class="header-anchor" href="#_2-file-对象" aria-hidden="true">#</a> 2.File 对象</h3><ul><li>File 对象代表一个文件，用来读写文件信息 <ul><li>继承了 Blob 对象，或者说是一种特殊的 Blob 对象</li></ul></li><li>所有可以使用 Blob 对象的场合都可以使用</li><li>最常见的使用场合是表单的文件上传控件 <ul><li>用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，都是 File 实例对象</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 DOM 元素</span>
<span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> files <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>files[0]</code> 是用户选中的第一个文件，是 File 的实例</p></blockquote><p><img src="`+un+`" alt=""></p><h4 id="_1-构造函数" tabindex="-1"><a class="header-anchor" href="#_1-构造函数" aria-hidden="true">#</a> 1）构造函数</h4><ul><li>浏览器原生提供一个 File() 构造函数</li><li>用来生成 File 实例对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> name <span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>array</td><td>一个数组，成员可以是二进制对象或字符串，表示文件的内容</td></tr><tr><td>name</td><td>字符串，表示文件名或文件路径</td></tr><tr><td>options</td><td>配置对象，设置实例的属性</td></tr></tbody></table><ul><li>options 参数可选，可以设置两个属性</li><li>type：字符串，表示实例对象的 MIME 类型 <ul><li>默认值为空字符串</li></ul></li><li>lastModified：时间戳，表示上次修改的时间 <ul><li>默认为 <code>Date.now()</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-实例属性和实例方法" tabindex="-1"><a class="header-anchor" href="#_2-实例属性和实例方法" aria-hidden="true">#</a> 2）实例属性和实例方法</h4><table><thead><tr><th>实例属性</th><th>说明</th></tr></thead><tbody><tr><td>File.lastModified</td><td>最后修改时间</td></tr><tr><td>File.name</td><td>文件名或文件路径</td></tr><tr><td>File.size</td><td>文件大小（单位字节）</td></tr><tr><td>File.type</td><td>文件的 MIME 类型</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1638340865992</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo.txt</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// text/plain</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>File 对象没有自己的实例方法</li><li>由于继承了 Blob 对象，因此可以使用 Blob 的实例方法 slice()</li></ul><h3 id="_3-filelist-对象" tabindex="-1"><a class="header-anchor" href="#_3-filelist-对象" aria-hidden="true">#</a> 3.FileList 对象</h3><ul><li>是一个类似数组的对象，代表一组选中的文件</li><li>每个成员都是一个 File 实例</li><li>触发 change 事件后，event.target.files 拿到的就是一个 FileList 实例对象</li><li>主要出现在两个场合 <ul><li><mark>文件表单控件节点的 files 属性</mark>，返回一个 FileList 实例</li><li><mark>拖拉一组文件时，目标区的 DataTransfer.files 属性</mark>，返回一个 FileList 实例</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 获取 DOM 元素</span>
  <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  file<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> files <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files <span class="token keyword">instanceof</span> <span class="token class-name">FileList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-实例属性" tabindex="-1"><a class="header-anchor" href="#_1-实例属性" aria-hidden="true">#</a> 1）实例属性</h4><ul><li>主要是 length</li><li>表示包含多少个文件</li></ul><h4 id="_2-实例方法" tabindex="-1"><a class="header-anchor" href="#_2-实例方法" aria-hidden="true">#</a> 2）实例方法</h4><ul><li>主要是 item() <ul><li>用来返回指定位置的实例</li><li>接受一个整数作为参数，表示位置的序号（从 0 开始）</li></ul></li><li>由于 FileList 的实例是一个类似数组的对象 <ul><li>可以直接用方括号运算符</li><li>即：<code>myFileList[0] = myFileList.item(0)</code></li><li>所以一般用不到 item() 方法</li></ul></li></ul><h3 id="_4-filereader-对象" tabindex="-1"><a class="header-anchor" href="#_4-filereader-对象" aria-hidden="true">#</a> 4.FileReader 对象</h3><ul><li>用于读取 File 对象或 Blob 对象所包含的文件内容</li></ul><h4 id="_1-构造函数-1" tabindex="-1"><a class="header-anchor" href="#_1-构造函数-1" aria-hidden="true">#</a> 1）构造函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-实例属性" tabindex="-1"><a class="header-anchor" href="#_2-实例属性" aria-hidden="true">#</a> 2）实例属性</h4><table><thead><tr><th>实例属性</th><th>说明</th></tr></thead><tbody><tr><td>FileReader.error</td><td>读取文件时产生的错误对象</td></tr><tr><td>FileReader.readyState</td><td>整数，表示读取文件时的当前状态<br>一共有三种可能的状态，0 表示尚未加载任何数据，1 表示数据正在加载，2 表示加载完成</td></tr><tr><td>FileReader.result</td><td>读取完成后的文件内容<br>有可能是字符串，也可能是一个 ArrayBuffer 实例</td></tr><tr><td>FileReader.onabort</td><td>abort 事件（用户终止读取操作）的监听函数</td></tr><tr><td>FileReader.onerror</td><td>error 事件（读取错误）的监听函数</td></tr><tr><td>FileReader.onload</td><td>load 事件（读取操作完成）的监听函数<br>通常在这个函数里面使用 result 属性，拿到文件内容</td></tr><tr><td>FileReader.onloadstart</td><td>loadstart 事件（读取操作开始）的监听函数</td></tr><tr><td>FileReader.onloadend</td><td>loadend 事件（读取操作结束）的监听函数</td></tr><tr><td>FileReader.onprogress</td><td>progress 事件（读取操作进行中）的监听函数</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 获取 DOM 元素</span>
  <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  file<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> file <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 拿到第一个文件</span>
    <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个 FileReader 实例对象</span>
    <span class="token comment">// 读取文件成功后触发 load 事件</span>
    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取文件</span>
    reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-实例方法" tabindex="-1"><a class="header-anchor" href="#_3-实例方法" aria-hidden="true">#</a> 3）实例方法</h4><table><thead><tr><th>实例方法</th><th>说明</th></tr></thead><tbody><tr><td>FileReader.abort()</td><td>终止读取操作<br>readyState 属性将变成 2</td></tr><tr><td>FileReader.readAsArrayBuffer()</td><td>以 ArrayBuffer 的格式读取文件<br>读取完成后 result 属性将返回一个 ArrayBuffer 实例</td></tr><tr><td>FileReader.readAsBinaryString()</td><td>读取完成后，result 属性将返回原始的二进制字符串</td></tr><tr><td>FileReader.readAsDataURL()</td><td>读取完成后，result 属性将返回一个 Data URL 格式（ Base64 编码）的字符串，代表文件内容<br>对于图片文件，这个字符串可以用于 img 元素的 src 属性<br><mark>这个字符串不能直接进行 Base64 解码，必须把前缀 <code>data:/;base64,</code> 从字符串里删除以后再进行解码</mark></td></tr><tr><td>FileReader.readAsText()</td><td>读取完成后，result 属性将返回文件内容的文本字符串<br>该方法的第一个参数是代表文件的 Blob 实例<br>第二个参数是可选的，表示文本编码，默认为 UTF-8</td></tr></tbody></table><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 DOM 元素</span>
<span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> preview <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;input[type=file]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  reader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      preview<span class="token punctuation">.</span>src <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-综合实例" tabindex="-1"><a class="header-anchor" href="#_5-综合实例" aria-hidden="true">#</a> 5.综合实例</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploadImg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 制作中间的十字架 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cross<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.uploadImg</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed skyblue<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.cross</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 15px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 15px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.cross::before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.cross::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 15px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">input[type=&quot;file&quot;]</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.uploadImg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cross <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.cross&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
file<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建 FileReader 用来读取文件</span>
  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取到文件内容</span>
  <span class="token keyword">var</span> content <span class="token operator">=</span> file<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置 div 背景图像从而实现预览效果</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reader<span class="token punctuation">.</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) center/cover no-repeat</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    cross<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-file-system-access-api" tabindex="-1"><a class="header-anchor" href="#_6-file-system-access-api" aria-hidden="true">#</a> 6.File System Access API</h3>`,47),Bn={href:"https://w3c.github.io/FileAPI/",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://wicg.github.io/file-system-access/",target:"_blank",rel:"noopener noreferrer"},Nn=n("li",null,"提供了比较稳妥的本地文件交互模式",-1),Wn=n("li",null,"既保证了实用价值，又保障了用户的数据安全",-1),Ln=n("p",null,"这个 API 对前端来说意义不小",-1),An=n("p",null,"有了这个功能，Web 可以提供更完整的功能链路，从打开、到编辑、到保存，一套到底",-1),En=n("p",null,"不过遗憾的是目前只有 Chrome 支持",-1),Pn={href:"https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API",target:"_blank",rel:"noopener noreferrer"},On={href:"https://web.dev/file-system-access/",target:"_blank",rel:"noopener noreferrer"},Hn=p('<h2 id="八-浏览器缓存" tabindex="-1"><a class="header-anchor" href="#八-浏览器缓存" aria-hidden="true">#</a> （八）浏览器缓存</h2><h3 id="_1-浏览器缓存介绍" tabindex="-1"><a class="header-anchor" href="#_1-浏览器缓存介绍" aria-hidden="true">#</a> 1.浏览器缓存介绍</h3><h4 id="_1-web-应用的流程" tabindex="-1"><a class="header-anchor" href="#_1-web-应用的流程" aria-hidden="true">#</a> 1）Web 应用的流程</h4><p><img src="'+rn+'" alt=""></p><ul><li>这是一个 Web 应用最最简单的结构 <ul><li>客户端向服务器端发送 HTTP 请求</li><li>服务器端从数据库获取数据，然后进行计算处理，之后向客户端返回 HTTP 响应</li></ul></li><li>耗费时间的步骤 <ul><li>发送请求的时候 <ul><li>HTTP 请求</li><li>服务器向数据库发起查询数据的请求</li></ul></li><li>涉及到大量计算的时候 <ul><li>主要是在服务器端和数据库端</li><li>数据库要根据服务器发送过来的查询命令查询到对应的数据</li></ul></li></ul></li><li>因此，单论缓存的话，其实在很多地方都可以做缓存 <ul><li>数据库缓存</li><li>CDN 缓存</li><li>代理服务器缓存</li><li>浏览器缓存</li><li>应用层缓存</li></ul></li></ul><h4 id="_2-整个浏览器的缓存过程" tabindex="-1"><a class="header-anchor" href="#_2-整个浏览器的缓存过程" aria-hidden="true">#</a> 2）整个浏览器的缓存过程</h4><p><img src="'+kn+'" alt=""></p><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li></ul><h3 id="_2-按照缓存位置分类" tabindex="-1"><a class="header-anchor" href="#_2-按照缓存位置分类" aria-hidden="true">#</a> 2.按照缓存位置分类</h3><ul><li>从缓存位置上来说分为四种，并且各自有优先级</li><li>当依次查找缓存且都没有命中的时候，才会去请求网络 <ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul></li></ul><h4 id="_1-service-worker" tabindex="-1"><a class="header-anchor" href="#_1-service-worker" aria-hidden="true">#</a> 1）Service Worker</h4><ul><li>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能</li><li>使用 Service Worker 的 <mark>传输协议必须为 HTTPS</mark><ul><li>因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全</li></ul></li><li>Service Worker 的缓存与浏览器其他内建的缓存机制不同 <ul><li>可以自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</li></ul></li><li>Service Worker 实现缓存功能一般分为三个步骤 <ul><li>首先需要先注册 Service Worker</li><li>然后监听到 install 事件以后就可以缓存需要的文件</li><li>在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存 <ul><li>存在缓存的话就可以直接读取缓存文件</li><li>否则就去请求数据</li></ul></li></ul></li><li>当 Service Worker 没有命中缓存时，需要调用 fetch 函数获取数据，会根据缓存查找优先级去查找数据 <ul><li>不管是从 Memory Cache 中还是从网络请求中获取的数据</li><li>浏览器都会显示为是从 Service Worker 中获取的内容</li></ul></li></ul><p><img src="'+dn+'" alt=""></p><h4 id="_2-memory-cache" tabindex="-1"><a class="header-anchor" href="#_2-memory-cache" aria-hidden="true">#</a> 2）Memory Cache</h4><ul><li>Memory Cache 也就是 <mark>内存</mark> 中的缓存</li><li>主要包含的是当前中页面中已经抓取到的资源 <ul><li>如：页面上已经下载的样式、脚本、图片等</li></ul></li><li>读取内存中的数据肯定比磁盘快 <ul><li>内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放</li><li>一旦关闭 Tab 页面，内存中的缓存也就被释放了</li></ul></li><li>计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能使用的内存必然不多</li><li>当访问过页面以后再次刷新页面，可以发现很多数据都来自于内存缓存</li></ul><p><img src="'+vn+'" alt=""></p><ul><li>Memory Cache 机制保证了一个页面中如果有两个相同的请求，实际都只会被请求最多一次，避免浪费 <ul><li>如：两个 src 相同的 img，两个 href 相同的 link</li></ul></li></ul><h4 id="_3-disk-cache" tabindex="-1"><a class="header-anchor" href="#_3-disk-cache" aria-hidden="true">#</a> 3）Disk Cache</h4><ul><li>Disk Cache 也就是存储在 <mark>硬盘</mark> 中的缓存</li><li>读取速度慢点，但是什么都能存储到磁盘中 <ul><li>比之 Memory Cache 胜在容量和存储时效性上</li></ul></li><li>在所有浏览器缓存中，Disk Cache <mark>覆盖面基本是最大的</mark><ul><li>会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求</li><li>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据</li><li>绝大部分的缓存都来自 Disk Cache</li></ul></li><li>凡是持久性存储都会面临容量增长的问题，Disk Cache 也不例外 <ul><li>在浏览器自动清理时，会有特殊的算法去把“最老的”或者“最可能过时的”资源删除</li><li>因此是一个一个删除的</li></ul></li></ul><blockquote><p>不过每个浏览器识别“最老的”和“最可能过时的”资源的算法不尽相同，这也可以看作是各个浏览器差异性的体现</p></blockquote><h4 id="_4-push-cache" tabindex="-1"><a class="header-anchor" href="#_4-push-cache" aria-hidden="true">#</a> 4）Push Cache</h4><ul><li>Push Cache ，推送缓存，是属于 HTTP/2 中新增的内容</li><li>当以上三种缓存都没有命中时才会被使用 <ul><li>只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂</li><li>在 Chrome 浏览器中只有 5 分钟左右，同时也并非严格执行 HTTP/2 头中的缓存指令</li></ul></li></ul>',22),Rn=n("p",null,"Push Cache 在国内能够查到的资料很少，也是因为 HTTP2 在国内还不够普及",-1),Fn={href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"},Un=n("p",null,"文章中的几个结论",-1),Jn=n("ol",null,[n("li",null,"所有的资源都能被推送，并且能够被缓存，但是 Edge 和 Safari 浏览器支持相对比较差"),n("li",null,"可以推送 no-cache 和 no-store 的资源"),n("li",null,"一旦连接被关闭，Push Cache 就被释放"),n("li",null,"多个页面可以使用同一个 HTTP/2 的连接，也就可以使用同一个 Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的 tab 标签使用同一个 HTTP 连接"),n("li",null,"Push Cache 中的缓存只能被使用一次"),n("li",null,"浏览器可以拒绝接受已经存在的资源推送"),n("li",null,"可以给其他域名推送资源")],-1),Vn=p(`<h4 id="_5-缓存命中流程" tabindex="-1"><a class="header-anchor" href="#_5-缓存命中流程" aria-hidden="true">#</a> 5）缓存命中流程</h4><blockquote><p>如果一个请求在上述几个位置都没有找到缓存，那么浏览器会正式发送网络请求去获取内容</p><p>之后为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去</p></blockquote><ul><li>根据 Service Worker 中的 handler 决定是否存入 Cache Storage (额外的缓存位置)</li></ul><blockquote><p>Service Worker 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛</p></blockquote><ul><li>Memory Cache 保存一份资源的引用，以备下次使用</li></ul><blockquote><p>Memory Cache 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 HTTP 协议头的约束，算是一个黑盒</p></blockquote><ul><li>根据 HTTP 头部的相关字段（ Cache-control、Pragma 等 ）决定是否存入 Disk Cache</li></ul><blockquote><p>Disk Cache 也是平时最常用的一种缓存机制，也叫 HTTP Cache</p><p>因为不像 Memory Cache，它遵守 HTTP 协议头中的字段</p><p>强制缓存，协商缓存，以及 Cache-Control 等，也都归于此类</p></blockquote><h3 id="_3-按照缓存类型分类" tabindex="-1"><a class="header-anchor" href="#_3-按照缓存类型分类" aria-hidden="true">#</a> 3.按照缓存类型分类</h3><ul><li>可以分为强制缓存和协商缓存</li><li>都属于 Disk Cache / HTTP Cache 里面的一种</li></ul><h4 id="_1-强制缓存" tabindex="-1"><a class="header-anchor" href="#_1-强制缓存" aria-hidden="true">#</a> 1）强制缓存</h4><ul><li>当客户端请求后，会先访问缓存数据库看缓存是否存在 <ul><li>如果存在则直接返回</li><li>不存在则请求真的服务器，响应后再写入缓存数据库</li></ul></li><li><mark>强制缓存直接减少请求数，是提升最大的缓存策略</mark><ul><li>如果考虑使用缓存来优化网页性能的话，强制缓存应该是首先被考虑的</li></ul></li><li>可以造成强制缓存的字段是 Cache-control 和 Expires</li></ul><h5 id="a-expires" tabindex="-1"><a class="header-anchor" href="#a-expires" aria-hidden="true">#</a> a）Expires</h5><ul><li>这是 HTTP 1.0 的字段，表示缓存到期时间</li><li>是一个 <mark>绝对时间</mark> (当前时间 + 缓存时间)</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Expires</span><span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> 10 Nov 2017 08<span class="token punctuation">:</span>45<span class="token punctuation">:</span>11 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在响应消息头中设置这个字段后，就可以告诉浏览器在未过期之前不需要再次请求</li><li>设置时有两个缺点 <ul><li>由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源</li><li>即使不考虑自行修改的因素，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效</li><li>写法太复杂，表示时间的字符串多个空格，少个字母，都会导致变为非法属性从而设置失效</li></ul></li></ul><h5 id="b-cache-control" tabindex="-1"><a class="header-anchor" href="#b-cache-control" aria-hidden="true">#</a> b）Cache-control</h5><ul><li>在 HTTP/1.1 中增加了一个字段 Cache-control</li><li>该字段表示资源缓存的最大有效时间</li><li>在该时间内，客户端不需要向服务器发送请求</li><li>是一个 <mark>相对时间</mark></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Cache-control</span><span class="token punctuation">:</span> max<span class="token punctuation">-</span>age=2592000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),Kn={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"},Qn=p(`<table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>max-age</td><td>最大有效时间</td></tr><tr><td>must-revalidate</td><td>如果超过了 max-age 的时间，浏览器必须向服务器发送请求，验证资源是否还有效</td></tr><tr><td>no-cache</td><td>字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的<br>只是是否使用这个内容由后续的协商缓存来决定</td></tr><tr><td>no-store</td><td>真正意义上的“不要缓存”<br>所有内容都不走缓存，包括强制缓存和协商缓存</td></tr><tr><td>public</td><td>所有的内容都可以被缓存<br>包括客户端和代理服务器，如：CDN</td></tr><tr><td>private</td><td>所有的内容只有客户端才可以缓存<br>代理服务器不能缓存，默认值</td></tr></tbody></table><ul><li>可以混合使用</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>Cache<span class="token punctuation">-</span>control<span class="token punctuation">:</span>public<span class="token punctuation">,</span> max<span class="token punctuation">-</span>age=2592000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>混合使用时的优先级</li></ul><p><img src="`+mn+`" alt=""></p><div class="hint-container info"><p class="hint-container-title">max-age=0 和 no-cache 等价吗？</p><ul><li>从规范的字面意思来说，max-age 到期是 <mark>应该</mark> 重新验证，而 no-cache 是 <mark>必须</mark> 重新验证</li><li>但实际情况以浏览器实现为准，大部分情况是一致的</li><li>如果是 <code>max-age=0, must-revalidate</code> 就和 <code>no-cache</code> 等价了</li></ul></div><ul><li>在 HTTP/1.1 之前，如果想使用 no-cache，通常是使用 Pragma 字段</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Pragma</span><span class="token punctuation">:</span> no<span class="token punctuation">-</span>cache <span class="token comment"># 这也是 Pragma 字段唯一的取值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>但是这个字段只是浏览器约定俗成的实现，并没有确切规范，因此缺乏可靠性</li><li>应该只作为一个兼容字段出现，在当前的网络环境下其实用处已经很小</li></ul><div class="hint-container tip"><p class="hint-container-title">总结</p><ul><li>自从 HTTP/1.1 开始，Expires 逐渐被 Cache-control 取代</li><li>Cache-control 是一个相对时间，即使客户端时间发生改变，相对时间也不会随之改变，这样可以保持服务器和客户端的时间一致性</li><li>而且 Cache-control 的可配置性比较强大</li><li>Cache-control 的优先级高于 Expires</li><li>为了兼容 HTTP/1.0 和 HTTP/1.1，实际项目中两个字段都会设置</li></ul></div><h4 id="_2-协商缓存" tabindex="-1"><a class="header-anchor" href="#_2-协商缓存" aria-hidden="true">#</a> 2）协商缓存</h4><ul><li>当强制缓存失效（超过规定时间）时，就需要使用协商缓存，由服务器决定缓存内容是否失效</li><li>浏览器先请求缓存数据库，返回一个缓存标识，之后浏览器拿这个标识和服务器通讯</li><li>如果缓存未失效，则返回 HTTP 状态码 304 表示继续使用，于是客户端继续使用缓存</li></ul><p><img src="`+bn+'" alt=""></p><ul><li>如果失效，则返回新的数据和缓存规则，浏览器响应数据后，再把规则写入到缓存数据库</li></ul><p><img src="'+gn+`" alt=""></p><ul><li>协商缓存在请求数上和没有缓存是一致的</li><li>如果是 304 ，返回的仅仅是一个状态码而已，并没有实际的文件内容 <ul><li>因此 在响应体体积上的节省是它的优化点</li></ul></li><li>优化主要体现在“响应”上面通过 <mark>减少响应体体积，来缩短网络传输时间</mark><ul><li>和强制缓存相比提升幅度较小，但总比没有缓存好</li></ul></li><li>协商缓存可以和强制缓存一起使用，作为在强制缓存失效后的一种后备方案</li><li>对比缓存有 2 组字段 <ul><li>Last-Modified &amp; If-Modified-Since</li><li>Etag &amp; If-None-Match</li></ul></li></ul><h5 id="a-last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#a-last-modified-if-modified-since" aria-hidden="true">#</a> a）Last-Modified &amp; If-Modified-Since</h5><ul><li>服务器通过 Last-Modified 字段告知客户端，资源最后一次被修改的时间</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Last-Modified</span><span class="token punctuation">:</span> Mon<span class="token punctuation">,</span> 10 Nov 2018 09<span class="token punctuation">:</span>10<span class="token punctuation">:</span>11 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>浏览器将这个值和内容一起记录在缓存数据库中</li><li>下一次请求相同资源时，浏览器从自己的缓存中找出“不确定是否过期的”缓存 <ul><li>因此在请求头中将上次的 Last-Modified 的值写入到请求头的 If-Modified-Since 字段</li></ul></li><li>服务器会将 If-Modified-Since 的值与 Last-Modified 字段进行对比 <ul><li>如果相等，则表示未修改，响应 304 状态码</li><li>反之，则表示修改了，响应 200 状态码，并返回数据</li></ul></li></ul><blockquote><p>但是还是有一定的缺陷</p><ul><li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的 <mark>时间单位最低是秒</mark></li><li>如果文件是 <mark>通过服务器动态生成</mark> 的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用</li></ul><p>因此在 HTTP/1.1 出现了 ETag 和 If-None-Match</p></blockquote><h5 id="b-etag-if-none-match" tabindex="-1"><a class="header-anchor" href="#b-etag-if-none-match" aria-hidden="true">#</a> b）Etag &amp; If-None-Match</h5><ul><li>Etag 存储的是文件的特殊标识 <ul><li>一般都是一个 Hash 值</li><li>服务器存储着文件的 Etag 字段</li></ul></li><li>之后的流程和 Last-Modified 一致 <ul><li>只是 Last-Modified 字段和它所表示的更新时间改为 Etag 字段和它所表示的文件 hash</li><li>把 If-Modified-Since 变成了 If-None-Match</li></ul></li><li>浏览器在下一次加载资源向服务器发送请求时 <ul><li>会将上一次返回的 Etag 值放到请求头里的 If-None-Match 里</li><li>服务器只需要比较客户端传来的 If-None-Match 和服务器上该资源的 ETag 是否一致</li><li>就能判断资源相对客户端而言是否被修改过了</li></ul></li><li>如果服务器发现 ETag 匹配不上 <ul><li>直接以常规 GET 200 回包形式将新的资源（也包括新的 ETag）发给客户端</li></ul></li><li>如果 ETag 是一致的 <ul><li>则直接返回 304 告诉客户端直接使用本地缓存即可</li></ul></li></ul><p><img src="`+hn+'" alt=""></p><h5 id="c-last-modified-和-etag-的简单对比" tabindex="-1"><a class="header-anchor" href="#c-last-modified-和-etag-的简单对比" aria-hidden="true">#</a> c）Last-Modified 和 Etag 的简单对比</h5><ul><li>在精确度上，Etag 要优于 Last-Modified <ul><li>Last-Modified 的时间单位是秒，如果某个文件在 1 秒内改变了多次，Last-Modified 并不会体现修改</li><li>Etag 是一个 Hash 值，每次都会改变从而确保了精度</li></ul></li><li>在性能上，Etag 要逊于 Last-Modified <ul><li>Last-Modified 只需要记录时间</li><li>Etag 需要服务器通过算法来计算出一个 Hash 值</li></ul></li><li>在优先级上，Etag 要高于 Last-Modified <ul><li>服务器校验优先考虑 Etag</li></ul></li></ul><h3 id="_4-缓存读取规则" tabindex="-1"><a class="header-anchor" href="#_4-缓存读取规则" aria-hidden="true">#</a> 4.缓存读取规则</h3><blockquote><p>当浏览器要请求资源时</p><ol><li>从 Service Worker 中获取内容（如果设置了 Service Worker）</li><li>查看 Memory Cache</li><li>查看 Disk Cache，这里又细分：</li></ol><ul><li>如果有强制缓存且未失效，则使用强制缓存，不请求服务器，这时的状态码全部是 200</li><li>如果有强制缓存但已失效，使用协商缓存，比较后确定 304 还是 200</li></ul><ol start="4"><li>发送网络请求，等待网络响应</li><li>把响应内容存入 Disk Cache (如果 HTTP 响应头信息有相应的配置)</li><li>把响应内容的引用存入 Memory Cache (无视 HTTP 头信息的配置)</li><li>把响应内容存入 Service Worker 的 Cache Storage（如果设置了 Service Worker）</li></ol></blockquote><ul><li>其中第 3 步具体的流程图</li></ul><p><img src="'+fn+`" alt=""></p><h3 id="_5-浏览器行为" tabindex="-1"><a class="header-anchor" href="#_5-浏览器行为" aria-hidden="true">#</a> 5.浏览器行为</h3><ul><li>用户对浏览器的不同操作，会触发不同的缓存读取策略</li><li>对应主要有 3 种不同的浏览器行为</li></ul><table><thead><tr><th>用户操作</th><th>浏览器行为</th></tr></thead><tbody><tr><td>打开网页，地址栏输入地址</td><td>查找 Disk Cache 中是否有匹配<br>如有则使用，如没有则发送网络请求</td></tr><tr><td>普通刷新 (F5)</td><td>因为 TAB 并没有关闭，因此 Memory Cache 是可用的<br>会被优先使用（如果匹配），其次才是 Disk Cache</td></tr><tr><td>强制刷新 (Ctrl + F5)</td><td>浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code>（为了兼容，还带了 <code>Pragma: no-cache</code>）<br>服务器直接返回 200 和最新内容</td></tr></tbody></table><h3 id="_6-实操案例" tabindex="-1"><a class="header-anchor" href="#_6-实操案例" aria-hidden="true">#</a> 6.实操案例</h3><ul><li>使用 Node.js 搭建服务器（部分）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> hashStr <span class="token operator">=</span> <span class="token string">&quot;A hash string.&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha1&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>hashStr<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;base64&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span> <span class="token comment">// 获取到请求的路径</span>
    <span class="token keyword">let</span> fullPath<span class="token punctuation">;</span> <span class="token comment">// 用于拼接完整的路径</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;if-none-match&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 代表请求的是主页</span>
      fullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;static/html&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/index.html&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      fullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;Cache-Control&quot;</span><span class="token operator">:</span> <span class="token string">&quot;max-age=5&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">Etag</span><span class="token operator">:</span> hash<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 根据完整的路径 使用fs模块来进行文件内容的读取 读取内容后将内容返回</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fullPath<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 读取文件成功，返回读取的内容，让浏览器进行解析</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器已启动，监听 3000 端口...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>根据请求头的 if-none-match 字段接收从客户端传递过来的 Etag 值</p><p>如果和当前的 Hash 值相同，则返回 304 的状态码</p><p>在资源方面，除了主页没有设置缓存，其他静态资源设置了 5 秒的缓存，并且设置了 Etag 值</p></blockquote><p><img src="`+qn+`" alt=""></p><ul><li>第一次请求时因为没有缓存，所以全部都是从服务器上面获取资源</li><li>之后刷新页面，是从 memory cache 中获取的资源，但是由于强缓存只设置了 5 秒，所以之后再次刷新页面，走的就是协商缓存，返回 304 状态码</li><li>如果修改了服务器的静态资源，客户端没办法实时更新，因为静态资源是直接返回的文件，只要静态资源的文件名没变，即使该资源的内容已经发生了变化，服务器也会认为资源没有变化</li><li>解决办法就是在构建静态资源时，在打包完成的静态资源文件名上根据内容 Hash 值添加上一串 Hash 码 <ul><li>这样在 CSS 或者 JS 文件内容没有变化时，生成的文件名也就没有变化</li><li>反映到页面上就是 url 没有变化</li></ul></li><li>如果文件内容有变化，那么对应生成的文件名后面的 Hash 值也会发生变化，那么嵌入到页面的文件 url 也就会发生变化，从而可以达到一个更新缓存的目的 <ul><li>这也是为什么在使用 webpack 等一些打包工具时，打包后的文件名后面会添加上一串 Hash 码的原因</li></ul></li><li>目前来讲，这在前端开发中比较常见的一个静态资源缓存方案</li></ul><h3 id="_7-缓存的最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-缓存的最佳实践" aria-hidden="true">#</a> 7.缓存的最佳实践</h3><h4 id="_1-频繁变动的资源" tabindex="-1"><a class="header-anchor" href="#_1-频繁变动的资源" aria-hidden="true">#</a> 1）频繁变动的资源</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Cache-Control</span><span class="token punctuation">:</span> no<span class="token punctuation">-</span>cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器</li><li>然后配合 ETag 或者 Last-Modified 来验证资源是否有效</li><li>虽然不能节省请求数量，但是能显著 <mark>减少响应数据大小</mark></li></ul><h4 id="_2-不常变化的资源" tabindex="-1"><a class="header-anchor" href="#_2-不常变化的资源" aria-hidden="true">#</a> 2）不常变化的资源</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Cache-Control</span><span class="token punctuation">:</span> max<span class="token punctuation">-</span>age=31536000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Cache-Control 配置一个很大的 max-age=31536000 (一年) <ul><li>浏览器之后请求相同的 URL 会命中强制缓存</li></ul></li><li>为了解决更新的问题，需要在文件名（或者路径）中添加 Hash、版本号等动态字符 <ul><li>之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效</li><li>其实并未立即失效，只是不再使用了</li></ul></li></ul><blockquote><p>在线提供的类库（如：jquery-3.3.1.min.js、lodash.min.js 等）均采用这个模式</p></blockquote><h2 id="九-跨标签页通信" tabindex="-1"><a class="header-anchor" href="#九-跨标签页通信" aria-hidden="true">#</a> （九）跨标签页通信</h2><h3 id="_1-跨标签页通信概述" tabindex="-1"><a class="header-anchor" href="#_1-跨标签页通信概述" aria-hidden="true">#</a> 1.跨标签页通信概述</h3><ul><li>一个标签页能够发送信息给另一个标签页</li><li>常见的跨标签页方案 <ul><li>BroadCast Channel</li><li>Service Worker</li><li>LocalStorage、window.onstorage 监听</li><li>Shared Worker 定时器轮询（setInterval）</li><li>IndexedDB 定时器轮询（setInterval）</li><li>cookie 定时器轮询（setInterval）</li><li>window.open、window.postMessage</li><li>WebSocket</li></ul></li></ul><h3 id="_2-broadcast-channel" tabindex="-1"><a class="header-anchor" href="#_2-broadcast-channel" aria-hidden="true">#</a> 2.BroadCast Channel</h3><ul><li>BroadCast Channel 可以创建一个用于广播的通信频道</li><li>当所有页面都监听同一频道的消息时，其中某一个页面通过它发送的消息就会被其他所有页面收到</li><li>但是前提是 <mark>同源页面</mark></li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建一个名字是 load1 的 BroadcastChannel 对象</span>
  <span class="token keyword">var</span> BroadcastChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;load1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BroadcastChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> content<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 要接收到数据，BroadcastChannel对象的名字必须相同</span>
  <span class="token keyword">var</span> BroadcastChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;load1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  BroadcastChannel<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送的数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-service-worker" tabindex="-1"><a class="header-anchor" href="#_3-service-worker" aria-hidden="true">#</a> 3.Service Worker</h3><ul><li>Service Worker 是浏览器和服务器之间的代理服务器</li><li>最大的特点是在页面中注册并安装成功后，运行于浏览器后台 <ul><li>不受页面刷新的影响</li><li>可以监听和截拦作用域范围内所有页面的 HTTP 请求</li></ul></li><li>目的在于离线缓存，转发请求和网络代理</li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>页面一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&quot;sw.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;service worker 注册成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span>controller<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>页面二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&quot;sw.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;service worker 注册成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sw.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> clients <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-localstorage、window-onstorage-监听" tabindex="-1"><a class="header-anchor" href="#_4-localstorage、window-onstorage-监听" aria-hidden="true">#</a> 4.LocalStorage、window.onstorage 监听</h3><ul><li>在 Web Storage 中，每次将一个值存储到本地存储时就会触发一个 storage 事件</li><li>由事件监听器发送给回调函数的事件对象有几个自动填充的属性 <ul><li>key：被修改的条目的键</li><li>newValue：被修改后的新值</li><li>oldValue：修改前的值</li><li>storageArea：指向事件监听对应的 Storage 对象</li><li>url：原始触发 storage 事件的网页的地址</li></ul></li><li>这个事件只在 <mark>同一域下的任何窗口或者标签上</mark> 触发，并且只在 <mark>被存储的条目改变时</mark> 触发</li><li>本地文件无法触发 storage 事件</li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  localStorage<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;谢杰&quot;</span><span class="token punctuation">;</span>
  localStorage<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;信息已经设置!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> name <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> localStorage<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">姓名为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,年龄为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">从</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">修改为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>storageArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">被改变的url为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">true</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-shared-worker-定时器轮询-setinterval" tabindex="-1"><a class="header-anchor" href="#_5-shared-worker-定时器轮询-setinterval" aria-hidden="true">#</a> 5.Shared Worker 定时器轮询（setInterval）</h3><blockquote><p>MDN 关于 SharedWorker 的说明</p><ol><li>SharedWorker 接口代表一种特定类型的 worker</li><li>可以从几个浏览上下文中访问，如：几个窗口、iframe 或其他 worker</li><li>实现一个不同于普通 worker 的接口，具有不同的全局作用域</li><li>如果要使 SharedWorker 连接到多个不同的页面，这些页面必须是 <mark>同源的</mark> （相同的协议、host 以及端口）</li></ol></blockquote><ul><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入要发送的信息<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来自worker的数据：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取和发送消息都是调用 postMessage 方法，约定传递&#39;get&#39;表示获取数据</span>
    worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>worker.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token function-variable function">onconnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> port <span class="token operator">=</span> e<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果是 get 则返回数据给客户端</span>
      port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 否则把数据保存</span>
      data <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-indexeddb-定时器轮询-setinterval" tabindex="-1"><a class="header-anchor" href="#_6-indexeddb-定时器轮询-setinterval" aria-hidden="true">#</a> 6.IndexedDB 定时器轮询（setInterval）</h3><ul><li>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据 <ul><li>也包括文件/二进制大型对象（blobs）</li></ul></li><li>该 API 使用索引实现对数据的高性能搜索</li><li>通过对 IndexedDB 进行定时器轮询的方式，也能实现跨标签页的通信</li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>新增学生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>学生学号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuId<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>学生姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuName<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>学生年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuAge<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stuAge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新增学生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">db</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;addBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">addData</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">stuId</span><span class="token operator">:</span> stuId<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        <span class="token literal-property property">stuName</span><span class="token operator">:</span> stuName<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        <span class="token literal-property property">stuAge</span><span class="token operator">:</span> stuAge<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stuId<span class="token punctuation">.</span>value <span class="token operator">=</span> stuName<span class="token punctuation">.</span>value <span class="token operator">=</span> stuAge<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>学生表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tab<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./db.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tab <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#tab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tab<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          &lt;tr&gt;
              &lt;td&gt;学号&lt;/td&gt;
              &lt;td&gt;姓名&lt;/td&gt;
              &lt;td&gt;年龄&lt;/td&gt;
          &lt;/tr&gt;
      </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> arr
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
              &lt;tr&gt;
                  &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>stuId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                  &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>stuName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
                  &lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token punctuation">.</span>stuAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;
              &lt;/tr&gt;
          </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tab<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> str<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">renderTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token string">&quot;stuDB&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> stuInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> stuInfo2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">&quot;stu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stuInfo2<span class="token punctuation">.</span>length <span class="token operator">!==</span> stuInfo<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stuInfo <span class="token operator">=</span> stuInfo2<span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span>stuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">renderTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>db.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 打开数据库
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">dbName</span> 数据库的名字
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">version</span> 数据库的版本
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> 该函数会返回一个数据库实例
 */</span>
<span class="token keyword">function</span> <span class="token function">openDB</span><span class="token punctuation">(</span><span class="token parameter">dbName<span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> db<span class="token punctuation">;</span> <span class="token comment">// 存储创建的数据库</span>
    <span class="token comment">// 打开数据库，若没有则会创建</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>dbName<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库打开成功回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment">// 存储数据库对象</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库打开成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库打开失败的回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库打开报错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 数据库有更新时候的回调</span>
    request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 数据库创建或升级的时候会触发</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onupgradeneeded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment">// 存储数据库对象</span>
      <span class="token keyword">var</span> objectStore<span class="token punctuation">;</span>
      <span class="token comment">// 创建存储库</span>
      objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&quot;stu&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 这是主键</span>
        <span class="token literal-property property">autoIncrement</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 实现自增</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建索引，在后面查询数据的时候可以根据索引查</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuId&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuName&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;stuAge&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stuAge&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 新增数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">data</span> 数据
 */</span>
<span class="token keyword">function</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> request <span class="token operator">=</span> db
    <span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;readwrite&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 事务对象 指定表格名称和操作模式（&quot;只读&quot;或&quot;读写&quot;）</span>
    <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span> <span class="token comment">// 仓库对象</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据写入失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 通过主键读取数据
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">db</span> 数据库实例
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">storeName</span> 仓库名称
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">key</span> 主键值
 */</span>
<span class="token keyword">function</span> <span class="token function">getDataByKey</span><span class="token punctuation">(</span><span class="token parameter">db<span class="token punctuation">,</span> storeName<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span>storeName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事务</span>
    <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仓库对象</span>
    <span class="token keyword">var</span> request <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过主键获取数据</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;事务失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&quot;主键查询结果: &quot;, request.result);</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-cookie-定时器轮询-setinterval" tabindex="-1"><a class="header-anchor" href="#_7-cookie-定时器轮询-setinterval" aria-hidden="true">#</a> 7.cookie 定时器轮询（setInterval）</h3><ul><li>可以通过定时器轮询的方式来监听 Cookie 的变化，从而达到一个多标签页通信的目的</li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 设置 cookie</span>
  document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;name=zhangsan&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;cookie 已经设置&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 获取当前的 cookie</span>
  <span class="token keyword">var</span> cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">当前的 cookie 值为 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>document<span class="token punctuation">.</span>cookie<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">!==</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">cookie 信息已经改变，最新的 cookie 值为</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>document<span class="token punctuation">.</span>cookie<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;最新的 cookie 值已经保存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-window-open、window-postmessage" tabindex="-1"><a class="header-anchor" href="#_8-window-open、window-postmessage" aria-hidden="true">#</a> 8.window.open、window.postMessage</h3><blockquote><p>MDN 上对 window.postMessage 的介绍</p><ol><li>window.postMessage() 方法可以安全地实现跨源通信</li></ol><p>通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 https）、端口号（443 为 https 的默认值）、以及主机 (两个页面的模数 Document.domain 设置为相同的值) 时，这两个脚本才能相互通信</p><p>window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全</p><ol start="2"><li>从广义上讲，一个窗口可以获得对另一个窗口的引用（如：<code>targetWindow = window.opener</code>），然后在窗口上调用 <code>targetWindow.postMessage()</code> 方法分发一个 MessageEvent 消息</li></ol><p>接收消息的窗口可以根据需要自由处理此事件，传递给 window.postMessage() 的参数（如：message）将通过消息事件对象暴露给接收消息的窗口</p></blockquote><ul><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>popBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>弹出新的窗口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> popBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#popBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> opener <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 保存打开窗口的引用</span>
  popBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    opener <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
      <span class="token string">&quot;index2.html&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;height=400,width=400,top=10,resizable=yes&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> content<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// data 代表的是发送是数据，origin 用来限制访问来源，也可以用 * 代替</span>
    opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是弹出页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件监听</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-websocket" tabindex="-1"><a class="header-anchor" href="#_9-websocket" aria-hidden="true">#</a> 9.WebSocket</h3><ul><li>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，所有浏览器都已经支持了</li><li>最大特点是服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息 <ul><li>是真正的双向平等对话，属于 <mark>服务器推送技术</mark> 的一种</li></ul></li><li>server.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 初始化一个 node 项目 npm init -y</span>
<span class="token comment">// 安装依赖 npm i -save ws</span>

<span class="token comment">// 获得 WebSocketServer 类型</span>
<span class="token keyword">var</span> WebSocketServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ws&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server<span class="token punctuation">;</span>

<span class="token comment">// 创建 WebSocketServer 对象实例，监听指定端口</span>
<span class="token keyword">var</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建保存所有已连接到服务器的客户端对象的数组</span>
<span class="token keyword">var</span> clients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 为服务器添加 connection 事件监听，当有客户端连接到服务端时，立刻将客户端对象保存进数组中</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果是首次连接</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>clients<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 就将当前连接保存到数组备用</span>
    clients<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有&quot;</span> <span class="token operator">+</span> clients<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;客户端在线&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 为每个 client 对象绑定 message 事件，当某个客户端发来消息时，自动触发</span>
    client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">typeof</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;收到消息&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 遍历 clients 数组中每个其他客户端对象，并发送消息给其他客户端</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token keyword">of</span> clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 排除自己这个客户端连接</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!==</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 把消息发给别人</span>
          c<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当客户端断开连接时触发该事件</span>
    client<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> index <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      clients<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有&quot;</span> <span class="token operator">+</span> clients<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;客户端在线&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器已启动...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 这个页面是用来发送信息的 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>send<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 建立到服务端 WebSocket 连接</span>
  <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  send<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果 msg 输入框内容不是空的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将 msg 输入框中的内容发送给服务器</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 断开 WebSocket 连接</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">//建立到服务端WebSocket连接</span>
  <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当有消息发过来时，就将消息放到显示元素上</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      oP<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次接收到的消息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oP<span class="token punctuation">)</span><span class="token punctuation">;</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 断开 Websocket 连接</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十-web-worker" tabindex="-1"><a class="header-anchor" href="#十-web-worker" aria-hidden="true">#</a> （十）Web Worker</h2><h3 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1.背景</h3><ul><li>在运行大型或者复杂的 JavaScript 脚本时，经常会出现浏览器假死的现象 <ul><li>这是由于 JavaScript 这个语言在执行的时候是采用单线程来执行的</li><li>采用同步执行的方式运行，如果出现阻塞，那么后面的代码将不会执行</li></ul></li><li>HTML5 的 Web Worker 可以让 Web 应用程序具备后台的处理能力 <ul><li>支持多线程处理功能，因此可以充分利用多核 CPU 带来的优势</li><li>将耗时长的任务分配给 HTML5 的 Web Worker 运行</li><li>从而避免了有时页面反应迟缓，甚至假死的现象</li></ul></li></ul><h3 id="_2-web-worker-概述" tabindex="-1"><a class="header-anchor" href="#_2-web-worker-概述" aria-hidden="true">#</a> 2.Web Worker 概述</h3><ul><li>在 Web 应用程序中，web Worker 是一项 <mark>后台处理技术</mark></li><li>可以创建在后台运行的线程，这个线程被称为 Worker <ul><li>如果将可能耗费较长时间的处理交给后台来执行，对用户在前台页面中执行的操作没有影响</li></ul></li></ul><h4 id="_1-web-worker-的特点" tabindex="-1"><a class="header-anchor" href="#_1-web-worker-的特点" aria-hidden="true">#</a> 1）Web Worker 的特点</h4><ul><li>通过加载一个 JS 文件来进行大量复杂的计算，而不挂起主进程 <ul><li>通过 postMessage 和 onMessage 进行通信</li></ul></li><li>可以在 Worker 中通过 <code>importScripts(url)</code> 方法来加载 JavaScript 脚本文件</li><li>可以使用 setTimeout 、 clearTimeout 、 setInterval 和 clearInterval 等方法</li><li>可以使用 XMLHttpRequest 进行异步请求</li><li>可以访问 navigator 的部分属性</li><li>可以使用 JavaScript 核心对象</li></ul><h4 id="_2-web-worker-的局限性" tabindex="-1"><a class="header-anchor" href="#_2-web-worker-的局限性" aria-hidden="true">#</a> 2）Web Worker 的局限性</h4><ul><li>不能跨域加载 JavaScript</li><li>Worker 内代码不能访问 DOM</li><li>使用 Web Worker 加载数据没有 JSONP 和 Ajax 加载数据高效</li></ul><h4 id="_3-worker-的属性和方法" tabindex="-1"><a class="header-anchor" href="#_3-worker-的属性和方法" aria-hidden="true">#</a> 3）Worker 的属性和方法</h4><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td><code>self</code></td><td>self 关键字，用来表示本线程范围内的作用域</td></tr><tr><td><code>postMessage()</code></td><td>向创建线程的源窗口发送信息</td></tr><tr><td><code>onMessage</code></td><td>获取接收消息的事件句柄</td></tr><tr><td><code>importScripts(urls)</code></td><td>Worker 内部如果要加载其他脚本，可以使用该方法来导入其它 JavaScript 脚本文件<br>参数为该脚本文件的 URL 地址<br>导入的脚本文件必须与使用该线程文件的页面在同一个域中，并在同一个端口中</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入了 3 个 JavaScript 脚本</span>
<span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&quot;worker1.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;worker2.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;worker3.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-web-worker-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-web-worker-使用示例" aria-hidden="true">#</a> 3.Web Worker 使用示例</h3><ul><li>创建一个 Web Worker 对象，并传入希望执行的 JavaScript 文件</li><li>之后在页面中设置一个事件监听器 <ul><li>用来监听由 Web Worker 对象发来的消息</li></ul></li><li>如果想要在页面与 Web Worker 之间建立通信，数据需要通过 <code>postMessage()</code> 方法传递</li></ul><h4 id="_1-创建-web-worker" tabindex="-1"><a class="header-anchor" href="#_1-创建-web-worker" aria-hidden="true">#</a> 1）创建 Web Worker</h4><ul><li>在 Worker 类的构造器中，将需要在后台线程中执行的脚本文件的 URL 地址作为参数传入</li><li>URL 可以是相对或者绝对路径，只要是相同的协议，主机和端口</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在后台线程中不能访问页面或者窗口对象，此时如果在后台线程的脚本文件中使用 window 或者 document 对象，则会引发错误</p></div><h4 id="_2-获取-worker-进程的返回值" tabindex="-1"><a class="header-anchor" href="#_2-获取-worker-进程的返回值" aria-hidden="true">#</a> 2）获取 Worker 进程的返回值</h4><ul><li>可以通过 onmessage 属性来绑定一个事件处理程序</li><li>当后台 Worker 的 postMessage 方法被调用时，该事件就会被触发</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;the message is back!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-给后台线程发送消息" tabindex="-1"><a class="header-anchor" href="#_3-给后台线程发送消息" aria-hidden="true">#</a> 3）给后台线程发送消息</h4><ul><li>使用 Worker 对象的 postMessage 方法</li><li>发送的消息需要为文本数据 <ul><li>如果要发送任何 JavaScript 对象，需要通过 JSON.stringify() 方法将其转换成文本数据</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-终止后台进程" tabindex="-1"><a class="header-anchor" href="#_4-终止后台进程" aria-hidden="true">#</a> 4）终止后台进程</h4><ul><li>不能自行终止，但是能够被启用的页面所终止</li><li>调用 <code>terminate()</code> 函数可以终止后台进程 <ul><li>被终止的 Web Workers 将不再响应任何消息或执行任何其他运算</li></ul></li><li>终止后，Worker 不能被重新启动，但是可以使用同样的 URL 创建一个新的 Worker</li><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>计数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>output</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>开始工作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stopBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>停止工作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> startBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;startBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stopBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;stopBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> worker<span class="token punctuation">;</span> <span class="token comment">// 用于存储 Worker 进程</span>
<span class="token comment">// 开始 Worker 的代码</span>
startBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第一次进来没有 Worker 进程 , 创建一个新的 Worker 进程</span>
  worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 接收来自于后台的数据</span>
  worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 停止 Worker 的代码</span>
stopBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>worker.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">timedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token comment">// 每次得到的结果都通过 postMessage 方法返回给前台</span>
  <span class="token function">postMessage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;timedCount()&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">timedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-使用-web-worker-实现跨标签页通信" tabindex="-1"><a class="header-anchor" href="#_4-使用-web-worker-实现跨标签页通信" aria-hidden="true">#</a> 4.使用 Web Worker 实现跨标签页通信</h3><h4 id="_1-web-worker-的类型" tabindex="-1"><a class="header-anchor" href="#_1-web-worker-的类型" aria-hidden="true">#</a> 1）Web Worker 的类型</h4><ul><li>专用线程 Dedicated Web Worker <ul><li>随当前页面的关闭而结束</li><li>只能被创建它的页面访问</li><li>实例化的是一个 SharedWorker 类</li></ul></li><li>共享线程 Shared Web Worker <ul><li>可以同时有多个页面的线程链接</li><li>实例化的是一个 Worker 类</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&quot;sharedworker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-使用-shared-web-worker-共享线程来实现跨标签页通信" tabindex="-1"><a class="header-anchor" href="#_2-使用-shared-web-worker-共享线程来实现跨标签页通信" aria-hidden="true">#</a> 2）使用 Shared Web Worker 共享线程来实现跨标签页通信</h4><ul><li>index.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入要发送的信息<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index2.html</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">&quot;worker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来自worker的数据：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取和发送消息都是调用 postMessage 方法，约定传递&#39;get&#39;表示获取数据</span>
    worker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>worker.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token function-variable function">onconnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> port <span class="token operator">=</span> e<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是 get 则返回数据给客户端</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 否则把数据保存</span>
      data <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,141);function zn(Gn,$n){const a=o("ExternalLinkIcon");return c(),l("div",null,[wn,n("blockquote",null,[n("p",null,[n("a",xn,[s("View Web SQL data"),t(a)]),s("（需要搭梯子）")]),n("p",null,[n("a",_n,[s("CSDN WebSQL 最全详解"),t(a)])])]),Sn,n("ul",null,[n("li",null,[s("由于 IndexedDB 所提供的原生 API 比较复杂 "),n("ul",null,[jn,n("li",null,[s("如："),n("a",Dn,[s("Dexie.js"),t(a)])])])]),In]),n("blockquote",null,[n("p",null,[s("IndexedDB 相关的更多 API 可以扩展阅读："),n("a",Mn,[s("https://www.wangdoc.com/javascript/bom/indexeddb.html"),t(a)])])]),Tn,n("ul",null,[n("li",null,[s("File API 只能够做读取的工作 "),n("ul",null,[n("li",null,[n("a",Bn,[s("File API 规范"),t(a)])])])]),n("li",null,[s("File System Access API 能够将数据存储到本地 "),n("ul",null,[n("li",null,[n("a",Cn,[s("File System Access API 规范"),t(a)])]),Nn,Wn])])]),n("blockquote",null,[Ln,An,En,n("p",null,[s("MDN："),n("a",Pn,[s("https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API"),t(a)])]),n("p",null,[s("web.dev："),n("a",On,[s("https://web.dev/file-system-access/"),t(a)])])]),Hn,n("blockquote",null,[Rn,n("p",null,[s("推荐阅读 Jake Archibald 的 "),n("a",Fn,[s("HTTP/2 push is tougher than I thought"),t(a)])]),Un,Jn]),Vn,n("blockquote",null,[n("p",null,[s("完整的取值列表可以查看 "),n("a",Kn,[s("MDN"),t(a)])])]),Qn])}const Zn=e(yn,[["render",zn],["__file","09.html.vue"]]);export{Zn as default};
