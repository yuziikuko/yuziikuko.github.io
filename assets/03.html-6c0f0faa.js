import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as n,b as c,d as l,e as s}from"./app-1240ea23.js";const i={},r=s(`<h2 id="一-使用-create-react-app-创建-react-应用" tabindex="-1"><a class="header-anchor" href="#一-使用-create-react-app-创建-react-应用" aria-hidden="true">#</a> （一）使用 <code>create-react-app</code> 创建 React 应用</h2><h3 id="_1-react-脚手架" tabindex="-1"><a class="header-anchor" href="#_1-react-脚手架" aria-hidden="true">#</a> 1.React 脚手架</h3><ul><li>xxx 脚手架 <ul><li>用来帮助程序员快速创建一个基于 xxx 库的模板项目</li><li>包含了所有需要的配置（语法检查、jsx 编译、devServer......）</li><li>下载好了所有相关的依赖</li><li>可以直接运行一个简单效果</li></ul></li><li>React 提供了一个用于创建 React 项目的脚手架库：<code>create-react-app</code></li><li>项目的整体技术架构为：React + Webpack + ES6 + ESLint</li><li>使用脚手架开发的项目的特点 <ul><li>模块化</li><li>组件化</li><li>工程化</li></ul></li></ul><h3 id="_2-创建项目并启动" tabindex="-1"><a class="header-anchor" href="#_2-创建项目并启动" aria-hidden="true">#</a> 2.创建项目并启动</h3><h4 id="_1-全局安装" tabindex="-1"><a class="header-anchor" href="#_1-全局安装" aria-hidden="true">#</a> 1）全局安装</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> create-react-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-切换到想创建项目的目录-使用命令" tabindex="-1"><a class="header-anchor" href="#_2-切换到想创建项目的目录-使用命令" aria-hidden="true">#</a> 2）切换到想创建项目的目录，使用命令</h4>`,7),u=n("li",null,"默认安装的是 React18，需要降级为 React17",-1),d={href:"https://blog.csdn.net/qq3163566/article/details/125842229",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx create-react-app hello-react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-进入项目文件夹" tabindex="-1"><a class="header-anchor" href="#_3-进入项目文件夹" aria-hidden="true">#</a> 3）进入项目文件夹</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> hello-react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-启动项目" tabindex="-1"><a class="header-anchor" href="#_4-启动项目" aria-hidden="true">#</a> 4）启动项目</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-react-脚手架项目结构" tabindex="-1"><a class="header-anchor" href="#_3-react-脚手架项目结构" aria-hidden="true">#</a> 3.React 脚手架项目结构</h3><blockquote><p>public ---- 静态资源文件夹</p><p>------ favicon.icon ------ 网站页签图标</p><p>------ <strong>index.html -------- 主页面</strong></p><p>------ logo192.png ------- logo 图</p><p>------ logo512.png ------- logo 图</p><p>------ manifest.json ----- 应用加壳的配置文件</p><p>------ robots.txt -------- 爬虫协议文件</p><p>src ---- 源码文件夹</p><p>------ App.css -------- App 组件的样式</p><p>------ <strong>App.js --------- App 组件</strong></p><p>------ App.test.js ---- 用于给 App 做测试</p><p>------ index.css ------ 样式</p><p>------ <strong>index.js ------- 入口文件</strong></p><p>------ logo.svg ------- logo 图</p><p>------ reportWebVitals.js ------- 页面性能分析文件(需要 web-vitals 库的支持)</p><p>------ setupTests.js ------- 组件单元测试的文件(需要 jest-dom 库的支持)</p></blockquote><h3 id="_4-功能界面的组件化编码流程-通用" tabindex="-1"><a class="header-anchor" href="#_4-功能界面的组件化编码流程-通用" aria-hidden="true">#</a> 4.功能界面的组件化编码流程（通用）</h3><h4 id="_1-拆分组件" tabindex="-1"><a class="header-anchor" href="#_1-拆分组件" aria-hidden="true">#</a> 1）拆分组件</h4><ul><li>拆分界面</li><li>抽取组件</li></ul><h4 id="_2-实现静态组件" tabindex="-1"><a class="header-anchor" href="#_2-实现静态组件" aria-hidden="true">#</a> 2）实现静态组件</h4><ul><li>使用组件实现静态页面效果</li></ul><h4 id="_3-实现动态组件" tabindex="-1"><a class="header-anchor" href="#_3-实现动态组件" aria-hidden="true">#</a> 3）实现动态组件</h4><ul><li>动态显示初始化数据 <ul><li>数据类型</li><li>数据名称</li><li>保存在哪个组件</li></ul></li><li>交互（从绑定事件监听开始）</li></ul><h2 id="二-组件的组合使用-——-todolist-案例" tabindex="-1"><a class="header-anchor" href="#二-组件的组合使用-——-todolist-案例" aria-hidden="true">#</a> （二）组件的组合使用 —— TodoList 案例</h2><h3 id="_1-import-原则" tabindex="-1"><a class="header-anchor" href="#_1-import-原则" aria-hidden="true">#</a> 1.import 原则</h3><ul><li>第三方库往上靠</li><li>自定义文件往下靠</li><li>样式文件放最后</li></ul><h3 id="_2-动态初始化列表" tabindex="-1"><a class="header-anchor" href="#_2-动态初始化列表" aria-hidden="true">#</a> 2.动态初始化列表</h3><ul><li>如何确定将数据放在哪个组件的 state 中？ <ul><li>某个组件使用：放在其自身的 state 中</li><li>某些组件使用：放在他们共同的父组件 state 中（官方称此操作为 <strong>状态提升</strong> ）</li></ul></li></ul><h3 id="_3-关于父子组件通信" tabindex="-1"><a class="header-anchor" href="#_3-关于父子组件通信" aria-hidden="true">#</a> 3.关于父子组件通信</h3><ul><li>父组件给子组件传递数据：通过 <code>props</code> 传递</li><li>子组件给父组件传递数据：通过 <code>props</code> 传递 <ul><li>要求父组件先给子组件传递一个函数</li></ul></li></ul><h4 id="_1-父组件" tabindex="-1"><a class="header-anchor" href="#_1-父组件" aria-hidden="true">#</a> 1）父组件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">&quot;./components/Header&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">tasks</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;001&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;睡觉&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;003&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;打代码&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;004&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;看动漫&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 添加一项新任务</span>
  <span class="token function-variable function">addTasks</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">taskObj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">tasks</span><span class="token operator">:</span> <span class="token punctuation">[</span>taskObj<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>tasks<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> tasks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;todo-container&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;todo-wrap&quot;</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>Header addTasks<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addTasks<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-子组件" tabindex="-1"><a class="header-anchor" href="#_2-子组件" aria-hidden="true">#</a> 2）子组件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> nanoid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;nanoid&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">&quot;prop-types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;./index.css&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 对接收的props进行：类型、必要性的限制</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">addTasks</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 添加一项新任务</span>
  <span class="token function-variable function">handleKeyUp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解构赋值获取key，target</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> target <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">;</span>
    <span class="token comment">// 处理空输入</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;输入不可为空！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断是否是回车键</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">&quot;Enter&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个task对象</span>
    <span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token function">nanoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> target<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 将task对象传递给App组件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTasks</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 清空输入框</span>
    target<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;todo-header&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input
          onKeyUp<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleKeyUp<span class="token punctuation">}</span>
          type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
          placeholder<span class="token operator">=</span><span class="token string">&quot;请输入你的任务名称，按回车键确认&quot;</span>
        <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-注意" tabindex="-1"><a class="header-anchor" href="#_4-注意" aria-hidden="true">#</a> 4.注意</h3><h4 id="_1-defaultchecked和checked区别" tabindex="-1"><a class="header-anchor" href="#_1-defaultchecked和checked区别" aria-hidden="true">#</a> 1）<code>defaultChecked</code>和<code>checked</code>区别</h4><ul><li><code>defaultChecked</code>只在页面初次渲染时起作用，<code>state</code> 更新也无法改变勾选状态</li><li><code>checked</code>可以动态更新，但需要配合<code>onChange</code>事件监听</li><li>类似的还有：<code>defaultValue</code>和<code>value</code></li></ul><div class="hint-container danger"><p class="hint-container-title">重要</p><p>状态在哪个组件，操作状态的方法就在哪个组件</p></div>`,29);function v(h,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("ul",null,[u,n("li",null,[n("a",d,[c("https://blog.csdn.net/qq3163566/article/details/125842229"),l(a)])])]),k])}const y=e(i,[["render",v],["__file","03.html.vue"]]);export{y as default};
