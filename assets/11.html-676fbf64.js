import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-1ca76096.js";const e={},o=t(`<h2 id="一-iterator-简介" tabindex="-1"><a class="header-anchor" href="#一-iterator-简介" aria-hidden="true">#</a> （一）Iterator 简介</h2><ul><li><code>Iterator</code> 是一种接口【即对象的属性】 <ul><li>为各种不同的数据结构提供统一的访问机制</li><li>任何数据结构只要部署 <code>iterator</code> 接口就可以完成遍历操作</li></ul></li><li><code>ES6</code>创造了一种新的遍历命令 <code>for...of</code> 循环 <ul><li><code>iterator</code> 主要供 <code>for...of</code> 消费</li></ul></li><li>原生具备 <code>iterator</code> 接口的数据（即可用 <code>for...of</code> 遍历） <ul><li><code>Array</code></li><li><code>Arguments</code></li><li><code>Set</code></li><li><code>Map</code></li><li><code>String</code></li><li><code>TypeArray</code></li><li><code>NodeList</code></li></ul></li><li>需要自定义遍历数据的时候，要想到迭代器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个数组</span>
<span class="token keyword">const</span> xiyou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;猪八戒&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;沙僧&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 使用for...in遍历【遍历的是键名】</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> xiyou<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 0</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>

<span class="token comment">// 使用for...of遍历【遍历的是键值】</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> xiyou<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 唐僧</span>
<span class="token comment">// 孙悟空</span>
<span class="token comment">// 猪八戒</span>
<span class="token comment">// 沙僧</span>

<span class="token comment">// 数组可以遍历是因为原型对象上有Symbol(Symbol.iterator): ƒ values()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiyou<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-工作原理" tabindex="-1"><a class="header-anchor" href="#二-工作原理" aria-hidden="true">#</a> （二）工作原理</h2><ul><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的 <code>next</code> 方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用 <code>next</code> 方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用一次 <code>next</code> 方法返回一个包含 <code>value</code> 和 <code>done</code> 属性的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> iterator <span class="token operator">=</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Array Iterator {}  原型里有next()</span>

<span class="token comment">// 调用对象的next方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &#39;唐僧&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &#39;孙悟空&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &#39;猪八戒&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: &#39;沙僧&#39;, done: false}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {value: undefined, done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-自定义遍历数据" tabindex="-1"><a class="header-anchor" href="#三-自定义遍历数据" aria-hidden="true">#</a> （三）自定义遍历数据</h2><ul><li>需求：使用 <code>for...of</code> 遍历这个对象，返回结果是 <code>stus</code> 数组的一个成员</li></ul><h3 id="_1-banji-stus-foreach" tabindex="-1"><a class="header-anchor" href="#_1-banji-stus-foreach" aria-hidden="true">#</a> 1.banji.stus.forEach()</h3><ul><li>可以实现，但是不符合面向对象的思想， <ul><li>最好不要直接操作对象中的属性</li></ul></li><li>应该通过对象暴露出来的方法获得相应的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个对象</span>
<span class="token keyword">const</span> banji <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;终极一班&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stus</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xiaoning&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xiaotian&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;knight&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// banji is not iterable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-symbol-iterator" tabindex="-1"><a class="header-anchor" href="#_2-symbol-iterator" aria-hidden="true">#</a> 2.Symbol.iterator</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个对象</span>
<span class="token keyword">const</span> banji <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;终极一班&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stus</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xiaoning&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xiaotian&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;knight&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 索引变量</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
          index<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// xiaoming</span>
<span class="token comment">// xiaoning</span>
<span class="token comment">// xiaotian</span>
<span class="token comment">// knight</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","11.html.vue"]]);export{d as default};
