import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-4a8dca36.js";const e="/assets/JS高薪01-daa1c5e5.png",p="/assets/JS高薪02-28f36c51.png",o="/assets/JS高薪03-d781fbde.png",c="/assets/JS高薪04-048a8d8f.png",l="/assets/JS高薪05-8e5e4d13.png",i={},u=t(`<h2 id="一-javascript-入门" tabindex="-1"><a class="header-anchor" href="#一-javascript-入门" aria-hidden="true">#</a> （一）JavaScript 入门</h2><h3 id="_1-web-发展史" tabindex="-1"><a class="header-anchor" href="#_1-web-发展史" aria-hidden="true">#</a> 1.Web 发展史</h3><ul><li>Mosaic，是互联网历史上第一个获普遍使用和能够显示图片的<strong>网页浏览器</strong>，于 1993 年问世</li></ul><h3 id="_2-浏览器组成" tabindex="-1"><a class="header-anchor" href="#_2-浏览器组成" aria-hidden="true">#</a> 2.浏览器组成</h3><ul><li>shell 部分</li><li>内核部分 <ul><li>渲染引擎（语法规则和渲染）</li><li>JS 引擎</li><li>其他模块</li></ul></li></ul><h3 id="_3-翻译过程" tabindex="-1"><a class="header-anchor" href="#_3-翻译过程" aria-hidden="true">#</a> 3.翻译过程</h3><h4 id="_1-编译" tabindex="-1"><a class="header-anchor" href="#_1-编译" aria-hidden="true">#</a> 1）编译</h4><ul><li>通篇翻译</li><li>将格式 1 的文件翻译成格式 2 的文件，由系统程序执行格式 2 文件</li><li>该类型的编程语言叫编译性语言</li><li>优点：过程快</li><li>缺点：翻译后的格式 2 文件移植性不好（不能跨平台）</li><li>如： <ul><li>C 语言： <code>.c =&gt; .obj</code></li><li>C++</li></ul></li></ul><h4 id="_2-解释" tabindex="-1"><a class="header-anchor" href="#_2-解释" aria-hidden="true">#</a> 2）解释</h4><ul><li>逐行翻译，逐行执行</li><li>直接翻译格式 1 的文件，翻译一行就交给系统程序执行一行</li><li>该类型的编程语言叫解释性语言</li><li>优点：直接翻译成机器码，可以跨平台</li><li>缺点：过程稍微慢一点</li><li>如： <ul><li>JavaScript</li><li>PHP</li><li>Python</li></ul></li></ul><h4 id="_3-java" tabindex="-1"><a class="header-anchor" href="#_3-java" aria-hidden="true">#</a> 3）Java</h4><ul><li>Java 既不是编译性语言，也不是解释性语言，是 oak 语言</li><li><code>.java</code> 文件通过 <code>javac</code> 命令编译成 <code>.class</code> 文件，再经过 <code>jvm</code> 虚拟机解释执行</li><li>可以跨平台</li></ul><h3 id="_4-js-特点" tabindex="-1"><a class="header-anchor" href="#_4-js-特点" aria-hidden="true">#</a> 4.JS 特点</h3><ul><li>解释性语言 <ul><li>不需要编译成文件，可以跨平台</li></ul></li><li>单线程</li><li>ECMA 标注 <ul><li>兼容于 ECMA 标准，因此也称为 ECMAScript</li></ul></li><li>三大部分： <ul><li>ECMAScript（ES）</li><li>DOM</li><li>BOM</li></ul></li></ul><h3 id="_5-主流浏览器" tabindex="-1"><a class="header-anchor" href="#_5-主流浏览器" aria-hidden="true">#</a> 5.主流浏览器</h3><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident -&gt; Edge</td></tr><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Chrome</td><td>Webkit -&gt; Blink</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>Opera</td><td>Presto -&gt; Blink</td></tr></tbody></table><h3 id="_6-js-引入" tabindex="-1"><a class="header-anchor" href="#_6-js-引入" aria-hidden="true">#</a> 6.JS 引入</h3><ul><li>页面内嵌标签 <ul><li><code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>外部引入 <ul><li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;location&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>为符合 Web 标准（W3C 标准中的一项），结构（HTML）、样式（CSS）、行为（JS）相分离 <ul><li>通常采用外部引入的方式</li></ul></li></ul><h3 id="_7-js-基本语法" tabindex="-1"><a class="header-anchor" href="#_7-js-基本语法" aria-hidden="true">#</a> 7.JS 基本语法</h3><h4 id="_1-变量-variable" tabindex="-1"><a class="header-anchor" href="#_1-变量-variable" aria-hidden="true">#</a> 1）变量 variable</h4><ul><li>变量声明 <ul><li>声明、赋值分解</li><li>单一 var 模式（多个变量一次性声明并赋值）</li></ul></li><li>命名规则 <ul><li>变量名必须以 <code>英文字母</code> 、 <code>_</code> 、 <code>$</code> 开头</li><li>变量名可以包括 <code>英文字母</code> 、 <code>_</code> 、 <code>$</code> 、 <code>数字</code></li><li>不可以用系统的关键字、保留字作为变量名</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token comment">// 赋值</span>
a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment">// 也可以同时进行</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">// 单一var</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
  d <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
  e <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关键字</li></ul><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>break</td><td>else</td><td>new</td><td>var</td><td>case</td><td>finally</td><td>return</td></tr><tr><td>void</td><td>catch</td><td>for</td><td>switch</td><td>while</td><td>default</td><td>if</td></tr><tr><td>throw</td><td>delete</td><td>in</td><td>try</td><td>do</td><td>instanceof</td><td>typeof</td></tr></tbody></table><ul><li>保留字</li></ul><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>abstract</td><td>enum</td><td>int</td><td>short</td></tr><tr><td>boolean</td><td>export</td><td>interface</td><td>static</td></tr><tr><td>byte</td><td>extends</td><td>long</td><td>super</td></tr><tr><td>char</td><td>final</td><td>native</td><td>synchronized</td></tr><tr><td>class</td><td>float</td><td>package</td><td>throws</td></tr><tr><td>const</td><td>goto</td><td>private</td><td>transient</td></tr><tr><td>debugger</td><td>implements</td><td>protected</td><td>volatile</td></tr><tr><td>double</td><td>import</td><td>public</td><td></td></tr></tbody></table><h4 id="_2-值类型——数据类型" tabindex="-1"><a class="header-anchor" href="#_2-值类型——数据类型" aria-hidden="true">#</a> 2）值类型——数据类型</h4><ul><li>不可改变的原始值（栈数据） <ul><li>拷贝的是值</li><li>Number</li><li>String</li><li>Boolean</li><li>undefined</li><li>null</li></ul></li><li>引用值（堆数据） <ul><li>拷贝的是地址</li><li>Array</li><li>Object</li><li>Function</li><li>Date</li><li>RegExp</li></ul></li><li>栈（stack） <ul><li>FILO，先进后出，有底没顶</li></ul></li><li>堆（heap）</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>原始值不可改变：</p><p>变量重新赋值实际上是在栈顶再申请一块空间，将变量地址指向新空间，原地址重置为原始地址</p></div><h3 id="_8-js-语句基本规则" tabindex="-1"><a class="header-anchor" href="#_8-js-语句基本规则" aria-hidden="true">#</a> 8.JS 语句基本规则</h3><ul><li>语句后面要用分号 <code>;</code> 结束</li><li>JS 错误 <ul><li>低级错误（语法解析错误） <ul><li>逐行翻译前会通篇扫描，如果有解析错误，程序直接终止</li></ul></li><li>逻辑错误（标准错误） <ul><li>逐行翻译，遇到逻辑错误就停止在当前代码行</li></ul></li><li>语法错误会引发后续代码终止，但不会影响其它 JS 代码块</li></ul></li><li>书写格式要规范， <code>=+/-</code> 左右两边都应该有空格</li></ul><h3 id="_9-运算操作符" tabindex="-1"><a class="header-anchor" href="#_9-运算操作符" aria-hidden="true">#</a> 9.运算操作符</h3><ul><li><code>+</code><ul><li>数学运算</li><li>连接字符串</li><li>任何数据类型加字符串都等于字符串</li></ul></li><li><code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>=</code>、<code>()</code><ul><li>优先级 <code>=</code> 最低， <code>()</code> 最高</li></ul></li><li><code>++</code>、<code>--</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity(Number)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN(Number) =&gt; Not a Number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>,</code>运算符 <ul><li>格式： <code>(x, y)</code></li><li>先计算表达式 x 的结果，再计算表达式 y 的结果，最后将表达式 y 的结果返回</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-比较运算符" tabindex="-1"><a class="header-anchor" href="#_10-比较运算符" aria-hidden="true">#</a> 10.比较运算符</h3><ul><li><code>&gt;</code>、<code>&lt;</code>、<code>==</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></li><li>比较结果为 boolean 值</li><li>字符串比较的是 ASCII 码 <ul><li>0：48</li><li>A：65</li><li>a：98</li></ul></li><li><code>Infinity</code> === <code>Infinity</code></li><li><code>NaN</code> !== <code>NaN</code></li></ul><h3 id="_11-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_11-逻辑运算符" aria-hidden="true">#</a> 11.逻辑运算符</h3><ul><li>与 <code>&amp;&amp;</code><ul><li>全真为真</li><li>先看符号前的表达式 1，判断其结果转换为 boolean 值是否为真 <ul><li>真 <ul><li>只有两个表达式，那么返回符号后的表达式 2 的结果</li><li>不止两个表达式，继续判断下一个表达式转换为 boolean 值是否为真，重复上述逻辑</li></ul></li><li>假 <ul><li>返回符号前的表达式 1 的结果（不一定返回 false）</li></ul></li></ul></li><li>利用该特性可以作<strong>短路语句</strong>使用 <ul><li><code>2 &gt; 1 &amp;&amp; document.write(&quot;我输出了&quot;);</code></li></ul></li></ul></li><li>或 <code>||</code><ul><li>全假为假</li><li>先看符号前的表达式 1，判断其结果转换为 boolean 值是否为真 <ul><li>真 <ul><li>返回符号前的表达式 1 的结果</li></ul></li><li>假 <ul><li>只有两个表达式，那么返回符号后的表达式 2 的结果</li><li>不止两个表达式，继续判断下一个表达式转换为 boolean 值是否为真，重复上述逻辑</li></ul></li></ul></li><li>利用该特性可以作<strong>或者</strong>使用 <ul><li><code>var event = e || window.event;</code></li></ul></li></ul></li><li>非 <code>!</code><ul><li>非真即假</li><li>先将表达式转换为 boolean 值，再取反，返回结果</li></ul></li><li>运算结果为真实的值</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>转换为 boolean 值后为 false 的表达式：</p><ul><li><p>undefined</p></li><li><p>null</p></li><li><p>NaN</p></li><li><p><code>&quot;&quot;</code></p></li><li><p>0</p></li><li><p>false</p></li></ul></div><h3 id="_12-条件语句" tabindex="-1"><a class="header-anchor" href="#_12-条件语句" aria-hidden="true">#</a> 12.条件语句</h3><ul><li>if () {}</li><li>if () {} else if () {}</li><li>if (a &amp;&amp;b) {} <ul><li>a 成立<strong>并且</strong>b 成立时才执行</li></ul></li><li>if (a || b){} <ul><li>a 成立<strong>或者</strong>b 成立时执行</li></ul></li></ul><h3 id="_13-循环语句" tabindex="-1"><a class="header-anchor" href="#_13-循环语句" aria-hidden="true">#</a> 13.循环语句</h3><ul><li>for (var i = 0; i &lt; len; i++) {}</li><li>while(i &lt; len) {}</li><li>do {} while (i &lt; len) <ul><li>无论如何都先执行一次</li></ul></li></ul><h3 id="_14-类型判断" tabindex="-1"><a class="header-anchor" href="#_14-类型判断" aria-hidden="true">#</a> 14.类型判断</h3><ul><li><code>typeof()</code> 或者 <code>typeof 值</code></li><li>返回以下类型： <ul><li><code>number</code></li><li><code>string</code></li><li><code>boolean</code></li><li><code>object</code></li><li><code>undefined</code></li><li><code>function</code></li></ul></li><li>原始值问题：表示泛泛的引用值返回 object</li><li>历史遗留问题：表示空的占位符返回 object</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><ul><li>typeof({}) = object <ul><li>原始值问题</li></ul></li><li>typeof([]) = object <ul><li>原始值问题</li></ul></li><li>typeof(null) = object <ul><li>历史遗留问题</li></ul></li><li>在 JS 中使用未定义的值会报未定义错误 <ul><li><code>console.log(a);</code> =&gt; error: not defined</li><li>当且仅当 typeof 这一种情况可以使用未定义的值且不报错 <ul><li><code>console.log(typeof(a))</code> =&gt; undefined</li><li><code>typeof(typeof(a))</code> =&gt; string</li></ul></li></ul></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * if的括号会把内部的f函数声明转变为表达式，此时f变为立即执行函数
 * f的函数名无效，即 f 未声明
 * 但是typeof后面加未声明的变量不报错，会返回undefined 【1 + undefined = NaN】
 * 且typeof返回的是字符串类型，所以最终结果为 1undefined 的字符串
 */</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">+=</span> <span class="token keyword">typeof</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-类型转换" tabindex="-1"><a class="header-anchor" href="#_15-类型转换" aria-hidden="true">#</a> 15.类型转换</h3><h4 id="_1-显式类型转换" tabindex="-1"><a class="header-anchor" href="#_1-显式类型转换" aria-hidden="true">#</a> 1）显式类型转换</h4><ul><li><code>Number(mix)</code><ul><li>关注点在于转成数字类型</li><li>boolean 值会转换</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;-123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -123</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parseInt(string, radix)</code><ul><li>关注点在于转成整型 <ul><li>boolean 值不会转换</li><li>从数字位开始转换至最后一位数字位，遇到非数字位则截断</li></ul></li><li>直接舍去小数点后的数字</li><li>radix 是基底，表示转换时采用的进制 <ul><li><strong>以 radix 为基底转成十进制的整数</strong></li><li>如：2、8、10、16</li><li>如果限制了进制，但是转的数字/字符串不是“1010”组合，则返回 NaN</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10101010&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 170</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parseFloat(string)</code><ul><li>关注点在于转成浮点型 <ul><li>从数字位开始转换至最后一位数字位，遇到除第一个小数点外的非数字位则截断</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.0</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.3</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;12.3abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toString(radix)</code><ul><li>关注点在于转成字符串</li><li>用法不同于其他，需要使用调用函数的形式</li><li>radix 是基底，表示转换时的目标进制 <ul><li><strong>以十进制为基底转成 radix 进制的字符串</strong></li><li>如：2、8、10、16</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot; =&gt; 1 * 8 ^ 1 + 0 * 8 ^ 1 = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>undefined 和 null 不能调用 toString()</p><p>会直接报错</p></div><ul><li><code>String(mix)</code><ul><li>关注点在于转成字符串</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;false&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Boolean()</code><ul><li>关注点在于转成布尔值</li><li>除了以下六个值，其余全为 true <ul><li>undefined</li><li>null</li><li>NaN</li><li><code>&quot;&quot;</code></li><li>0</li><li>false</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#_2-隐式类型转换" aria-hidden="true">#</a> 2）隐式类型转换</h4><ul><li><code>isNaN()</code><ul><li>先把参数使用 <code>Number()</code> 转换，再将结果和 <code>NaN</code> 作比较</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>++</code>、<code>--</code>、<code>+</code>、<code>-</code><ul><li>自增自减 <ul><li>先使用 <code>Number()</code> 转换，再将结果自增/自减</li></ul></li><li>一元正负 <ul><li>先使用 <code>Number()</code> 转换，再将转成正/负</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 124</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>+</code></p><ul><li>只要符号左右两个表达式其中之一是字符串，就会调用 <code>String()</code> 转成字符串类型</li></ul></li><li><p><code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></p><ul><li>先使用 <code>Number()</code> 转换，再运算结果</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span></span><span class="token punctuation">)</span>
<span class="token operator">=&gt;</span> <span class="token number">NaN</span> <span class="token operator">*</span> <span class="token number">1</span>
<span class="token operator">=&gt;</span> <span class="token number">NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>&amp;&amp;</code>、<code>||</code>、<code>!</code></p><ul><li>表达式转成 boolean 值用于判断，返回的是表达式的值</li></ul></li><li><p><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></p><ul><li>只要符号左右两个表达式其中之一是数字，就会调用 <code>Number()</code> 转成数字类型再比较</li><li>如果没有数字类型则转成字符串类型比较</li><li>两个字符串类型 <ul><li>比较的是 ASCII 码大小</li><li>逐位比较</li></ul></li></ul></li><li><p><code>==</code>、<code>!=</code></p><ul><li>判断是否相等，返回 boolean 值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">false</span> <span class="token operator">&gt;</span> <span class="token parameter"><span class="token boolean">true</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token parameter"><span class="token keyword">null</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token parameter"><span class="token number">NaN</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-不发生类型转换" tabindex="-1"><a class="header-anchor" href="#_3-不发生类型转换" aria-hidden="true">#</a> 3）不发生类型转换</h4><ul><li><code>===</code>、<code>!==</code><ul><li>绝对等于、绝对不等于</li><li>判断值，也判断类型</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">1</span> <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">1</span> <span class="token operator">!==</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token string">&quot;NaN&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">NaN</span> <span class="token operator">!==</span> <span class="token string">&quot;NaN&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-函数" tabindex="-1"><a class="header-anchor" href="#二-函数" aria-hidden="true">#</a> （二）函数</h2><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1.定义</h3><ul><li>和数组、对象一致，也是引用值类型</li><li>保存在堆内存中，栈中保存堆内地址</li></ul><h4 id="_1-函数声明" tabindex="-1"><a class="header-anchor" href="#_1-函数声明" aria-hidden="true">#</a> 1）函数声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-命名函数表达式" tabindex="-1"><a class="header-anchor" href="#_2-命名函数表达式" aria-hidden="true">#</a> 2）命名函数表达式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function fn2 () {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// not defined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fn2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-匿名函数表达式" tabindex="-1"><a class="header-anchor" href="#_3-匿名函数表达式" aria-hidden="true">#</a> 3）匿名函数表达式</h4><ul><li>该方式更常用，所以简称为 <strong>函数表达式</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function () {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fn&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组成形式" tabindex="-1"><a class="header-anchor" href="#_2-组成形式" aria-hidden="true">#</a> 2.组成形式</h3><ul><li>函数名称</li><li>参数 <ul><li>形式参数——形参 <ul><li>函数的 <code>length</code> 属性绑定的是形参的个数</li><li><code>函数名.length</code></li></ul></li><li>实际参数——实参 <ul><li>函数体内中自定义了 <code>arguments</code> 实参列表，存储所有实参</li></ul></li><li>形参实参个数不需要保持一致</li></ul></li><li>返回值</li></ul><h4 id="_1-arguments-和形参" tabindex="-1"><a class="header-anchor" href="#_1-arguments-和形参" aria-hidden="true">#</a> 1）arguments 和形参</h4><ul><li>arguments 保存的是实参列表</li><li>arguments 和形参占用两块不同的内存</li><li>JS 内部定义了映射规则，只要 arguments 或形参中某一位置的值变化了，另一个位置相同的值也变化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// arguments: [1, 2]</span>
  <span class="token comment">// var a = 1;</span>

  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

  arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>arguments 和形参的映射关系只在初始时确定，未传值的形参不和 arguments 建立映射</li><li>一开始调用函数时 arguments 有多少个参数就有多少个</li><li>当实参数量少于形参时，即使函数体内再重新给未传值的形参赋值，此时对应的 arguments 下标的值也不会变化，仍然是 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// arguments: [1]</span>
  <span class="token comment">// var a = 1;</span>

  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-递归" tabindex="-1"><a class="header-anchor" href="#_3-递归" aria-hidden="true">#</a> 3.递归</h3><ul><li>找规律 <ul><li>符合人的思维模式</li></ul></li><li>找出口 <ul><li>结束的时间点</li></ul></li><li>先执行的最后被返回</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>递归唯一的好处就是 <strong>使代码变简洁</strong></p><p>不能让程序执行变快，反而可能更慢</p></div><h4 id="_1-n-的阶乘" tabindex="-1"><a class="header-anchor" href="#_1-n-的阶乘" aria-hidden="true">#</a> 1）n 的阶乘</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#_2-斐波那契数列" aria-hidden="true">#</a> 2）斐波那契数列</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fb</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fb</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-预编译" tabindex="-1"><a class="header-anchor" href="#三-预编译" aria-hidden="true">#</a> （三）预编译</h2><h3 id="_1-js-运行三部曲" tabindex="-1"><a class="header-anchor" href="#_1-js-运行三部曲" aria-hidden="true">#</a> 1.JS 运行三部曲</h3><ul><li>语法分析 <ul><li>通篇扫描代码，确定没有语法错误</li></ul></li><li>预编译</li><li>解释执行 <ul><li>解释一行，执行一行</li></ul></li></ul><h3 id="_2-预编译" tabindex="-1"><a class="header-anchor" href="#_2-预编译" aria-hidden="true">#</a> 2.预编译</h3><ul><li>变量的声明提升，赋值不提升 <ul><li>声明前使用变量，值为 undefined</li></ul></li><li>函数声明整体提升 <ul><li>声明前调用函数，不报错，可执行</li></ul></li></ul><div class="hint-container danger"><p class="hint-container-title">重要</p><p>预编译发生在函数执行的前一刻</p></div><h4 id="_1-前奏" tabindex="-1"><a class="header-anchor" href="#_1-前奏" aria-hidden="true">#</a> 1）前奏</h4><ul><li><code>imply global</code> 暗示全局变量 <ul><li>任何变量，如果变量<strong>未经声明就赋值</strong>，此变量就为全局对象 <code>window</code> 所有</li><li>eg: <ul><li><code>a = 123;</code></li><li><code>var a = b = 123;</code> =&gt; <code>window.b = 123;</code></li></ul></li></ul></li><li>一切声明的<strong>全局变量</strong>，全是 <code>window</code> 的属性 <ul><li>eg: <ul><li><code>var a = 123;</code> =&gt; <code>window.a = 123;</code></li></ul></li></ul></li></ul><h4 id="_2-四部曲" tabindex="-1"><a class="header-anchor" href="#_2-四部曲" aria-hidden="true">#</a> 2）四部曲</h4><ul><li>函数体内的预编译 <ul><li>创建 AO(Activation Object) 对象【执行期上下文/活动对象】</li><li>找形参和变量声明，将变量和形参名作为 AO 属性名，值为 undefined【变量声明提升】</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
AO {}
AO { a: undefined, b: undefined }
AO { a: 1, b: undefined }
AO { a: function a() {}, b: undefined, d: function d() {} }
*/</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function a() {}</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// var声明提升，执行时略过声明，只修改AO中的a：function a() {} =&gt; 123</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 函数声明整体提升，执行时略过此行</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// var声明提升，执行时略过声明，只修改AO中的b：undefined =&gt; function () {}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function () {}</span>
  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
AO {}
AO { a: undefined, b: undefined, c: undefined }
AO { a: 1, b: undefined, c: undefined }
AO { a: 1, b: function b() {}, c: undefined, d: function d() {} }
*/</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 1, b: function b() {}, c: 0, d: function d() {} }</span>
  <span class="token keyword">var</span> c<span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 3, b: function b() {}, c: 0, d: function d() {} }</span>
  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 3, b: 2, c: 0, d: function d() {} }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
AO {}
AO { a: undefined, b: undefined }
AO { a: 1, b: undefined }
AO { a: function a() {}, b: undefined }
*/</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function a() {}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: function a() {}, b: 234 }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 234</span>
  a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 123, b: 234 }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 123, b: 234 }</span>
  <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// AO { a: 123, b: function () {} }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function () {}</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>全局内的预编译 <ul><li>创建 GO(Global Object) 对象【执行期上下文/活动对象】</li><li>找变量声明，将变量作为 GO 属性名，值为 undefined【变量声明提升】</li><li>找函数声明，值赋予函数体</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>window</code> 对象就是 <code>GO</code> 对象</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { a: undefined }
GO { a: function a() {} }
*/</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// GO { a: 123 }</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数内未声明就赋值的变量归 window 所有</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO { b: 123 }
AO { a: undefined }
*/</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先生成 GO 再生成 AO</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { test: undefined }
GO { test: function test() {} }
*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function test() {}</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function test() {}</span>
  <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span> <span class="token comment">// AO { test: 234 }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 234</span>
  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
AO {}
AO { test: undefined }
AO { test: 1 }
AO { test: function test() {} }
*/</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// GO { test: function test() {} } AO { test: 234 }</span>
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// GO { test: 123 } AO { test: 234 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数体内和全局有同名变量时，先使用离得近的【就近原则】</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { global: undefined, fn: function fn() {} }
GO { global: 100, fn: function fn() {} }
*/</span>
global <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  global <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span>
  <span class="token keyword">var</span> global <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment">// AO { global: 300 }</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
AO {}
AO { global: undefined }
AO { global: 1 }
AO { global: 200 }
*/</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> global<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>预编译不看 if 等其他限定条件，只要有变量声明和函数声明，都提升</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { a: undefined }
GO { a: undefined, test: function test() {} }
*/</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">// a是undefined，不走判断，AO { b: undefined }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  c <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span> <span class="token comment">// GO { a: undefined, test: function test() {}, c: 234 }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 234</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token comment">/*
AO {}
AO { b: undefined }
*/</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// GO { a: 10, test: function test() {}, c: 234 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 234</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>百度 2013 年笔试题</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { bar: function bar() {} }
*/</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>
  foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
AO {}
AO { foo: undefined }
AO { foo: function foo() {} }
*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo() {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
GO {}
GO { bar: function bar() {} }
*/</span>
<span class="token comment">/*
AO {}
AO { foo: undefined }
AO { foo: function foo() {} }
AO { foo: 11 }
*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-作用域、作用域链" tabindex="-1"><a class="header-anchor" href="#四-作用域、作用域链" aria-hidden="true">#</a> （四）作用域、作用域链</h2><h3 id="_1-作用域-scope" tabindex="-1"><a class="header-anchor" href="#_1-作用域-scope" aria-hidden="true">#</a> 1.作用域 <code>[[scope]]</code></h3><ul><li>每个 JavaScript 函数都是一个对象，对象中有些属性可以访问，有些不可以，这些属性仅供 JavaScript 引擎存取 <ul><li><code>[[scope]]</code> 就是其中一个</li></ul></li><li>存储了运行期上下文的集合</li></ul><h3 id="_2-作用域链" tabindex="-1"><a class="header-anchor" href="#_2-作用域链" aria-hidden="true">#</a> 2.作用域链</h3><ul><li><code>[[scope]]</code> 中所存储的执行期上下文对象的集合，呈链式连接</li></ul><h3 id="_3-运行期上下文" tabindex="-1"><a class="header-anchor" href="#_3-运行期上下文" aria-hidden="true">#</a> 3.运行期上下文</h3><ul><li>当函数执行的前一刻时，会创建一个称为 <strong>执行期上下文</strong> 的内部对象（AO，Activation Object）</li><li>一个执行期上下文定义了一个函数执行时的环境</li><li>函数每次执行时对应的执行上下文都是独一无二的</li><li>所以多次调用一个函数会导致创建多个执行上下文，函数执行完毕时所产生的执行上下文会被销毁</li></ul><h3 id="_4-查找变量" tabindex="-1"><a class="header-anchor" href="#_4-查找变量" aria-hidden="true">#</a> 4.查找变量</h3><ul><li>在哪个函数内查找变量，就找那个函数的作用域链</li><li>从 <strong>执行时的</strong> 作用域链的 <strong>顶端</strong> 依次向下查找</li></ul><h3 id="_5-理解" tabindex="-1"><a class="header-anchor" href="#_5-理解" aria-hidden="true">#</a> 5.理解</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>a 函数被定义： <code>a.[[scope]] --&gt; 0: GO {}</code></li></ul><p><img src="`+e+'" alt=""></p><ul><li>a 函数被执行： <code>a.[[scope]] --&gt; 0: AO {}, 1: GO {}</code></li></ul><p><img src="'+p+'" alt=""></p><ul><li>b 函数被定义： <code>b.[[scope]] --&gt; 0: AO {}, 1: GO {}</code><ul><li>a 函数执行导致 b 函数被定义，所以 b 函数是基于 a 函数的环境被定义的</li></ul></li></ul><p><img src="'+o+'" alt=""></p><ul><li>b 函数被执行： <code>b.[[scope]] --&gt; 0: AO {}, 1: AO {}, 2: GO {}</code><ul><li>地址 1 的 AO 保存的是 a 函数执行时产生的 AO 的引用</li></ul></li></ul><p><img src="'+c+`" alt=""></p><ul><li>b 函数执行完成时，会删掉当前地址 0 对 AO 的引用（销毁 b 函数产生的执行上下文） <ul><li>此时 a 函数执行完成，删掉当前地址 0 对 AO 的引用（销毁 a 函数产生的执行上下文）</li><li>a 函数产生的执行上下文包括 b 函数的声明【b(function)】，此时 b 函数完全销毁</li></ul></li><li>直到下一次 a 函数重新执行时，会新创建新的 AO 对象，保存对 b 函数的新声明，产生一个全新的 b 函数的 AO</li></ul><h2 id="五-立即执行函数、闭包" tabindex="-1"><a class="header-anchor" href="#五-立即执行函数、闭包" aria-hidden="true">#</a> （五）立即执行函数、闭包</h2><h3 id="_1-例子引入" tabindex="-1"><a class="header-anchor" href="#_1-例子引入" aria-hidden="true">#</a> 1.例子引入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> bbb <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 124</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>a 直到执行完毕前，b 都没有被执行，所以此时 b 的 <code>[[scope]]</code> 保存的就是 a 执行是的 <code>[[scope]]</code></li></ul><p><img src="`+l+`" alt=""></p><h3 id="_2-副作用" tabindex="-1"><a class="header-anchor" href="#_2-副作用" aria-hidden="true">#</a> 2.副作用</h3><ul><li>内部函数被保存到外部时，必定产生闭包</li><li>闭包会导致原有作用域链不释放，造成内存泄漏</li></ul><h3 id="_3-作用" tabindex="-1"><a class="header-anchor" href="#_3-作用" aria-hidden="true">#</a> 3.作用</h3><h4 id="_1-实现公有变量" tabindex="-1"><a class="header-anchor" href="#_1-实现公有变量" aria-hidden="true">#</a> 1）实现公有变量</h4><ul><li>如：函数累加器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 累加器</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> demo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-可以作缓存" tabindex="-1"><a class="header-anchor" href="#_2-可以作缓存" aria-hidden="true">#</a> 2）可以作缓存</h4><ul><li>外部不可见的一种存储结构</li><li>如：eater</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a、b定义时保存的都是test的AO</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num<span class="token operator">--</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span>
myArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> food <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
      food <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">push</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">myFood</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      food <span class="token operator">=</span> myFood<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> eater1 <span class="token operator">=</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
eater1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
eater1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-可以实现封装" tabindex="-1"><a class="header-anchor" href="#_3-可以实现封装" aria-hidden="true">#</a> 3）可以实现封装</h4><ul><li>属性私有化 <ul><li>对象自己通过本身设置的方法才能操作的变量</li><li>外部无法通过对象调用该变量</li></ul></li><li>如：Person();</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Deng</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> wife</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prepareWife <span class="token operator">=</span> <span class="token string">&quot;XiaoZhang&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 私有化变量</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>wife <span class="token operator">=</span> wife<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">divorce</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>wife <span class="token operator">=</span> prepareWife<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">changePrepareWife</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    prepareWife <span class="token operator">=</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayPrepareWife</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prepareWife<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> deng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deng</span><span class="token punctuation">(</span><span class="token string">&quot;deng&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XiaoLiu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deng<span class="token punctuation">.</span>prepareWife<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
deng<span class="token punctuation">.</span><span class="token function">divorce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deng<span class="token punctuation">.</span>wife<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// XiaoZhang</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-模块化开发" tabindex="-1"><a class="header-anchor" href="#_4-模块化开发" aria-hidden="true">#</a> 4）模块化开发</h4><ul><li>防止污染全局变量</li></ul><h3 id="_4-立即执行函数" tabindex="-1"><a class="header-anchor" href="#_4-立即执行函数" aria-hidden="true">#</a> 4.立即执行函数</h3><ul><li>此类函数没有声明，在一次执行过后就释放</li><li>适合做初始化工作 <ul><li>除了初始化页面，后续需要用到的数据都需要被返回</li></ul></li></ul><h4 id="_1-形式一-function" tabindex="-1"><a class="header-anchor" href="#_1-形式一-function" aria-hidden="true">#</a> 1）形式一：<code>(function() {}())</code></h4><ul><li>W3C 建议使用该语法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算某个值，后续只使用这个值，不需要计算过程</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-形式二-function" tabindex="-1"><a class="header-anchor" href="#_2-形式二-function" aria-hidden="true">#</a> 2）形式二：<code>(function() {})()</code></h4><ul><li>只有表达式才能被执行符号执行：<code>test();</code></li><li>能被执行符号执行的函数表达式，其函数名自动被忽略 <ul><li>此时输出函数名为 undefined，因为该函数已变成立即执行函数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下语法错误，函数声明不能被执行符号执行</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 可以执行，这是函数表达式</span>
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>只要把函数声明转变为表达式，也可以被执行符号执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正号</span>
<span class="token operator">+</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 负号</span>
<span class="token operator">-</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 逻辑非</span>
<span class="token operator">!</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 逻辑与</span>
<span class="token punctuation">(</span><span class="token operator">...</span>其他表达式<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 逻辑或</span>
<span class="token punctuation">(</span><span class="token operator">...</span>其他表达式<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-阿里巴巴笔试题" tabindex="-1"><a class="header-anchor" href="#_3-阿里巴巴笔试题" aria-hidden="true">#</a> 3）阿里巴巴笔试题</h4><ul><li>系统编译时保持能不报错就不报错</li><li>以下代码不运行也不报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
function test(a, b, c, d) {
  console.log(a + b + c + d);
}(1, 2, 3, 4);
*/</span>

<span class="token comment">// 编译为</span>
<span class="token comment">/*
function test(a,b,c,d) {
  console.log(a+b+c+d);
}
(1,2,3,4);
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-解决闭包产生的问题" tabindex="-1"><a class="header-anchor" href="#_5-解决闭包产生的问题" aria-hidden="true">#</a> 5.解决闭包产生的问题</h3><h4 id="_1-问题引入" tabindex="-1"><a class="header-anchor" href="#_1-问题引入" aria-hidden="true">#</a> 1）问题引入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
      函数赋值到数组中，并没有执行当前函数
      所以数组赋值时的i是for循环的i（变现），但是赋值的function内部输出的i不是for循环的i（不变现，还是未知数）
      test函数执行时遍历的function的i是最终闭包中的i
      闭包中的i=9，i++ =&gt; 10，判断&lt;10不满足，退出循环，所以是10
    */</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 10 10 10 10 10 10 10 10 10</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-用闭包解决闭包" tabindex="-1"><a class="header-anchor" href="#_2-用闭包解决闭包" aria-hidden="true">#</a> 2）用闭包解决闭包</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
      生成10个立即执行函数
      每次循环将变现的i保存到k中
      10个立即执行函数保存了10个不同的i值，所以正常输出
    */</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 4 5 6 7 8 9</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-对象、包装类" tabindex="-1"><a class="header-anchor" href="#六-对象、包装类" aria-hidden="true">#</a> （六）对象、包装类</h2><h3 id="_1-对象的创建方法" tabindex="-1"><a class="header-anchor" href="#_1-对象的创建方法" aria-hidden="true">#</a> 1.对象的创建方法</h3><h4 id="_1-对象字面量-对象直接量" tabindex="-1"><a class="header-anchor" href="#_1-对象字面量-对象直接量" aria-hidden="true">#</a> 1）对象字面量/对象直接量</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-构造函数" aria-hidden="true">#</a> 2）构造函数</h4><ul><li>系统自带的构造函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>自定义的构造函数 <ul><li>结构上和函数完全一致</li><li>但必须经过 new 调用才会返回对象</li></ul></li><li>new 调用步骤： <ul><li>在构造函数顶部隐式创建 this 的对象（仅包含 <code>__proto__</code>）</li><li>之后往 this 身上添加属性名和属性值</li><li>最后在构造函数底部隐式返回 this 对象 <ul><li>如果自定义 return，只有返回 object 时会覆盖 this，返回其他原始值或数组都无效（照样返回 this）</li><li>所以 <strong>使用 new 就只能返回对象</strong></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// var this = {}; // AO { this: {} }</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>属性 <span class="token operator">=</span> 属性值<span class="token punctuation">;</span>
  <span class="token comment">// return this;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>为了避免和普通函数混淆，应采用 <strong>大驼峰式命名规则</strong></p></div><h4 id="_3-object-create-原型" tabindex="-1"><a class="header-anchor" href="#_3-object-create-原型" aria-hidden="true">#</a> 3）Object.create(原型)</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Sunny&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> obj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-包装类" tabindex="-1"><a class="header-anchor" href="#_2-包装类" aria-hidden="true">#</a> 2.包装类</h3><h4 id="_1-引入" tabindex="-1"><a class="header-anchor" href="#_1-引入" aria-hidden="true">#</a> 1）引入</h4><ul><li>原始值明确规定不允许有属性和方法</li><li>但是可以调用 <code>.length</code> 输出长度</li><li>原理：内部进行了包装类的转换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">// 隐式转换：new Number(4).len = 3; delete</span>
num<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 隐式转换：new Number(4).len</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined，因为数字没有len属性</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// new String(&#39;abcd&#39;).length = 2; delete</span>
str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abcd</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4，因为字符串本身就有length属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-几个包装类" tabindex="-1"><a class="header-anchor" href="#_2-几个包装类" aria-hidden="true">#</a> 2）几个包装类</h4><ul><li>数字对象 <code>new Number()</code><ul><li>普通的数字通过包装类赋值后变成对象</li><li>可以增删改查其内部属性</li><li>可以进行计算 <ul><li>但是计算后恢复原来的数字，不再是对象</li></ul></li></ul></li><li>字符串对象 <code>new String()</code><ul><li>特性同上</li></ul></li><li>布尔对象 <code>new Boolean()</code><ul><li>特性同上</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var num = 123; // 普通数字</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数字对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number {[[PrimitiveValue]]: 123}</span>
num<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number {abc: &quot;a&quot;, [[PrimitiveValue]]: 123}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 246</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&quot;bcd&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bcd&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-练习题" tabindex="-1"><a class="header-anchor" href="#_3-练习题" aria-hidden="true">#</a> 3）练习题</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
str <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// new String(test).sign = &#39;...&#39;; delete</span>
  test<span class="token punctuation">.</span>sign <span class="token operator">=</span> <span class="token string">&quot;typeof的返回结果可能是String&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// new String(test).sign</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> sss<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> oPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oPerson<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
oPerson<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token keyword">var</span> oPerson1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oPerson1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y <span class="token operator">=</span> <span class="token punctuation">(</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
y <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
z <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-原型、原型链" tabindex="-1"><a class="header-anchor" href="#七-原型、原型链" aria-hidden="true">#</a> （七）原型、原型链</h2><h3 id="_1-原型-prototype" tabindex="-1"><a class="header-anchor" href="#_1-原型-prototype" aria-hidden="true">#</a> 1.原型 <code>prototype</code></h3><ul><li>原型是 function 的一个属性，它定义了构造函数制造出的对象的公共祖先 <ul><li>通过该构造函数产生的对象，可以继承该原型的属性和方法</li><li>原型也是对象，默认为空对象</li></ul></li><li>利用原型特点和概念，可以提取共有属性</li><li>对象查看原型：隐式属性 <code>obj.__proto__</code></li><li>对象查看构造函数：<code>obj.constructor</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Person.prototype 原型</span>
<span class="token comment">// Person.prototype = {}; 是祖先</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&quot;Deng&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-隐式属性-proto" tabindex="-1"><a class="header-anchor" href="#_2-隐式属性-proto" aria-hidden="true">#</a> 2.隐式属性 <code>__proto__</code></h3><ul><li>new 创建对象时，会在构造函数顶部隐式添加 this</li><li>当 new 创建出来的对象访问某个属性，且构造函数内部没有定义该属性时 <ul><li>会自动沿着 <code>__proto__</code> 指向的值的构造函数寻找该属性</li><li><code>obj.__proto__</code> 可以修改对象的原型，但系统不建议修改</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// var this = {</span>
  <span class="token comment">//   __proto__: Person.prototype</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Sunny&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// person没有name =&gt; Person.prototype.name =&gt; Sunny</span>

<span class="token comment">// 相当于 Person.prototype 换了个内存空间，不再指向原来的地址，但是 this中的__proto__存储的依旧是原来的地址，所以输出仍为原来的值</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Cherry&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Sunny</span>
<span class="token comment">// // 类比</span>
<span class="token comment">// var obj = { name: &quot;a&quot; };</span>
<span class="token comment">// var obj1 = obj;</span>
<span class="token comment">// obj = { name: &quot;b&quot; };</span>
<span class="token comment">// console.log(obj1); // {name: &#39;a&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-原型链" tabindex="-1"><a class="header-anchor" href="#_3-原型链" aria-hidden="true">#</a> 3.原型链</h3><ul><li>原型指向关系形成链式关系，就是原型链 <ul><li>按照 prototype 一级一级往上查找属性</li></ul></li><li><strong>所有对象的最上级原型是 Object</strong><ul><li>Object 有 <code>toString()</code> 和 \`valueOf()</li></ul></li><li><strong>绝大多数</strong> 对象的最终都会继承自 <code>Object.prototype</code><ul><li>使用 <code>Object.create()</code> 创建的对象例外，有可能原型是 <code>null</code></li><li>undefined 和 null 不是原始值，不是对象，没有经过包装类，所以没有 <code>toString()</code> ，即没有原型</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Grand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>

<span class="token class-name">Grand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&quot;Deng&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> grand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Father</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> grand<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Xuming&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> father<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>hobbit <span class="token operator">=</span> <span class="token string">&quot;eat&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-js-的小-bug" tabindex="-1"><a class="header-anchor" href="#_4-js-的小-bug" aria-hidden="true">#</a> 4.JS 的小 Bug</h3><ul><li>计算精度不准 <code>0.14 * 100 =&gt; 14.000000000000002</code></li><li>能正常计算的位数：<code>[小数点前16位, 小数点后16位]</code></li><li>所以要避免小数操作</li><li>无法避免时，应使用以下函数取整 <ul><li><code>Math.ceil()</code> 向上取整</li><li><code>Math.floor()</code> 向下取整</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">123.234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 124</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">123.999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>

<span class="token comment">// 以下输出有精读不准的偏差（不是toFixed的问题）</span>
<span class="token comment">// for (var i = 0; i &lt; 10; i++) {</span>
<span class="token comment">//   var num = Math.random().toFixed(2) * 100;</span>
<span class="token comment">//   console.log(num);</span>
<span class="token comment">// }</span>
<span class="token comment">// 一般先取整再保留两位小数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-call-apply" tabindex="-1"><a class="header-anchor" href="#_5-call-apply" aria-hidden="true">#</a> 5.call() / apply()</h3><ul><li>作用：改变 this 指向</li><li>区别：后面传的参数形式不同</li></ul><h4 id="_1-call" tabindex="-1"><a class="header-anchor" href="#_1-call" aria-hidden="true">#</a> 1）call</h4><ul><li>任何一个方法都可以执行 call()</li><li><code>test()</code> ==&gt; <code>test.call()</code></li><li>构造函数中的 this 在 new 之前默认指向 window <ul><li>new 之后指向当前声明的对象（谁调用函数方法，this 就指向谁）</li><li>call(对象，参数 1，参数 2，...)可以把原构造函数中预设的 this 值全部改为指向参数传的对象 <ul><li>用别人的方法给自己赋值</li><li>参数是别人的构造方法需要的参数（按照形参个数和顺序把实参传进去）</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Deng&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不传参数和正常执行Person()构造函数一样</span>
<span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;Cheng&quot;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将Person构造函数中的this改成指向obj</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name: &quot;Cheng&quot;, age: 300}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 call 可以引用别人写好的构造函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> tel<span class="token punctuation">,</span> grade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// this.name = name;</span>
  <span class="token comment">// this.age = age;</span>
  <span class="token comment">// this.sex = sex;</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;Sunny&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">2017</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-apply" tabindex="-1"><a class="header-anchor" href="#_2-apply" aria-hidden="true">#</a> 2）apply</h4><ul><li>使用和 call 基本一致</li><li>区别：只能传递一个参数，且必须是数组（传递一个 arguments）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="八-继承模式、命名空间、对象枚举" tabindex="-1"><a class="header-anchor" href="#八-继承模式、命名空间、对象枚举" aria-hidden="true">#</a> （八）继承模式、命名空间、对象枚举</h2><h3 id="_1-继承发展史" tabindex="-1"><a class="header-anchor" href="#_1-继承发展史" aria-hidden="true">#</a> 1.继承发展史</h3><ul><li>传统形式——原型链 <ul><li>过多的继承了没用的属性</li></ul></li><li>借用构造函数——call/apply <ul><li>不能继承借用构造函数的原型</li><li>每次构造函数都要多调用一个函数</li></ul></li><li>共享原型/公有原型 <ul><li><code>Son.prototype = Father.prototype</code></li><li>不能随便改动自己的原型</li></ul></li><li>圣杯模式 <ul><li>声明新的构造函数 F 继承自公有原型 Father，目标构造函数 Son 再继承自构造函数 F</li><li>目标构造函数 Son 修改自身原型就不会影响到其他继承自公有原型的构造函数</li><li>但是 Son 本身的构造函数 constructor 指向 Father <ul><li><code>son.__proto__ =&gt; new F().__proto__ =&gt; Father.prototype</code></li></ul></li></ul></li></ul><h4 id="_1-公有原型" tabindex="-1"><a class="header-anchor" href="#_1-公有原型" aria-hidden="true">#</a> 1）公有原型</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">inherit</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;male&quot;，Son改的原型，Father也能用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-圣杯模式" tabindex="-1"><a class="header-anchor" href="#_2-圣杯模式" aria-hidden="true">#</a> 2）圣杯模式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Father.prototype
 * =&gt; function F() <span class="token punctuation">{</span><span class="token punctuation">}</span> F.prototype = Father.prototype
 * =&gt; Son.prototype = new F();
 */</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须先改原型再new</span>
  <span class="token comment">// 目标构造函数归位</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>
  <span class="token comment">// 标记目标构造函数的超类super（真正继承自谁，不是自定义的F）</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// super是关键字，改名uber</span>
<span class="token punctuation">}</span>
<span class="token function">inherit</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">实现圣杯模式</p><ul><li>通俗方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>
  <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>雅虎开源库 YUI3</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// F 形成闭包，称为inherit的私有化变量，不会被外部访问到</span>
  <span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Target<span class="token punctuation">,</span> Origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>
    <span class="token class-name">Target</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Origin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-命名空间" tabindex="-1"><a class="header-anchor" href="#_2-命名空间" aria-hidden="true">#</a> 2.命名空间</h3><ul><li>管理变量，防止污染全局，适用于模块化开发</li></ul><h4 id="_1-旧方法" tabindex="-1"><a class="header-anchor" href="#_1-旧方法" aria-hidden="true">#</a> 1）旧方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> org <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">department1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">jicheng</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">xuming</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">department2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">zhangsan</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lisi</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jicheng <span class="token operator">=</span> org<span class="token punctuation">.</span>department1<span class="token punctuation">.</span>jicheng<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jicheng<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-新方法-——-闭包" tabindex="-1"><a class="header-anchor" href="#_2-新方法-——-闭包" aria-hidden="true">#</a> 2）新方法 —— 闭包</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-访问对象方法" tabindex="-1"><a class="header-anchor" href="#_3-访问对象方法" aria-hidden="true">#</a> 3.访问对象方法</h3><h4 id="_1-普通调用" tabindex="-1"><a class="header-anchor" href="#_1-普通调用" aria-hidden="true">#</a> 1）普通调用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// obj.fn1();</span>
<span class="token comment">// obj.fn2();</span>
<span class="token comment">// obj.fn3();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-连续调用" tabindex="-1"><a class="header-anchor" href="#_2-连续调用" aria-hidden="true">#</a> 2）连续调用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-访问对象属性" tabindex="-1"><a class="header-anchor" href="#_4-访问对象属性" aria-hidden="true">#</a> 4.访问对象属性</h3><ul><li><code>obj.name</code> === <code>obj[&#39;name&#39;]</code></li></ul><h3 id="_5-对象的枚举" tabindex="-1"><a class="header-anchor" href="#_5-对象的枚举" aria-hidden="true">#</a> 5.对象的枚举</h3><ul><li>for...in.. <ul><li>通过对象的属性个数来控制循环次数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(obj.prop + &quot; &quot; + typeof prop); // 错误，obj.prop =&gt; obj[&#39;prop&#39;]，没有prop属性就会输出undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">typeof</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,257),r=[u];function d(k,v){return s(),a("div",null,r)}const h=n(i,[["render",d],["__file","08.html.vue"]]);export{h as default};
