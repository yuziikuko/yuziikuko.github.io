const l=JSON.parse('{"key":"v-5c37c43d","path":"/notes/DuYi/03Strengthen/01.html","title":"一、前端必会算法","lang":"zh-CN","frontmatter":{"title":"一、前端必会算法","copyright":false,"date":"2023-08-25T00:00:00.000Z","category":["笔记","渡一教育","强化课"],"tag":["Panda"]},"headers":[{"level":2,"title":"（一）数据结构与算法","slug":"一-数据结构与算法","link":"#一-数据结构与算法","children":[{"level":3,"title":"1.数据结构","slug":"_1-数据结构","link":"#_1-数据结构","children":[]},{"level":3,"title":"2.算法","slug":"_2-算法","link":"#_2-算法","children":[]}]},{"level":2,"title":"（二）线性数据结构","slug":"二-线性数据结构","link":"#二-线性数据结构","children":[{"level":3,"title":"1.数组","slug":"_1-数组","link":"#_1-数组","children":[]},{"level":3,"title":"2.链表","slug":"_2-链表","link":"#_2-链表","children":[]},{"level":3,"title":"3.线性数据结构的遍历","slug":"_3-线性数据结构的遍历","link":"#_3-线性数据结构的遍历","children":[]},{"level":3,"title":"4.链表的逆置","slug":"_4-链表的逆置","link":"#_4-链表的逆置","children":[]}]},{"level":2,"title":"（三）排序","slug":"三-排序","link":"#三-排序","children":[{"level":3,"title":"1.比较","slug":"_1-比较","link":"#_1-比较","children":[]},{"level":3,"title":"2.交换","slug":"_2-交换","link":"#_2-交换","children":[]},{"level":3,"title":"3.冒泡排序","slug":"_3-冒泡排序","link":"#_3-冒泡排序","children":[]},{"level":3,"title":"4.选择排序","slug":"_4-选择排序","link":"#_4-选择排序","children":[]},{"level":3,"title":"5.简单快速排序","slug":"_5-简单快速排序","link":"#_5-简单快速排序","children":[]},{"level":3,"title":"6.标准快速排序","slug":"_6-标准快速排序","link":"#_6-标准快速排序","children":[]}]},{"level":2,"title":"（四）栈和队列","slug":"四-栈和队列","link":"#四-栈和队列","children":[{"level":3,"title":"1.栈结构","slug":"_1-栈结构","link":"#_1-栈结构","children":[]},{"level":3,"title":"2.队列结构","slug":"_2-队列结构","link":"#_2-队列结构","children":[]}]},{"level":2,"title":"（五）双向链表","slug":"五-双向链表","link":"#五-双向链表","children":[{"level":3,"title":"1.优点","slug":"_1-优点","link":"#_1-优点","children":[]},{"level":3,"title":"2.缺点","slug":"_2-缺点","link":"#_2-缺点","children":[]},{"level":3,"title":"3.实现","slug":"_3-实现","link":"#_3-实现","children":[]}]},{"level":2,"title":"（六）二维数据结构","slug":"六-二维数据结构","link":"#六-二维数据结构","children":[{"level":3,"title":"1.二维拓扑结构（图）","slug":"_1-二维拓扑结构-图","link":"#_1-二维拓扑结构-图","children":[]},{"level":3,"title":"2.邻接表","slug":"_2-邻接表","link":"#_2-邻接表","children":[]}]},{"level":2,"title":"（七）树形结构","slug":"七-树形结构","link":"#七-树形结构","children":[{"level":3,"title":"1.基本特点","slug":"_1-基本特点","link":"#_1-基本特点","children":[]},{"level":3,"title":"2.二叉树","slug":"_2-二叉树","link":"#_2-二叉树","children":[]},{"level":3,"title":"3.二叉树的遍历","slug":"_3-二叉树的遍历","link":"#_3-二叉树的遍历","children":[]},{"level":3,"title":"4.还原二叉树","slug":"_4-还原二叉树","link":"#_4-还原二叉树","children":[]}]},{"level":2,"title":"（八）搜索","slug":"八-搜索","link":"#八-搜索","children":[{"level":3,"title":"1.二叉树的搜索","slug":"_1-二叉树的搜索","link":"#_1-二叉树的搜索","children":[]},{"level":3,"title":"2.二叉树的比较","slug":"_2-二叉树的比较","link":"#_2-二叉树的比较","children":[]},{"level":3,"title":"3.二叉树的 diff 算法","slug":"_3-二叉树的-diff-算法","link":"#_3-二叉树的-diff-算法","children":[]},{"level":3,"title":"4.图的搜索（最小生成树问题）","slug":"_4-图的搜索-最小生成树问题","link":"#_4-图的搜索-最小生成树问题","children":[]},{"level":3,"title":"5.二叉搜索树","slug":"_5-二叉搜索树","link":"#_5-二叉搜索树","children":[]},{"level":3,"title":"6.平衡二叉树（二叉平衡搜索树）","slug":"_6-平衡二叉树-二叉平衡搜索树","link":"#_6-平衡二叉树-二叉平衡搜索树","children":[]},{"level":3,"title":"7.二叉树的单旋","slug":"_7-二叉树的单旋","link":"#_7-二叉树的单旋","children":[]},{"level":3,"title":"8.二叉树的双旋","slug":"_8-二叉树的双旋","link":"#_8-二叉树的双旋","children":[]},{"level":3,"title":"9.234 树","slug":"_9-234-树","link":"#_9-234-树","children":[]},{"level":3,"title":"10.红黑树","slug":"_10-红黑树","link":"#_10-红黑树","children":[]},{"level":3,"title":"11.树的深度优先搜索","slug":"_11-树的深度优先搜索","link":"#_11-树的深度优先搜索","children":[]},{"level":3,"title":"12.树的广度优先搜索","slug":"_12-树的广度优先搜索","link":"#_12-树的广度优先搜索","children":[]},{"level":3,"title":"13.图的深度优先搜索","slug":"_13-图的深度优先搜索","link":"#_13-图的深度优先搜索","children":[]},{"level":3,"title":"14.图的广度优先搜索","slug":"_14-图的广度优先搜索","link":"#_14-图的广度优先搜索","children":[]}]},{"level":2,"title":"（九）动态规划","slug":"九-动态规划","link":"#九-动态规划","children":[{"level":3,"title":"1.斐波那契数列","slug":"_1-斐波那契数列","link":"#_1-斐波那契数列","children":[]},{"level":3,"title":"2.青蛙跳台阶问题","slug":"_2-青蛙跳台阶问题","link":"#_2-青蛙跳台阶问题","children":[]},{"level":3,"title":"3.变态青蛙跳台阶问题","slug":"_3-变态青蛙跳台阶问题","link":"#_3-变态青蛙跳台阶问题","children":[]}]}],"git":{"createdTime":1693118739000,"updatedTime":1693838206000,"contributors":[{"name":"郁子IKUKO","email":"1147998314@qq.com","commits":4}]},"readingTime":{"minutes":30.77,"words":9230},"filePathRelative":"notes/DuYi/03Strengthen/01.md","localizedDate":"2023年8月25日","excerpt":"<h2> （一）数据结构与算法</h2>\\n<h3> 1.数据结构</h3>\\n<ul>\\n<li>可以容纳数据的结构</li>\\n<li>静态</li>\\n</ul>\\n<h3> 2.算法</h3>\\n<ul>\\n<li>对数据结构进行处理的方法</li>\\n<li>动态</li>\\n<li>必须要写严谨性判断，算法程序不允许报错</li>\\n</ul>\\n<h2> （二）线性数据结构</h2>\\n<ul>\\n<li>又称一维数据结构</li>\\n<li>强调存储与顺序</li>\\n<li>几乎没有什么特性</li>\\n</ul>\\n<h3> 1.数组</h3>\\n<ul>\\n<li>申请内存空间由操作系统完成，JS 引擎只能声明需要多大的空间\\n<ul>\\n<li>操作系统不一定将扩容的数据存储在原数组末端</li>\\n<li>会直接开辟新的内存空间，先复制原先的数组内容，再在新数组末端存储扩容的数据</li>\\n<li>数组扩容极大地消耗性能</li>\\n</ul>\\n</li>\\n</ul>"}');export{l as data};
