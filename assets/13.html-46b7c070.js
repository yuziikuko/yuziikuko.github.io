import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as l}from"./app-9d848c41.js";const d={},r=l('<h2 id="_1-虚拟-dom-中-key-的作用" tabindex="-1"><a class="header-anchor" href="#_1-虚拟-dom-中-key-的作用" aria-hidden="true">#</a> 1.虚拟 DOM 中 key 的作用</h2><p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】，随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较，比较规则如下：</p><h2 id="_2-对比规则" tabindex="-1"><a class="header-anchor" href="#_2-对比规则" aria-hidden="true">#</a> 2.对比规则</h2><ul><li><p>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：</p><ul><li><p>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM。</p></li><li><p>若虚拟 DOM 中内容改变，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM。</p></li></ul></li><li><p>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key：</p><ul><li>创建新的真实 DOM，随后渲染到页面中。</li></ul></li></ul><h2 id="_3-用-index-作为-key-可能会引发的问题" tabindex="-1"><a class="header-anchor" href="#_3-用-index-作为-key-可能会引发的问题" aria-hidden="true">#</a> 3.用 index 作为 key 可能会引发的问题</h2><ul><li><p>若对数据进行：逆序添加、逆序删除等破坏顺序的操作：会产生没有必要的真实 DOM 更新 ==&gt; 页面效果没问题，但效率低。</p></li><li><p>如果结构中还包含输入类的 DOM：会产生错误的真实 DOM 更新 ==&gt; 页面效果有问题。</p></li></ul><h2 id="_4-开发中如何选择-key" tabindex="-1"><a class="header-anchor" href="#_4-开发中如何选择-key" aria-hidden="true">#</a> 4.开发中如何选择 key</h2><ul><li><p>最好使用每条数据的唯一标识作为 key，比如 id、手机号、身份证号、学号等唯一值。</p></li><li><p>如果不存对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</p></li></ul>',8),t=[r];function h(n,c){return i(),a("div",null,t)}const p=e(d,[["render",h],["__file","13.html.vue"]]);export{p as default};
