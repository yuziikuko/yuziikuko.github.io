import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as e,e as i}from"./app-1240ea23.js";const l="/assets/redux原理图-3ae7e889.png",r="/assets/react-redux模型图-b0c93c29.png",u={},d=n("h2",{id:"一-redux-理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-redux-理解","aria-hidden":"true"},"#"),s(" （一）Redux 理解")],-1),k=n("h3",{id:"_1-学习文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-学习文档","aria-hidden":"true"},"#"),s(" 1.学习文档")],-1),v={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.redux.org.cn/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/reactjs/redux",target:"_blank",rel:"noopener noreferrer"},h=i('<h3 id="_2-redux-是什么" tabindex="-1"><a class="header-anchor" href="#_2-redux-是什么" aria-hidden="true">#</a> 2.Redux 是什么</h3><ul><li>Redux 是一个专门用于做 <strong>状态管理</strong> 的 JS 库（不是 React 插件库）</li><li>可以用在 React、Angular、Vue 等项目中，但基本与 React 配合使用</li><li>作用：集中式管理 React 应用中多个组件 <strong>共享</strong> 的状态</li></ul><h3 id="_3-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-使用场景" aria-hidden="true">#</a> 3.使用场景</h3><ul><li>某个组件的状态需要让其他组件可以随时拿到（共享）</li><li>一个组件需要改变另一个组件的状态（通信）</li><li>总体原则：能不用就不用，如果不用比较吃力才考虑使用</li></ul><h3 id="_4-工作流程" tabindex="-1"><a class="header-anchor" href="#_4-工作流程" aria-hidden="true">#</a> 4.工作流程</h3><p><img src="'+l+`" alt=""></p><h2 id="二-redux-三个核心概念" tabindex="-1"><a class="header-anchor" href="#二-redux-三个核心概念" aria-hidden="true">#</a> （二）Redux 三个核心概念</h2><h3 id="_1-action" tabindex="-1"><a class="header-anchor" href="#_1-action" aria-hidden="true">#</a> 1.action</h3><ul><li>动作的对象</li><li>包含 2 个属性 <ul><li>type：标识属性，值为字符串，唯一，必要属性</li><li>data：数据属性，值类型任意，可选属性</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ADD_STUDENT&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-reducer" tabindex="-1"><a class="header-anchor" href="#_2-reducer" aria-hidden="true">#</a> 2.reducer</h3><ul><li>用于初始化状态、加工状态</li><li>加工时，根据旧的 <code>state</code> 和 <code>action</code> ，产生新的 <code>state</code> 的 <strong>纯函数</strong></li></ul><h3 id="_3-store" tabindex="-1"><a class="header-anchor" href="#_3-store" aria-hidden="true">#</a> 3.store</h3><ul><li>将 <code>state</code> 、 <code>action</code> 、 <code>reducer</code> 联系在一起的对象</li></ul><h4 id="_1-如何得到该对象" tabindex="-1"><a class="header-anchor" href="#_1-如何得到该对象" aria-hidden="true">#</a> 1）如何得到该对象？</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&quot;./reducers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-此对象的功能" tabindex="-1"><a class="header-anchor" href="#_2-此对象的功能" aria-hidden="true">#</a> 2）此对象的功能？</h4><ul><li><code>getState()</code><ul><li>得到 <code>state</code></li></ul></li><li><code>dispatch(action)</code><ul><li>分发 <code>action</code> ，触发 <code>reducer</code> 调用，产生新的 <code>state</code></li></ul></li><li><code>subscribe(listener)</code><ul><li>注册监听，当产生了新的 <code>state</code> 时，自动调用</li></ul></li></ul><h2 id="三-redux-的核心-api" tabindex="-1"><a class="header-anchor" href="#三-redux-的核心-api" aria-hidden="true">#</a> （三）Redux 的核心 API</h2><h3 id="_1-createstore" tabindex="-1"><a class="header-anchor" href="#_1-createstore" aria-hidden="true">#</a> 1.createStore()</h3><ul><li>作用：创建包含指定 <code>reducer</code> 的 <code>store</code> 对象</li></ul><h3 id="_2-store-对象" tabindex="-1"><a class="header-anchor" href="#_2-store-对象" aria-hidden="true">#</a> 2.store 对象</h3><ul><li>作用：Redux 库最核心的管理对象</li><li>内部维护着 <code>state</code> 、 <code>reducer</code></li><li>核心方法 <ul><li><code>getState()</code></li><li><code>dispatch(action)</code></li><li><code>subscribe(listener)</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;INCREMENT&quot;</span><span class="token punctuation">,</span>
  number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-applymiddleware" tabindex="-1"><a class="header-anchor" href="#_3-applymiddleware" aria-hidden="true">#</a> 3.applyMiddleware()</h3><ul><li>作用：应用上基于 <code>redux</code> 的中间件（插件库）</li></ul><h3 id="_4-combinereducers" tabindex="-1"><a class="header-anchor" href="#_4-combinereducers" aria-hidden="true">#</a> 4.combineReducers()</h3><ul><li>作用：合并多个 <code>reducer</code> 函数</li></ul><h2 id="四-redux-异步编程" tabindex="-1"><a class="header-anchor" href="#四-redux-异步编程" aria-hidden="true">#</a> （四）Redux 异步编程</h2><h3 id="_1-理解" tabindex="-1"><a class="header-anchor" href="#_1-理解" aria-hidden="true">#</a> 1.理解</h3><ul><li><code>redux</code> 默认是不能进行异步处理的</li><li>某些时候应用中需要 <strong>在 <code>redux</code> 中执行异步任务</strong><ul><li>如：ajax 请求、定时器</li></ul></li></ul><h3 id="_2-使用异步中间件" tabindex="-1"><a class="header-anchor" href="#_2-使用异步中间件" aria-hidden="true">#</a> 2.使用异步中间件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> redux-thunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五-react-redux-库" tabindex="-1"><a class="header-anchor" href="#五-react-redux-库" aria-hidden="true">#</a> （五）react-redux 库</h2><p><img src="`+r+`" alt=""></p><h3 id="_1-理解-1" tabindex="-1"><a class="header-anchor" href="#_1-理解-1" aria-hidden="true">#</a> 1.理解</h3><ul><li>一个 Facebook 公司出品的 react 插件库</li><li>专门用来简化 react 应用中使用 redux</li></ul><h3 id="_2-react-redux-将所有组件分成两大类" tabindex="-1"><a class="header-anchor" href="#_2-react-redux-将所有组件分成两大类" aria-hidden="true">#</a> 2.react-redux 将所有组件分成两大类</h3><h4 id="_1-ui-组件" tabindex="-1"><a class="header-anchor" href="#_1-ui-组件" aria-hidden="true">#</a> 1）UI 组件</h4><ul><li>只负责 <code>UI</code> 的呈现，不带有任何业务逻辑</li><li>通过 <code>props</code> 接收数据（一般数据和函数）</li><li>不使用任何 <code>redux</code> 的 API</li><li>一般保存在 <code>components</code> 文件夹下</li></ul><h4 id="_2-容器组件" tabindex="-1"><a class="header-anchor" href="#_2-容器组件" aria-hidden="true">#</a> 2）容器组件</h4><ul><li>负责管理数据和业务逻辑，不负责 <code>UI</code> 的呈现</li><li>使用 <code>redux</code> 的 API</li><li>一般保存在 <code>containers</code> 文件夹下</li></ul><h3 id="_3-相关-api" tabindex="-1"><a class="header-anchor" href="#_3-相关-api" aria-hidden="true">#</a> 3.相关 API</h3><h4 id="_1-provider" tabindex="-1"><a class="header-anchor" href="#_1-provider" aria-hidden="true">#</a> 1）Provider</h4><ul><li>让所有组件都可以得到 <code>state</code> 数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-connect" tabindex="-1"><a class="header-anchor" href="#_2-connect" aria-hidden="true">#</a> 2）connect</h4><ul><li>用于包装 UI 组件生成容器组件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">&quot;./components/Count&quot;</span><span class="token punctuation">;</span>

<span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-mapstatetoprops" tabindex="-1"><a class="header-anchor" href="#_3-mapstatetoprops" aria-hidden="true">#</a> 3）mapStateToProps</h4><ul><li>将外部的数据（即 <code>state</code> 对象）转换为 UI 组件的标签属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-mapdispatchtoprops" tabindex="-1"><a class="header-anchor" href="#_4-mapdispatchtoprops" aria-hidden="true">#</a> 4）mapDispatchToProps</h4><ul><li>将分发 <code>action</code> 的函数转换为 UI 组件的标签属性</li></ul><h2 id="六-使用-redux-调试工具" tabindex="-1"><a class="header-anchor" href="#六-使用-redux-调试工具" aria-hidden="true">#</a> （六）使用 redux 调试工具</h2><h3 id="_1-安装-chrome-浏览器插件" tabindex="-1"><a class="header-anchor" href="#_1-安装-chrome-浏览器插件" aria-hidden="true">#</a> 1.安装 Chrome 浏览器插件</h3><h3 id="_2-项目工程中下载工具依赖包" tabindex="-1"><a class="header-anchor" href="#_2-项目工程中下载工具依赖包" aria-hidden="true">#</a> 2.项目工程中下载工具依赖包</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev redux-devtools-extension
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-store-js-中配置" tabindex="-1"><a class="header-anchor" href="#_3-store-js-中配置" aria-hidden="true">#</a> 3. <code>store.js</code> 中配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入redux-devtools-extension</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> composeWithDevTools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-devtools-extension&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 暴露store</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  allReducer<span class="token punctuation">,</span>
  <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-纯函数和高阶函数" tabindex="-1"><a class="header-anchor" href="#七-纯函数和高阶函数" aria-hidden="true">#</a> （七）纯函数和高阶函数</h2><h3 id="_1-纯函数" tabindex="-1"><a class="header-anchor" href="#_1-纯函数" aria-hidden="true">#</a> 1.纯函数</h3><ul><li>是一类特别的函数 <ul><li>只要是同样的输入（实参），必定得到同样的输出（返回值）</li></ul></li><li>必须遵守以下约束 <ul><li>函数体内不得改写参数数据</li><li>不会产生任何副作用 <ul><li>例如发送网络请求、调用输入和输出设备等</li></ul></li><li>不能调用 <code>Date.now()</code> 或者 <code>Math.random()</code> 等不纯的方法</li></ul></li><li><code>redux</code> 的 <code>reducer</code> 函数必须是一个纯函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/reducers/person.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">personReducer</span><span class="token punctuation">(</span><span class="token parameter">preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(&quot;personReducer&quot;);</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是添加一个人</span>
    <span class="token keyword">case</span> <span class="token constant">ADD_PERSON</span><span class="token operator">:</span>
      <span class="token doc-comment comment">/**
       * 1.redux浅比较后发现数组地址未改变，所以不进行页面更新，应该生成一个新的数组而不是使用数组七大API操作原数组
       * 2.同时这样写修改了参数数据（preState），破坏了纯函数的约束，reducer必须是一个纯函数
       */</span>
      <span class="token comment">// preState.unshift(data);</span>
      <span class="token comment">// return preState;</span>

      <span class="token comment">// 正确写法：生成新数组</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>preState<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-高阶函数" tabindex="-1"><a class="header-anchor" href="#_2-高阶函数" aria-hidden="true">#</a> 2.高阶函数</h3><h4 id="_1-理解-2" tabindex="-1"><a class="header-anchor" href="#_1-理解-2" aria-hidden="true">#</a> 1）理解</h4><ul><li>是一类特别的函数</li><li>情况 1：参数是函数</li><li>情况 2：返回值是函数</li></ul><h4 id="_2-常见的高阶函数" tabindex="-1"><a class="header-anchor" href="#_2-常见的高阶函数" aria-hidden="true">#</a> 2）常见的高阶函数</h4><ul><li>定时器设置函数</li><li>数组的 <code>forEach() / map() / filter() / reduce() / find() / bind()</code></li><li><code>Promise</code></li><li><code>react-redux</code> 中的 <code>connect</code> 函数</li></ul><h4 id="_3-作用" tabindex="-1"><a class="header-anchor" href="#_3-作用" aria-hidden="true">#</a> 3）作用</h4><ul><li>能实现更加动态、更加可扩展的功能</li></ul><h2 id="八-求和案例" tabindex="-1"><a class="header-anchor" href="#八-求和案例" aria-hidden="true">#</a> （八）求和案例</h2><h3 id="_1-redux-精简版" tabindex="-1"><a class="header-anchor" href="#_1-redux-精简版" aria-hidden="true">#</a> 1.redux 精简版</h3><h4 id="_1-去除-count-组件自身的状态" tabindex="-1"><a class="header-anchor" href="#_1-去除-count-组件自身的状态" aria-hidden="true">#</a> 1）去除 <code>Count</code> 组件自身的状态</h4><h4 id="_2-src-下建立以下文件" tabindex="-1"><a class="header-anchor" href="#_2-src-下建立以下文件" aria-hidden="true">#</a> 2）<code>src</code> 下建立以下文件</h4><ul><li><code>/src/redux/store.js</code></li><li><code>/src/redux/count_reducer.js</code></li></ul><h4 id="_3-store-js" tabindex="-1"><a class="header-anchor" href="#_3-store-js" aria-hidden="true">#</a> 3）<code>store.js</code></h4><ul><li>引入 <code>redux</code> 中的 <code>createStore</code> 函数，创建一个 <code>store</code></li><li><code>createStore</code> 调用时要传入一个为其服务的 <code>reducer</code></li><li>记得暴露 <code>store</code> 对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/store.js</span>
<span class="token doc-comment comment">/**
 * 该文件专门用于暴露一个store对象，整个应用只有一个store对象
 */</span>
<span class="token comment">// 引入createStore，专门用于创建redux中最为核心的store对象</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> legacy_createStore <span class="token keyword">as</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Count组件服务的reducer</span>
<span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">&quot;./count_reducer&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 暴露store</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-count-reducer-js" tabindex="-1"><a class="header-anchor" href="#_4-count-reducer-js" aria-hidden="true">#</a> 4）<code>count_reducer.js</code></h4><ul><li><code>reducer</code> 本质是一个函数，接收： <code>preState</code> 、 <code>action</code> ，返回加工后的状态</li><li><code>reducer</code> 有两个作用：初始化状态、加工状态</li><li><code>reducer</code> 第一次被调用时，是 <code>store</code> 自动触发的 <ul><li>传递的 <code>preState</code> 是 <code>undefined</code></li><li>传递的 <code>action</code> 是 <code>{ type: &#39;@@REDUX/INIT_a.2.b.4&#39; }</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/count_reducer.js</span>
<span class="token doc-comment comment">/**
 * 1.该文件是用于创建一个为Count组件服务的reducer，reducer本质是一个纯函数
 * 2.reducer函数会接到两个参数，分别为：之前的状态（preState），动作对象（action）
 */</span>
<span class="token comment">// 初始化状态</span>
<span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 暴露reducer</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">countReducer</span><span class="token punctuation">(</span><span class="token parameter">preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从action对象中获取：type、data</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>
  <span class="token comment">// 根据type决定如何加工数据</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是加</span>
    <span class="token keyword">case</span> <span class="token string">&quot;increment&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState <span class="token operator">+</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 如果是减</span>
    <span class="token keyword">case</span> <span class="token string">&quot;decrement&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState <span class="token operator">-</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 初始化</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-在-index-js-中监测-store-中状态的改变" tabindex="-1"><a class="header-anchor" href="#_5-在-index-js-中监测-store-中状态的改变" aria-hidden="true">#</a> 5）在 <code>index.js</code> 中监测 <code>store</code> 中状态的改变</h4><ul><li>一旦发生改变重新渲染 <code>&lt;App/&gt;</code></li><li><code>redux</code> 只负责管理状态，至于状态的改变驱动页面的展示，需要自己编写</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/index.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 全局监听redux状态改变</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./redux/store&quot;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监测redux中状态的改变，如redux的状态发生了改变，那么重新渲染App组件</span>
store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-redux-完整版" tabindex="-1"><a class="header-anchor" href="#_2-redux-完整版" aria-hidden="true">#</a> 2.redux 完整版</h3><h4 id="_1-新增-count-action-js" tabindex="-1"><a class="header-anchor" href="#_1-新增-count-action-js" aria-hidden="true">#</a> 1）新增 <code>count_action.js</code></h4><ul><li>专门用于创建 <code>action</code> 对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/count_action.js</span>
<span class="token doc-comment comment">/**
 * 该文件专门为Count组件生成action对象
 */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./constant&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createIncrementAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">INCREMENT</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createDecrementAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">DECREMENT</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-新增-constant-js" tabindex="-1"><a class="header-anchor" href="#_2-新增-constant-js" aria-hidden="true">#</a> 2）新增 <code>constant.js</code></h4><ul><li>放置容易写错的 <code>type</code> 值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/constant.js</span>
<span class="token doc-comment comment">/**
 * 该模块是用于定义action对象中type类型的常量值
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">&quot;increment&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DECREMENT</span> <span class="token operator">=</span> <span class="token string">&quot;decrement&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改-count-reducer-js" tabindex="-1"><a class="header-anchor" href="#_3-修改-count-reducer-js" aria-hidden="true">#</a> 3）修改 <code>count_reducer.js</code></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/count_reducer.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./constant&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">countReducer</span><span class="token punctuation">(</span><span class="token parameter">preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">INCREMENT</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState <span class="token operator">+</span> data<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">DECREMENT</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState <span class="token operator">-</span> data<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> preState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-redux-异步-action-版" tabindex="-1"><a class="header-anchor" href="#_3-redux-异步-action-版" aria-hidden="true">#</a> 3.redux 异步 action 版</h3><h4 id="_1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-使用场景" aria-hidden="true">#</a> 1）使用场景</h4><ul><li>延迟的动作不想交给组件自身，想交给 <code>action</code></li></ul><h4 id="_2-何时需要" tabindex="-1"><a class="header-anchor" href="#_2-何时需要" aria-hidden="true">#</a> 2）何时需要</h4><ul><li>想要对状态进行操作，但是具体的数据靠异步任务返回</li></ul><h4 id="_3-具体编码" tabindex="-1"><a class="header-anchor" href="#_3-具体编码" aria-hidden="true">#</a> 3）具体编码</h4><ul><li><code>yarn add redux-thunk</code>，并配置在 <code>store</code> 中</li><li>创建 <code>action</code> 的函数不再返回一般对象，而是一个函数，该函数中写 <strong>异步任务</strong><ul><li>异步任务有结果后，分发一个 <strong>同步</strong> 的 <code>action</code> 去真正操作数据</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>异步 <code>action</code> 不是必须要写的</p><p>完全可以自己等待异步任务的结果再去分发同步 <code>action</code></p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/components/Count/index.jsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createIncrementAsyncAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../redux/count_action&quot;</span><span class="token punctuation">;</span>
<span class="token function-variable function">incrementAsync</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAsyncAction</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/count_action.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">INCREMENT</span><span class="token punctuation">,</span> <span class="token constant">DECREMENT</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./constant&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 同步action，就是指action的值为Object类型的一般对象</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createIncrementAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">INCREMENT</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createDecrementAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">DECREMENT</span><span class="token punctuation">,</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 异步action，就是指action的值为函数，因为函数体内能开启异步任务
 * 异步action中一般会调用同步action
 * 异步action不是必须要用的
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createIncrementAsyncAction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/store.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> legacy_createStore <span class="token keyword">as</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Count组件服务的reducer</span>
<span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">&quot;./count_reducer&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入redux-thunk用于支持异步action</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 暴露store</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-react-redux-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-react-redux-基本使用" aria-hidden="true">#</a> 4.react-redux 基本使用</h3><h4 id="_1-明确两个概念" tabindex="-1"><a class="header-anchor" href="#_1-明确两个概念" aria-hidden="true">#</a> 1）明确两个概念</h4><ul><li>UI 组件 <ul><li>不能使用任何 <code>redux</code> 的 API</li><li>只负责 <strong>页面的呈现、交互</strong> 等</li></ul></li><li>容器组件 <ul><li>负责和 <code>redux</code> <strong>通信</strong></li><li>将结果交给 UI 组件</li></ul></li></ul><h4 id="_2-如何创建一个容器组件" tabindex="-1"><a class="header-anchor" href="#_2-如何创建一个容器组件" aria-hidden="true">#</a> 2）如何创建一个容器组件</h4><ul><li>使用 <code>react-redux</code> 的 <code>connect</code> 函数 <ul><li><code>connect(mapStateToProps, mapDispatchToProps)(UI组件)</code></li></ul></li><li><code>mapStateToProps</code><ul><li>映射状态，返回值是一个对象</li></ul></li><li><code>mapDispatchToProps</code><ul><li>映射操作状态的方法，返回值是一个对象</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>容器组件中的 <code>store</code> 是靠 <code>props</code> 传进去的，而不是在容器组件中直接引入</p><p><code>mapDispatchToProps</code> 也可以是一个对象</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/components/Count/index.jsx</span>
<span class="token function-variable function">incrementOdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jia</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/App.jsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Count <span class="token keyword">from</span> <span class="token string">&quot;./containers/Count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入store</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./redux/store&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token comment">/* 给容器组件传递store */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>Count store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/containers/Count/index.jsx</span>
<span class="token comment">// 引入Count的UI组件</span>
<span class="token keyword">import</span> CountUI <span class="token keyword">from</span> <span class="token string">&quot;../../components/Count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入action</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  createIncrementAction<span class="token punctuation">,</span>
  createDecrementAction<span class="token punctuation">,</span>
  createIncrementAsyncAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../redux/count_action&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入connect用于连接UI组件与redux</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1.mapStateToProps函数用于传递状态
 * 2.mapStateToProps函数返回的是一个对象
 * 3.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1.mapDispatchToProps函数用于传递操作状态的方法
 * 2.mapDispatchToProps函数返回的是一个对象
 * 3.返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">jia</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">jian</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createDecrementAction</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">jiaAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAsyncAction</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用connect()()创建并暴露一个Count的容器组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>CountUI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-react-redux-代码优化版" tabindex="-1"><a class="header-anchor" href="#_5-react-redux-代码优化版" aria-hidden="true">#</a> 5.react-redux 代码优化版</h3><h4 id="_1-mapdispatchtoprops-的简写" tabindex="-1"><a class="header-anchor" href="#_1-mapdispatchtoprops-的简写" aria-hidden="true">#</a> 1）mapDispatchToProps 的简写</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/containers/Count/index.jsx</span>
<span class="token comment">// 引入Count的UI组件</span>
<span class="token keyword">import</span> CountUI <span class="token keyword">from</span> <span class="token string">&quot;../../components/Count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入action</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  createIncrementAction<span class="token punctuation">,</span>
  createDecrementAction<span class="token punctuation">,</span>
  createIncrementAsyncAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../redux/count_action&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入connect用于连接UI组件与redux</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用connect()()创建并暴露一个Count的容器组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// mapDispatchToProps写法一：一般写法，是一个函数</span>
  <span class="token comment">// (dispatch) =&gt; ({</span>
  <span class="token comment">//   jia: (number) =&gt; dispatch(createIncrementAction(number)),</span>
  <span class="token comment">//   jian: (number) =&gt; dispatch(createDecrementAction(number)),</span>
  <span class="token comment">//   jiaAsync: (number, time) =&gt;</span>
  <span class="token comment">//     dispatch(createIncrementAsyncAction(number, time)),</span>
  <span class="token comment">// })</span>

  <span class="token comment">// mapDispatchToProps写法二：简写，是一个对象</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">jia</span><span class="token operator">:</span> createIncrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jian</span><span class="token operator">:</span> createDecrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jiaAsync</span><span class="token operator">:</span> createIncrementAsyncAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>CountUI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-入口文件" tabindex="-1"><a class="header-anchor" href="#_2-入口文件" aria-hidden="true">#</a> 2）入口文件</h4><ul><li>不需要监听页面状态改变， <code>react-redux</code> 的容器组件自动监测</li><li>使用 <code>Provider</code> 为 <code>App</code> 下的所有组件一次性提供 <code>store</code> ，<code>App</code> 组件不需要给容器组件传递 <code>store</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入store</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./redux/store&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/App.jsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Count <span class="token keyword">from</span> <span class="token string">&quot;./containers/Count&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-项目文件层级" tabindex="-1"><a class="header-anchor" href="#_3-项目文件层级" aria-hidden="true">#</a> 3）项目文件层级</h4><ul><li>UI 组件和容器组件整合成一个 <code>jsx</code> 文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/containers/Count/index.jsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入action</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  createIncrementAction<span class="token punctuation">,</span>
  createDecrementAction<span class="token punctuation">,</span>
  createIncrementAsyncAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../redux/count_action&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入connect用于连接UI组件与redux</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 定义UI组件</span>
<span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token string">&quot;看日漫&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jia</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jian</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">incrementOdd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jia</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">incrementAsync</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectValue<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">jiaAsync</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&quot;UI组件接收到的props是：&quot;, this.props);</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>当前求和为：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>select ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectValue <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;1&quot;</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;2&quot;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">&quot;3&quot;</span><span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>decrement<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>incrementOdd<span class="token punctuation">}</span><span class="token operator">&gt;</span>奇数加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>incrementAsync<span class="token punctuation">}</span><span class="token operator">&gt;</span>异步加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用connect()()创建并暴露一个Count的容器组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">jia</span><span class="token operator">:</span> createIncrementAction<span class="token punctuation">,</span>
  <span class="token literal-property property">jian</span><span class="token operator">:</span> createDecrementAction<span class="token punctuation">,</span>
  <span class="token literal-property property">jiaAsync</span><span class="token operator">:</span> createIncrementAsyncAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-一个组件要和-reducer-打交道-要经过哪几步" tabindex="-1"><a class="header-anchor" href="#_4-一个组件要和-reducer-打交道-要经过哪几步" aria-hidden="true">#</a> 4）一个组件要和 reducer “打交道”要经过哪几步？</h4><ul><li>定义好 UI 组件 —— 不暴露</li><li>引入 <code>connect</code> 生成一个容器组件，并暴露</li><li>在 UI 组件中通过 <code>this.props.xxxxx</code> 读取和操作状态</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 映射状态</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> xxxxAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token comment">// 映射操作状态的方法</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">UI</span>组件<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-react-redux-数据共享版" tabindex="-1"><a class="header-anchor" href="#_6-react-redux-数据共享版" aria-hidden="true">#</a> 6.react-redux 数据共享版</h3><ul><li>定义一个 <code>Person</code> 组件，和 <code>Count</code> 组件通过 <code>redux</code> 共享数据</li><li>为 <code>Person</code> 组件编写： <code>reducer</code> 、 <code>action</code> ，配置 <code>constant</code> 常量</li><li>Person 的 reducer 和 Count 的 reducer 要使用 <code>combineReducers</code> 进行合并，合并后的总状态是一个对象</li><li>交给 <code>store</code> 的是总的 <code>reducer</code> ，最后注意在组件汇总取出状态的时候，记得“取到位”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/store.js</span>
<span class="token doc-comment comment">/**
 * 该文件专门用于暴露一个store对象，整个应用只有一个store对象
 */</span>
<span class="token comment">// 引入createStore，专门用于创建redux中最为核心的store对象</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  legacy_createStore <span class="token keyword">as</span> createStore<span class="token punctuation">,</span>
  applyMiddleware<span class="token punctuation">,</span>
  combineReducers<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Count组件服务的reducer</span>
<span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">&quot;./reducers/count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Person组件服务的reducer</span>
<span class="token keyword">import</span> personReducer <span class="token keyword">from</span> <span class="token string">&quot;./reducers/person&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入redux-thunk用于支持异步action</span>
<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// combineReducers传入的对象就是redux保存的总状态对象</span>
<span class="token comment">// 汇总所有reducers</span>
<span class="token keyword">const</span> allReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">he</span><span class="token operator">:</span> countReducer<span class="token punctuation">,</span>
  <span class="token literal-property property">rens</span><span class="token operator">:</span> personReducer<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 暴露store</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>allReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/containers/Count/index.jsx</span>
<span class="token comment">// 使用connect()()创建并暴露一个Count的容器组件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>he<span class="token punctuation">,</span>
    <span class="token literal-property property">renshu</span><span class="token operator">:</span> state<span class="token punctuation">.</span>rens<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">jia</span><span class="token operator">:</span> createIncrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jian</span><span class="token operator">:</span> createDecrementAction<span class="token punctuation">,</span>
    <span class="token literal-property property">jiaAsync</span><span class="token operator">:</span> createIncrementAsyncAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/containers/Person/index.jsx</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">yiduiren</span><span class="token operator">:</span> state<span class="token punctuation">.</span>rens<span class="token punctuation">,</span>
    <span class="token literal-property property">qiuhe</span><span class="token operator">:</span> state<span class="token punctuation">.</span>he<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">jiaYiRen</span><span class="token operator">:</span> createAddPersonAction<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-react-redux-最终版" tabindex="-1"><a class="header-anchor" href="#_7-react-redux-最终版" aria-hidden="true">#</a> 7.react-redux 最终版</h3><ul><li>所有变量名字要规范，尽量触发对象的简写形式</li><li><code>reducers</code> 文件夹中，编写 <code>index.js</code> 专门用于汇总并暴露所有的 <code>reducer</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/reducers/index.js</span>
<span class="token doc-comment comment">/**
 * 该文件用于汇总所有的reducer为一个总的reducer
 */</span>

<span class="token comment">// 引入combineReducers用于汇总多个reducer</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Count组件服务的reducer</span>
<span class="token keyword">import</span> count <span class="token keyword">from</span> <span class="token string">&quot;./count&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 引入为Person组件服务的reducer</span>
<span class="token keyword">import</span> persons <span class="token keyword">from</span> <span class="token string">&quot;./person&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// combineReducers传入的对象就是redux保存的总状态对象</span>
<span class="token comment">// 汇总所有reducers</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  count<span class="token punctuation">,</span>
  persons<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// /src/redux/store.js</span>
<span class="token comment">// 引入汇总之后的reducer</span>
<span class="token keyword">import</span> reducers <span class="token keyword">from</span> <span class="token string">&quot;./reducers&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 暴露store</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducers<span class="token punctuation">,</span>
  <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,136);function y(g,x){const a=p("ExternalLinkIcon");return o(),c("div",null,[d,k,n("ul",null,[n("li",null,[s("英文文档: "),n("a",v,[s("https://redux.js.org/"),e(a)])]),n("li",null,[s("中文文档: "),n("a",m,[s("http://www.redux.org.cn/"),e(a)])]),n("li",null,[s("Github: "),n("a",b,[s("https://github.com/reactjs/redux"),e(a)])])]),h])}const _=t(u,[["render",y],["__file","07.html.vue"]]);export{_ as default};
