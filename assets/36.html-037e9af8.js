import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-1ca76096.js";const t={},i=e(`<h2 id="一-发送-ajax-请求" tabindex="-1"><a class="header-anchor" href="#一-发送-ajax-请求" aria-hidden="true">#</a> （一）发送 Ajax 请求</h2><h3 id="_1-请求方式" tabindex="-1"><a class="header-anchor" href="#_1-请求方式" aria-hidden="true">#</a> 1.请求方式</h3><h4 id="_1-xhr" tabindex="-1"><a class="header-anchor" href="#_1-xhr" aria-hidden="true">#</a> 1）XHR</h4><ul><li>JS 内置，可以直接创建 XMLHttpRequest 实例对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-jquery" tabindex="-1"><a class="header-anchor" href="#_2-jquery" aria-hidden="true">#</a> 2）JQuery</h4><ul><li>核心是 DOM 操作，不适用于 Vue 项目</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-axios" tabindex="-1"><a class="header-anchor" href="#_3-axios" aria-hidden="true">#</a> 3）Axios</h4><ul><li>体积小，约为 JQuery 的 1/4</li><li>Promise 风格，支持响应拦截器、请求拦截器</li><li>Vue 官方推荐</li></ul><h4 id="_4-fetch" tabindex="-1"><a class="header-anchor" href="#_4-fetch" aria-hidden="true">#</a> 4）Fetch</h4><ul><li>也是 JS 内置，可以直接使用 fetch() 方法</li><li>也是 Promise 风格</li><li>返回的数据会封装在两层 Promise 里（需要.then 两次），且有兼容性问题（IE）</li></ul><h4 id="_5-vue-resource" tabindex="-1"><a class="header-anchor" href="#_5-vue-resource" aria-hidden="true">#</a> 5）vue-resource</h4><ul><li>了解即可，vue1.0 常用，起初是 vue 团队维护，后期外包出去，是 vue 中的插件库</li><li>是对 XHR 的封装</li></ul><h3 id="_2-解决跨域" tabindex="-1"><a class="header-anchor" href="#_2-解决跨域" aria-hidden="true">#</a> 2.解决跨域</h3><h4 id="_1-cors" tabindex="-1"><a class="header-anchor" href="#_1-cors" aria-hidden="true">#</a> 1）CORS</h4><ul><li>最标准的解决方式，后端操作</li><li>在服务器中返回响应时加几个响应头</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-jsonp" tabindex="-1"><a class="header-anchor" href="#_2-jsonp" aria-hidden="true">#</a> 2）JSONP</h4><ul><li>借助 script 标签的 src 属性 <strong>在引入外部资源时不受同源策略限制</strong> 的特性实现【面试常问】</li><li>开发极其少用，需要前后端一起配置，且只能解决 GET 请求跨域问题</li></ul><h4 id="_3-配置代理服务器" tabindex="-1"><a class="header-anchor" href="#_3-配置代理服务器" aria-hidden="true">#</a> 3）配置代理服务器</h4><ul><li>开发常用</li><li>代理服务器与本地域名、端口保持一致(localhost:8080) <ul><li>前端(localhost:8080)向代理服务器请求数据</li><li>后端(localhost:5000)把数据交给代理服务器</li></ul></li><li>前端请求时不违反同源策略则没有跨域问题 <ul><li>代理服务器与后端服务器请求时不用 ajax（ajax 是前端技术），所以不存在跨域问题</li><li>服务器之间通信用 HTTP 请求</li></ul></li><li>开启方式： <ul><li>Nginx：较复杂，需后端基础</li><li>Vue-CLI：借助脚手架</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果前端请求的资源代理服务器本身就有，那就不会再去请求后端服务器</p><p>所以前端请求路径要精确到文件扩展名，如：http://192.168.3.98:8080/students</p></div><h2 id="二-vue-脚手架配置代理" tabindex="-1"><a class="header-anchor" href="#二-vue-脚手架配置代理" aria-hidden="true">#</a> （二）Vue 脚手架配置代理</h2><h3 id="_1-方法一" tabindex="-1"><a class="header-anchor" href="#_1-方法一" aria-hidden="true">#</a> 1.方法一</h3><h4 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用" aria-hidden="true">#</a> 1）使用</h4><ul><li>在 vue.config.js 中添加如下配置：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">&quot;http://192.168.3.98:5000&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-说明" tabindex="-1"><a class="header-anchor" href="#_2-说明" aria-hidden="true">#</a> 2）说明</h4><ul><li>优点：配置简单，请求资源时直接发给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活地控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</li></ul><h3 id="_2-方法二" tabindex="-1"><a class="header-anchor" href="#_2-方法二" aria-hidden="true">#</a> 2.方法二</h3><h4 id="_1-使用-1" tabindex="-1"><a class="header-anchor" href="#_1-使用-1" aria-hidden="true">#</a> 1）使用</h4><ul><li>编写 vue.config.js 配置具体代理规则：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * changeOrigin设置为true时，服务器收到的请求头中的Host为：localhost:5000
 * changeOrigin设置为false时，服务器收到的请求头中的Host为：localhost:8080
 * changeOrigin默认值为true
 */</span>
<span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/api1&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//匹配所有以&#39;/api1&#39;开头的请求路径</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://192.168.3.98:5000&quot;</span><span class="token punctuation">,</span> <span class="token comment">//代理目标的基础路径</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;^/api1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;/api2&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//匹配所有以&#39;/api2&#39;开头的请求路径</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://192.168.3.98:5001&quot;</span><span class="token punctuation">,</span> <span class="token comment">//代理目标的基础路径</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;^/api2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-说明-1" tabindex="-1"><a class="header-anchor" href="#_2-说明-1" aria-hidden="true">#</a> 2）说明</h4><ul><li>优点：可以配置多个代理，且可以灵活地控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ul>`,36),p=[i];function l(r,o){return n(),s("div",null,p)}const d=a(t,[["render",l],["__file","36.html.vue"]]);export{d as default};
