const n=JSON.parse(`{"key":"v-71de969c","path":"/notes/ECMAScript6-11/09.html","title":"九、扩展运算符","lang":"zh-CN","frontmatter":{"title":"九、扩展运算符","copyright":false,"date":"2023-01-01T00:00:00.000Z","category":["笔记","ECMAScript"],"tag":["尚硅谷","李强"]},"headers":[{"level":2,"title":"（一）... 运算符","slug":"一-运算符","link":"#一-运算符","children":[]},{"level":2,"title":"（二）应用","slug":"二-应用","link":"#二-应用","children":[{"level":3,"title":"1.数组的合并","slug":"_1-数组的合并","link":"#_1-数组的合并","children":[]},{"level":3,"title":"2.数组的克隆","slug":"_2-数组的克隆","link":"#_2-数组的克隆","children":[]},{"level":3,"title":"3.将伪数组转为真正的数组","slug":"_3-将伪数组转为真正的数组","link":"#_3-将伪数组转为真正的数组","children":[]}]}],"git":{"createdTime":1672650149000,"updatedTime":1689308920000,"contributors":[{"name":"郁子IKUKO","email":"1147998314@qq.com","commits":2}]},"readingTime":{"minutes":1.31,"words":392},"filePathRelative":"notes/ECMAScript6-11/09.md","localizedDate":"2023年1月1日","excerpt":"<ul>\\n<li>扩展运算符 <code>...</code> 能将数组转换为逗号分隔的参数序列</li>\\n</ul>\\n<h2> （一）<code>...</code> 运算符</h2>\\n<ul>\\n<li><code>rest</code> 参数是放在函数声明时 <strong>形参</strong> 的位置</li>\\n<li><code>...</code> 扩展运算符是放在调用函数时 <strong>实参</strong> 的位置</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 声明一个数组</span>\\n<span class=\\"token keyword\\">const</span> comic <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"恶役\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"恋爱\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"大女主\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 使用 ... 转换为 '恶役', '恋爱', '大女主'</span>\\n<span class=\\"token comment\\">// 声明一个函数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">cartoon</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>arguments<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">cartoon</span><span class=\\"token punctuation\\">(</span>comic<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// Arguments [Array(3), callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>\\n\\n<span class=\\"token function\\">cartoon</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span>comic<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 相当于cartoon('恶役', '恋爱', '大女主');</span>\\n<span class=\\"token comment\\">// Arguments(3) ['恶役', '恋爱', '大女主', callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
