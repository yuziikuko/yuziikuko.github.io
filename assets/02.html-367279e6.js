const e=JSON.parse('{"key":"v-327bfa58","path":"/notes/TypeScript/02.html","title":"二、TypeScript的基本类型","lang":"zh-CN","frontmatter":{"title":"二、TypeScript的基本类型","copyright":false,"date":"2022-11-26T00:00:00.000Z","category":["笔记","TypeScript"],"tag":["尚硅谷","李立超"]},"headers":[{"level":2,"title":"（一）类型声明","slug":"一-类型声明","link":"#一-类型声明","children":[{"level":3,"title":"1.先声明再赋值","slug":"_1-先声明再赋值","link":"#_1-先声明再赋值","children":[]},{"level":3,"title":"2.声明时赋值","slug":"_2-声明时赋值","link":"#_2-声明时赋值","children":[]},{"level":3,"title":"3.自动类型判断","slug":"_3-自动类型判断","link":"#_3-自动类型判断","children":[]}]},{"level":2,"title":"（二）基本类型","slug":"二-基本类型","link":"#二-基本类型","children":[{"level":3,"title":"1.字面量","slug":"_1-字面量","link":"#_1-字面量","children":[]},{"level":3,"title":"2.any","slug":"_2-any","link":"#_2-any","children":[]},{"level":3,"title":"3.unknown","slug":"_3-unknown","link":"#_3-unknown","children":[]},{"level":3,"title":"4.void","slug":"_4-void","link":"#_4-void","children":[]},{"level":3,"title":"5.never","slug":"_5-never","link":"#_5-never","children":[]},{"level":3,"title":"6.object","slug":"_6-object","link":"#_6-object","children":[]},{"level":3,"title":"7.array","slug":"_7-array","link":"#_7-array","children":[]},{"level":3,"title":"8.tuple","slug":"_8-tuple","link":"#_8-tuple","children":[]},{"level":3,"title":"9.enum","slug":"_9-enum","link":"#_9-enum","children":[]}]},{"level":2,"title":"（三）类型别名","slug":"三-类型别名","link":"#三-类型别名","children":[]}],"git":{"createdTime":1669816769000,"updatedTime":1689506602000,"contributors":[{"name":"郁子IKUKO","email":"1147998314@qq.com","commits":3}]},"readingTime":{"minutes":4.64,"words":1393},"filePathRelative":"notes/TypeScript/02.md","localizedDate":"2022年11月26日","excerpt":"<h2> （一）类型声明</h2>\\n<ul>\\n<li>通过类型声明可以指定 TS 中变量（参数、形参）的类型</li>\\n<li>指定类型后，当为变量赋值时，TS 编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</li>\\n<li>类型声明给变量设置了类型，使得变量只能存储某种类型的值</li>\\n<li>语法：</li>\\n</ul>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">let</span> 变量<span class=\\"token operator\\">:</span> 类型<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> 变量<span class=\\"token operator\\">:</span> 类型 <span class=\\"token operator\\">=</span> 值<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">fn</span><span class=\\"token punctuation\\">(</span>参数<span class=\\"token operator\\">:</span> 类型<span class=\\"token punctuation\\">,</span> 参数<span class=\\"token operator\\">:</span> 类型<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> 类型 <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// ......</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{e as data};
