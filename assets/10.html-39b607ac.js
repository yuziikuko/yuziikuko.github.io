import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-1240ea23.js";const o={},e=t(`<h2 id="一-symbol-简介" tabindex="-1"><a class="header-anchor" href="#一-symbol-简介" aria-hidden="true">#</a> （一）Symbol 简介</h2><ul><li>JS 的第七种数据类型，表示独一无二的值 <ul><li><code>Symbol</code> 值唯一，用于解决命名冲突的问题</li><li><code>Symbol</code> 值不能与其他数据进行运算【四则运算、字符串拼接、大小比较等】</li><li><code>Symbol</code> 定义的对象属性不能使用 <code>for...in</code> 循环遍历，但是可以使用 <code>Reflect.ownKeys</code> 来获取对象的所有键名</li></ul></li><li>JS 所有数据类型：USONB =&gt; you are so nubility <ul><li>U： <code>undefined</code></li><li>S： <code>string</code> 、 <code>symbol</code></li><li>O： <code>object</code></li><li>N： <code>null</code> 、 <code>number</code></li><li>B： <code>boolean</code></li></ul></li></ul><h3 id="_1-创建-symbol" tabindex="-1"><a class="header-anchor" href="#_1-创建-symbol" aria-hidden="true">#</a> 1.创建 Symbol</h3><ul><li>内部实现了唯一性，外部不可见</li><li><code>Symbol</code> 是一个函数对象</li></ul><h4 id="_1-方式一-symbol-是一个函数" tabindex="-1"><a class="header-anchor" href="#_1-方式一-symbol-是一个函数" aria-hidden="true">#</a> 1）方式一：Symbol 是一个函数</h4><ul><li><code>Symbol()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Symbol() &#39;symbol&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-方式二-symbol-是一个函数" tabindex="-1"><a class="header-anchor" href="#_2-方式二-symbol-是一个函数" aria-hidden="true">#</a> 2）方式二：Symbol 是一个函数</h4><ul><li>传入一个描述性字符串，用于区分所定义的 <code>Symbol</code> 变量</li><li>标注当前 <code>Symbol</code> 变量的作用/意义，只是一个标志但是返回结果不同</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;ikuko&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;ikuko&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2 <span class="token operator">===</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-方式三-symbol-是一个对象" tabindex="-1"><a class="header-anchor" href="#_3-方式三-symbol-是一个对象" aria-hidden="true">#</a> 3）方式三：Symbol 是一个对象</h4><ul><li>通过 <code>.for()</code> 创建的 <code>Symbol</code> 对象</li><li>可以通过传入的字符串得出唯一的 <code>Symbol</code> 值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;ikuko&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s4<span class="token punctuation">,</span> <span class="token keyword">typeof</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Symbol(ikuko) &#39;symbol&#39;</span>

<span class="token keyword">let</span> s5 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;ikuko&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s6 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;yg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s4 <span class="token operator">===</span> s5<span class="token punctuation">,</span> s4 <span class="token operator">===</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-symbol-不能与其他数据进行运算" tabindex="-1"><a class="header-anchor" href="#_2-symbol-不能与其他数据进行运算" aria-hidden="true">#</a> 2.Symbol 不能与其他数据进行运算</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> r1 <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r2 <span class="token operator">=</span> s <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r3 <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r4 <span class="token operator">=</span> s <span class="token operator">+</span> s<span class="token punctuation">;</span>
<span class="token comment">// Cannot convert a Symbol value to a number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-symbol-创建对象属性" tabindex="-1"><a class="header-anchor" href="#二-symbol-创建对象属性" aria-hidden="true">#</a> （二）Symbol 创建对象属性</h2><ul><li>使用 <code>Symbol</code> 给对象添加属性或方法，确保独一无二</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 向对象中添加方法 up down</span>
<span class="token comment">// 该对象结构较复杂，无法判断对象内部是否已经有up或down方法</span>
<span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;2048&quot;</span><span class="token punctuation">,</span>
  <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;自带的up方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;自带的down方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 以下写法有风险：如果对象内部有同名方法，会造成冲突</span>
game<span class="token punctuation">.</span><span class="token function-variable function">up</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
game<span class="token punctuation">.</span><span class="token function-variable function">down</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-方式一-声明一个对象" tabindex="-1"><a class="header-anchor" href="#_1-方式一-声明一个对象" aria-hidden="true">#</a> 1.方式一：声明一个对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">up</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">down</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>up<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我可以改变形状。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>down<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我可以快速下降。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {name: &#39;2048&#39;, up: ƒ, down: ƒ, Symbol(): ƒ, Symbol(): ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-方式二-使用-symbol" tabindex="-1"><a class="header-anchor" href="#_2-方式二-使用-symbol" aria-hidden="true">#</a> 2.方式二：使用 Symbol</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> youxi <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;狼人杀&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// Symbol(): function() {}</span>
  <span class="token comment">// 报错，因为【Symbol()不是一个固定属性，是动态值，是一个表达式】</span>

  <span class="token comment">// [Symbol()]: function(){}</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;say&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我可以发言。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;zibao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我可以自爆。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>youxi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {name: &#39;狼人杀&#39;, Symbol(say): ƒ, Symbol(zibao): ƒ}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-symbol-内置值" tabindex="-1"><a class="header-anchor" href="#三-symbol-内置值" aria-hidden="true">#</a> （三）Symbol 内置值</h2><ul><li><code>ES6</code> 可以定义自己使用的 <code>Symbol</code> 值 <ul><li>还提供了 11 个内置的 <code>Symbol</code> 值</li><li>指向语言内部使用的方法</li></ul></li><li>Symbol 内置值： <code>Symbol.XXX</code><ul><li>其中 <code>XXX</code> 就是 <code>Symbol</code> 对象的属性</li><li><code>Symbol.XXX</code> 整体又作为 <code>Symbol</code> 声明的对象的属性</li><li>使用内置值可以改变 <code>Symbol</code> 对象在特定场景下的表现结果，扩展对象功能</li></ul></li><li>这些内置值都是在特定场景下自动触发的，不需手动调用 <ul><li>如使用 <code>concat</code> 时自动调用 <code>Symbol.isConcatSpreadable</code></li></ul></li></ul><table><thead><tr><th>内置值</th><th>说明</th></tr></thead><tbody><tr><td><code>Symbol.hasInstance</code></td><td>其他对象使用 <code>instanceof</code> 运算符时，判断是否为该对象的实例</td></tr><tr><td><code>Symbol.isConcatSpreadable</code></td><td>该对象用于 <code>Array.prototype.concat()</code> 时，是否可以展开</td></tr><tr><td><code>Symbol.unscopables</code></td><td>使用 <code>with</code> 关键字时，哪些属性被 with 环境排除</td></tr><tr><td><code>Symbol.match</code></td><td>使用 <code>str.match(obj)</code> 时，如果 obj 属性存在则调用，并返回该方法的返回值</td></tr><tr><td><code>Symbol.replace</code></td><td>对象被 <code>str.replace(obj)</code> 调用时，返回该方法的返回值</td></tr><tr><td><code>Symbol.search</code></td><td>对象被 <code>str.search(obj)</code> 调用时，返回该方法的返回值</td></tr><tr><td><code>Symbol.split</code></td><td>对象被 <code>str.split(obj)</code> 调用时，返回该方法的返回值</td></tr><tr><td><code>Symbol.iterator</code></td><td>对象进行 <code>for...of</code> 循环时，返回该对象的默认遍历器</td></tr><tr><td><code>Symbol.toPrimitive</code></td><td>对象被转为原始类型值时，返回该对象对应的原始类型值</td></tr><tr><td><code>Symbol.toStringTag</code></td><td>对象调用 <code>toString</code> 时，返回该方法的返回值</td></tr><tr><td><code>Symbol.species</code></td><td>创建衍生对象时使用该属性</td></tr></tbody></table><h3 id="_1-symbol-hasinstance" tabindex="-1"><a class="header-anchor" href="#_1-symbol-hasinstance" aria-hidden="true">#</a> 1.Symbol.hasInstance</h3><ul><li>自定义类型检测的参数、返回结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;instanceof&quot;关键字前面的变量</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我被用来检测类型了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 缺省则返回false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {}</span>
<span class="token comment">// 我被用来检测类型了</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-symbol-isconcatspreadable" tabindex="-1"><a class="header-anchor" href="#_2-symbol-isconcatspreadable" aria-hidden="true">#</a> 2.Symbol.isConcatSpreadable</h3><ul><li>控制当前 Symbol 值是否可以展开拼接</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 2, 3, 4, 5, 6]</span>

arr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 2, 3, Array(3)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),p=[e];function c(l,i){return s(),a("div",null,p)}const r=n(o,[["render",c],["__file","10.html.vue"]]);export{r as default};
