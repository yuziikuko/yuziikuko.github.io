import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a,b as s,d as c,e as n}from"./app-1240ea23.js";const r={},i=n(`<h2 id="一-相关概念的理解" tabindex="-1"><a class="header-anchor" href="#一-相关概念的理解" aria-hidden="true">#</a> （一）相关概念的理解</h2><h3 id="_1-spa" tabindex="-1"><a class="header-anchor" href="#_1-spa" aria-hidden="true">#</a> 1.SPA</h3><ul><li>单页 Web 应用（Single Page Web Application, SPA）</li><li>整个应用只有 <strong>一个完整的页面</strong> (index.html) — 单页面多组件</li><li>点击页面中的链接 <strong>不会刷新</strong> 页面，只会做页面的 <strong>局部更新</strong></li><li>数据都需要通过 ajax 请求获取，并在前端异步展现</li></ul><h3 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由" aria-hidden="true">#</a> 2.路由</h3><h4 id="_1-什么是路由" tabindex="-1"><a class="header-anchor" href="#_1-什么是路由" aria-hidden="true">#</a> 1）什么是路由？</h4><ul><li>一个路由就是一个映射关系（<code>key:value</code>）</li><li><code>key</code> 为路径， <code>value</code> 可能是 <code>function</code> 或 <code>component</code></li></ul><h4 id="_2-路由分类" tabindex="-1"><a class="header-anchor" href="#_2-路由分类" aria-hidden="true">#</a> 2）路由分类</h4><ul><li>后端路由（以 Node Express 为例） <ul><li><code>value</code> 是 <code>function</code>，用来处理客户端提交的请求</li><li>注册路由：<code>route.get(path, function(req, res))</code></li><li>工作过程：当 node 接收到一个请求时，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应数据</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
  请求地址： http://localhost:3000/search/users?q=aa
  后台路由
  key： /search/users
  value： function () {}
*/</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/search/users&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> q <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://api.github.com/search/users&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> q <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前端路由 <ul><li>底层逻辑是操作浏览器 BOM 对象的 <code>history</code> 属性 <code>window.history</code></li><li>浏览器端路由： <code>value</code> 是 <code>component</code> ，用于展现页面内容</li><li>注册路由：<code>&lt;Route path=&quot;/test&quot; component={Test} /&gt;</code></li><li>工作过程：当浏览器的 <code>path</code> 变为 <code>/test</code> 时，当前路由组件就会变为 <code>Test</code> 组件</li></ul></li></ul><h4 id="_3-react-router-dom" tabindex="-1"><a class="header-anchor" href="#_3-react-router-dom" aria-hidden="true">#</a> 3）react-router-dom</h4>`,11),u={href:"https://react-router.docschina.org/",target:"_blank",rel:"noopener noreferrer"},d=a("li",null,[s("react-router 库有三种实现 "),a("ul",null,[a("li",null,"web：react-router-dom，供 web 开发人员使用"),a("li",null,"native：供 React Native 开发人员使用"),a("li",null,"anywhere：web 和 native 都可以使用")])],-1),k=a("li",null,"react 的一个插件库",-1),h=a("li",null,"专门用来实现一个 SPA 应用",-1),v=a("li",null,"基于 React 的项目基本都会用到此库",-1),m=n(`<h3 id="_3-组件分类" tabindex="-1"><a class="header-anchor" href="#_3-组件分类" aria-hidden="true">#</a> 3.组件分类</h3><h4 id="_1-一般组件" tabindex="-1"><a class="header-anchor" href="#_1-一般组件" aria-hidden="true">#</a> 1）一般组件</h4><ul><li>程序员自定义的组件</li><li>通过 <code>&lt;Demo /&gt;</code> 引入使用</li><li>一般放在 <code>components</code> 目录下</li><li>写组件标签时传递了什么，props 就收到什么</li></ul><h4 id="_2-路由组件" tabindex="-1"><a class="header-anchor" href="#_2-路由组件" aria-hidden="true">#</a> 2）路由组件</h4><ul><li>路由器匹配的组件</li><li>通过 <code>&lt;Link to=&quot;/demo&quot; component={Demo} /&gt;</code> 引入使用</li><li>一般放在 <code>pages</code> 目录下</li><li>props 固定收到三个属性</li></ul><blockquote><p><strong>history</strong>:</p><ol><li><p><strong>go</strong>: <em>ƒ go(n)</em></p></li><li><p><strong>goBack</strong>: <em>ƒ goBack()</em></p></li><li><p><strong>goForward</strong>: <em>ƒ goForward()</em></p></li><li><p><strong>push</strong>: <em>ƒ push(path, state)</em></p></li><li><p><strong>replace</strong>: <em>ƒ replace(path, state)</em></p></li></ol><p><strong>location</strong>:</p><ol><li><p><strong>pathname</strong>: &quot;/about&quot;</p></li><li><p><strong>search</strong>: &quot;&quot;</p></li><li><p><strong>state</strong>: undefined</p></li></ol><p><strong>match</strong>:</p><ol><li><p><strong>params</strong>: {}</p></li><li><p><strong>path</strong>: &quot;/about&quot;</p></li><li><p><strong>url</strong>: &quot;/about&quot;</p></li></ol></blockquote><h2 id="二-基本路由使用" tabindex="-1"><a class="header-anchor" href="#二-基本路由使用" aria-hidden="true">#</a> （二）基本路由使用</h2><h3 id="_1-准备" tabindex="-1"><a class="header-anchor" href="#_1-准备" aria-hidden="true">#</a> 1.准备</h3><h4 id="_1-下载-react-router-dom" tabindex="-1"><a class="header-anchor" href="#_1-下载-react-router-dom" aria-hidden="true">#</a> 1）下载 react-router-dom</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i react-router-dom@5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-引入-bootstrap-css" tabindex="-1"><a class="header-anchor" href="#_2-引入-bootstrap-css" aria-hidden="true">#</a> 2）引入 bootstrap.css</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/css/bootstrap.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-界面分区" tabindex="-1"><a class="header-anchor" href="#_2-界面分区" aria-hidden="true">#</a> 2.界面分区</h3><ul><li>导航区：渲染路由菜单的区域</li><li>展示区：渲染当前路由匹配的组件</li></ul><h3 id="_3-导航区-——-路由链接" tabindex="-1"><a class="header-anchor" href="#_3-导航区-——-路由链接" aria-hidden="true">#</a> 3.导航区 —— 路由链接</h3><ul><li>将 a 标签改为 Link 标签：<code>&lt;Link to=&quot;/xxx&quot;&gt;Demo&lt;/Link&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">&quot;list-group-item&quot;</span> to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">&quot;list-group-item&quot;</span> to<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-展示区-——-注册路由" tabindex="-1"><a class="header-anchor" href="#_4-展示区-——-注册路由" aria-hidden="true">#</a> 4.展示区 —— 注册路由</h3><ul><li>进行路径匹配：<code>&lt;Route path=&quot;/xxx&quot; component={Demo} /&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-app-组件最外侧包裹路由器组件" tabindex="-1"><a class="header-anchor" href="#_5-app-组件最外侧包裹路由器组件" aria-hidden="true">#</a> 5.App 组件最外侧包裹路由器组件</h3><ul><li>BrowserRouter：对应 history.createBrowserHistory</li><li><code>localhost:3000/about</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HashRouter：对应 history.createHashHistory <ul><li><code>localhost:3000/#/about</code></li><li><code>#</code> 后为哈希值，不作为资源传给服务器（localhost:3000）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HashRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>HashRouter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>HashRouter<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-browserrouter-与-hashrouter-的区别" tabindex="-1"><a class="header-anchor" href="#三-browserrouter-与-hashrouter-的区别" aria-hidden="true">#</a> （三）<code>BrowserRouter</code> 与 <code>HashRouter</code> 的区别</h2><h3 id="_1-底层原理不同" tabindex="-1"><a class="header-anchor" href="#_1-底层原理不同" aria-hidden="true">#</a> 1.底层原理不同</h3><ul><li>BR 使用的是 H5 的 history API，不兼容 IE9 及以下版本</li><li>HR 使用的是 URL 的哈希值</li></ul><h3 id="_2-path-表现形式不同" tabindex="-1"><a class="header-anchor" href="#_2-path-表现形式不同" aria-hidden="true">#</a> 2.path 表现形式不同</h3><ul><li>BR 路径中没有&quot;#&quot; <ul><li>如：localhost:3000/demo/test</li></ul></li><li>HR 路径中有&quot;#&quot; <ul><li>如：localhost:3000/#/demo/test</li></ul></li></ul><h3 id="_3-刷新后对路由-state-参数的影响不同" tabindex="-1"><a class="header-anchor" href="#_3-刷新后对路由-state-参数的影响不同" aria-hidden="true">#</a> 3.刷新后对路由 <code>state</code> 参数的影响不同</h3><ul><li>BR 没有任何影响，因为 <code>state</code> 保存在 <code>history</code> 对象中</li><li>HR 刷新后会导致路由 <code>state</code> 参数丢失</li></ul><h3 id="_4-备注" tabindex="-1"><a class="header-anchor" href="#_4-备注" aria-hidden="true">#</a> 4.备注</h3><ul><li>HR 可以用于解决一些路径错误相关的问题</li></ul><h2 id="四-navlink-与封装-navlink" tabindex="-1"><a class="header-anchor" href="#四-navlink-与封装-navlink" aria-hidden="true">#</a> （四）<code>NavLink</code> 与封装 NavLink</h2><ul><li><code>NavLink</code> 可以实现路由链接的高亮</li><li>通过 <code>activeClassName</code> 指定样式名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>NavLink activeClassName<span class="token operator">=</span><span class="token string">&quot;atguigu&quot;</span> className<span class="token operator">=</span><span class="token string">&quot;list-group-item&quot;</span> to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>
  About
<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标签体内容是一个特殊的标签属性：<code>children</code></li><li>通过 <code>this.props.children</code> 可以获取标签体内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// components/MyNavLink/index.jsx</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NavLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyNavLink</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 标签体也是个特殊的属性：children</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token comment">// &lt;NavLink</span>
      <span class="token comment">//   activeClassName=&quot;atguigu&quot;</span>
      <span class="token comment">//   className=&quot;list-group-item&quot;</span>
      <span class="token comment">//   {...this.props}</span>
      <span class="token comment">// &gt;</span>
      <span class="token comment">//   {this.props.children}</span>
      <span class="token comment">// &lt;/NavLink&gt;</span>
      <span class="token operator">&lt;</span>NavLink
        activeClassName<span class="token operator">=</span><span class="token string">&quot;atguigu&quot;</span>
        className<span class="token operator">=</span><span class="token string">&quot;list-group-item&quot;</span>
        <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// App.jsx</span>
<span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-switch-的使用" tabindex="-1"><a class="header-anchor" href="#五-switch-的使用" aria-hidden="true">#</a> （五）<code>Switch</code> 的使用</h2><ul><li>通常情况下，<code>path</code> 和 <code>component</code> 是一一对应的关系</li><li><code>Switch</code> 可以提高路由匹配效率（单一匹配）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Switch仅匹配第一个符合条件的路由路径</span>
<span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>TestSwitch<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-解决多级路径刷新页面样式丢失的问题" tabindex="-1"><a class="header-anchor" href="#六-解决多级路径刷新页面样式丢失的问题" aria-hidden="true">#</a> （六）解决多级路径刷新页面样式丢失的问题</h2><h3 id="_1-public-index-html-中引入样式不写-写" tabindex="-1"><a class="header-anchor" href="#_1-public-index-html-中引入样式不写-写" aria-hidden="true">#</a> 1.<code>public/index.html</code> 中引入样式不写 <code>./</code> 写 <code>/</code></h3><ul><li>常用</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/css/bootstrap.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-public-index-html-中引入样式不写-写-public-url" tabindex="-1"><a class="header-anchor" href="#_2-public-index-html-中引入样式不写-写-public-url" aria-hidden="true">#</a> 2.<code>public/index.html</code> 中引入样式不写 <code>./</code> 写 <code>%PUBLIC_URL%</code></h3><ul><li>常用，只适用于脚手架</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>%PUBLIC_URL%/css/bootstrap.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-路由包裹不使用-browserrouter-使用-hashrouter" tabindex="-1"><a class="header-anchor" href="#_3-路由包裹不使用-browserrouter-使用-hashrouter" aria-hidden="true">#</a> 3.路由包裹不使用 <code>BrowserRouter</code> 使用 <code>HashRouter</code></h3><ul><li>不推荐</li></ul><h2 id="七-路由的严格匹配与模糊匹配" tabindex="-1"><a class="header-anchor" href="#七-路由的严格匹配与模糊匹配" aria-hidden="true">#</a> （七）路由的严格匹配与模糊匹配</h2><h3 id="_1-默认使用的是模糊匹配" tabindex="-1"><a class="header-anchor" href="#_1-默认使用的是模糊匹配" aria-hidden="true">#</a> 1.默认使用的是模糊匹配</h3><ul><li>简单记：【输入的路径】必须包含【要匹配的路径】，且顺序要一致</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token comment">/* 编写路由链接——在React中靠路由链接实现切换组件 */</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">&quot;/home/a/b&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">&quot;/a/home/b&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">&gt;</span>

<span class="token punctuation">{</span><span class="token comment">/* 注册路由 */</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token comment">/* Switch仅匹配第一个符合条件的路由路径 */</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-开启严格匹配" tabindex="-1"><a class="header-anchor" href="#_2-开启严格匹配" aria-hidden="true">#</a> 2.开启严格匹配</h3><ul><li>严格匹配不要随便开启，需要再开，有时候开启会导致无法继续匹配二级路由</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Route exact<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-redirect-的使用" tabindex="-1"><a class="header-anchor" href="#八-redirect-的使用" aria-hidden="true">#</a> （八）<code>Redirect</code> 的使用</h2><ul><li>一般写在所有路由注册的最下方</li><li>当所有路由都无法匹配时，跳转到 <code>Redirect</code> 指定的路由</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九-嵌套路由" tabindex="-1"><a class="header-anchor" href="#九-嵌套路由" aria-hidden="true">#</a> （九）嵌套路由</h2><ul><li>注册子路由时要写上父路由的 <code>path</code> 值</li><li>路由的匹配是按照注册路由的顺序进行的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home/news&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>News<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home/message&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Message<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/home/news&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十-向路由组件传递参数" tabindex="-1"><a class="header-anchor" href="#十-向路由组件传递参数" aria-hidden="true">#</a> （十）向路由组件传递参数</h2><h3 id="_1-params-参数" tabindex="-1"><a class="header-anchor" href="#_1-params-参数" aria-hidden="true">#</a> 1. <code>params</code> 参数</h3><h4 id="_1-路由链接" tabindex="-1"><a class="header-anchor" href="#_1-路由链接" aria-hidden="true">#</a> 1）路由链接</h4><ul><li>携带参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/demo/test/tom/18&quot;</span><span class="token operator">&gt;</span>详情<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-注册路由" tabindex="-1"><a class="header-anchor" href="#_2-注册路由" aria-hidden="true">#</a> 2）注册路由</h4><ul><li>声明接收</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/demo/test/:name/:age&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-test-组件接收参数" tabindex="-1"><a class="header-anchor" href="#_3-test-组件接收参数" aria-hidden="true">#</a> 3）<code>Test</code> 组件接收参数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-search-参数" tabindex="-1"><a class="header-anchor" href="#_2-search-参数" aria-hidden="true">#</a> 2. <code>search</code> 参数</h3><h4 id="_1-路由链接-1" tabindex="-1"><a class="header-anchor" href="#_1-路由链接-1" aria-hidden="true">#</a> 1）路由链接</h4><ul><li>携带参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">&quot;/demo/test/?name=tom&amp;age=18&quot;</span><span class="token operator">&gt;</span>详情<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-注册路由-1" tabindex="-1"><a class="header-anchor" href="#_2-注册路由-1" aria-hidden="true">#</a> 2）注册路由</h4><ul><li>无需声明接收，正常注册即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/demo/test&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-test-组件接收参数-1" tabindex="-1"><a class="header-anchor" href="#_3-test-组件接收参数-1" aria-hidden="true">#</a> 3）<code>Test</code> 组件接收参数</h4><ul><li>获取到的 <code>search</code> 是 <code>urlencoded</code> 编码字符串</li><li>需要借助 <code>query-string</code> 库解析</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">&quot;query-string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> search <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">;</span> <span class="token comment">// ?name=tom&amp;age=18</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-state-参数" tabindex="-1"><a class="header-anchor" href="#_3-state-参数" aria-hidden="true">#</a> 3. <code>state</code> 参数</h3><h4 id="_1-路由链接-2" tabindex="-1"><a class="header-anchor" href="#_1-路由链接-2" aria-hidden="true">#</a> 1）路由链接</h4><ul><li>携带参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Link
  to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&quot;/demo/test&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
  详情
<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注册路由-2" tabindex="-1"><a class="header-anchor" href="#_2-注册路由-2" aria-hidden="true">#</a> 2）注册路由</h4><ul><li>无需声明接收，正常注册即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/demo/test&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-test-组件接收参数-2" tabindex="-1"><a class="header-anchor" href="#_3-test-组件接收参数-2" aria-hidden="true">#</a> 3）<code>Test</code> 组件接收参数</h4><ul><li>当前标签页刷新可以保留住参数</li><li>因为 <code>BrowserRouter</code> 一直在维护 <code>history</code> 属性</li><li>清空本地缓存后参数丢失</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十一-编程式路由导航" tabindex="-1"><a class="header-anchor" href="#十一-编程式路由导航" aria-hidden="true">#</a> （十一）编程式路由导航</h2><ul><li>借助 <code>this.props.history</code> 对象上的 API 对操作路由跳转、前进、后退 <ul><li><code>this.props.history.push()</code></li><li><code>this.props.history.replace()</code></li><li><code>this.props.history.goBack()</code></li><li><code>this.props.history.goForward()</code></li><li><code>this.props.history.go()</code></li></ul></li></ul>`,96);function g(b,q){const e=o("ExternalLinkIcon");return p(),l("div",null,[i,a("ul",null,[a("li",null,[s("文档："),a("a",u,[s("https://react-router.docschina.org/"),c(e)])]),d,k,h,v]),m])}const f=t(r,[["render",g],["__file","05.html.vue"]]);export{f as default};
