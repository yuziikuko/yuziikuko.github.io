import{_ as e,a as o,b as c,c as l,d as i,e as u,f as r,g as k,h as d,i as v,j as m,k as b}from"./Node59-13a1e0de.js";import{_ as h}from"./plugin-vue_export-helper-c27b6911.js";import{r as g,o as y,c as q,a as n,b as s,d as t,e as p}from"./app-1240ea23.js";const f="/assets/Node01-e5890767.png",w="/assets/Node02-54603832.png",x="/assets/Node03-46adb910.png",_="/assets/Node04-2eab8a82.png",j="/assets/Node05-f5ced331.png",S="/assets/Node06-fdab98a5.png",T="/assets/Node07-b7ef03c3.png",C="/assets/Node08-aecb989b.png",I="/assets/Node09-4d092654.png",A="/assets/Node10-d8f1f7d3.png",P="/assets/Node11-1b9d0a8b.png",N="/assets/Node12-4bed044a.png",O="/assets/Node13-902b65fd.png",M="/assets/Node14-5d062b40.png",D="/assets/Node15-a757a204.png",L="/assets/Node16-6911c983.png",E="/assets/Node17-09321b37.png",R="/assets/Node18-cce96e30.png",J="/assets/Node19-711ed9a3.png",U="/assets/Node20-d2415744.png",W="/assets/Node21-4b07ae29.png",B="/assets/Node22-74890bb5.png",H="/assets/Node23-e9817a9c.png",F="/assets/Node24-8a9db469.png",z="/assets/Node25-5790dc1c.png",Q="/assets/Node26-c28e80c1.png",X="/assets/Node27-80f8f3e1.png",G="/assets/Node28-229cc4d4.png",V="/assets/Node29-bc01fda3.png",$="/assets/Node30-f09db638.png",Y="/assets/Node31-0d057e86.png",K="/assets/Node32-b8fd9fe6.png",Z="/assets/Node33-485fa294.png",nn="/assets/Node34-41800682.png",sn="/assets/Node35-8375ac6b.png",an="/assets/Node36-ffdb55d0.png",tn="/assets/Node37-bd029f9e.png",pn="/assets/Node38-db314c95.png",en="/assets/Node39-53a5785e.png",on="/assets/Node64-6a26fe10.png",cn="/assets/Node40-57e3897c.png",ln="/assets/Node41-1ec7c709.png",un="/assets/Node42-0849f709.png",rn="/assets/Node43-f16313f6.png",kn="/assets/Node65-fec13180.png",dn="/assets/Node46-6c9c5f58.png",vn="/assets/Node47-a9eb104c.png",mn="/assets/Node66-0e138b40.png",bn="/assets/Node49-c370b30f.png",hn="/assets/Node50-62f9b5c0.png",gn="/assets/Node60-31757917.png",yn="/assets/Node61-845153ad.png",qn="/assets/Node62-c527520d.png",fn="/assets/Node63-9cb4216f.png",wn={},xn=n("h2",{id:"一-node-核心",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-node-核心","aria-hidden":"true"},"#"),s(" （一）Node 核心")],-1),_n=n("h3",{id:"_1-node-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-node-概述","aria-hidden":"true"},"#"),s(" 1.Node 概述")],-1),jn={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},Sn=n("br",null,null,-1),Tn={href:"https://nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},Cn=p('<ul><li>Node 是一个 JS 的运行环境</li></ul><div class="hint-container info"><p class="hint-container-title">约定俗成</p><ul><li>JavaScript 指运行在浏览器环境下的 JS</li><li>NodeJS 指运行在 Node 环境下的 JS</li></ul></div><h4 id="_1-浏览器中的-js" tabindex="-1"><a class="header-anchor" href="#_1-浏览器中的-js" aria-hidden="true">#</a> 1）浏览器中的 JS</h4><p><img src="'+f+'" alt=""></p><ul><li>Web API 提供了操作浏览器窗口和页面的能力 <ul><li>BOM</li><li>DOM</li><li>AJAX</li></ul></li><li>该能力有局限 <ul><li>跨域问题（浏览器本身的同源策略所导致的）</li><li>无法读写文件（只能读取用户指定的文件）</li></ul></li></ul><h4 id="_2-node-中的-js" tabindex="-1"><a class="header-anchor" href="#_2-node-中的-js" aria-hidden="true">#</a> 2）Node 中的 JS</h4><p><img src="'+w+'" alt=""></p><ul><li>Node API 几乎提供了所有能完成的功能</li></ul><h4 id="_3-分层结构对比" tabindex="-1"><a class="header-anchor" href="#_3-分层结构对比" aria-hidden="true">#</a> 3）分层结构对比</h4><p><img src="'+x+'" alt=""></p><ul><li>浏览器提供了有限的能力 <ul><li>JS 只能使用浏览器提供的功能，完成有限的操作</li></ul></li><li>Node 提供了完整的控制计算机的能力 <ul><li>NodeJS 几乎可以通过 Node 提供的接口，实现对整个操作系统的控制</li></ul></li></ul><h4 id="_4-应用-1-开发桌面应用程序" tabindex="-1"><a class="header-anchor" href="#_4-应用-1-开发桌面应用程序" aria-hidden="true">#</a> 4）应用 1：开发桌面应用程序</h4><ul><li>如：Visual Studio Code</li></ul><h4 id="_5-应用-2-开发服务器应用程序" tabindex="-1"><a class="header-anchor" href="#_5-应用-2-开发服务器应用程序" aria-hidden="true">#</a> 5）应用 2：开发服务器应用程序</h4><ul><li>结构 1 <ul><li>通常应用在微型站点上，如：个人博客</li><li>Node 服务器要完成 <ul><li>请求的处理、响应</li><li>数据库交互</li><li>各种业务逻辑</li></ul></li></ul></li></ul><p><img src="'+_+'" alt=""></p><ul><li>结构 2 <ul><li>常见结构，通常应用在各种规模的站点上</li><li>Node 服务器不做任何与业务逻辑相关的处理</li><li>多数时候只负责请求的处理、响应</li><li>有时会负责额外的功能 <ul><li>简单的信息记录，如：请求日志、用户偏好、广告信息</li><li>静态资源托管</li><li>缓存</li></ul></li><li>后端服务器负责和业务数据库做交互</li></ul></li></ul><p><img src="'+j+`" alt=""></p><div class="hint-container info"><p class="hint-container-title">结构 2 好处</p><ul><li>相较于其他后端编程语言，Node 是解释型语言 <ul><li>虽然大数据计算能力差，但是 <mark>吞吐量大</mark> ，读写文件速度极快</li><li>本身是异步的，没有进程切换的负担，可以快速响应大量的用户请求</li></ul></li><li>其他后端编程语言，如 Java，是编译型语言 <ul><li>读写文件能力较慢</li><li>大数据计算能力强，可以开启多个线程异步计算</li></ul></li></ul></div><h3 id="_2-全局对象-global" tabindex="-1"><a class="header-anchor" href="#_2-全局对象-global" aria-hidden="true">#</a> 2.全局对象 global</h3><div class="hint-container tip"><p class="hint-container-title">编辑器智能提示</p><p>node i @types/node</p></div><ul><li>global 自身有一个属性 global</li><li>类似于 window 自身有一个属性 window</li><li>都是为了便于全局访问全局对象本身</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>window <span class="token operator">===</span> window<span class="token punctuation">;</span> <span class="token comment">// true</span>
global<span class="token punctuation">.</span>global <span class="token operator">===</span> global<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-settimeout" tabindex="-1"><a class="header-anchor" href="#_1-settimeout" aria-hidden="true">#</a> 1）setTimeout</h4><ul><li>浏览器环境中返回的是数字（timerId）</li><li>Node 环境中返回的是对象（定时器）</li></ul><h4 id="_2-setinterval" tabindex="-1"><a class="header-anchor" href="#_2-setinterval" aria-hidden="true">#</a> 2）setInterval</h4><ul><li>浏览器环境中返回的是数字（timerId）</li><li>Node 环境中返回的是对象（定时器）</li></ul><h4 id="_3-setimmediate" tabindex="-1"><a class="header-anchor" href="#_3-setimmediate" aria-hidden="true">#</a> 3）setImmediate</h4><ul><li>类似于 setTimeout 0</li><li>但是有区别</li></ul><h4 id="_4-console" tabindex="-1"><a class="header-anchor" href="#_4-console" aria-hidden="true">#</a> 4）console</h4><ul><li>和浏览器环境中的 console 一致</li></ul><h4 id="_5-dirname" tabindex="-1"><a class="header-anchor" href="#_5-dirname" aria-hidden="true">#</a> 5）<code>__dirname</code></h4><ul><li>获取当前模块所在的目录</li><li>不是 global 的属性</li></ul><h4 id="_6-filename" tabindex="-1"><a class="header-anchor" href="#_6-filename" aria-hidden="true">#</a> 6）<code>__filename</code></h4><ul><li>获取当前模块的文件路径</li><li>不是 global 的属性</li></ul><h4 id="_7-buffer" tabindex="-1"><a class="header-anchor" href="#_7-buffer" aria-hidden="true">#</a> 7）Buffer</h4>`,36),In=n("li",null,"ES6 出现之前，Node 对 Buffer 类型有需求，于是自定义了一套",-1),An=n("li",null,"ES6 实现了类型化数组之后，Node 直接继承自 UInt8Array（无符号整型数组，每个数字占 8 位即一个字节，0-255）",-1),Pn=n("li",null,"计算机中存储的基本单位 —— 字节",-1),Nn={href:"http://blog.yuanjin.tech/article/94",target:"_blank",rel:"noopener noreferrer"},On=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;Buffer 61 62 63 64 65 66 67&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-process" tabindex="-1"><a class="header-anchor" href="#_8-process" aria-hidden="true">#</a> 8）process</h4><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td><code>cwd()</code></td><td>返回当前 NodeJS 进程的工作目录（命令行目录）<br>绝对路径<br>与当前执行的文件所在目录无关</td></tr><tr><td><code>exit()</code></td><td>强制退出当前 Node 进程<br>可传入退出码，默认为 0，表示正常成功退出，1 表示错误退出</td></tr><tr><td><code>argv</code></td><td>类型为 String[]<br>获取命令中的所有参数</td></tr><tr><td><code>platform</code></td><td>获取当前的操作系统<br>输出平台版本，如：win32，表示支持 32 位或以上的操作系统 API</td></tr><tr><td><code>kill(pid)</code></td><td>根据进程 ID 杀死进程</td></tr><tr><td><code>env</code></td><td>获取环境变量对象</td></tr></tbody></table><h3 id="_3-node-的模块化细节" tabindex="-1"><a class="header-anchor" href="#_3-node-的模块化细节" aria-hidden="true">#</a> 3.Node 的模块化细节</h3><h4 id="_1-模块的查找" tabindex="-1"><a class="header-anchor" href="#_1-模块的查找" aria-hidden="true">#</a> 1）模块的查找</h4><ul><li>绝对路径 <ul><li>根据绝对路径直接加载模块</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\test\\\\index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>相对路径 <code>./</code> 或 <code>../</code><ul><li>相对于当前模块</li><li>转换为绝对路径</li><li>加载模块</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>相对路径 <ul><li>检查是否是内置模块 <ul><li>如：fs、path 等</li></ul></li><li>不是则继续检查当前目录中的 node_modules</li><li>不是则继续检查上级目录中的 node_modules</li><li>转换为绝对路径</li><li>加载模块</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node_modules/abc/index.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关于后缀名 <ul><li>不提供后缀名，会自动补全</li><li><code>js</code>、<code>json</code>、<code>node</code>、<code>mjs</code></li><li>依次补全直到相应文件查找成功为止</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>关于文件名 <ul><li>仅提供目录，不提供文件名 <ul><li>自动寻找该目录中的 index.js</li></ul></li><li>package.json 中的 main 字段 <ul><li>表示包的默认入口</li><li>导入或执行包时，仅提供目录，则使用 main 字段值补全入口</li><li>默认值为 index.js</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">查找顺序</p><ul><li><code>./src</code> ✖</li><li><code>./src.js</code> ✖</li><li><code>./src.json</code> ✖</li><li><code>./src.node</code> ✖</li><li><code>./src.mjs</code> ✖</li><li><code>./src/index</code> ✔</li></ul></div><h4 id="_2-module-对象" tabindex="-1"><a class="header-anchor" href="#_2-module-对象" aria-hidden="true">#</a> 2）module 对象</h4><ul><li>记录当前模块的信息</li><li>包括模块间的引用关系、模块 id、模块状态等</li><li>通过 <code>Module()</code> 构造函数创建，该函数仅供 Node 内部使用</li></ul><h4 id="_3-require-函数" tabindex="-1"><a class="header-anchor" href="#_3-require-函数" aria-hidden="true">#</a> 3）require 函数</h4><ul><li><code>require.resolve(&quot;./src&quot;);</code><ul><li>获得该目录的绝对路径</li><li>但是 <mark>没有加载模块</mark></li></ul></li></ul><h4 id="_4-node-模块化原理-如何避免模块变量污染全局" tabindex="-1"><a class="header-anchor" href="#_4-node-模块化原理-如何避免模块变量污染全局" aria-hidden="true">#</a> 4）Node 模块化原理（如何避免模块变量污染全局）</h4><ul><li>模拟 require 函数内部运行机制（伪代码）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 将modulePath转换为绝对路径：D:\\repository\\NodeJS\\源码\\myModule.js</span>

  <span class="token comment">// 2. 判断是否该模块已有缓存</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token string">&quot;D:\\\\repository\\\\NodeJS\\\\源码\\\\myModule.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token string">&quot;D:\\\\repository\\\\NodeJS\\\\源码\\\\myModule.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 3. 读取文件内容</span>

  <span class="token comment">// 4. 包裹到一个函数中</span>
  <span class="token keyword">function</span> <span class="token function">__temp</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> __dirname<span class="token punctuation">,</span> __filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件内容是动态变化的</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前模块路径：&quot;</span><span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前模块文件：&quot;</span><span class="token punctuation">,</span> __filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 5. 创建module对象</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>

  <span class="token comment">// 6.绑定this</span>
  <span class="token function">__temp</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
    module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> <span class="token comment">// this</span>
    module<span class="token punctuation">,</span>
    exports<span class="token punctuation">,</span>
    require<span class="token punctuation">,</span>
    module<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
    module<span class="token punctuation">.</span>filename
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

require<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当执行一个模块或使用 require 函数时，会将模块放置在一个函数环境中（<code>__temp</code>）</li><li><code>this === module.exports === exports</code><ul><li>如果模块中对 <code>module.exports</code> 或 <code>exports</code> 重新赋值，则 this 指向变化</li><li>模块内尽量不要使用 this</li></ul></li><li>require 函数最终返回的是 module.exports</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// myModule.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前模块的路径：&quot;</span><span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当前模块的文件名：&quot;</span><span class="token punctuation">,</span> __filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 一开始
 * this === module.exports === exports
 * =&gt; <span class="token punctuation">{</span> c: 3 <span class="token punctuation">}</span>
 */</span>
exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 重新赋值后
 * this === exports
 * =&gt; <span class="token punctuation">{</span> c: 3 <span class="token punctuation">}</span>
 * this !== module.exports
 * =&gt; <span class="token punctuation">{</span> a: 1, b: 2 <span class="token punctuation">}</span>
 */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 重新赋值后
 * this === exports
 * =&gt; <span class="token punctuation">{</span> c: 3, m: 5 <span class="token punctuation">}</span>
 * this !== module.exports
 * =&gt; <span class="token punctuation">{</span> a: 1, b: 2 <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js 导入该模块</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./myModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-node-中的-es-模块化" tabindex="-1"><a class="header-anchor" href="#_4-node-中的-es-模块化" aria-hidden="true">#</a> 4.Node 中的 ES 模块化</h3><ul><li>版本 13 已全面支持 ES 模块化</li></ul><h4 id="_1-模块化" tabindex="-1"><a class="header-anchor" href="#_1-模块化" aria-hidden="true">#</a> 1）模块化</h4><ul><li>模块化分为 commonjs 和 ES Module</li><li>默认情况下指的都是 commonjs</li><li>ES Module 是在 V8 引擎内部运行的 <ul><li>不是在函数环境中运行，即没有通过参数注入 module 对象</li><li><mark>开启 ES 模块化的文件中无法使用 commonjs 语法</mark></li></ul></li></ul><h4 id="_2-开启-es-module-的两种方式" tabindex="-1"><a class="header-anchor" href="#_2-开启-es-module-的两种方式" aria-hidden="true">#</a> 2）开启 ES Module 的两种方式</h4><ul><li>JS 文件后缀名设置为 <code>.mjs</code><ul><li>只有当前文件能使用 ES 模块化</li></ul></li><li>package.json 文件中 type 属性设置为 <code>module</code><ul><li>该 package.json 文件对应的整个包目录都可以使用 ES 模块化</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>当使用 ES 模块化运行时 <ul><li>必须添加 <code>--experimental-modules</code> 标记</li><li>文件后缀名必须写全</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node --experimental-modules index.mjs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-基本使用" aria-hidden="true">#</a> 3）基本使用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.mjs</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// module.exports = 15; // 会报错</span>

<span class="token comment">// index.mjs</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">&quot;./a&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, default: 5 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-es-module-异步导入模块" tabindex="-1"><a class="header-anchor" href="#_4-es-module-异步导入模块" aria-hidden="true">#</a> 4）ES Module 异步导入模块</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./a.mjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-基本内置模块" tabindex="-1"><a class="header-anchor" href="#_5-基本内置模块" aria-hidden="true">#</a> 5.基本内置模块</h3><h4 id="_1-os" tabindex="-1"><a class="header-anchor" href="#_1-os" aria-hidden="true">#</a> 1）os</h4>`,39),Mn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/os.html",target:"_blank",rel:"noopener noreferrer"},Dn=p('<ul><li><code>os.EOL()</code><ul><li>end-of-line 一行结束的分隔符</li><li>不同操作系统不一样</li><li>Unix：<code>\\n</code></li><li>Windows：<code>\\r\\n</code></li></ul></li><li><code>os.arch()</code><ul><li>获取 CPU 的架构名</li><li>x32/x64</li></ul></li><li><mark><code>os.cpus()</code></mark><ul><li>获取 CPU 每一个核的信息</li><li>返回一个数组，数组的长度表示 CPU 是多少核</li><li><mark>通常用于根据不同内核开辟不同的线程</mark></li></ul></li><li><code>os.freemem()</code><ul><li>返回当前可用的空闲内存数量</li><li>单位默认是字节</li><li>要转换成 MB 则使用 <code>os.freemem() / 1024 ** 2</code></li></ul></li><li><code>os.homedir()</code><ul><li>获取用户目录路径</li><li>如：<code>/Users/ikuko</code></li></ul></li><li><code>os.hostname()</code><ul><li>获取主机名</li><li>如：<code>Sutee--IKUKO.local</code></li></ul></li><li><mark><code>os.tmpdir()</code></mark><ul><li>获取操作系统的临时目录</li><li>不同操作系统的临时目录不一样</li><li><mark>通常用于保存一些临时文件</mark></li></ul></li></ul><h4 id="_2-path" tabindex="-1"><a class="header-anchor" href="#_2-path" aria-hidden="true">#</a> 2）path</h4>',2),Ln={href:"https://nodejs.org/dist/latest-v12.x/docs/api/path.html",target:"_blank",rel:"noopener noreferrer"},En=p(`<ul><li><mark><code>path.basename()</code></mark><ul><li>根据文件路径获得文件名</li><li>只根据传入的路径返回值，不会真的去找是否存在该目录或该文件</li><li>filename：从盘符开始的文件绝对路径，如：<code>D:\\xxx\\xxx\\a.html</code>，翻译为文件路径</li><li>path：更广泛的含义，指目录或 URL 地址，如：<code>https://www.baidu.com</code>，翻译为路径</li><li>basename：不包含前缀路径，如：<code>a.html</code> 或 <code>a</code>（根据是否传入后缀名返回不同的值），翻译为文件名</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&quot;dfsdsf/sdsafz/asxcx/a.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a.html</span>

<span class="token keyword">const</span> basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&quot;dfsdsf/sdsafz/asxcx/a.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a</span>

<span class="token keyword">const</span> basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&quot;dfsdsf/sdsafz/asxcx/a.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a.jpg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>path.sep()</code><ul><li>separator，返回操作系统的分隔符</li><li>Unix：<code>/</code></li><li>Windows：<code>\\</code></li></ul></li><li><code>path.delimiter()</code><ul><li>也是分隔符，通常用于区分环境变量中的分隔符</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PATH</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><mark><code>path.dirname()</code></mark><ul><li>返回参数路径中的目录名</li><li>不会检查路径是否存在</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&quot;a/b/c/d.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&quot;a/b/c/d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a/b/c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark><code>path.extname()</code></mark><ul><li>返回文件的后缀名</li><li>不会检查文件是否存在</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&quot;a/b/c/d.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// .js</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&quot;a/b/c/d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出空字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark><code>path.join()</code></mark><ul><li>将多个参数拼接成完整路径</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a/b/c/d.js</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// a/d.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>path.normalize()</code><ul><li>将路径转换为符合操作系统形式的字符串</li><li>参数路径中如果包含返回上级目录的符号，会自动定位到相应的目录</li></ul></li><li><code>path.relative()</code><ul><li>返回参数路径 2 相对于参数路径 1 的相对路径表示形式的字符串</li><li>Webpack 中常用</li></ul></li><li><mark><code>path.resolve()</code></mark><ul><li>返回参数路径的绝对路径表示形式的字符串</li><li>Webpack 中常用</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获得a.js文件相对于命令行路径（process.cwd()）的绝对路径</span>
<span class="token keyword">const</span> absolutePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;./a.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获得a.js文件相对于当前目录的绝对路径</span>
<span class="token keyword">const</span> absolutePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./a.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">关于 \`./\`</p><ul><li>只有在 require 函数内部使用时是相对于当前文件目录</li><li>其他 API 中使用时都是相对于命令行路径（process.cwd()）</li><li>所以通常不使用相对路径，而是借助 path 库转换为绝对路径</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./myFile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-url" tabindex="-1"><a class="header-anchor" href="#_3-url" aria-hidden="true">#</a> 3）url</h4>`,14),Rn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/url.html",target:"_blank",rel:"noopener noreferrer"},Jn=p(`<ul><li>返回参数路径的 URL 对象信息</li><li>字符串解析为对象 <ul><li>构造函数：<code>new URL.URL(str)</code></li><li>功能函数：<code>URL.parse(str)</code></li></ul></li><li>对象转换为字符串 <ul><li>功能函数：<code>URL.format(obj)</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> urlObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL<span class="token punctuation">.</span>URL</span><span class="token punctuation">(</span><span class="token string">&quot;https://nodejs.org:80/a/b/c?t=3&amp;u=5#abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
<span class="token punctuation">{</span>
  href: &quot;https://nodejs.org:80/a/b/c?t=3&amp;u=5#abc&quot;,
  origin: &quot;https://nodejs.org:80&quot;,
  protocol: &quot;https:&quot;,
  username: &quot;&quot;,
  password: &quot;&quot;,
  host: &quot;nodejs.org:80&quot;,
  hostname: &quot;nodejs.org&quot;,
  port: &quot;80&quot;,
  pathname: &quot;/a/b/c&quot;,
  search: &quot;?t=3&amp;u=5&quot;,
  hash: &quot;#abc&quot;
<span class="token punctuation">}</span>
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-util" tabindex="-1"><a class="header-anchor" href="#_4-util" aria-hidden="true">#</a> 4）util</h4>`,3),Un={href:"https://nodejs.org/dist/latest-v12.x/docs/api/util.html",target:"_blank",rel:"noopener noreferrer"},Wn=p(`<ul><li><code>util.callbackify()</code><ul><li>将异步函数转换为回调形式</li><li>返回一个函数，是一个高阶函数</li><li>通常用于工程中统一异步处理方式，转换第三方库提供的异步函数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function">delay</span><span class="token punctuation">(</span>duration <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> delayCallback <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">callbackify</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">delayCallback</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Node 中所有回调函数的参数格式</p><p>都是两个参数：err 错误对象、data 返回的数据</p></div><ul><li><mark><code>util.promisify()</code></mark><ul><li>将回调模式的函数转换为异步模式</li><li>是一个高阶函数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">delayCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">duration<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> duration</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> delay <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>delayCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// delay(500).then((err, time) =&gt; {</span>
<span class="token comment">//   console.log(time);</span>
<span class="token comment">// });</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>util.inherits()</code><ul><li>定义继承关系</li><li>ES6 之后使用 <code>class</code> 代替</li></ul></li><li><mark><code>util.isDeepStrictEqual()</code></mark><ul><li>深度严格比较</li><li>包括属性值类型不同</li><li>通常用于比较多级嵌套结构的对象比较</li></ul></li></ul><h3 id="_6-文件-i-o" tabindex="-1"><a class="header-anchor" href="#_6-文件-i-o" aria-hidden="true">#</a> 6.文件 I/O</h3><h4 id="_1-i-o-input-output" tabindex="-1"><a class="header-anchor" href="#_1-i-o-input-output" aria-hidden="true">#</a> 1）I/O input output</h4><ul><li>对外部设备的输入输出</li><li>外部设备：磁盘、网卡、显卡、打印机...</li><li><mark>I/O 的交互时间远远高于内存和 CPU 的交互时间</mark><ul><li><mark>所以 fs 模块的 API 基本都是异步的</mark></li></ul></li></ul><h4 id="_2-fs-模块" tabindex="-1"><a class="header-anchor" href="#_2-fs-模块" aria-hidden="true">#</a> 2）fs 模块</h4>`,10),Bn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/fs.html",target:"_blank",rel:"noopener noreferrer"},Hn=p(`<ul><li><code>fs.readFile()</code><ul><li>读取一个文件</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以Buffer格式输出（图片、音频、视频等）</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以utf-8格式输出（文本等）</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 完整形式</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>
  filename<span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>fs.writeFile()</code><ul><li>向文件写入内容</li><li>如果文件不存在会自动创建文件再写入</li><li>如果目录不存在则直接报错</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 写入内容，如果文件不为空则覆盖原文，默认编码为utf-8</span>
  <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 写入内容，如果文件不为空则在原文末尾追加内容</span>
  <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;阿斯顿发发放到发&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token comment">// append</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 写入内容，使用Buffer编码</span>
  <span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;abcde&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写入成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>fs.stat()</code><ul><li>获取文件或目录信息</li><li><code>size</code>：占用字节</li><li><code>atime</code>：上次访问时间</li><li><code>mtime</code>：上次文件内容被修改的时间</li><li><code>ctime</code>：上次文件状态被修改的时间</li><li><code>birthtime</code>：文件创建时间</li><li><code>isDirectory()</code>：判断是否是目录</li><li><code>isFile()</code>：判断是否是文件</li></ul></li><li><code>fs.readdir()</code><ul><li>获取目录中的子文件和子目录</li><li>无法获取子目录中的文件</li><li>返回一个数组，数组中保存了文件和目录的名称</li></ul></li><li><code>fs.mkdir()</code><ul><li>创建目录</li></ul></li><li><code>fs.unlink()</code><ul><li>删除文件</li></ul></li><li><code>fs.exists()</code><ul><li>官方删除，替换为 <code>fs.stat()</code> 或 <code>fs.access()</code></li><li>判断文件或目录是否存在</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;ENOENT&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//文件不存在</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Node 提供了 <code>xxxSync()</code> 的同步 API <ul><li><code>xxx</code> 替换为上述异步 API</li><li>会导致 JS 代码阻塞，极其影响性能</li><li>一般只在程序启动初始化时，运行有限的次数即可</li></ul></li><li>Node12 之后为 fs 模块新增了 <code>promises</code> 子对象 <ul><li>保留了原有异步 API</li><li>拷贝原有 fs 模块的异步 API 到该子对象上</li><li>可以直接作 promise 使用</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">API 三种形式</p><ul><li><code>fs.readFile()</code></li><li><code>fs.readFileSync()</code></li><li><code>fs.promises.readFile()</code></li></ul></div><h4 id="_3-练习-读取一个目录中的所有子目录和文件" tabindex="-1"><a class="header-anchor" href="#_3-练习-读取一个目录中的所有子目录和文件" aria-hidden="true">#</a> 3）练习：读取一个目录中的所有子目录和文件</h4><ul><li>每个目录或文件都是一个对象</li><li><mark>目录的 size 是 0</mark><ul><li>在操作系统底层，目录其实也是一个文件</li><li>保存了指向当前目录下文件的指针，不占用内存空间</li></ul></li></ul><table><thead><tr><th>属性/方法</th><th>说明</th></tr></thead><tbody><tr><td><code>name</code></td><td>文件名</td></tr><tr><td><code>ext</code></td><td>后缀名，如果是目录则为空字符串</td></tr><tr><td><code>isFile</code></td><td>是否是一个文件</td></tr><tr><td><code>size</code></td><td>文件大小</td></tr><tr><td><code>createTime</code></td><td>日期对象，创建的时间</td></tr><tr><td><code>updateTime</code></td><td>日期对象，修改的时间</td></tr><tr><td><code>getChildren()</code></td><td>得到目录的所有子文件对象，如果是文件则返回空数组</td></tr><tr><td><code>getContent(isBuffer = false)</code></td><td>读取文件内容，如果是目录则返回 null</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 构造函数
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span> 绝对路径
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">basename</span> 文件名
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">ext</span> 后缀名，如果是目录则为空字符串
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token parameter">isFile</span> 是否是一个文件
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> <span class="token parameter">size</span> 文件大小
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Date<span class="token punctuation">}</span></span> <span class="token parameter">createTime</span> 日期对象，创建的时间
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Date<span class="token punctuation">}</span></span> <span class="token parameter">updateTime</span> 日期对象，修改的时间
   */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> ext<span class="token punctuation">,</span> isFile<span class="token punctuation">,</span> size<span class="token punctuation">,</span> createTime<span class="token punctuation">,</span> updateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>basename <span class="token operator">=</span> basename<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ext <span class="token operator">=</span> ext<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isFile <span class="token operator">=</span> isFile<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updateTime <span class="token operator">=</span> updateTime<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 生成 File 对象
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span> 文件完整路径
   * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>File<span class="token punctuation">}</span></span> 生成文件对象
   */</span>
  <span class="token keyword">static</span> <span class="token function-variable function">generateFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> stat <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>
      filename<span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>
      path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>
      stat<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      stat<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>birthtime<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span>mtime<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 读取文件内容
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Boolean<span class="token punctuation">}</span></span> <span class="token parameter">isBuffer</span> 是否以Buffer格式输出
   * <span class="token keyword">@returns</span> 文件内容，如果是目录则返回null
   */</span>
  <span class="token function-variable function">getContent</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">isBuffer <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isFile<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">,</span>
      isBuffer <span class="token operator">?</span> <span class="token string">&quot;utf-8&quot;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * 获得当前目录下的所有子文件对象
   * <span class="token keyword">@returns</span> 子文件对象，如果是文件则返回空数组
   */</span>
  <span class="token function-variable function">getChildren</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isFile<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取所有子文件的文件名</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历子文件名数组，生成文件对象</span>
    <span class="token keyword">const</span> promises <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">subBasename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 拼接当前目录完整路径和子文件对象名，得到子文件的完整路径</span>
      <span class="token keyword">const</span> subFilename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">,</span> subBasename<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 生成文件对象（Promise）</span>
      <span class="token keyword">return</span> File<span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>subFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 读取目录中的所有子目录和子文件
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">dirname</span> 目录名
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">readDir</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">dirname</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> File<span class="token punctuation">.</span><span class="token function">generateFile</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> file<span class="token punctuation">.</span>isFile <span class="token operator">?</span> file <span class="token operator">:</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dirname1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./myfiles/1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readDir</span><span class="token punctuation">(</span>dirname1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// File {}</span>
  <span class="token keyword">const</span> content1 <span class="token operator">=</span> <span class="token keyword">await</span> res1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;Buffer 61 73 73 61 66 61 73 64 66&gt;</span>

  <span class="token keyword">const</span> dirname2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./myfiles/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readDir</span><span class="token punctuation">(</span>dirname2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// File {}</span>
  <span class="token keyword">const</span> content2 <span class="token operator">=</span> <span class="token keyword">await</span> res2<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc阿斯顿发发放到发</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-文件流" tabindex="-1"><a class="header-anchor" href="#_7-文件流" aria-hidden="true">#</a> 7.文件流</h3><h4 id="_1-流" tabindex="-1"><a class="header-anchor" href="#_1-流" aria-hidden="true">#</a> 1）流</h4><p><img src="`+S+'" alt=""></p><ul><li>指数据的流动，数据从一个地方缓缓地流动到另一个地方</li><li>流是有方向的</li></ul><table><thead><tr><th>分类</th><th>说明</th></tr></thead><tbody><tr><td>可读流 Readable</td><td>数据从源头流向内存</td></tr><tr><td>可写流 Writable</td><td>数据从内存流向源头</td></tr><tr><td>双工流 Duplex</td><td>数据既可从源头流向内存，也可从内存流向源头<br>实际上是把可读流和可写流封装为一个对象</td></tr></tbody></table><h4 id="_2-流的作用" tabindex="-1"><a class="header-anchor" href="#_2-流的作用" aria-hidden="true">#</a> 2）流的作用</h4><ul><li>其他介质和内存的数据规模不一致</li></ul><p><img src="'+T+'" alt=""></p><ul><li>其他介质和内存的数据处理能力不一致</li></ul><p><img src="'+C+`" alt=""></p><h4 id="_3-文件流的含义" tabindex="-1"><a class="header-anchor" href="#_3-文件流的含义" aria-hidden="true">#</a> 3）文件流的含义</h4><ul><li>内存数据和磁盘文件数据之间的流动</li><li>Node 中不同流的类都应该继承自 Readable、Writable 这两个类 <ul><li>内部封装了一些流的常用操作属性和方法</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Readable<span class="token punctuation">,</span> Writable <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-创建文件可读流" tabindex="-1"><a class="header-anchor" href="#_4-创建文件可读流" aria-hidden="true">#</a> 4）创建文件可读流</h4><ul><li>用于读取文件内容</li><li><code>fs.createReadStream(path[, options])</code><ul><li><code>path</code>：读取的文件路径</li><li><code>options</code>：可选配置</li></ul></li></ul><table><thead><tr><th>options 配置项</th><th>含义</th></tr></thead><tbody><tr><td><code>encoding</code></td><td>编码方式</td></tr><tr><td><code>start</code></td><td>起始字节</td></tr><tr><td><code>end</code></td><td>结束字节</td></tr><tr><td><code>highWaterMark</code></td><td>每次读取的字节数，默认 <code>64*1024</code>（64KB）<br>如果 <code>encoding: &#39;utf-8&#39;</code>，该数量表示字符数<br>如果 <code>encoding: null</code>，该数量表示字节数</td></tr></tbody></table><ul><li>返回值：Readable 的子类 ReadStream <ul><li><code>rs.pause()</code>：暂停读取，会触发 pause 事件</li><li><code>rs.resume()</code>：恢复读取，会触发 resume 事件</li><li><code>rs.on(事件名, 处理函数)</code></li></ul></li></ul><table><thead><tr><th>rs.on 事件名</th><th>含义</th></tr></thead><tbody><tr><td><code>open</code></td><td>文件被打开后触发<br>文件打开并不代表开始读取文件，需要注册 data 事件</td></tr><tr><td><code>error</code></td><td>发生错误时触发</td></tr><tr><td><code>close</code></td><td>文件被关闭后触发<br>触发方式 1：通过 <code>rs.close()</code> 手动关闭<br>触发方式 2：文件读取完成后自动关闭（ <code>autoClose</code> 配置项默认值为 true 时）</td></tr><tr><td><code>data</code></td><td>读取到一部分数据后触发，会触发多次<br>注册该事件后才会真正开始读取<br>每次读取 <code>highWaterMark</code> 配置项指定的数量<br>回调函数中会附带读取到的数据<br>若指定了编码，则读取到的数据会自动按照编码转换为字符串<br>若没有指定编码，则读取到的数据是 Buffer 类型</td></tr><tr><td><code>end</code></td><td>所有数据读取完毕后触发<br>先触发 end，再触发 close</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">autoClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 文件读取完毕后自动关闭，默认为true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件被打开了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件关闭时触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;读到了一部分数据：&quot;</span><span class="token punctuation">,</span> chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  rs<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 暂停读取</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;暂停读取了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    rs<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复读取</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;resume&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;恢复读取了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;全部数据读取完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-创建文件可写流" tabindex="-1"><a class="header-anchor" href="#_5-创建文件可写流" aria-hidden="true">#</a> 5）创建文件可写流</h4><ul><li>向文件中写入内容</li><li><code>fs.createWriteStream(path[, options])</code><ul><li><code>path</code>：写入的文件路径</li><li><code>options</code>：可选配置</li></ul></li></ul><table><thead><tr><th>options 配置项</th><th>含义</th></tr></thead><tbody><tr><td><code>flags</code></td><td>操作文件的方式：<br><code>w</code>（覆盖）、<code>a</code>（追加）、其他</td></tr><tr><td><code>encoding</code></td><td>编码方式</td></tr><tr><td><code>start</code></td><td>起始字节</td></tr><tr><td><code>highWaterMark</code></td><td>每次最多写入的字节数<br>默认是 <code>16*1024</code>（16KB）</td></tr></tbody></table><ul><li>返回值：Writable 的子类 WriteStream <ul><li><code>ws.on(事件名, 处理函数)</code><ul><li><code>open</code></li><li><code>error</code></li><li><code>close</code></li></ul></li><li><code>ws.end([data])</code><ul><li>结束写入，将自动关闭文件 <ul><li>是否自动关闭取决于 <code>autoClose</code> 配置，默认为 true</li></ul></li><li>data 是可选的 <ul><li>表示关闭前的最后一次写入</li></ul></li></ul></li><li><code>ws.write(data)</code><ul><li>写入一组数据</li><li>data 可以是字符串或 Buffer</li><li>返回一个 Boolean 值 <ul><li>true：写入通道没有被填满，接下来的数据可以直接写入，无需排队</li><li>false：写入通道目前已被填满，接下来的数据将进入写入队列</li><li>写入通道大小由 highWaterMark 值确定</li></ul></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">autoClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 文件读取完毕后自动关闭，默认为true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;啊&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>utf-8 的编码方式下，1 个中文字符代表 3 个字节</p></div><h4 id="_6-背压问题" tabindex="-1"><a class="header-anchor" href="#_6-背压问题" aria-hidden="true">#</a> 6）背压问题</h4><ul><li>写入队列是内存中的数据【有限】</li><li><mark>磁盘处理速度极慢，内存中写入的数据队列排队速度极快</mark></li><li>可以根据 write 函数的返回值判断是否产生背压</li><li>返回值为 true</li></ul><p><img src="`+I+'" alt=""></p><ul><li>返回值为 false</li></ul><p><img src="'+A+`" alt=""></p><ul><li>当写入队列 <mark>排满后</mark> 再被清空时，会触发 <code>drain</code> 事件 <ul><li>没有排满，即使清空了也不会触发</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token literal-property property">autoClose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 文件读取完毕后自动关闭，默认为true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一直写，直到通道达到上限，或者无法直接写入</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;drain&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;可以再次写入了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-解决背压问题" tabindex="-1"><a class="header-anchor" href="#_7-解决背压问题" aria-hidden="true">#</a> 7）解决背压问题</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 拷贝文件方式1
 * 直接将文件内容读到内存中，再将内存中的内容写入文件
 * 会产生背压问题
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">function1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> origin <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;方式1复制成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 拷贝文件方式2
 * 读取文件内容到内存中直到通道占满时暂停，等清空后继续读取，边读取边写入文件
 * 解决背压问题
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">function2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> origin <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> flag <span class="token operator">=</span> ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> rs<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下一次写入就会造成背压，暂停读取</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;drain&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    rs<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续读取</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读完了</span>
    ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭写入流</span>
    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;方式2复制成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * second: 14.531ms
 * 方式2复制成功
 * first: 16.038ms
 * 方式1复制成功
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可写流封装了解决背压问题的代码 <code>rs.pipe(ws)</code><ul><li>将可读流连接到可写流</li><li>返回参数的值</li></ul></li><li>该方法可解决背压问题</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">function2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> origin <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./temp/abc2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span>
  rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;方式2复制成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-net-模块" tabindex="-1"><a class="header-anchor" href="#_8-net-模块" aria-hidden="true">#</a> 8.net 模块</h3><h4 id="_1-回顾-http-请求" tabindex="-1"><a class="header-anchor" href="#_1-回顾-http-请求" aria-hidden="true">#</a> 1）回顾 HTTP 请求</h4><ul><li>普通模式</li></ul><p><img src="`+P+'" alt=""></p><ul><li>长连接模式 <ul><li>请求头附带 <code>Connection: keep-alive</code></li><li>响应头携带 <code>Connection: keep-alive</code></li></ul></li></ul><p><img src="'+N+`" alt=""></p><ul><li>三次握手和四次挥手是 TCP/IP 协议的过程 <ul><li>一旦建立连接，客户端和服务器可以互相发起请求和响应请求</li></ul></li><li>HTTP 请求指中间的请求和响应过程 <ul><li>基于 TCP/IP 协议之上</li><li><mark>HTTP 规定了通信双方消息传递的模式和消息的格式</mark></li><li>只能客户端发起请求，服务器响应请求【消息传递的模式】</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">客户端发送的请求的格式</p><ul><li>HTTP 协议规定的 <ul><li>TCP/IP 协议无需遵循该格式</li></ul></li><li>如果发送的请求格式不正确，服务器会返回 400 Bad request</li><li>写在模板字符串中时，行头不能有缩进</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>请求行&lt;br/&gt;
请求头&lt;br/&gt;
&lt;br/&gt;
请求体
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>就算没有传递请求体，也要保留请求头后面空两行</li><li>否则服务器会一直等待客户端传递请求体</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>请求行&lt;br/&gt;
请求头&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用" aria-hidden="true">#</a> 2）作用</h4><ul><li>net 是一个通信模块</li><li>可以实现进程间的通信 IPC</li><li>可以实现 <mark>网络通信 TCP/IP</mark></li></ul><h4 id="_3-创建客户端" tabindex="-1"><a class="header-anchor" href="#_3-创建客户端" aria-hidden="true">#</a> 3）创建客户端</h4><ul><li><code>net.createConnection(options[, connectListener])</code></li><li>返回： <code>socket</code> 对象 <ul><li>一个特殊的文件</li><li>在 node 中表现为一个双工流对象</li><li>通过向流写入内容发送数据</li><li>通过监听流的内容获取数据</li></ul></li><li>根据服务器响应头中的 Content-Length 判断 chunk 是否接收完毕</li></ul><p><img src="`+O+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 建立连接通道【内部完成了三次握手和四次挥手】</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向服务器发送请求【请求头中标明请求的方法】</span>
socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">GET / HTTP/1.1
Host: www.baidu.com
Connection: keep-alive

</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> receive <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 是否接收到服务器的消息</span>

<span class="token doc-comment comment">/**
 * 提炼出响应字符串中的响应头和响应体
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">response</span> 响应字符串
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">parseResponse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> head <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应头后面有两个空行</span>
  <span class="token keyword">const</span> headers <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 去掉响应行，将响应头按照&quot;:&quot;分割，并且去除首尾空格符</span>
  <span class="token keyword">const</span> headerArray <span class="token operator">=</span> headers
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将响应头字符串组装成对象</span>
  <span class="token keyword">const</span> header <span class="token operator">=</span> headerArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    pre<span class="token punctuation">[</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将响应体组装成对象</span>
  <span class="token keyword">const</span> bodyObject <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    header<span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> bodyObject<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据 Content-Length 判断是否接收完毕所有字节数
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">isReceiveOver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contentLength <span class="token operator">=</span> <span class="token operator">+</span>receive<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 需要接收的响应体总字节数</span>
  <span class="token keyword">const</span> currentLength <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>receive<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>byteLength<span class="token punctuation">;</span>
  <span class="token keyword">return</span> currentLength <span class="token operator">&gt;</span> contentLength<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 读取到的数据是二进制字符串</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 直接调用end可能导致服务器消息还未接收完毕就关闭了连接</span>
  <span class="token comment">// console.log(&quot;来自服务器的消息&quot;, chunk.toString(&quot;utf-8&quot;));</span>
  <span class="token comment">// socket.end();</span>

  <span class="token keyword">const</span> response <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>receive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一次接收</span>
    receive <span class="token operator">=</span> <span class="token function">parseResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">isReceiveOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一次就接收完毕</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  receive<span class="token punctuation">.</span>body <span class="token operator">+=</span> response<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReceiveOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 需要客户端调用end关闭连接，服务器才会结束</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;结束了&quot;</span><span class="token punctuation">,</span> receive<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-创建服务器" tabindex="-1"><a class="header-anchor" href="#_4-创建服务器" aria-hidden="true">#</a> 4）创建服务器</h4><ul><li><code>net.createServer()</code><ul><li>返回： <code>server</code> 对象</li></ul></li><li><code>server.listen(port)</code><ul><li>监听当前计算机中的某个端口，监听后不会结束，等待客户端连接</li></ul></li><li><code>server.on(&quot;listening&quot;, () =&gt; {})</code><ul><li>开始监听端口后触发的事件</li></ul></li><li><code>server.on(&quot;connection&quot;, socket =&gt; {})</code><ul><li>当某个连接到来时触发该事件，监听函数会获得一个 socket 对象</li><li>会触发两次 <ul><li>一次是客户端发起请求时的测试连接</li><li>测试连接成功后才正式建立连接</li></ul></li></ul></li></ul><p><img src="`+M+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 服务器监听9527端口</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server listen 9527&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有客户端连接到服务器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(chunk.toString(&quot;utf-8&quot;));</span>

    <span class="token keyword">const</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./hsq.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> bodyBuffer <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span>promises<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headBuffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP/1.1 200 OK
Content-Type: image/jpeg

</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token string">&quot;utf-8&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>headBuffer<span class="token punctuation">,</span> bodyBuffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接关闭了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-http-模块" tabindex="-1"><a class="header-anchor" href="#_9-http-模块" aria-hidden="true">#</a> 9.http 模块</h3><ul><li>无需手动管理 socket</li><li>无需手动组装消息格式</li></ul><h4 id="_1-发送一个-http-请求" tabindex="-1"><a class="header-anchor" href="#_1-发送一个-http-请求" aria-hidden="true">#</a> 1）发送一个 http 请求</h4>`,70),Fn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback",target:"_blank",rel:"noopener noreferrer"},zn=p(`<ul><li><code>http.request(url[, options][, callback])</code><ul><li>返回一个 request 对象，是一个可写流</li></ul></li><li>如果不手动调用 end，服务器会认为请求体还未传输完成，响应不会结束</li><li>响应体不会直接存放到返回值中，因为内容可多可少 <ul><li>需要响应体时应该自己用流的方式读取</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>
  <span class="token string">&quot;http://duyi.ke.qq.com&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器响应的状态码&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器响应头Content-Type&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      body <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// request.write(&quot;a=1&amp;b=2&quot;); // POST请求时写入请求体</span>

request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表示消息体结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-创建一个服务器" tabindex="-1"><a class="header-anchor" href="#_2-创建一个服务器" aria-hidden="true">#</a> 2）创建一个服务器</h4>`,3),Qn={href:"https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_createserver_options_requestlistener",target:"_blank",rel:"noopener noreferrer"},Xn=p(`<ul><li><code>http.createServer([options][, requestListener])</code></li><li>会自动忽略测试连接，只输出正式连接的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理请求</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有请求来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求地址&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> urlObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求路径&quot;</span><span class="token punctuation">,</span> urlObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求方法&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求头&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    body <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求体&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;你好！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server listen 9527&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-总结官方文档对应的类" tabindex="-1"><a class="header-anchor" href="#_3-总结官方文档对应的类" aria-hidden="true">#</a> 3）总结官方文档对应的类</h4><ul><li>客户端发送的请求（请求其他服务器） <ul><li>http.request()返回的对象是 ClientRequest 对象</li><li>callback 接收到的响应对象是 IncomingMessage 对象</li></ul></li><li>服务器响应的请求（响应其他客户端） <ul><li>http.createServer()返回的对象是 Server 对象</li><li>requestListener 接收到的请求对象 req 是 IncomingMessage 对象</li><li>requestListener 接收到的响应对象 res 是 ServerResponse 对象</li></ul></li></ul><h4 id="_4-练习-创建一个静态资源服务器" tabindex="-1"><a class="header-anchor" href="#_4-练习-创建一个静态资源服务器" aria-hidden="true">#</a> 4）练习：创建一个静态资源服务器</h4><ul><li>根目录创建 public 文件夹</li><li>可以存储 html、css、js、img 等文件</li><li>Node 不会运行这些文件，但是会读取文件 <ul><li>访问 <code>http:localhost:9527/index.html</code> 时返回 <code>public/index.html</code> 文件内容</li><li>访问 <code>http:localhost:9527/css/index.css</code> 时返回 <code>public/css/index.css</code> 文件内容</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs/promises&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获得文件状态
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span> 文件路径
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Stats<span class="token punctuation">}</span></span> 文件信息状态对象，如果函数出错则返回null
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFileStat</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获得文件信息
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">url</span> 请求的路径
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> 返回文件内容，文件不存在则返回null
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// urlObj.path 包含 query 参数，应该使用 pathname</span>
  <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
    __dirname<span class="token punctuation">,</span>
    <span class="token string">&quot;public&quot;</span><span class="token punctuation">,</span>
    urlObj<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 去除开头的/才不会使最终路径拼接成盘符根目录</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> stat <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileStat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 访问的目录/文件不存在</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stat<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// 访问的是目录，拼接 index.html</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
      __dirname<span class="token punctuation">,</span>
      <span class="token string">&quot;public&quot;</span><span class="token punctuation">,</span>
      urlObj<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">&quot;index.html&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    stat <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileStat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stat<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 访问的文件存在</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 处理请求
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>http<span class="token punctuation">.</span>IncomingMessage<span class="token punctuation">}</span></span> <span class="token parameter">req</span> 请求对象
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>http<span class="token punctuation">.</span>ServerResponse<span class="token punctuation">}</span></span> <span class="token parameter">res</span> 响应对象
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">handleRequest</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFile</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Resource is not exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>handleRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Server listening on port 7000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-https-协议" tabindex="-1"><a class="header-anchor" href="#_10-https-协议" aria-hidden="true">#</a> 10.https 协议</h3><div class="hint-container danger"><p class="hint-container-title">主要作用</p><p>保证数据在传输过程中，不被窃取和篡改，从而保证传输安全</p></div><p><img src="`+D+'" alt=""></p><p><img src="'+L+'" alt=""></p><h4 id="_1-对称加密-单密钥加密" tabindex="-1"><a class="header-anchor" href="#_1-对称加密-单密钥加密" aria-hidden="true">#</a> 1）对称加密（单密钥加密）</h4><ul><li>加密过程</li></ul><p><img src="'+E+'" alt=""></p><ul><li>解密过程</li></ul><p><img src="'+R+'" alt=""></p><ul><li>产生 <mark>一个</mark> 密钥</li><li>可以用其加密，也可以用其解密</li><li>常用算法：DES、3DES、AES、Blowfish 等</li></ul><p><img src="'+J+'" alt=""></p><p><img src="'+U+'" alt=""></p><h4 id="_2-非对称加密" tabindex="-1"><a class="header-anchor" href="#_2-非对称加密" aria-hidden="true">#</a> 2）非对称加密</h4><ul><li>加密过程</li></ul><p><img src="'+W+'" alt=""></p><ul><li>解密过程</li></ul><p><img src="'+B+'" alt=""></p><ul><li>产生 <mark>一对</mark> 密钥</li><li>一个用于加密，一个用于解密</li><li>常用算法：RSA、Elgamal、Rabin、D-H、ECC 等</li></ul><p><img src="'+H+'" alt=""></p><p><img src="'+F+'" alt=""></p><h4 id="_3-证书颁发机构" tabindex="-1"><a class="header-anchor" href="#_3-证书颁发机构" aria-hidden="true">#</a> 3）证书颁发机构</h4><ul><li>CA, Certificate Authority</li><li>对称算法和非对称算法加密都无法完全避免通信问题，需要引入权威的第三方机构</li></ul><h4 id="_4-证书颁发流程" tabindex="-1"><a class="header-anchor" href="#_4-证书颁发流程" aria-hidden="true">#</a> 4）证书颁发流程</h4><p><img src="'+z+'" alt=""></p><h4 id="_5-证书" tabindex="-1"><a class="header-anchor" href="#_5-证书" aria-hidden="true">#</a> 5）证书</h4><ul><li>DC, Digital Certificate</li><li>证书中的服务器公钥和证书签名是通过 CA 的私钥加密的</li><li>其他终端只能通过 CA 的公钥解密读取，无法重新加密伪造</li></ul><p><img src="'+Q+'" alt=""></p><h4 id="_6-证书签名" tabindex="-1"><a class="header-anchor" href="#_6-证书签名" aria-hidden="true">#</a> 6）证书签名</h4><ul><li>Signature</li><li>证书签名的算法是公开的</li><li>使得每一个拿到证书的终端都可以验证签名是否被篡改</li></ul><p><img src="'+X+'" alt=""></p><h4 id="_7-证书验证流程" tabindex="-1"><a class="header-anchor" href="#_7-证书验证流程" aria-hidden="true">#</a> 7）证书验证流程</h4><ul><li>浏览器获取证书</li></ul><p><img src="'+G+'" alt=""></p><ul><li>无法被篡改</li></ul><p><img src="'+V+'" alt=""></p><ul><li>通信双方正常通信</li></ul><p><img src="'+$+'" alt=""></p><ul><li>第三方无法查看和篡改</li></ul><p><img src="'+Y+'" alt=""></p><h4 id="_8-协议" tabindex="-1"><a class="header-anchor" href="#_8-协议" aria-hidden="true">#</a> 8）协议</h4><p><img src="'+K+'" alt=""></p><ul><li>浏览器希望，在通过 https 协议请求到的网页中，其他资源都应该使用 https 协议获取</li><li>服务器：申请证书</li><li>客户端：访问时使用 <code>https://xxx</code></li><li><mark>https 协议的默认端口号是 443</mark></li></ul><h3 id="_11-https-模块" tabindex="-1"><a class="header-anchor" href="#_11-https-模块" aria-hidden="true">#</a> 11.https 模块</h3><h4 id="_1-服务器结构" tabindex="-1"><a class="header-anchor" href="#_1-服务器结构" aria-hidden="true">#</a> 1）服务器结构</h4><ul><li>练习结构</li></ul><p><img src="'+Z+'" alt=""></p><ul><li>常见结构</li></ul><p><img src="'+nn+'" alt=""></p><h4 id="_2-证书准备方式-1-网上购买权威机构证书" tabindex="-1"><a class="header-anchor" href="#_2-证书准备方式-1-网上购买权威机构证书" aria-hidden="true">#</a> 2）证书准备方式 1：网上购买权威机构证书</h4>',56),Gn={href:"https://www.aliyun.com/?utm_content=se_1000301881",target:"_blank",rel:"noopener noreferrer"},Vn=n("ul",null,[n("li",null,"准备好资金、服务器、域名"),n("li",null,"该方式应用在部署环境中"),n("li",null,"一般都是公司购买")],-1),$n=n("h4",{id:"_3-证书准备方式-2-本地产生证书",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-证书准备方式-2-本地产生证书","aria-hidden":"true"},"#"),s(" 3）证书准备方式 2：本地产生证书")],-1),Yn=n("li",null,"开发者作为权威机构发布证书",-1),Kn={href:"https://github.com/openssl/openssl",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://slproweb.com/products/Win32OpenSSL.html",target:"_blank",rel:"noopener noreferrer"},ns=n("li",null,"Mac 自带",-1),ss=n("li",null,"通过输入命令 openssl 测试",-1),as=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成 CA 私钥 <ul><li><code>genrsa</code><ul><li>密钥对生成算法</li></ul></li><li><code>-des3</code><ul><li>使用对称加密算法 des3 对私钥进一步加密</li><li>命令运行过程中会让用户输入密码，该密码将作为 des3 算法的 key</li></ul></li><li><code>-out ca-pri-key.pem</code><ul><li>将加密后的私钥保存到当前目录的 <code>ca-pri-key.pem</code> 文件中</li><li>pem, Privacy-Enhanced Mail(PEM)</li></ul></li><li><code>1024</code><ul><li>私钥的字节数</li></ul></li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-des3</span> <span class="token parameter variable">-out</span> ca-pri-key.pem <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成 CA 公钥（证书请求） <ul><li>通过私钥文件 <code>ca-pri-key.pem</code> 中的内容，生成对应的公钥，保存到 <code>ca-pub-key.pem</code> 文件中</li><li>运行过程中要使用之前输入的密码来实现对私钥文件的解密</li><li>其他输入信息 <ul><li><code>Country Name</code>：国家名 CN</li><li><code>Province Name</code>：省份名 Guangdong</li><li><code>Local Name</code>：城市名</li><li><code>Company Name</code>：公司名</li><li><code>Unit Name</code>：部门名</li><li><code>Common Name</code>：站点名</li><li>...</li></ul></li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> ca-pri-key.pem <span class="token parameter variable">-out</span> ca-pub-key.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成 CA 证书 <ul><li>使用 X.509 证书标准</li><li>通过证书请求文件 <code>ca-pub-key.pem</code> 生成证书</li><li>使用私钥 <code>ca-pri-key.pem</code> 加密</li><li>将证书保存到 <code>ca-cert.crt</code> 文件中</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> ca-pub-key.pem <span class="token parameter variable">-signkey</span> ca-pri-key.pem <span class="token parameter variable">-out</span> ca-cert.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成服务器私钥</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> server-key.pem <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成服务器公钥</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server-key.pem <span class="token parameter variable">-out</span> server-scr.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成服务器证书</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-CA</span> ca-cert.crt <span class="token parameter variable">-CAkey</span> ca-pri-key.pem <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-in</span> server-scr.pem <span class="token parameter variable">-out</span> server-cert.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-https-模块" tabindex="-1"><a class="header-anchor" href="#_4-https-模块" aria-hidden="true">#</a> 4）https 模块</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;https&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./server-key.pem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 私钥</span>
    <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./server-cert.crt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 服务器证书</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  handler
<span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;listening&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server listen 443&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">443</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-node-的生命周期-事件循环" tabindex="-1"><a class="header-anchor" href="#_12-node-的生命周期-事件循环" aria-hidden="true">#</a> 12.Node 的生命周期（事件循环）</h3><p><img src="`+sn+`" alt=""></p><h4 id="_1-main" tabindex="-1"><a class="header-anchor" href="#_1-main" aria-hidden="true">#</a> 1）main</h4><ul><li>Node 程序的入口文件</li></ul><h4 id="_2-event-loop" tabindex="-1"><a class="header-anchor" href="#_2-event-loop" aria-hidden="true">#</a> 2）event loop</h4><ul><li>检查是否需要进入事件循环</li><li>即其他线程是否还有任务未处理，或是否有其他任务正在执行中</li><li>Node 有六个队列，浏览器最多两个 <ul><li>图示中事件循环每一个圈代表一个队列</li></ul></li></ul><h4 id="_3-timers" tabindex="-1"><a class="header-anchor" href="#_3-timers" aria-hidden="true">#</a> 3）timers</h4><ul><li>计时队列</li><li>存放计时器的回调函数</li><li>队列中有回调函数则弹出执行，再进入下一个队列【前端开发中这样理解即可】</li><li>实际上的工作过程 <ul><li>每次进入该阶段时，调起计时器线程</li><li>循环遍历检查计时器线程中的计时器是否到达时间</li><li>执行到达时间的计时器的回调函数</li><li>内部其实没有队列的结构，就是一个循环</li><li>开发时为了方便，可以理解为队列结构</li></ul></li></ul><h4 id="_4-poll" tabindex="-1"><a class="header-anchor" href="#_4-poll" aria-hidden="true">#</a> 4）poll</h4><ul><li>轮询队列</li><li>除了 timers 和 check，绝大部分回调都会被放入该队列 <ul><li>如：文件的读取、监听用户请求</li></ul></li><li>如果 poll 中有回调 <ul><li>依次执行回调，直到清空队列</li></ul></li><li>如果 poll 中没有回调 <ul><li>等待其他队列中出现回调 <ul><li>如果其他队列出现回调，结束该阶段，进入下一阶段</li><li>如果其他队列没有出现回调，持续等待，直到出现回调为止</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 期望200ms后输出，实际输出&gt;300</span>
<span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout&quot;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;readFile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 强制读取文件执行300ms</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>程序卡住不会结束时，都是卡在 poll 阶段</p></div><h4 id="_5-check" tabindex="-1"><a class="header-anchor" href="#_5-check" aria-hidden="true">#</a> 5）check</h4><ul><li>检查队列</li><li>与 timers 的循环结构不同，check 阶段是真正的队列结构</li><li>使用 <code>setImmediate</code> 的回调会直接进入该队列</li><li>类似于 <code>setTimeout(0)</code> ，但也有区别 <ul><li>进入 timers 队列</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">setImmediate 和 setTimeout(0) 的区别</p><ul><li>两者执行效果类似</li><li>由于 check 阶段是真正的队列结构，只需要简单地操作队列，执行速率高</li><li>timers 队列有线程切换、循环、计算的开销</li></ul></div><ul><li>执行顺序无法确定 <ul><li>setTimeout 其实取不到 0，最少时间是 1ms</li><li>如果进入队列时还未到 1ms，timers 为空，会经过 poll 阶段来到 check 阶段 <ul><li>先执行 setImmediate</li></ul></li><li>如果计算机卡了一下，进入队列时超过了 1ms，timers 不为空 <ul><li>先执行 setTimeout</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// }, 0);</span>

<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Aa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-面试题-1" tabindex="-1"><a class="header-anchor" href="#_6-面试题-1" aria-hidden="true">#</a> 6）面试题 1</h4><ul><li>readFile 整个回调进入 poll 队列，在该阶段等待</li><li>文件读取完毕后，一定先从 poll 阶段进入 check 阶段</li><li>所以该情况下一定先执行 setImmediate 再执行 setTimeout</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 2
 * 1
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-nexttick-promise" tabindex="-1"><a class="header-anchor" href="#_7-nexttick-promise" aria-hidden="true">#</a> 7）nextTick &amp; Promise</h4><ul><li>都是微任务队列</li><li>不会开启额外线程，期望以最快速度立即执行</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>在事件循环中，每次执行一个回调之前，都必须先清空 <code>nextTick</code> 和 <code>Promise</code> 队列</p></div><ul><li>执行 main <ul><li>输出 3，同步代码</li><li>check：1</li><li>nextTick：2</li><li>Promise：4</li></ul></li><li>进入事件循环 <ul><li>输出 2，nextTick 加入 6</li><li>输出 6</li><li>输出 4，nextTick 加入 5</li><li>输出 5</li><li>依次检查 timers、poll、check，输出 1</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 3
 * 2
 * 6
 * 4
 * 5
 * 1
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-面试题-2" tabindex="-1"><a class="header-anchor" href="#_8-面试题-2" aria-hidden="true">#</a> 8）面试题 2</h4><ul><li>执行 main <ul><li><mark>输出 script start</mark></li><li>timers：1ms 后加入 setTimeout0、3ms 后加入 setTimeout3</li><li>check：setImmediate</li><li>nextTick：nextTick</li><li>执行 async1 <ul><li><mark>输出 async1 start</mark></li><li>Promise：async1 end</li></ul></li><li>执行 async2 <ul><li><mark>输出 async2</mark></li></ul></li><li>执行 new Promise <ul><li><mark>输出 promise1、promise2</mark></li><li>Promise：async1 end、promise3</li></ul></li><li><mark>输出 script end</mark></li></ul></li><li>进入事件循环 <ul><li>清空 nextTick <ul><li><mark>输出 nextTick</mark></li></ul></li><li>情况 Promise <ul><li><mark>输出 async1 end</mark></li><li><mark>输出 promise3</mark></li></ul></li><li>输出结果可能性 1 <ul><li><mark>输出 setImmediate</mark></li><li><mark>输出 setTimeout0</mark></li><li><mark>输出 setTimeout3</mark></li></ul></li><li>输出结果可能性 2 <ul><li>输出 setTimeout0</li><li>输出 setImmediate</li><li>输出 setTimeout3</li></ul></li><li>输出结果可能性 3 <ul><li>输出 setTimeout0</li><li>输出 setTimeout3</li><li>输出 setImmediate</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async1 end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;async2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setImmediate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * script start
 * async1 start
 * async2
 * promise1
 * promise2
 * script end
 * nextTick
 * async1 end
 * promise3
 * setImmediate
 * setTimeout0
 * setTimeout3
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-eventemitter" tabindex="-1"><a class="header-anchor" href="#_13-eventemitter" aria-hidden="true">#</a> 13.EventEmitter</h3><ul><li>Node 事件管理的通用机制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内部维护多个事件队列，实际上就是一个数组对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;abc&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;bcd: &quot;</span><span class="token punctuation">[</span>fn1<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-创建一个事件处理对象" tabindex="-1"><a class="header-anchor" href="#_1-创建一个事件处理对象" aria-hidden="true">#</a> 1）创建一个事件处理对象</h4><ul><li>可以注册事件，也可以触发事件</li><li>触发事件时，会依次运行注册的时间函数（同步执行）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> EventEmitter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;abc事件触发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 注册事件</span>
ee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 移除注册事件</span>
ee<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

ee<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;bcd&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;只触发一次&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发事件</span>
ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;bcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 传递参数</span>
ee<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;cdf&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data1<span class="token punctuation">,</span> data2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;该事件触发了&quot;</span><span class="token punctuation">,</span> data1<span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ee<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;cdf&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-封装网络请求模块" tabindex="-1"><a class="header-anchor" href="#_2-封装网络请求模块" aria-hidden="true">#</a> 2）封装网络请求模块</h4><ul><li>MyRequest.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> EventEmitter <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">send</span><span class="token punctuation">(</span>body <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;response&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyRequest <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./MyPractice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRequest</span><span class="token punctuation">(</span><span class="token string">&quot;http://duyi.ke.qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;response&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">headers<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-mysql" tabindex="-1"><a class="header-anchor" href="#二-mysql" aria-hidden="true">#</a> （二）MySQL</h2>`,57),ts={href:"https://www.runoob.com/mysql/mysql-tutorial.html",target:"_blank",rel:"noopener noreferrer"},ps=p('<h3 id="_1-数据库简介" tabindex="-1"><a class="header-anchor" href="#_1-数据库简介" aria-hidden="true">#</a> 1.数据库简介</h3><ul><li>解决内存和磁盘存储数据格式不一致的问题 <ul><li>内存：只能暂时存储，和 CPU 交互，读取速度快</li><li>磁盘：字符串或二进制，文件形式，可以永久存储</li></ul></li></ul><h4 id="_1-作用" tabindex="-1"><a class="header-anchor" href="#_1-作用" aria-hidden="true">#</a> 1）作用</h4><ul><li>持久的存储数据 <ul><li>数据存储在硬盘文件中</li></ul></li><li>备份和恢复数据</li><li>快速地存取数据</li><li>权限控制</li></ul><h4 id="_2-类型" tabindex="-1"><a class="header-anchor" href="#_2-类型" aria-hidden="true">#</a> 2）类型</h4><ul><li>关系型数据库</li></ul><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>特点</td><td>以表和表的关联构成的数据结构</td></tr><tr><td>优点</td><td>能表达复杂的数据关系<br>强大的查询语言，能精确查找想要的数据</td></tr><tr><td>缺点</td><td>读写性能较差，尤其是海量数据的读写<br>数据结构比较死板，不能随意增删改数据列</td></tr><tr><td>用途</td><td>存储结构复杂的数据</td></tr><tr><td>代表</td><td>Oracle、MySQL、SQL Server</td></tr></tbody></table><ul><li>非关系型数据库</li></ul><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>特点</td><td>以极其简单的结构存储数据<br>文档型、键值对型</td></tr><tr><td>优点</td><td>海量数据读写效率很高<br>格式灵活可以随意增删改数据属性</td></tr><tr><td>缺点</td><td>难以表示复杂的数据结构<br>对于复杂查询效率低</td></tr><tr><td>用途</td><td>存储结构简单的数据</td></tr><tr><td>代表</td><td>MongoDB、Redis、Membase</td></tr></tbody></table><ul><li>面向对象数据库 <ul><li>适于 Java、C# 等强类型的面向对象语言</li><li>当需要将数据从内存原封不动地存储到硬盘中时，需要经过该数据库的适配</li><li>通常商业机构才会使用，需要收费</li></ul></li></ul><h4 id="_3-术语" tabindex="-1"><a class="header-anchor" href="#_3-术语" aria-hidden="true">#</a> 3）术语</h4><table><thead><tr><th>缩写</th><th>全称</th><th>含义</th></tr></thead><tbody><tr><td>DB</td><td>Database</td><td>数据库</td></tr><tr><td>DBA</td><td>Database Administrator</td><td>数据库管理员</td></tr><tr><td>DBMS</td><td>Database Management System</td><td>数据库管理系统</td></tr><tr><td>DBS</td><td>Database System</td><td>数据库系统<br>DBS 包含 DB、DBA、DBMS</td></tr></tbody></table><h3 id="_2-安装-mysql" tabindex="-1"><a class="header-anchor" href="#_2-安装-mysql" aria-hidden="true">#</a> 2.安装 MySQL</h3><h4 id="_1-mysql-特点" tabindex="-1"><a class="header-anchor" href="#_1-mysql-特点" aria-hidden="true">#</a> 1）MySQL 特点</h4><ul><li>属于关系型数据库</li><li>瑞典 MySQL AB 公司开发，已被 Oracle 收购</li><li>开源</li><li>轻量</li><li>快速</li></ul><h4 id="_2-下载" tabindex="-1"><a class="header-anchor" href="#_2-下载" aria-hidden="true">#</a> 2）下载</h4>',16),es={href:"https://dev.mysql.com/downloads/mysql/",target:"_blank",rel:"noopener noreferrer"},os={href:"https://pc.qq.com/detail/3/detail_1303.html",target:"_blank",rel:"noopener noreferrer"},cs=p(`<h4 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用" aria-hidden="true">#</a> 3）使用</h4><ul><li>进入 mysql 命令交互</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看当前数据库字符编码</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show variables like <span class="token string">&#39;character\\_set\\_%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改 <code>my.ini</code> 文件中的默认字符编码 <ul><li><code>C:\\ProgramData\\MySQL\\MySQL Server 8.0</code></li></ul></li></ul><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span>
<span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 <code>my.ini</code> 文件放置到 <code>C:\\Program Files\\MySQL\\MySQL Server 8.0\\</code> 目录下</li><li>停止 MySQL（Windows）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>net stop mysql80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>启动 MySQL（Windows）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>net start mysql80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看当前拥有的数据库</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show databases<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-可视化工具" tabindex="-1"><a class="header-anchor" href="#_4-可视化工具" aria-hidden="true">#</a> 4）可视化工具</h4><ul><li>Navicat</li></ul><h3 id="_3-数据库设计" tabindex="-1"><a class="header-anchor" href="#_3-数据库设计" aria-hidden="true">#</a> 3.数据库设计</h3><h4 id="_1-sql" tabindex="-1"><a class="header-anchor" href="#_1-sql" aria-hidden="true">#</a> 1）SQL</h4><ul><li>Structured Query Language 结构化查询语言</li><li>大部分关系型数据库都拥有基本一致的 SQL 语法</li></ul><table><thead><tr><th>分支</th><th>全称</th><th>操作对象</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language 数据定义语言</td><td>数据库对象（库、表、视图、存储过程）</td></tr><tr><td>DML</td><td>Data Manipulation Language 数据操控语言</td><td>数据库中的记录</td></tr><tr><td>DCL</td><td>Data Control Language 数据控制语句</td><td>用户权限</td></tr></tbody></table><h4 id="_2-管理库" tabindex="-1"><a class="header-anchor" href="#_2-管理库" aria-hidden="true">#</a> 2）管理库</h4><ul><li>创建库</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token identifier"><span class="token punctuation">\`</span>test<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>切换当前库</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除库</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-管理表" tabindex="-1"><a class="header-anchor" href="#_3-管理表" aria-hidden="true">#</a> 3）管理表</h4><ul><li>创建表</li><li>字段 <ul><li>字段名</li><li>字段类型</li><li>是否为 null</li><li>是否自增</li><li>默认值</li></ul></li></ul><table><thead><tr><th>字段类型</th><th>含义</th></tr></thead><tbody><tr><td><code>bit</code></td><td>占 1 位，0 或 1，true 或 false</td></tr><tr><td><code>int</code></td><td>占 32 位，整数</td></tr><tr><td><code>decimal(M, N)</code></td><td>能精确计算的实数<br>M 是总的数字位数，N 是小数位数</td></tr><tr><td><code>char(n)</code></td><td>固定长度位 n 的字符，不足字符自动补齐空格</td></tr><tr><td><code>varchar(n)</code></td><td>长度可变，最大长度位 n 的字符</td></tr><tr><td><code>text</code></td><td>大量的字符</td></tr><tr><td><code>date</code></td><td>仅日期</td></tr><tr><td><code>datetime</code></td><td>日期和时间</td></tr><tr><td><code>time</code></td><td>仅时间</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student <span class="token punctuation">(</span>
  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  birthday <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  sex <span class="token keyword">bit</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">,</span>
  stuno <span class="token keyword">int</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>stuno<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改表</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> student
<span class="token keyword">add</span> <span class="token keyword">column</span> phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">after</span> sex<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>删除表</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-主键和外键" tabindex="-1"><a class="header-anchor" href="#_4-主键和外键" aria-hidden="true">#</a> 4）主键和外键</h4><ul><li>根据设计原则，每张表都要有主键</li><li>主键 <ul><li>主键必须满足以下要求 <ul><li>唯一</li><li>不可更改</li><li>无业务含义</li></ul></li><li>可以是数字、字符串、UUID（全球唯一的长字符串）</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>外键 <ul><li>用于产生表关系的列</li><li>外键列会连接到另一张表（或自己）的主键</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> student
<span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>classid<span class="token punctuation">)</span> <span class="token keyword">references</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-表关系" tabindex="-1"><a class="header-anchor" href="#_5-表关系" aria-hidden="true">#</a> 5）表关系</h4><table><thead><tr><th>关系</th><th>描述</th><th>实现</th></tr></thead><tbody><tr><td>一对一</td><td>一个 A 对应一个 B，一个 B 对应一个 A<br>如：用户和用户信息</td><td>把任意一张表的主键同时设置为外键</td></tr><tr><td>一对多</td><td>一个 A 对应多个 B，一个 B 对应一个 A<br>A 和 B 是一对多，B 和 A 是多对一<br>如：班级和学生、用户和文章</td><td>在多一端的表上设置外键，对应到另一张表的主键</td></tr><tr><td>多对多</td><td>一个 A 对应多个 B，一个 B 对应多个 A<br>如：学生和老师</td><td>需要新建一张关系表，关系表至少包含两个外键，分别对应到两张表</td></tr></tbody></table><h4 id="_6-三大设计范式" tabindex="-1"><a class="header-anchor" href="#_6-三大设计范式" aria-hidden="true">#</a> 6）三大设计范式</h4><ul><li>要求数据库表的每一列都是不可分割的原子数据项 <ul><li>如：如果业务需要省市区可选，则地址列不能单独用“住址”列存储“中国广东省深圳市”</li></ul></li><li>非主键列必须依赖于主键列 <ul><li>如：学生表不应该有“广告名称”列，广告和学生没有关系</li></ul></li><li>非主键列必须直接依赖于主键列 <ul><li>如：学生表不应该有“班级名称”列，班级和学生是间接关系</li></ul></li></ul><h3 id="_4-表记录的增删改查-crud" tabindex="-1"><a class="header-anchor" href="#_4-表记录的增删改查-crud" aria-hidden="true">#</a> 4.表记录的增删改查（CRUD）</h3><ul><li>DML，Data Manipulation Language，数据操控语言</li></ul><h4 id="_1-增-create" tabindex="-1"><a class="header-anchor" href="#_1-增-create" aria-hidden="true">#</a> 1）增 Create</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 增加语句</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>stuno<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> classid<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;400&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成哥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1900-1-1&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;13344415246&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>stuno<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> classid<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;500&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;成哥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1900-1-1&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;13344415246&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token string">&#39;501&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;邓哥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1900-1-2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13344445556&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查-retrieve" tabindex="-1"><a class="header-anchor" href="#_2-查-retrieve" aria-hidden="true">#</a> 2）查 Retrieve</h4><h4 id="_3-改-update" tabindex="-1"><a class="header-anchor" href="#_3-改-update" aria-hidden="true">#</a> 3）改 Update</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> student <span class="token keyword">set</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&#39;邓旭明&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-删-delete" tabindex="-1"><a class="header-anchor" href="#_4-删-delete" aria-hidden="true">#</a> 4）删 Delete</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-单表基本查询" tabindex="-1"><a class="header-anchor" href="#_5-单表基本查询" aria-hidden="true">#</a> 5.单表基本查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> XXX <span class="token keyword">from</span> XXX <span class="token keyword">where</span> XXX <span class="token keyword">order</span> <span class="token keyword">by</span> XXX <span class="token keyword">limit</span> XXX<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运行顺序 <ul><li><code>from</code> =&gt; <code>where</code> =&gt; <code>select</code> =&gt; <code>order by</code> =&gt; <code>limit</code></li></ul></li></ul><h4 id="_1-select" tabindex="-1"><a class="header-anchor" href="#_1-select" aria-hidden="true">#</a> 1）select</h4><ul><li>别名</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> ismale <span class="token keyword">as</span> <span class="token string">&#39;性别&#39;</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token keyword">select</span> ismale <span class="token string">&#39;性别&#39;</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>*</code><ul><li>匹配数据源中的所有列</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;extra&#39;</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>case</code><ul><li>case 结束必须加上 <code>end</code></li><li>end 后面可以加上当前列的别名</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>
<span class="token comment">-- case ismale when 1 then &#39;男&#39; else &#39;女&#39; end sex,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> sex<span class="token punctuation">,</span>
salary
<span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token keyword">select</span> id<span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> sex<span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> salary <span class="token operator">&gt;=</span> <span class="token number">10000</span> <span class="token keyword">then</span> <span class="token string">&#39;高&#39;</span>
<span class="token keyword">when</span> salary <span class="token operator">&gt;=</span> <span class="token number">5000</span> <span class="token keyword">then</span> <span class="token string">&#39;中&#39;</span>
<span class="token keyword">else</span> <span class="token string">&#39;低&#39;</span> <span class="token keyword">end</span> <span class="token identifier"><span class="token punctuation">\`</span>level<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>
salary
<span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>distinct</code><ul><li>去重</li><li>一般只查一列</li><li>distinct 必须写在选择列最前面 <ul><li>作用域 from 前面所有选择列</li></ul></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token identifier"><span class="token punctuation">\`</span>location<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token comment">-- 结果表会去掉 location和id 组合起来后重复的数据，所以单独的一列数据还是会重复</span>
<span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token identifier"><span class="token punctuation">\`</span>location<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> id <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-from" tabindex="-1"><a class="header-anchor" href="#_2-from" aria-hidden="true">#</a> 2）from</h4><ul><li>单表查询时，from 后面的表是 <mark>原始表/物理表</mark>，即数据库中创建的表，存储在硬盘中</li><li>执行 select 语句时，将原始表的数据逐行读取到内存中，再筛选出 from 前的列，形成 <mark>结果表</mark>，存储在内存中</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span> loginid<span class="token punctuation">,</span> loginpwd<span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> id<span class="token punctuation">,</span> loginid<span class="token punctuation">,</span> loginpwd<span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span> <span class="token keyword">as</span> <span class="token string">&#39;额外的一列&#39;</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-where" tabindex="-1"><a class="header-anchor" href="#_3-where" aria-hidden="true">#</a> 3）where</h4><ul><li><code>=</code></li><li><code>in</code></li><li><code>is</code></li><li><code>is not</code></li><li><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code></li><li><code>between</code></li><li><code>like</code><ul><li><code>%</code> 表示可以匹配多个</li><li><code>_</code> 表示只匹配一个</li></ul></li><li><code>and</code></li><li><code>or</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> ismale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> department <span class="token keyword">where</span> companyId <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>location<span class="token punctuation">\`</span></span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> salary <span class="token operator">&gt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> salary <span class="token operator">between</span> <span class="token number">10000</span> <span class="token operator">and</span> <span class="token number">12000</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;%袁%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- X袁X</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;袁%&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 袁XX</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;袁_&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 袁X</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span>
<span class="token operator">and</span> ismale <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> salary <span class="token operator">&gt;=</span> <span class="token number">12000</span><span class="token punctuation">;</span>

<span class="token comment">-- 姓张且工资过12k 或者 出生日期在1996之后</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span>
<span class="token operator">and</span> ismale <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> salary <span class="token operator">&gt;=</span> <span class="token number">12000</span>
<span class="token operator">or</span> birthday <span class="token operator">&gt;=</span> <span class="token string">&#39;1996-1-1&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 姓张且工资过12k 或者 姓张且出生日期在1996之后</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span>
<span class="token operator">and</span> ismale <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">and</span> <span class="token punctuation">(</span>salary <span class="token operator">&gt;=</span> <span class="token number">12000</span> <span class="token operator">or</span> birthday <span class="token operator">&gt;=</span> <span class="token string">&#39;1996-1-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-order-by" tabindex="-1"><a class="header-anchor" href="#_4-order-by" aria-hidden="true">#</a> 4）order by</h4><ul><li><code>asc</code><ul><li>ascending，升序</li></ul></li><li><code>desc</code><ul><li>descending，降序</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span>
<span class="token operator">and</span> ismale <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">and</span> <span class="token punctuation">(</span>salary <span class="token operator">&gt;=</span> <span class="token number">12000</span> <span class="token operator">or</span> birthday <span class="token operator">&gt;=</span> <span class="token string">&#39;1996-1-1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">asc</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>
<span class="token keyword">case</span> ismale <span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> sex
<span class="token keyword">from</span> employee
<span class="token keyword">order</span> <span class="token keyword">by</span> sex <span class="token keyword">asc</span><span class="token punctuation">,</span> salary <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-limit" tabindex="-1"><a class="header-anchor" href="#_5-limit" aria-hidden="true">#</a> 5）limit</h4><ul><li><code>n, m</code></li><li>跳过 n 条数据，取出 m 条数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 取出第3-5条数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-练习" tabindex="-1"><a class="header-anchor" href="#_6-练习" aria-hidden="true">#</a> 6）练习</h4><ul><li>查询 user 表，得到账号为 admin，密码为 123456 的用户</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> loginid <span class="token operator">=</span> <span class="token string">&#39;admin&#39;</span> <span class="token operator">and</span> loginpwd <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查询员工表，按照员工的入职时间降序排序，并且使用分页查询</li><li>查询第 3 页，每页 5 条数据</li><li><code>limit (page - 1) * pagesize, pagesize</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
<span class="token keyword">order</span> <span class="token keyword">by</span> joinDate <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询工资最高的女员工</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee
<span class="token keyword">where</span> ismale <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span>
<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-联表查询" tabindex="-1"><a class="header-anchor" href="#_6-联表查询" aria-hidden="true">#</a> 6.联表查询</h3><h4 id="_1-笛卡尔积" tabindex="-1"><a class="header-anchor" href="#_1-笛卡尔积" aria-hidden="true">#</a> 1）笛卡尔积</h4><ul><li>多张表相乘</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">,</span> company<span class="token punctuation">;</span>

<span class="token keyword">select</span> t1<span class="token punctuation">.</span>name 主场<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>name 客场 <span class="token keyword">from</span> team <span class="token keyword">as</span> t1<span class="token punctuation">,</span> team <span class="token keyword">as</span> t2
<span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">!=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-左连接" tabindex="-1"><a class="header-anchor" href="#_2-左连接" aria-hidden="true">#</a> 2）左连接</h4><ul><li>又叫左外连接，left join</li><li>依次取出 <mark>表 1</mark> 中的数据，依次比对 <mark>表 2</mark> 每一条数据是否满足 on 的条件 <ul><li>满足则将当前表 1 的数据行和当前表 2 的数据行拼接成结果集中新的一行</li></ul></li><li>如果表 2 没有对应数据，表 1 的数据需要单独形成一行，结果集的表 2 区域全为 null <ul><li><mark>左表的记录必须出现一次</mark></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> department <span class="token keyword">as</span> d
<span class="token keyword">left</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e
<span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-右连接" tabindex="-1"><a class="header-anchor" href="#_3-右连接" aria-hidden="true">#</a> 3）右连接</h4><ul><li>又叫右外连接，right join</li><li>依次取出 <mark>表 2</mark> 中的数据，依次比对 <mark>表 1</mark> 每一条数据是否满足 on 的条件 <ul><li>满足则将当前表 1 的数据行和当前表 2 的数据行拼接成结果集中新的一行</li></ul></li><li>如果表 1 没有对应数据，表 2 的数据需要单独形成一行，结果集的表 1 区域全为 null <ul><li><mark>右表的记录必须出现一次</mark></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">as</span> e
<span class="token keyword">right</span> <span class="token keyword">join</span> department <span class="token keyword">as</span> d
<span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-内连接" tabindex="-1"><a class="header-anchor" href="#_4-内连接" aria-hidden="true">#</a> 4）内连接</h4><ul><li>inner join</li><li>依次取出表 1 中的数据，依次比对表 2 每一条数据是否满足 on 的条件 <ul><li>满足则将当前表 1 的数据行和当前表 2 的数据行拼接成结果集中新的一行</li></ul></li><li>如果表 1 没有对应数据，则不出现在结果集中 <ul><li><mark>条件必须满足才出现</mark></li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> department <span class="token keyword">as</span> d
<span class="token keyword">inner</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e
<span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId<span class="token punctuation">;</span>

<span class="token keyword">select</span> e<span class="token punctuation">.</span>name <span class="token keyword">as</span> empname<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">as</span> dptname<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name <span class="token keyword">as</span> comname
<span class="token keyword">from</span> department <span class="token keyword">as</span> d
<span class="token keyword">inner</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company <span class="token keyword">as</span> c <span class="token keyword">on</span> d<span class="token punctuation">.</span>companyId <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-练习" tabindex="-1"><a class="header-anchor" href="#_5-练习" aria-hidden="true">#</a> 5）练习</h4><ul><li>显示出所有员工的姓名、性别（使用男或女显示）、入职时间、薪水、所属部门（显示部门名称）、所属公司（显示公司名称）</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name 员工姓名<span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> e<span class="token punctuation">.</span>ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> 性别<span class="token punctuation">,</span>
e<span class="token punctuation">.</span>joinDate 入职时间<span class="token punctuation">,</span>
e<span class="token punctuation">.</span>salary 薪水<span class="token punctuation">,</span>
d<span class="token punctuation">.</span>name 所属部门<span class="token punctuation">,</span>
c<span class="token punctuation">.</span>name 所属公司
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> d<span class="token punctuation">.</span>companyId <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询腾讯和蚂蚁金服的所有员工姓名、性别、入职时间、部门名、公司名</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name 员工姓名<span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> e<span class="token punctuation">.</span>ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> 性别<span class="token punctuation">,</span>
e<span class="token punctuation">.</span>joinDate 入职时间<span class="token punctuation">,</span>
d<span class="token punctuation">.</span>name 部门名<span class="token punctuation">,</span>
c<span class="token punctuation">.</span>name 公司名
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> d<span class="token punctuation">.</span>companyId <span class="token operator">=</span> c<span class="token punctuation">.</span>id
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;腾讯科技&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蚂蚁金服&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询渡一教学部的所有员工姓名、性别、入职时间、部门名、公司名</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name 员工姓名<span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> e<span class="token punctuation">.</span>ismale <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">end</span> 性别<span class="token punctuation">,</span>
e<span class="token punctuation">.</span>joinDate 入职时间<span class="token punctuation">,</span>
d<span class="token punctuation">.</span>name 部门名<span class="token punctuation">,</span>
c<span class="token punctuation">.</span>name 公司名
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> d<span class="token punctuation">.</span>companyId <span class="token operator">=</span> c<span class="token punctuation">.</span>id
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span> <span class="token operator">and</span> d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;教学部&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-函数和分组" tabindex="-1"><a class="header-anchor" href="#_7-函数和分组" aria-hidden="true">#</a> 7.函数和分组</h3><h4 id="_1-内置函数" tabindex="-1"><a class="header-anchor" href="#_1-内置函数" aria-hidden="true">#</a> 1）内置函数</h4><ul><li>数学函数</li></ul><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td><code>ABS(x)</code></td><td>返回 x 的绝对值</td></tr><tr><td><code>CEIL(x)</code> <br> <code>CEILING(x)</code></td><td>返回大于 x 的最小整数值【向上取整】</td></tr><tr><td><code>FLOOR(X)</code></td><td>返回小于 x 的最大整数值【向下取整】</td></tr><tr><td><code>MOD(x, y)</code></td><td>返回 x/y 的模（余数）</td></tr><tr><td><code>PI()</code></td><td>返回 pi 的值（圆周率）</td></tr><tr><td><code>RAND()</code></td><td>返回 0 到 1 内的随机值</td></tr><tr><td><code>ROUND(x, y)</code></td><td>返回参数 x 的 <mark>四舍五入</mark> 后有 y 位小数的值</td></tr><tr><td><code>TRUNCATE(x, y)</code></td><td>返回数字 x <mark>截断</mark> 为 y 位小数的结果</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> ceil<span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>聚合函数</mark><ul><li>只能查出一列</li><li>但是可以查询多个聚合函数</li></ul></li></ul><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG(col)</code></td><td>返回指定列的平均值</td></tr><tr><td><code>COUNT(col)</code></td><td>返回指定列中 <mark>非 NULL 值</mark> 的个数</td></tr><tr><td><code>MIN(col)</code></td><td>返回指定列的最小值</td></tr><tr><td><code>MAX(col)</code></td><td>返回指定列的最大值</td></tr><tr><td><code>SUM(col)</code></td><td>返回指定列的所有值之和</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> avg <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token comment">-- 报错</span>
<span class="token comment">-- select avg(salary), id as avg from employee;</span>

<span class="token comment">-- 查出所有有id的员工的数量，即员工数量</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token comment">-- 先查出所有员工，每一行中只要有一列非null就加入结果集，最后返回结果集总数量</span>
<span class="token comment">-- 由于id是主键，一定非null，所以 count(*) 和 count(id) 效果一致</span>
<span class="token comment">-- 尽量别用 count(*) ，需要比对全部列，消耗性能且占用内存</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> 员工数量<span class="token punctuation">,</span>
<span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 平均薪资<span class="token punctuation">,</span>
<span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 总薪资<span class="token punctuation">,</span>
<span class="token function">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> 最低薪资
<span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>字符函数</li></ul><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td><code>CONCAT(s1, s2, ..., sn)</code></td><td>将 s1, s2, ..., sn 连接成字符串</td></tr><tr><td><code>CONCAT_WS(sep, s1, s2, ..., sn)</code></td><td>将 s1, s2, ..., sn 连接成字符串，并用 sep 字符作间隔</td></tr><tr><td><code>TRIM(str)</code></td><td>去除字符串首部和尾部的所有空格</td></tr><tr><td><code>LTRIM(str)</code></td><td>从字符串 str 中去除首部的空格</td></tr><tr><td><code>RTRIM(str)</code></td><td>从字符串 str 中去除尾部的空格</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>

<span class="token keyword">select</span> concat_ws<span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>日期函数</li></ul><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td><code>CURDATE()</code> 或 <code>CURRENT_DATE()</code></td><td>返回当前的日期</td></tr><tr><td><code>CURTIME()</code> 或 <code>CURRENT_TIME()</code></td><td>返回当前的时间</td></tr><tr><td><code>TIMESTAMPDIFF(part, date1, date2)</code></td><td>返回 date1 到 date2 之间相隔的 part 值<br>part 用于指定的相隔的年或月或日等<br>part 取值：microsecond、second、minute、hour、day、week、month、quarter、year<br>一般用于计算年龄</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">hour</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-1-1 11:11:11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-1-2 11:11:11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 计算年龄</span>
<span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>
timestampdiff<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age
<span class="token keyword">from</span> employee <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-自定义函数" tabindex="-1"><a class="header-anchor" href="#_2-自定义函数" aria-hidden="true">#</a> 2）自定义函数</h4><h4 id="_3-分组" tabindex="-1"><a class="header-anchor" href="#_3-分组" aria-hidden="true">#</a> 3）分组</h4><ul><li>适用于复杂查询</li><li>运行顺序 <ul><li><code>from</code> =&gt; <code>join...on...</code> =&gt; <code>where</code> =&gt; <code>group by</code> =&gt; <code>select</code> =&gt; <code>having</code> =&gt; <code>order by</code> =&gt; <code>limit</code></li></ul></li><li>分组后只能查询分组的列和聚合列</li><li>分组后筛选只能使用 having</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询员工分布的居住地，以及每个居住地有多少名员工，如：天府三街 3</span>
<span class="token keyword">select</span> location<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> empnum
<span class="token keyword">from</span> employee <span class="token keyword">group</span> <span class="token keyword">by</span> location<span class="token punctuation">;</span>

<span class="token keyword">select</span> location<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> empnum
<span class="token keyword">from</span> employee
<span class="token keyword">group</span> <span class="token keyword">by</span> location
<span class="token keyword">having</span> empnum <span class="token operator">&gt;=</span> <span class="token number">40</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询所有薪水在10000以上的员工分布的居住地，仅得到员工数量大于30的结果</span>
<span class="token keyword">select</span> location<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> empnum
<span class="token keyword">from</span> employee
<span class="token keyword">where</span> salary <span class="token operator">&gt;=</span> <span class="token number">10000</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> location
<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-练习" tabindex="-1"><a class="header-anchor" href="#_4-练习" aria-hidden="true">#</a> 4）练习</h4><ul><li>查询渡一每个部门的员工数量</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> d<span class="token punctuation">.</span>name dname<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">enum</span>
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> d<span class="token punctuation">.</span>id<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询每个公司的员工数量</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> c<span class="token punctuation">.</span>name cname<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">enum</span>
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>查询所有公司 15 年内入职的居住在万家湾的女员工数量</mark></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 错误</span>
<span class="token comment">-- select c.name cname, count(e.id) enum,</span>
<span class="token comment">-- timestampdiff(year, e.joinDate, CURDATE()) as 入职年限</span>
<span class="token comment">-- from employee e</span>
<span class="token comment">-- inner join department d on d.id = e.deptId</span>
<span class="token comment">-- inner join company c on c.id = d.companyId</span>
<span class="token comment">-- where e.ismale = 0 and e.location like &#39;%万家湾%&#39;</span>
<span class="token comment">-- group by c.name</span>
<span class="token comment">-- having 入职年限 &lt;= 15;</span>

<span class="token keyword">select</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
<span class="token keyword">case</span> <span class="token keyword">when</span> r<span class="token punctuation">.</span><span class="token keyword">enum</span> <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token number">0</span> <span class="token keyword">else</span> r<span class="token punctuation">.</span><span class="token keyword">enum</span> <span class="token keyword">end</span> number
<span class="token keyword">from</span> company c <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span>
	<span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">enum</span>
	<span class="token keyword">from</span> employee e
	<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
	<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
	<span class="token keyword">where</span> e<span class="token punctuation">.</span>ismale <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">and</span> e<span class="token punctuation">.</span>location <span class="token operator">like</span> <span class="token string">&#39;%万家湾%&#39;</span>
	<span class="token operator">and</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>joinDate<span class="token punctuation">,</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">15</span>
	<span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name
<span class="token punctuation">)</span> <span class="token keyword">as</span> r
<span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询渡一所有员工分布在哪些居住地，每个居住地的数量</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>location location<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">enum</span>
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> e<span class="token punctuation">.</span>location<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询员工人数大于 200 的公司信息</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- group by 最好只查一列</span>
<span class="token comment">-- select c.*, count(e.id) enum</span>
<span class="token comment">-- from employee e</span>
<span class="token comment">-- inner join department d on d.id = e.deptId</span>
<span class="token comment">-- inner join company c on c.id = d.companyId</span>
<span class="token comment">-- group by c.id</span>
<span class="token comment">-- having enum &gt; 200;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company
<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span>
  <span class="token keyword">select</span> c<span class="token punctuation">.</span>id
  <span class="token keyword">from</span> company <span class="token keyword">as</span> c <span class="token keyword">inner</span> <span class="token keyword">join</span> department <span class="token keyword">as</span> d <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyid
  <span class="token keyword">inner</span> <span class="token keyword">join</span> employee <span class="token keyword">as</span> e <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptid
  <span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span>
  <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">200</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询渡一公司里比它平均工资高的员工</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span>
<span class="token operator">and</span> e<span class="token punctuation">.</span>salary <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>
	<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employee e
  <span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
  <span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
  <span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询渡一所有名字为两个字和三个字的员工对应人数</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> char_length<span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span> nameLength<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">enum</span>
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> nameLength
<span class="token keyword">having</span> nameLength <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询每个公司每个月的总支出薪水，并按照从低到高排序</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> c<span class="token punctuation">.</span>name cname<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> totalSalary
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name
<span class="token keyword">order</span> <span class="token keyword">by</span> totalSalary <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-视图" tabindex="-1"><a class="header-anchor" href="#_8-视图" aria-hidden="true">#</a> 8.视图</h3><ul><li>操作视图属于 DDL</li><li>数据存储在内存中</li><li>可以简化 SQL 查询</li><li>可以减少网络传输 <ul><li>Node 程序中需要向 MySQL 数据库传输 SQL 语句</li><li>越简单的语句传输越快，传输的数据量越少</li></ul></li></ul><h4 id="_1-创建视图" tabindex="-1"><a class="header-anchor" href="#_1-创建视图" aria-hidden="true">#</a> 1）创建视图</h4><ul><li><code>create view 视图名 as 查询语句;</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">view</span> empinfo <span class="token keyword">as</span> <span class="token keyword">select</span> c<span class="token punctuation">.</span>name cname<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> totalSalary
<span class="token keyword">from</span> employee e
<span class="token keyword">inner</span> <span class="token keyword">join</span> department d <span class="token keyword">on</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> e<span class="token punctuation">.</span>deptId
<span class="token keyword">inner</span> <span class="token keyword">join</span> company c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> d<span class="token punctuation">.</span>companyId
<span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name
<span class="token keyword">order</span> <span class="token keyword">by</span> totalSalary <span class="token keyword">asc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查询视图" tabindex="-1"><a class="header-anchor" href="#_2-查询视图" aria-hidden="true">#</a> 2）查询视图</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> empinfo <span class="token keyword">where</span> cname <span class="token operator">like</span> <span class="token string">&#39;%渡一%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三-数据驱动和-orm" tabindex="-1"><a class="header-anchor" href="#三-数据驱动和-orm" aria-hidden="true">#</a> （三）数据驱动和 ORM</h2><h3 id="_1-mysql-驱动程序" tabindex="-1"><a class="header-anchor" href="#_1-mysql-驱动程序" aria-hidden="true">#</a> 1.MySQL 驱动程序</h3><h4 id="_1-驱动程序" tabindex="-1"><a class="header-anchor" href="#_1-驱动程序" aria-hidden="true">#</a> 1）驱动程序</h4><ul><li>是连接内存和其他存储介质的桥梁</li><li>MySQL 驱动程序是连接内存数据和 MySQL 数据的桥梁</li><li>MySQL 为不同编程语言提供了不同的驱动程序包 <ul><li>MySQL <ul><li>官方驱动</li></ul></li><li>MySQL2 <ul><li>第三方驱动</li><li>前身为 MySQL-Native</li><li>优化好，运行效率较高，推荐</li></ul></li><li>接口基本一致</li></ul></li></ul><h4 id="_2-使用-mysql2-createconnection" tabindex="-1"><a class="header-anchor" href="#_2-使用-mysql2-createconnection" aria-hidden="true">#</a> 2）使用 MySQL2 createConnection</h4>`,150),ls={href:"https://github.com/sidorares/node-mysql2#readme",target:"_blank",rel:"noopener noreferrer"},is=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> mysql2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>回调模式 CRUD</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个数据库连接</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;companydb&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select * from company;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// err 错误</span>
  <span class="token comment">// result 查询结果</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// results contains rows returned by server</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 新增</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
  <span class="token string">&quot;insert into company(name, location, buildDate) values(&#39;abc&#39;, &#39;阿萨德&#39;, curdate());&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;update company set name = &#39;bcd&#39; where id = 4&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除</span>
connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;delete from company where id = 4&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 断开连接</span>
connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>异步模式 CRUD</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2/promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123123.&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;companydb&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token string">&quot;select * from company where id = 5;&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
  connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-防止-sql-注入" tabindex="-1"><a class="header-anchor" href="#_3-防止-sql-注入" aria-hidden="true">#</a> 3）防止 SQL 注入</h4><ul><li>用户通过注入 SQL 语句到最终查询中，导致整个 SQL 与预期行为不符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2/promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123123.&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;companydb&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">multipleStatements</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许运行多条SQL语句，默认false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// SQL 不能直接用字符串书写，否则有 SQL 注入的风险</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from company where id = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
  connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&#39;&#39;; delete from company where id = 5</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-解决-sql-注入隐患-execute" tabindex="-1"><a class="header-anchor" href="#_4-解决-sql-注入隐患-execute" aria-hidden="true">#</a> 4）解决 SQL 注入隐患 execute</h4><ul><li>MySQL 支持变量 <ul><li>变量的内容不作为任何 SQL 关键字</li><li>形成的语句称为预编译的 SQL 语句</li></ul></li><li>sql 语句待填充的位置要用 <code>?</code> 占位</li><li><mark>不直接使用 query 运行，先使用 execute 预编译</mark><ul><li>参数传入 sql 模板，数组为模板中所有 <code>?</code> 待填充的数据</li><li>模糊查询需要使用 <code>concat(&#39;%&#39;, ?, &#39;%&#39;)</code></li><li>驱动程序内部使用变量的模式将数据填充进 sql 语句中</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2/promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123123.&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;companydb&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">multipleStatements</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许运行多条SQL语句，默认false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// SQL 不能直接用字符串书写，否则有 SQL 注入的风险</span>
  <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from company where id = ?;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
  connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&#39;&#39;; delete from company where id = 5</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-使用连接池-createpool" tabindex="-1"><a class="header-anchor" href="#_5-使用连接池-createpool" aria-hidden="true">#</a> 5）使用连接池 createPool</h4><ul><li>Node 程序和 MySQL 数据库需要建立多条连接 <ul><li>一个请求建立一条连接</li><li>如果没有及时释放连接，会占用大量服务器资源</li><li>同时过多的连接会导致服务器卡顿</li></ul></li><li>最优雅的实现方式是创建连接池（数组） <ul><li>保存了所有的连接对象</li><li>连接池中连接达到阈值后，新来的请求都需要等待</li><li>避免服务器资源占用</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql2/promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;companydb&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">multipleStatements</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个数据库连接</span>
  <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">select * from employee where \\\`name\\\` like concat(&#39;%&#39;, ?, &#39;%&#39;);</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>results<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;袁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-sequelize-简介" tabindex="-1"><a class="header-anchor" href="#_2-sequelize-简介" aria-hidden="true">#</a> 2.Sequelize 简介</h3>`,15),us={href:"https://github.com/demopark/sequelize-docs-Zh-CN",target:"_blank",rel:"noopener noreferrer"},rs=p('<h4 id="_1-orm-框架" tabindex="-1"><a class="header-anchor" href="#_1-orm-框架" aria-hidden="true">#</a> 1）ORM 框架</h4><ul><li>Object Relational Mapping 对象关系映射</li><li>不同的后端编程语言都有不同的 ORM 框架</li><li>通过 ORM 框架，可以自动地把程序中的对象和数据库关联</li><li>ORM 框架会隐藏具体的数据库底层细节，让开发者使用同样的数据操作接口，完成对不同数据库的操作</li><li>优势 <ul><li>开发者无需关注数据库，仅需关心对象</li><li>可轻易地完成数据库的移植</li><li>无需拼接复杂的 SQL 语句，即可完成精确查询</li></ul></li></ul><p><img src="'+an+`" alt=""></p><h4 id="_2-node-中的-orm" tabindex="-1"><a class="header-anchor" href="#_2-node-中的-orm" aria-hidden="true">#</a> 2）Node 中的 ORM</h4><ul><li>Sequelize <ul><li>支持 JS、TS</li><li>成熟</li></ul></li><li>TypeORM <ul><li>只支持 TS</li><li>不成熟</li></ul></li></ul><h3 id="_3-模型定义和同步" tabindex="-1"><a class="header-anchor" href="#_3-模型定义和同步" aria-hidden="true">#</a> 3.模型定义和同步</h3><ul><li>案例：学校数据库</li><li>四张表（四个模型） <ul><li>管理员：id、账号、密码、姓名</li><li>班级：id、名称、开班时间</li><li>学生：id、姓名、出生日期、性别、联系电话、所属班级</li><li>书籍：id、名称、图片、出版时间、作者</li></ul></li></ul><h4 id="_1-安装-sequelize" tabindex="-1"><a class="header-anchor" href="#_1-安装-sequelize" aria-hidden="true">#</a> 1）安装 Sequelize</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i sequelize mysql2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;mysql2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.1.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sequelize&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.21.5&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-连接到数据库" tabindex="-1"><a class="header-anchor" href="#_2-连接到数据库" aria-hidden="true">#</a> 2）连接到数据库</h4><ul><li>models 文件夹，存放各种模型 <ul><li>可以简单地理解为一张数据表对应一个模型</li><li>模型本质是一个 JS 对象</li></ul></li><li>创建并导出 ORM 实例 <ul><li>一个系统使用一个 ORM 实例即可</li><li>内部创建了连接池</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/db.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&quot;myschooldb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库类型</span>
  <span class="token literal-property property">logging</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 隐藏数据库操作日志</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sequelize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试连接</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./models/db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> sequelize<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Connection has been established successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to connect to the database:&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-定义模型" tabindex="-1"><a class="header-anchor" href="#_3-定义模型" aria-hidden="true">#</a> 3）定义模型</h4><ul><li>主键列不需要定义，会自动生成</li><li>define 函数的参数 1 是模型名，默认会对应生成数据表名 <code>\${模型名}s</code><ul><li>如：Admin -&gt; Admins</li></ul></li><li>如果不希望该默认，可以传入第三个参数配置对象 <ul><li>配置 <code>freezeTableName: true</code></li><li>或者直接指定表名 <code>tableName: &quot;administrator&quot;</code></li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">模型命名</p><p>规范是首字母大写，看作类</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/Admin.js</span>
<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> DataTypes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个模型对象</span>
<span class="token keyword">const</span> Admin <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
  <span class="token string">&quot;Admin&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loginPwd</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// freezeTableName: true,</span>
    <span class="token comment">// tableName: &#39;administrator&#39;,</span>
    <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">paranoid</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 配置后，该表的数据不会真正的删除，而是增加一列deletedAt，记录删除的时间</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// // 将模型同步到数据库中，生成数据表</span>
<span class="token comment">// (async () =&gt; {</span>
<span class="token comment">//   await Admin.sync({</span>
<span class="token comment">//     alter: true,</span>
<span class="token comment">//   });</span>
<span class="token comment">// })();</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Admin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-定义模型间的关系" tabindex="-1"><a class="header-anchor" href="#_4-定义模型间的关系" aria-hidden="true">#</a> 4）定义模型间的关系</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/relation.js</span>
<span class="token keyword">const</span> Class <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Student <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Class<span class="token punctuation">.</span><span class="token function">hasMany</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span><span class="token function">belongsTo</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-同步所有模型" tabindex="-1"><a class="header-anchor" href="#_5-同步所有模型" aria-hidden="true">#</a> 5）同步所有模型</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/sync.js</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./db&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sequelize
  <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">alter</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;所有模型同步完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-模型的增删改" tabindex="-1"><a class="header-anchor" href="#_4-模型的增删改" aria-hidden="true">#</a> 4.模型的增删改</h3><h4 id="_1-三层架构" tabindex="-1"><a class="header-anchor" href="#_1-三层架构" aria-hidden="true">#</a> 1）三层架构</h4><ul><li>搭建后端工程的基本框架</li></ul><p><img src="`+tn+`" alt=""></p><ul><li>路由层 <ul><li>原来叫 UI 层，又叫服务层/API 层</li></ul></li><li>服务层 <ul><li>又叫业务逻辑层</li></ul></li><li>数据访问层 <ul><li>Java 中为 DAO，Data Access Object</li><li>C#中为 DAL，Data Access Layer</li><li>一般这一层都使用 ORM 框架</li></ul></li><li>Node 中三层架构对应的文件夹 <ul><li>路由层 —— routes</li><li>服务层 —— services</li><li>数据访问层 —— models</li></ul></li></ul><h4 id="_2-增加" tabindex="-1"><a class="header-anchor" href="#_2-增加" aria-hidden="true">#</a> 2）增加</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// services/adminService.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">addAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * TODO
   * 应该判断adminObj的各种属性是否合理，以及帐号是否已存在
   * 传入operatorId当前操作用户id，判断是否是管理员
   */</span>

  <span class="token comment">// 方式1</span>
  <span class="token comment">// // 同步方法，构建一个模型实例</span>
  <span class="token comment">// const ins = Admin.build({</span>
  <span class="token comment">//   loginId: &quot;abc&quot;,</span>
  <span class="token comment">//   loginPwd: &quot;123&quot;,</span>
  <span class="token comment">// });</span>
  <span class="token comment">// ins.loginId = &quot;bcd&quot;;</span>
  <span class="token comment">// // 异步方法，同步到数据库</span>
  <span class="token comment">// ins.save().then(() =&gt; {</span>
  <span class="token comment">//   console.log(&quot;新建管理员成功&quot;);</span>
  <span class="token comment">// });</span>

  <span class="token comment">// 方式2</span>
  <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将实例对象扁平化</span>
  <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除" tabindex="-1"><a class="header-anchor" href="#_3-删除" aria-hidden="true">#</a> 3）删除</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// services/adminService.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">deleteAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">adminId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 方式1：有实例可以直接删除，没有实例则执行了两条语句</span>
  <span class="token comment">// // 1.得到实例</span>
  <span class="token comment">// const ins = await Admin.findByPk(adminId);</span>
  <span class="token comment">// // 2.删除数据</span>
  <span class="token comment">// ins &amp;&amp; await ins.destroy();</span>

  <span class="token comment">// 方式2：不需要实例，只执行一条语句</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> adminId<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-修改" tabindex="-1"><a class="header-anchor" href="#_4-修改" aria-hidden="true">#</a> 4）修改</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">updateAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 方式1：有实例可以直接修改，没有实例则执行了两条语句</span>
  <span class="token comment">// // 1.得到实例</span>
  <span class="token comment">// const ins = await Admin.findByPk(id);</span>
  <span class="token comment">// // 2.修改数据</span>
  <span class="token comment">// ins.loginId = adminObj.loginId;</span>
  <span class="token comment">// // 3.保存</span>
  <span class="token comment">// ins.save();</span>

  <span class="token comment">// 方式2：不需要实例，只执行一条语句</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-模拟数据" tabindex="-1"><a class="header-anchor" href="#_5-模拟数据" aria-hidden="true">#</a> 5.模拟数据</h3>`,35),ks={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},ds=p(`<ul><li>mock/mockClass.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;datas|16&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;id|+1&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;前端第 @id 期&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">openDate</span><span class="token operator">:</span> <span class="token string">&quot;@date&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datas<span class="token punctuation">;</span>

<span class="token keyword">const</span> Class <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Class<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mock/mockStudent.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;datas|500-700&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;@cname&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">birthday</span><span class="token operator">:</span> <span class="token string">&quot;@date&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;sex|1-2&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1\\d{10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token comment">//   location: &quot;@city(true)&quot;,</span>
      <span class="token string-property property">&quot;ClassId|1-16&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>datas<span class="token punctuation">;</span>

<span class="token keyword">const</span> Student <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Student<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-数据抓取" tabindex="-1"><a class="header-anchor" href="#_6-数据抓取" aria-hidden="true">#</a> 6.数据抓取</h3><h4 id="_1-抓取豆瓣读书中的书籍信息" tabindex="-1"><a class="header-anchor" href="#_1-抓取豆瓣读书中的书籍信息" aria-hidden="true">#</a> 1）抓取豆瓣读书中的书籍信息</h4>`,6),vs={href:"https://book.douban.com/latest",target:"_blank",rel:"noopener noreferrer"},ms=n("h4",{id:"_2-涉及的库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-涉及的库","aria-hidden":"true"},"#"),s(" 2）涉及的库")],-1),bs={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},hs=n("ul",null,[n("li",null,"发送一个 http 请求，得到服务器的响应结果"),n("li",null,"客户端和服务器通用")],-1),gs={href:"https://github.com/cheeriojs/cheerio#readme",target:"_blank",rel:"noopener noreferrer"},ys=n("ul",null,[n("li",null,"JQuery 的核心库"),n("li",null,"与 DOM 无关")],-1),qs=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// spider/fetchBook.js</span>
<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;axios&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cheerio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Book <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获取豆瓣读书网页的源代码
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getBooksHTML</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://book.douban.com/latest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 从豆瓣读书中得到一个完整的网页，并从网页中分析出书籍的基本信息
 * 获得书籍的详情页链接数组
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getBooksLinks</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> booksHTML <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBooksHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获得cheerio操作对象</span>
  <span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>booksHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获得新书速递首页40本书籍的封面a元素</span>
  <span class="token keyword">const</span> linkElements <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.chart-dashed-list .media .media__img a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 遍历a元素数组，取出所有详情页链接</span>
  <span class="token keyword">const</span> links <span class="token operator">=</span> linkElements<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> link</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> link<span class="token punctuation">.</span>attribs<span class="token punctuation">[</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> links<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据书籍详情页的地址，获得该书籍的详细信息
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">detailUrl</span> 详情页链接
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getBookDetail</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">detailUrl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获得详情页的网页源代码和cheerio操作对象</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>detailUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取书籍名称</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;h1 span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取书籍封面图片链接</span>
  <span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#content .article #mainpic .nbg img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取书籍作者</span>
  <span class="token keyword">const</span> spanElements <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#content .article #info span.pl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> authorElement <span class="token operator">=</span> spanElements<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;作者&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> author <span class="token operator">=</span> authorElement<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取书籍出版年</span>
  <span class="token keyword">const</span> publishElement <span class="token operator">=</span> spanElements<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;出版年&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> publishDate <span class="token operator">=</span> publishElement<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nextSibling<span class="token punctuation">.</span>nodeValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">,</span>
    imgUrl<span class="token punctuation">,</span>
    author<span class="token punctuation">,</span>
    publishDate<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获得所有的书籍信息
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">getBooksInfo</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> booksLinks <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBooksLinks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> promises <span class="token operator">=</span> booksLinks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getBookDetail</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获得书籍信息，然后保存到数据库
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">setBooksInfoToDB</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> booksInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBooksInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> Book<span class="token punctuation">.</span><span class="token function">bulkCreate</span><span class="token punctuation">(</span>booksInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;书籍信息爬取成功，已保存到数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">setBooksInfoToDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-数据查询" tabindex="-1"><a class="header-anchor" href="#_7-数据查询" aria-hidden="true">#</a> 7.数据查询</h3>`,2),fs={href:"https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md",target:"_blank",rel:"noopener noreferrer"},ws=p(`<table><thead><tr><th>常用 API</th><th>说明</th></tr></thead><tbody><tr><td><code>findOne</code></td><td>查询单条数据</td></tr><tr><td><code>findByPK</code></td><td>根据主键查询单条数据</td></tr><tr><td><code>findAll</code></td><td>查询多条数据</td></tr><tr><td><code>count</code></td><td>查询数量</td></tr><tr><td><code>include</code></td><td>查询包含关系</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Op <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">getStudentById</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">getStudents</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  limit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
  sex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> where <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    where<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>sex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    where<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>Op<span class="token punctuation">.</span>like<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">findAndCountAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    where<span class="token punctuation">,</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>Class<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">,</span>
    <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token operator">+</span>limit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> result<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
    <span class="token literal-property property">datas</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-md5-加密" tabindex="-1"><a class="header-anchor" href="#_8-md5-加密" aria-hidden="true">#</a> 8.MD5 加密</h3>`,3),xs={href:"https://www.npmjs.com/package/md5",target:"_blank",rel:"noopener noreferrer"},_s=p(`<ul><li>hash 加密算法的一种</li><li>可以将任何一个字符串加密成一个固定长度的字符串</li><li>单向加密：只能加密无法解密</li><li>同样的源字符串加密后得到的结果固定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> md5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">addAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  adminObj<span class="token punctuation">.</span>loginPwd <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">.</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">updateAdmin</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> adminObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>adminObj<span class="token punctuation">.</span>loginPwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    adminObj<span class="token punctuation">.</span>loginPwd <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">.</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>adminObj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">loginId<span class="token punctuation">,</span> loginPwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  loginPwd <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Admin<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">where</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      loginId<span class="token punctuation">,</span>
      loginPwd<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>loginId <span class="token operator">===</span> loginId <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span>loginPwd <span class="token operator">===</span> loginPwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-moment" tabindex="-1"><a class="header-anchor" href="#_9-moment" aria-hidden="true">#</a> 9.moment</h3>`,3),js={href:"https://momentjs.com/",target:"_blank",rel:"noopener noreferrer"},Ss=n("br",null,null,-1),Ts={href:"https://moment.nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},Cs=p(`<h4 id="_1-utc-和北京时间" tabindex="-1"><a class="header-anchor" href="#_1-utc-和北京时间" aria-hidden="true">#</a> 1）UTC 和北京时间</h4><ul><li>世界协调时</li><li>以英国格林威治时间为标准</li><li>UTC 时间和北京时间相差 8 小时</li><li>UTC 的凌晨相当于北京时间的上午 8 时</li></ul><h4 id="_2-时间戳-timestamp" tabindex="-1"><a class="header-anchor" href="#_2-时间戳-timestamp" aria-hidden="true">#</a> 2）时间戳 timestamp</h4><ul><li>某个 UTC 时间到 UTC1970-1-1 凌晨经过的毫秒数 <ul><li>也可以是秒数，用小数部分记录毫秒</li></ul></li><li>时间戳表示的是 <mark>UTC</mark> 时间的差异</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>北京时间：1970-1-1 08:00:00 =&gt; timestamp：0
UTC时间：1970-1-1 00:00:00 =&gt; timestamp：0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-对于服务器的影响" tabindex="-1"><a class="header-anchor" href="#_3-对于服务器的影响" aria-hidden="true">#</a> 3）对于服务器的影响</h4><ul><li>服务器可能会部署到世界的任何位置</li><li>服务器内部应该统一使用 UTC 时间或时间戳，包括数据库</li><li>Sequelize 默认生成的 createdAt 和 updatedAt 都使用 UTC 时间</li></ul><h4 id="_4-对于客户端的影响" tabindex="-1"><a class="header-anchor" href="#_4-对于客户端的影响" aria-hidden="true">#</a> 4）对于客户端的影响</h4><ul><li>客户端要给不同地区的客户友好的时间显示</li><li>客户端应该把 UTC 时间或时间戳转换为本地时间</li><li>通常使用 moment 第三方库</li></ul><p><img src="`+pn+'" alt=""></p><h3 id="_10-数据验证" tabindex="-1"><a class="header-anchor" href="#_10-数据验证" aria-hidden="true">#</a> 10.数据验证</h3><h4 id="_1-前后端三层验证" tabindex="-1"><a class="header-anchor" href="#_1-前后端三层验证" aria-hidden="true">#</a> 1）前后端三层验证</h4><table><thead><tr><th>验证类型</th><th>目的</th></tr></thead><tbody><tr><td>客户端（浏览器、APP、Pad、小程序等）验证</td><td>优化 <mark>用户体验</mark>，与安全无关</td></tr><tr><td>路由层</td><td>验证接口格式是否正常</td></tr><tr><td>服务器端逻辑验证（业务逻辑层的验证）</td><td>保证 <mark>业务逻辑的完整性、安全性</mark></td></tr><tr><td>数据库验证（约束）</td><td>保证 <mark>数据完整性</mark>，非空约束、外键约束等，大系统才需要</td></tr></tbody></table><div class="hint-container danger"><p class="hint-container-title">完整性</p><ul><li>一个完整的系统，最重要的验证一定在服务器端</li><li>完整性：业务方法随意使用时，数据一定是正确、合理的</li></ul></div><h4 id="_2-相关库" tabindex="-1"><a class="header-anchor" href="#_2-相关库" aria-hidden="true">#</a> 2）相关库</h4>',15),Is={href:"https://github.com/validatorjs/validator.js",target:"_blank",rel:"noopener noreferrer"},As=n("ul",null,[n("li",null,"用于验证某个字符串是否满足某个规则")],-1),Ps={href:"http://validatejs.org/",target:"_blank",rel:"noopener noreferrer"},Ns=n("ul",null,[n("li",null,"用于验证某个对象的属性是否满足某些规则")],-1),Os=p(`<h4 id="_3-自动转换格式" tabindex="-1"><a class="header-anchor" href="#_3-自动转换格式" aria-hidden="true">#</a> 3）自动转换格式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// service/init.js</span>
<span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;validate.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;moment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

validate<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>validate<span class="token punctuation">.</span>validators<span class="token punctuation">.</span>datetime<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 该函数会自动用于日期格式转换
   * 它会在验证时自动触发，它需要将任何数据转换为时间戳返回
   * 如果无法转换，返回NaN
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">value</span> 传入要转换的值
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">options</span> 针对某个属性的验证配置
   */</span>
  <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> formats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YYYY-M-D H:m:s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>dateOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      formats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YYYY-M-D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> formats<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * 用户显示错误消息时，使用的显示字符串
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>timestamp<span class="token punctuation">}</span></span> <span class="token parameter">value</span> 经过parse后传入的时间戳
   */</span>
  <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> format <span class="token operator">=</span> <span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>dateOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      format <span class="token operator">+=</span> <span class="token string">&quot; HH:mm:ss&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-创建工具库" tabindex="-1"><a class="header-anchor" href="#_4-创建工具库" aria-hidden="true">#</a> 4）创建工具库</h4><ul><li>只保留希望添加到数据库中的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils/propertyHelper.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">pick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token operator">...</span>props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-添加学生时增加数据验证" tabindex="-1"><a class="header-anchor" href="#_5-添加学生时增加数据验证" aria-hidden="true">#</a> 5）添加学生时增加数据验证</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// services/studentService.js</span>
<span class="token keyword">const</span> validate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;validate.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;moment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> pick <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../util/propertyHelper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">addStudent</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  stuObj <span class="token operator">=</span> <span class="token function">pick</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;birthday&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mobile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ClassId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  validate<span class="token punctuation">.</span>validators<span class="token punctuation">.</span><span class="token function-variable function">classExits</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">await</span> Class<span class="token punctuation">.</span><span class="token function">findByPk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;is not exist&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> rule <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//验证规则</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">minimum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">maximum</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">birthday</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">datetime</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">dateOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">earliest</span><span class="token operator">:</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">latest</span><span class="token operator">:</span> <span class="token operator">+</span>moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">allowEmpty</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1\\d{10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ClassId</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">numericality</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">onlyInteger</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">classExits</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> validate<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>stuObj<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">await</span> Student<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ins<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-访问器和虚拟字段" tabindex="-1"><a class="header-anchor" href="#_11-访问器和虚拟字段" aria-hidden="true">#</a> 11.访问器和虚拟字段</h3><h4 id="_1-访问器" tabindex="-1"><a class="header-anchor" href="#_1-访问器" aria-hidden="true">#</a> 1）访问器</h4><ul><li>不改变数据库的存储格式，但是获取字段时能获得相应格式的属性值</li></ul><h4 id="_2-虚拟字段" tabindex="-1"><a class="header-anchor" href="#_2-虚拟字段" aria-hidden="true">#</a> 2）虚拟字段</h4><ul><li>类似 Vue 中的 computed，不存在于数据库中，仅用于获取</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/Student.js</span>
<span class="token keyword">const</span> Student <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
  <span class="token string">&quot;Student&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">birthday</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> birth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataValue</span><span class="token punctuation">(</span><span class="token string">&quot;birthday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>birth<span class="token punctuation">)</span> <span class="token keyword">return</span> birth<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">VIRTUAL</span><span class="token punctuation">,</span> <span class="token comment">// 虚拟字段</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> now <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> birth <span class="token operator">=</span> moment<span class="token punctuation">.</span><span class="token function">utc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> now<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>birth<span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得两个日期的年份差</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mobile</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> DataTypes<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">allowNull</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">createdAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">updatedAt</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">paranoid</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-日志记录" tabindex="-1"><a class="header-anchor" href="#_12-日志记录" aria-hidden="true">#</a> 12.日志记录</h3>`,14),Ms={href:"https://log4js-node.github.io/log4js-node/",target:"_blank",rel:"noopener noreferrer"},Ds=p('<h4 id="_1-日志级别-level" tabindex="-1"><a class="header-anchor" href="#_1-日志级别-level" aria-hidden="true">#</a> 1）日志级别 level</h4><ul><li>如：调试日志、信息日志、错误日志等</li></ul><p><img src="'+en+`" alt=""></p><h4 id="_2-日志分类-category" tabindex="-1"><a class="header-anchor" href="#_2-日志分类-category" aria-hidden="true">#</a> 2）日志分类 category</h4><ul><li>如：SQL 日志、请求日志等</li></ul><h4 id="_3-日志出口-appender" tabindex="-1"><a class="header-anchor" href="#_3-日志出口-appender" aria-hidden="true">#</a> 3）日志出口 appender</h4><ul><li>应该把日志写到哪里</li><li>日志的书写格式是什么（layouts）</li></ul><h4 id="_4-日志配置" tabindex="-1"><a class="header-anchor" href="#_4-日志配置" aria-hidden="true">#</a> 4）日志配置</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// logger.js</span>
<span class="token keyword">const</span> log4js <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;log4js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

log4js<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 定义一个sql日志出口</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;dateFile&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;logs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;logging.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">maxLogSize</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 配置文件的最大字节数</span>
      <span class="token literal-property property">keepFileExt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&quot;%c [%d{yyyy-MM-dd hh:mm:ss}] [%p]: %m%n&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 分类1
     * 名称：sql（表示使用名为sql的出口）
     * 出口：（异步写入日志）
     *    出口名称：sql
     * 类别级别：需要记录的日志等级
     */</span>
    <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 该分类使用出口sql的配置写入日志</span>
      <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 程序正/异常退出时，还没记录完成的日志记录完</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  log4js<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sqlLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> defaultLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>sqlLogger <span class="token operator">=</span> sqlLogger<span class="token punctuation">;</span> <span class="token comment">// 数据库自定义日志</span>
exports<span class="token punctuation">.</span>logger <span class="token operator">=</span> defaultLogger<span class="token punctuation">;</span> <span class="token comment">// 控制台默认日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-sequelize-实例配置-logger" tabindex="-1"><a class="header-anchor" href="#_5-sequelize-实例配置-logger" aria-hidden="true">#</a> 5）sequelize 实例配置 logger</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// models/db.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;sequelize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> sqlLogger <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../logger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&quot;myschooldb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dialect</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 数据库类型</span>
  <span class="token comment">// logging: null, // 隐藏数据库操作日志</span>
  <span class="token function-variable function">logging</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    sqlLogger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sequelize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-express" tabindex="-1"><a class="header-anchor" href="#四-express" aria-hidden="true">#</a> （四）Express</h2><ul><li>http 模块存在的问题 <ul><li>根据不同的请求路径、请求方法，完成不同操作，比较麻烦</li><li>读取请求体和写入响应体时，是通过流的方式实现的，比较麻烦</li></ul></li><li>使用第三方库解决 <ul><li>express <ul><li>生态完整</li></ul></li><li>koa2 <ul><li>提供的 API 更友好</li></ul></li></ul></li></ul><h3 id="_1-express-的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-express-的基本使用" aria-hidden="true">#</a> 1.Express 的基本使用</h3>`,14),Ls={href:"http://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},Es=n("br",null,null,-1),Rs={href:"https://www.expressjs.com.cn/",target:"_blank",rel:"noopener noreferrer"},Js=p(`<h4 id="_1-创建-express-对象" tabindex="-1"><a class="header-anchor" href="#_1-创建-express-对象" aria-hidden="true">#</a> 1）创建 express 对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 方式1
 */</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个express应用</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>

<span class="token comment">// app实际上是一个函数，用于处理请求</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">server listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 方式2
 */</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个express应用</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>

<span class="token comment">// app实际上是一个函数，用于处理请求</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">server listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-app-函数处理请求的原理" tabindex="-1"><a class="header-anchor" href="#_2-app-函数处理请求的原理" aria-hidden="true">#</a> 2）app 函数处理请求的原理</h4><ul><li>配置了一个请求映射 <ul><li><code>app.请求方法(&quot;请求路径&quot;, 处理函数)</code></li></ul></li><li>如果请求方法和请求路径满足匹配，则执行处理函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/abc&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// req 和 res 是被 express 封装过的对象，无需直接操作流</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {</span>
<span class="token comment">//   &#39;user-agent&#39;: &#39;PostmanRuntime/7.33.0&#39;,</span>
<span class="token comment">//   accept: &#39;*/*&#39;,</span>
<span class="token comment">//   &#39;postman-token&#39;: &#39;b5372547-066b-4fed-845b-5157909d7635&#39;,</span>
<span class="token comment">//   host: &#39;localhost:9527&#39;,</span>
<span class="token comment">//   &#39;accept-encoding&#39;: &#39;gzip, deflate, br&#39;,</span>
<span class="token comment">//   connection: &#39;keep-alive&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-获取请求信息" tabindex="-1"><a class="header-anchor" href="#_3-获取请求信息" aria-hidden="true">#</a> 3）获取请求信息</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 静态路由 -&gt; localhost:9527/abc</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/abc&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// req 和 res 是被 express 封装过的对象，无需直接操作流</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求路径&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /abc</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;请求参数query&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: &#39;1&#39; }</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 动态路由 -&gt; localhost:9527/news/123</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/news/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;动态参数params&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { id: &#39;123&#39; }</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-响应请求" tabindex="-1"><a class="header-anchor" href="#_4-响应请求" aria-hidden="true">#</a> 4）响应请求</h4><ul><li>调用了 send 则无需调用 end，内部自动调用 <ul><li>没有调用 send 要自己调用</li></ul></li><li>响应头 content-type 自动对应不同的 send 参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/abc&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置响应头</span>
  <span class="token comment">// res.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</span>

  <span class="token comment">// 响应请求</span>
  <span class="token comment">// res.send(&quot;&lt;h1&gt;你好啊&lt;/h1&gt;&quot;);</span>
  <span class="token comment">// res.send({</span>
  <span class="token comment">//   a: 1,</span>
  <span class="token comment">// });</span>

  <span class="token comment">// 重定向</span>
  <span class="token comment">// res.status(302).header(&quot;location&quot;, &quot;https://duyi.ke.qq.com&quot;).end();</span>
  <span class="token comment">// res.status(302).location(&quot;https://duyi.ke.qq.com&quot;).end();</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token string">&quot;https://duyi.ke.qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-rest-风格的-api-接口" tabindex="-1"><a class="header-anchor" href="#_5-rest-风格的-api-接口" aria-hidden="true">#</a> 5）REST 风格的 API 接口</h4><ul><li>规范化规定 API 接口路径和方法</li><li>REST 风格：对同一个资源通过不同的方法完成不同的处理</li></ul><table><thead><tr><th>请求地址</th><th>请求方法</th><th>接口功能</th></tr></thead><tbody><tr><td><code>/api/student</code></td><td>post</td><td>添加学生</td></tr><tr><td><code>/api/student/:id?</code></td><td>get</td><td>获取学生</td></tr><tr><td><code>/api/student/:id</code></td><td>put</td><td>修改学生</td></tr><tr><td><code>/api/student/:id</code></td><td>delete</td><td>删除学生</td></tr></tbody></table><h4 id="_6-匹配请求" tabindex="-1"><a class="header-anchor" href="#_6-匹配请求" aria-hidden="true">#</a> 6）匹配请求</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配所有请求方法</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 匹配所有请求地址</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-nodemon" tabindex="-1"><a class="header-anchor" href="#_2-nodemon" aria-hidden="true">#</a> 2.nodemon</h3>`,16),Us={href:"https://github.com/remy/nodemon#nodemon",target:"_blank",rel:"noopener noreferrer"},Ws=p(`<ul><li>nodemon 是一个监视器 <ul><li>用于监控工程中的文件变化</li><li>如果发现文件有变化，可以执行一段脚本</li></ul></li><li>通常用作开发依赖 <ul><li>当作 node 使用即可</li><li>首次运行后，改动了文件无需停止再重新运行</li></ul></li></ul><h4 id="_1-控制台启动服务" tabindex="-1"><a class="header-anchor" href="#_1-控制台启动服务" aria-hidden="true">#</a> 1）控制台启动服务</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx nodemon index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-控制台查看帮助" tabindex="-1"><a class="header-anchor" href="#_2-控制台查看帮助" aria-hidden="true">#</a> 2）控制台查看帮助</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx nodemon <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-配置到-package-json" tabindex="-1"><a class="header-anchor" href="#_3-配置到-package-json" aria-hidden="true">#</a> 3）配置到 package.json</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nodemon -x npm run server&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node index&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-指定配置文件" tabindex="-1"><a class="header-anchor" href="#_4-指定配置文件" aria-hidden="true">#</a> 4）指定配置文件</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// ./nodemon.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.json&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;ignore&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;package*.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nodemon.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-express-中间件" tabindex="-1"><a class="header-anchor" href="#_3-express-中间件" aria-hidden="true">#</a> 3.Express 中间件</h3><ul><li>其实就是 app 函数的处理函数</li><li>一个 app 映射对象可以匹配多个处理函数</li></ul><p><img src="`+on+`" alt=""></p><h4 id="_1-中间件的处理模式" tabindex="-1"><a class="header-anchor" href="#_1-中间件的处理模式" aria-hidden="true">#</a> 1）中间件的处理模式</h4><ul><li>匹配到请求后 <ul><li>交给第一个处理函数处理</li></ul></li><li>第一个处理函数中，需要手动地移交给后续中间件处理 <ul><li>使用第三个参数 <code>next</code></li><li>可以在处理函数中任意位置调用 next</li></ul></li><li>中间件通常写成单独的模块 <ul><li>所以任意中间件都可以移交</li><li>尽管后续没有其他中间件</li></ul></li><li>当最后一个中间件调用 next 后 <ul><li>express 会检查是否调用了 end</li><li>如果没有则判定响应没有结束，响应 404</li></ul></li><li>前置中间件响应了请求（调用了 end） <ul><li>后置中间件依旧需要处理</li><li>后置中间件再次响应请求，则会报错</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handler1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handler2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handler3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果中间件处理过程中发生错误 <ul><li>服务器不会停止</li><li>不需要调用 next</li><li>相当于调用了 <code>next(错误对象)</code></li></ul></li><li>express 会寻找后续的错误处理中间件 <ul><li>如果没有，则响应 500</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/news/abc&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handler1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// throw new Error(&quot;abc&quot;);</span>
    <span class="token comment">// // next();</span>

    <span class="token comment">// 相当于</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;handler2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;服务器错误&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-自定义处理错误的中间件" tabindex="-1"><a class="header-anchor" href="#_2-自定义处理错误的中间件" aria-hidden="true">#</a> 2）自定义处理错误的中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/errorMiddleware.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取基地址（调用中间件的use函数的第一个参数）</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /news</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> errObj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> err<span class="token punctuation">.</span>message <span class="token operator">:</span> err<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 发生了错误</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>errObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用处理错误中间件" tabindex="-1"><a class="header-anchor" href="#_3-使用处理错误中间件" aria-hidden="true">#</a> 3）使用处理错误中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
<span class="token doc-comment comment">/**
 * 能匹配：
 *    /news
 *    /news/abc
 *    /news/123
 *    /news/ab/adfs
 * 不能匹配：
 *    /n
 *    /a
 *    /
 *    /newsabc
 */</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./errorMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 匹配任何请求</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./errorMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-自定义处理静态资源的中间件" tabindex="-1"><a class="header-anchor" href="#_4-自定义处理静态资源的中间件" aria-hidden="true">#</a> 4）自定义处理静态资源的中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/staticMiddleware.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明请求的是 API 接口</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 说明需要的是静态资源</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 静态资源存在</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;静态资源&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-使用处理静态资源中间件" tabindex="-1"><a class="header-anchor" href="#_5-使用处理静态资源中间件" aria-hidden="true">#</a> 5）使用处理静态资源中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./staticMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-常用中间件" tabindex="-1"><a class="header-anchor" href="#_4-常用中间件" aria-hidden="true">#</a> 4.常用中间件</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常极少自定义中间件，较多使用 express 自带中间件</p></div><h4 id="_1-express-static" tabindex="-1"><a class="header-anchor" href="#_1-express-static" aria-hidden="true">#</a> 1）<code>express.static()</code></h4><ul><li>搭建静态服务器，完成静态资源映射 <ul><li>是一个高阶函数</li></ul></li><li>当请求时，会根据请求路径(req.path)，从指定的目录中寻找是否存在该文件 <ul><li>如果存在，直接响应文件内容，而不再移交给后续的中间件</li><li>如果不存在文件，则直接移交给后续的中间件处理</li></ul></li><li>默认情况下，如果映射的结果是一个目录，则会自动使用 index.html 文件 <ul><li>可以通过 index 配置项修改</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> staticRoot <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>staticRoot<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&quot;default.html&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// // 只有当路径以 /static 开头时，才会调用中间件</span>
<span class="token comment">// app.use(&quot;/static&quot;, express.static(staticRoot));</span>
<span class="token comment">// // 原理</span>
<span class="token comment">// // app.use(&quot;/static&quot;, (req, res) =&gt; {</span>
<span class="token comment">// //   console.log(req.baseUrl, req.path);</span>
<span class="token comment">// // });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-express-urlencoded" tabindex="-1"><a class="header-anchor" href="#_2-express-urlencoded" aria-hidden="true">#</a> 2）<code>express.urlencoded()</code></h4><ul><li>当请求体使用 <code>x-www-form-urlencoded</code> 格式发送时 <ul><li>请求体格式是 <code>name=abc&amp;age=123</code></li><li>所以 req.body 返回 undefined</li><li>因为请求体需要使用流的方式读取</li><li>读取完毕的字符串再截取后解析为对象</li></ul></li><li>除了文件读取可以考虑流的方式传输外，大部分时间都不需要使用流</li><li>此时可以使用 urlencoded 中间件 <ul><li>旧版本使用 <code>querystring</code> 库解析</li><li>新版本使用 <code>qs</code> 库解析 <ul><li>支持的格式更多，官方推荐</li><li>需要配置 extended</li></ul></li></ul></li><li>当请求体匹配 type 配置项所配置的类型时，自动调用该中间件 <ul><li>使用流的方式读取请求体</li><li>再设置到 req.body 中 <code>{ name: &quot;abc&quot;, age: 123 }</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-express-json" tabindex="-1"><a class="header-anchor" href="#_3-express-json" aria-hidden="true">#</a> 3）<code>express.json()</code></h4><ul><li>当请求体使用 <code>json</code> 格式发送时 <ul><li>请求体格式是 <code>{ name: &quot;abc&quot;, age: 123 }</code></li><li>urlencoded 中间件无法处理，转发到下一个中间件</li></ul></li><li>可以使用 json 中间件处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-手写-urlencoded-中间件" tabindex="-1"><a class="header-anchor" href="#_4-手写-urlencoded-中间件" aria-hidden="true">#</a> 4）手写 urlencoded 中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;querystring&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自行解析消息体</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      result <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      req<span class="token punctuation">.</span>body <span class="token operator">=</span> query<span class="token punctuation">;</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 有配置项时</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">urlencoded</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  options<span class="token punctuation">.</span>type <span class="token operator">=</span> options<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> options<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 自行解析消息体</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        req<span class="token punctuation">.</span>body <span class="token operator">=</span> query<span class="token punctuation">;</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">前端工程部署</p><ul><li>可以在根目录下新建 <code>client</code> 文件夹，存放前端工程</li><li>部署方式 1 <ul><li>配置前端工程的 build 路径</li><li>将 build 后的代码存放到 <code>../public</code> （服务器根目录）下</li></ul></li><li>部署方式 2 <ul><li>配置服务器的静态资源目录</li><li>改动到 <code>client/dist</code> 目录下</li></ul></li></ul></div><h3 id="_5-express-路由" tabindex="-1"><a class="header-anchor" href="#_5-express-路由" aria-hidden="true">#</a> 5.Express 路由</h3><h4 id="_1-目前-routes-目录基本结构" tabindex="-1"><a class="header-anchor" href="#_1-目前-routes-目录基本结构" aria-hidden="true">#</a> 1）目前 routes 目录基本结构</h4><ul><li>处理 API 请求时有大量重复</li><li>express 提供路由中间件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 映射public目录中的静态资源</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> staticRoot <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>staticRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 application/x-www-form-urlencoded 格式的请求体</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 application/json 格式的请求体</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理 api 的请求</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 添加学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 修改学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理错误的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./errorMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">server listen on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用路由中间件" tabindex="-1"><a class="header-anchor" href="#_2-使用路由中间件" aria-hidden="true">#</a> 2）使用路由中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> studentRouter <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studentRouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studentRouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 添加学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studentRouter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 修改学生</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> studentRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-封装路由中间件" tabindex="-1"><a class="header-anchor" href="#_3-封装路由中间件" aria-hidden="true">#</a> 3）封装路由中间件</h4><ul><li>统一响应的消息格式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/getSendResult.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">getErr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token string">&quot;server internal error&quot;</span><span class="token punctuation">,</span> errCode <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> errCode<span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> err<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">getResult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> result<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">asyncHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>exports<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>routes 目录下新建 api 目录 <ul><li>存放各个模块的路由中间件</li></ul></li><li>模块内部可以连接路由层和服务层</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/api/student.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> studentService <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../../services/studentService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> asyncHandler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../getSendResult&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> limit <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>limit <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>sex <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">deleteStudent</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">updateStudent</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
<span class="token comment">// 处理 api 的请求</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/student&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/book&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/class&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/admin&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-cookie" tabindex="-1"><a class="header-anchor" href="#_6-cookie" aria-hidden="true">#</a> 6.<mark>Cookie</mark></h3><h4 id="_1-一个不大不小的问题" tabindex="-1"><a class="header-anchor" href="#_1-一个不大不小的问题" aria-hidden="true">#</a> 1）一个不大不小的问题</h4><ul><li>假设服务器有一个接口，通过请求这个接口，可以添加一个管理员 <ul><li>只有登录过的管理员才能添加管理员</li></ul></li><li>客户端和服务器的传输使用的是 HTTP 协议 <ul><li><mark>HTTP 协议是无状态的</mark></li></ul></li><li>无状态，就是服务器不知道这一次请求的人，跟之前登录请求成功的人是不是同一个人</li></ul><p><img src="`+cn+'" alt=""></p><p><img src="'+ln+'" alt=""></p><ul><li>由于 HTTP 协议的无状态，服务器忘记了之前的所有请求 <ul><li>无法确定这一次请求的客户端，就是之前登录成功的那个客户端</li></ul></li><li>于是，服务器想了一个办法，按照下面的流程来认证客户端的身份 <ul><li>客户端登录成功后，服务器会给客户端一个出入证（令牌 token）</li><li>后续客户端的每次请求，都必须要附带这个出入证（令牌 token）</li></ul></li></ul><p><img src="'+un+'" alt=""></p><ul><li>服务器发扬了认证不认人的优良传统，就可以很轻松的识别身份了</li><li>但是，用户不可能只在一个网站登录，于是客户端会收到来自各个网站的出入证</li><li>因此，就要求客户端要有一个类似于卡包的东西，能够具备下面的功能： <ul><li><mark>能够存放多个出入证</mark><ul><li>这些出入证来自不同的网站</li><li>也可能是一个网站有多个出入证，分别用于出入不同的地方</li></ul></li><li><mark>能够自动出示出入证</mark><ul><li>客户端在访问不同的网站时，能够自动的把对应的出入证附带请求发送出去</li></ul></li><li><mark>正确的出示出入证</mark><ul><li>客户端不能将肯德基的出入证发送给麦当劳</li></ul></li><li><mark>管理出入证的有效期</mark><ul><li>客户端要能够自动的发现那些已经过期的出入证，并把它从卡包内移除</li></ul></li></ul></li><li>能够满足上面所有要求的，就是 cookie</li><li>cookie 类似于一个卡包，专门用于存放各种出入证，并有着一套机制来自动管理这些证件</li><li>卡包内的每一张卡片，称之为 <mark>一个 cookie</mark></li></ul><h4 id="_2-cookie-的组成" tabindex="-1"><a class="header-anchor" href="#_2-cookie-的组成" aria-hidden="true">#</a> 2）Cookie 的组成</h4><ul><li>cookie 是浏览器中特有的一个概念，就像浏览器的专属卡包，管理着各个网站的身份信息</li><li>每个 cookie 就相当于是属于某个网站的一个卡片</li></ul><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>键</td></tr><tr><td>value</td><td>值，可以是任何信息</td></tr><tr><td>domain</td><td>域，表示这个 cookie 属于哪个网站</td></tr><tr><td>path</td><td>路径，表示这个 cookie 属于该网站的哪个基路径</td></tr><tr><td>secure</td><td>是否使用安全传输</td></tr><tr><td>expire</td><td>过期时间，表示该 cookie 在什么时候过期</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">Cookie 类似 localStorage</p><ul><li>Cookie 其实就是浏览器的一个小文件，保存了一些字符串信息</li><li>Cookie 是自动管理的，一过期就自动删除</li><li>Cookie 保存的 token 是自动发送到服务器的</li><li>服务器返回的 token 是自动保存到浏览器的</li><li>存放容量小</li><li>通常适用于登录认证</li></ul></div><ul><li>当浏览器向服务器发送一个请求的时候，会瞄一眼自己的卡包，看看哪些卡片适合附带捎给服务器</li><li>如果一个 cookie <mark>同时满足</mark> 以下条件，则这个 cookie 会自动被浏览器附带到请求中 <ul><li>cookie 没有过期</li><li>cookie 中的域和这次请求的域是匹配的 <blockquote><p>如：cookie 中的域是 <code>yuanjin.tech</code>（基域），则可以匹配的请求域是 <code>yuanjin.tech</code> 、 <code>www.yuanjin.tech</code> 、 <code>blogs.yuanjin.tech</code> 等等</p><br><p>如：cookie 中的域是 <code>www.yuanjin.tech</code>（二级域），则只能匹配 <code>www.yuanjin.tech</code> 这样的请求域</p><br><p><mark>cookie 不关心端口，只要域匹配即可</mark></p></blockquote></li><li>cookie 中的 path 和这次请求的 path 是匹配的 <blockquote><p><code>path: &#39;/news&#39;</code>，则匹配的请求路径可以是 <code>/news</code> 、 <code>/news/detail</code> 、 <code>/news/a/b/c</code> 等等，但不能匹配 <code>/blogs</code></p><br><p><code>path: &#39;/&#39;</code>，则能够匹配所有的路径</p></blockquote></li><li>验证 cookie 的安全传输 <blockquote><p>如果设置了 <code>secure: true</code>，则请求协议必须是 <code>https</code>，否则不会发送该 cookie</p><br><p>如果设置了 <code>secure: false</code>，则请求协议可以是 <code>http</code>，也可以是 <code>https</code></p></blockquote></li></ul></li><li>浏览器会将符合条件的 cookie，<mark>自动放置到请求头</mark> 中 <ul><li>如：当在浏览器中访问百度的时候，在请求头中附带了下面的 cookie：</li></ul></li></ul><p><img src="'+rn+`" alt=""></p><ul><li>打马赛克的地方就是通过请求头 <code>cookie</code> 发送到服务器的</li><li>格式： <code>键=值; 键=值; 键=值; ...</code></li><li>每一个键值对就是一个符合条件的 cookie</li></ul><div class="hint-container danger"><p class="hint-container-title">永远不要把 cookie 泄露给别人</p><p>cookie 中包含了重要的身份信息</p></div><h4 id="_3-设置-cookie" tabindex="-1"><a class="header-anchor" href="#_3-设置-cookie" aria-hidden="true">#</a> 3）设置 Cookie</h4><ul><li>cookie 是保存在浏览器端的</li><li>很多证件是服务器颁发的</li><li>所以 cookie 的设置有两种模式</li></ul><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>服务器响应</td><td>非常普遍<br>当服务器决定给客户端颁发一个证件时，会在响应的消息中包含 cookie<br>浏览器会自动的把 cookie 保存到卡包中</td></tr><tr><td>客户端自行设置</td><td>少见一些，不过也有可能会发生<br>如：用户关闭了某个广告，并选择了「以后不要再弹出」<br>此时就可以把这种小信息直接通过浏览器的 JS 代码保存到 cookie 中<br>后续请求服务器时，服务器会看到客户端不想要再次弹出广告的 cookie，于是就不会再发送广告过来了</td></tr></tbody></table><h4 id="_4-服务器端设置-cookie" tabindex="-1"><a class="header-anchor" href="#_4-服务器端设置-cookie" aria-hidden="true">#</a> 4）服务器端设置 Cookie</h4><ul><li>服务器可以通过设置响应头，告诉浏览器应该如何设置 cookie</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">set-cookie</span><span class="token punctuation">:</span> cookie1
<span class="token key atrule">set-cookie</span><span class="token punctuation">:</span> cookie2
<span class="token key atrule">set-cookie</span><span class="token punctuation">:</span> cookie3
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过这种模式，就可以在一次响应中设置多个 cookie <ul><li>每个 cookie <mark>必须设置键值对</mark></li><li>其他属性都是可选的，并且顺序不限</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>键=值; path=<span class="token punctuation">?</span>; domain=<span class="token punctuation">?</span>; expire=<span class="token punctuation">?</span>; max<span class="token punctuation">-</span>age=<span class="token punctuation">?</span>; secure; httponly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当这样的响应头到达客户端后，浏览器会 <mark>自动地</mark> 将 cookie 保存到卡包中</li><li>如果卡包中已经存在一模一样的卡片（其他 key、path、domain 相同），则会 <mark>自动地覆盖之前的设置</mark></li></ul><h5 id="a-path" tabindex="-1"><a class="header-anchor" href="#a-path" aria-hidden="true">#</a> a）<code>path</code></h5><ul><li>设置 cookie 的路径</li><li>如果不设置，浏览器会将其自动设置为 <mark>当前请求的路径</mark></li></ul><blockquote><p>如：浏览器请求的地址是 <code>/login</code>，服务器响应了 <code>set-cookie: a=1</code></p><br><p>浏览器会将该 cookie 的 path 设置为请求的路径 <code>/login</code></p></blockquote><h5 id="b-domain" tabindex="-1"><a class="header-anchor" href="#b-domain" aria-hidden="true">#</a> b）<code>domain</code></h5><ul><li>设置 cookie 的域</li><li>如果不设置，浏览器会自动将其设置为 <mark>当前的请求域</mark></li><li>如果服务器响应了一个 <mark>无效的域</mark> ，浏览器同样设置为请求域</li></ul><blockquote><p>如：浏览器请求的地址是 <code>http://www.yuanjin.tech</code>，服务器响应了 <code>set-cookie: a=1</code></p><br><p>浏览器会将该 cookie 的 domain 设置为请求的域 <code>www.yuanjin.tech</code></p></blockquote><div class="hint-container info"><p class="hint-container-title">无效的域</p><ul><li>响应的域连根域都不一样 <ul><li>浏览器请求的域是 <code>yuanjin.tech</code></li><li>服务器响应的 cookie 是 <code>set-cookie: a=1; domain=baidu.com</code></li></ul></li><li>如果浏览器允许，就意味着张三的服务器，有权利给用户一个 cookie，用于访问李四的服务器 <ul><li>这会造成很多安全性的问题</li></ul></li></ul></div><h5 id="c-expire" tabindex="-1"><a class="header-anchor" href="#c-expire" aria-hidden="true">#</a> c）<code>expire</code></h5><ul><li>设置 cookie 的过期时间</li><li>必须是一个 <mark>有效的 GMT 时间</mark>，即格林威治标准时间字符串</li></ul><blockquote><p>如：<code>Fri, 17 Apr 2020 09:35:59 GMT</code> 表示格林威治时间 <code>2020-04-17 09:35:59</code></p><br><p>即北京时间 <code>2020-04-17 17:35:59</code></p><br><p>当客户端的时间达到这个时间点后，会自动销毁该 cookie</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获得GMT时间</span>
<span class="token keyword">const</span> gmt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="d-max-age" tabindex="-1"><a class="header-anchor" href="#d-max-age" aria-hidden="true">#</a> d）<code>max-age</code></h5><ul><li>设置 cookie 的相对有效期</li><li>expire 和 max-age 通常 <mark>仅设置一个</mark> 即可</li><li>如果不设置 expire，又没有设置 max-age，则表示 <mark>会话结束后过期</mark><ul><li>对于大部分浏览器而言，关闭所有浏览器窗口意味着会话结束</li></ul></li></ul><blockquote><p>如：设置 <code>max-age</code> 为 <code>1000</code></p><br><p>浏览器在添加 cookie 时，会自动设置 <code>expire</code> 为当前时间加上 1000 秒作为过期时间</p></blockquote><h5 id="e-secure" tabindex="-1"><a class="header-anchor" href="#e-secure" aria-hidden="true">#</a> e）<code>secure</code></h5><ul><li>设置 cookie 是否是安全连接</li><li>如果设置了，则表示该 cookie 后续只能随着 <code>https</code> 请求发送</li><li>如果不设置，则表示该 cookie 会随着所有请求发送</li></ul><h5 id="f-httponly" tabindex="-1"><a class="header-anchor" href="#f-httponly" aria-hidden="true">#</a> f）<code>httponly</code></h5><ul><li>设置 cookie 是否仅能用于传输</li><li>如果设置了，则表示该 cookie 仅能用于传输 <ul><li>即不允许在客户端通过 JS 获取，有利于防止跨站脚本攻击（XSS）</li></ul></li></ul><h4 id="_5-应用示例" tabindex="-1"><a class="header-anchor" href="#_5-应用示例" aria-hidden="true">#</a> 5）应用示例</h4><ul><li>客户端通过 <code>post</code> 请求服务器 <code>http://yuanjin.tech/login</code></li><li>并在消息体中给予了账号和密码</li><li>服务器验证登录成功后，在响应头中加入了以下内容：</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">set-cookie</span><span class="token punctuation">:</span> token=123456; path=/; max<span class="token punctuation">-</span>age=3600; httponly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>当该响应到达浏览器后，浏览器会创建下面的 cookie</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">key</span><span class="token punctuation">:</span> token
<span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token number">123456</span>
<span class="token key atrule">domain</span><span class="token punctuation">:</span> yuanjin.tech
<span class="token key atrule">path</span><span class="token punctuation">:</span> /
<span class="token key atrule">expire</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-17 18:55:00</span> <span class="token comment"># 假设当前时间是2020-04-17 17:55:00</span>
<span class="token key atrule">secure</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 任何请求都可以附带这个cookie，只要满足其他要求</span>
<span class="token key atrule">httponly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 不允许JS获取该cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>随着浏览器后续对服务器的请求，只要满足要求，这个 cookie 就会被附带到请求头中传给服务器</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cookie</span><span class="token punctuation">:</span> token=123456; 其他cookie<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-删除浏览器的-cookie" tabindex="-1"><a class="header-anchor" href="#_6-删除浏览器的-cookie" aria-hidden="true">#</a> 6）删除浏览器的 cookie</h4><ul><li>只需要让服务器响应一个同样的域、同样的路径、同样的 key，只是时间过期的 cookie 即可</li><li><mark>删除 cookie 其实就是修改 cookie</mark></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cookie</span><span class="token punctuation">:</span> token=; domain=yuanjin.tech; path=/; max<span class="token punctuation">-</span>age=<span class="token punctuation">-</span><span class="token number">1</span> <span class="token comment"># 删除 token</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>浏览器按照要求修改了 cookie 后，会发现 cookie 已经过期，自然就会删除了</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>无论是修改还是删除，都要注意 cookie 的域和路径</li><li>因为完全可能存在域或路径不同，但 key 相同的 cookie</li><li>因此无法仅通过 key 确定是哪一个 cookie</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/api/admin.js</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> adminService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginId<span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginPwd
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 登录成功</span>
      res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>
        <span class="token string">&quot;set-cookie&quot;</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; domain=localhost; max-age=3600; httponly</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-客户端设置-cookie" tabindex="-1"><a class="header-anchor" href="#_7-客户端设置-cookie" aria-hidden="true">#</a> 7）客户端设置 Cookie</h4><ul><li>cookie 是存放在浏览器端的</li><li>所以浏览器向 JS 开放了接口，让其可以设置 cookie</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;键=值; path=?; domain=?; expire=?; max-age=?; secure&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在客户端设置 cookie 和服务器设置 cookie 的格式一样 <ul><li><mark>没有 httponly</mark><ul><li>httponly 本来就是为了限制在客户端访问的</li></ul></li><li><mark>path 的默认值</mark><ul><li>在服务器端设置 cookie 时，如果没有写 path，使用的是请求的 path</li><li>在客户端设置 cookie 时，也许根本没有请求发生</li><li>因此，path 在客户端设置时的默认值是 <mark>当前网页的 path</mark></li></ul></li><li>domain 的默认值 <ul><li>和 path 同理，客户端设置时的默认值是 <mark>当前网页的 domain</mark></li></ul></li></ul></li><li>删除 cookie <ul><li>和服务器一样，修改 cookie 的过期时间即可</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/admin/login<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loginId<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loginPwd<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-将-cookie-用于登录场景" tabindex="-1"><a class="header-anchor" href="#_8-将-cookie-用于登录场景" aria-hidden="true">#</a> 8）将 Cookie 用于登录场景</h4><ul><li>登录请求 <ul><li>浏览器发送请求到服务器，附带账号密码</li><li>服务器验证账号密码是否正确 <ul><li>如果不正确，响应错误</li><li>如果正确，在响应头中设置 cookie，附带登录认证信息（如：JWT）</li></ul></li><li>客户端收到 cookie，浏览器自动记录下来</li></ul></li><li>后续请求 <ul><li>浏览器发送请求到服务器，希望添加一个管理员，并将 cookie 自动附带到请求中</li><li>服务器先获取 cookie，验证 cookie 中的信息是否正确 <ul><li>如果不正确，不予以操作</li><li>如果正确，完成正常的业务流程</li></ul></li></ul></li></ul><h3 id="_7-实现登录和认证" tabindex="-1"><a class="header-anchor" href="#_7-实现登录和认证" aria-hidden="true">#</a> 7.实现登录和认证</h3><h4 id="_1-使用-cookie-parser-中间件" tabindex="-1"><a class="header-anchor" href="#_1-使用-cookie-parser-中间件" aria-hidden="true">#</a> 1）使用 cookie-parser 中间件</h4>`,118),Bs={href:"https://github.com/expressjs/cookie-parser#readme",target:"_blank",rel:"noopener noreferrer"},Hs=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加入cookie-parser 中间件</span>
<span class="token comment">// 加入之后，会在req对象中注入cookies属性，用于获取所有请求传递过来的cookie</span>
<span class="token comment">// 加入之后，会在res对象中注入cookie方法，用于设置cookie</span>
<span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cookie-parser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 应用token中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./tokenMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-登录成功后给予-token" tabindex="-1"><a class="header-anchor" href="#_2-登录成功后给予-token" aria-hidden="true">#</a> 2）登录成功后给予 token</h4><ul><li>通过 cookie 给予 <ul><li>适配浏览器</li></ul></li><li>通过 header 给予 <ul><li>适配其他终端</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cryptor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../../util/crypt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> adminService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginId<span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginPwd
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// // 登录成功</span>
      <span class="token comment">// res.header(</span>
      <span class="token comment">//   &quot;set-cookie&quot;,</span>
      <span class="token comment">//   \`token=\${result.id}; path=/; domain=localhost; max-age=3600; httponly\`</span>
      <span class="token comment">// );</span>

      <span class="token keyword">let</span> value <span class="token operator">=</span> result<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      value <span class="token operator">=</span> cryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 登录成功</span>
      res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">domain</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 毫秒数</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-对后续请求进行认证" tabindex="-1"><a class="header-anchor" href="#_3-对后续请求进行认证" aria-hidden="true">#</a> 3）对后续请求进行认证</h4><ul><li>解析 cookie 或 header 中的 token</li><li>验证 token <ul><li>通过，继续后续处理</li><li>未通过，给予错误</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> pathToRegexp <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path-to-regexp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> getErr <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./getSendResult&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cryptor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../util/crypt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> needTokenApi <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student/:id&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 用于解析token</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// /api/student/:id 和  /api/student/1771</span>
  <span class="token keyword">const</span> apis <span class="token operator">=</span> needTokenApi<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token function">pathToRegexp</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> api<span class="token punctuation">.</span>method <span class="token operator">===</span> req<span class="token punctuation">.</span>method <span class="token operator">&amp;&amp;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>apis<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从header的authorization中获取</span>
    token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没有认证</span>
    <span class="token function">handleNonToken</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> userId <span class="token operator">=</span> cryptor<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 处理没有认证的情况</span>
<span class="token keyword">function</span> <span class="token function">handleNonToken</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res
    <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">getErr</span><span class="token punctuation">(</span><span class="token string">&quot;you dont have any token to access the api&quot;</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-token-对称加密" tabindex="-1"><a class="header-anchor" href="#_4-token-对称加密" aria-hidden="true">#</a> 4）token 对称加密</h4><ul><li>使用对称加密算法：aes 128</li><li>密钥固定，向量不固定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 128位的密钥</span>
<span class="token keyword">const</span> secret <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;mm7h3ck87ugk9l4a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 准备一个iv，随机向量</span>
<span class="token keyword">const</span> iv <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;jxkvxz97409u3m8c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">encrypt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cry <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createCipheriv</span><span class="token punctuation">(</span><span class="token string">&quot;aes-128-cbc&quot;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> cry<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">+=</span> cry<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">&quot;hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">decrypt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> decry <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createDecipheriv</span><span class="token punctuation">(</span><span class="token string">&quot;aes-128-cbc&quot;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> decry<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;hex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">+=</span> decry<span class="token punctuation">.</span><span class="token function">final</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 保证加密解密的随机向量一致</span>
<span class="token comment">// module.exports = function () {</span>
<span class="token comment">//   // 准备一个iv，随机向量</span>
<span class="token comment">//   const iv = Buffer.from(</span>
<span class="token comment">//     Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8)</span>
<span class="token comment">//   );</span>

<span class="token comment">//   return {</span>
<span class="token comment">//     encrypt(str) {</span>
<span class="token comment">//       const cry = crypto.createCipheriv(&quot;aes-128-cbc&quot;, secret, iv);</span>
<span class="token comment">//       let result = cry.update(str, &quot;utf-8&quot;, &quot;hex&quot;);</span>
<span class="token comment">//       result += cry.final(&quot;hex&quot;);</span>
<span class="token comment">//       return result;</span>
<span class="token comment">//     },</span>
<span class="token comment">//     decrypt(str) {</span>
<span class="token comment">//       const decry = crypto.createDecipheriv(&quot;aes-128-cbc&quot;, secret, iv);</span>
<span class="token comment">//       let result = decry.update(str, &quot;hex&quot;, &quot;utf-8&quot;);</span>
<span class="token comment">//       result += decry.final(&quot;utf-8&quot;);</span>
<span class="token comment">//       return result;</span>
<span class="token comment">//     },</span>
<span class="token comment">//   };</span>
<span class="token comment">// };</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-断点调试" tabindex="-1"><a class="header-anchor" href="#_8-断点调试" aria-hidden="true">#</a> 8.断点调试</h3><ul><li>node 进程会监听 9229 端口</li><li>其他进程通过向该端口发送信息与 Node 交互 <ul><li>使得 Node 进程可以暂停执行、恢复执行、执行下一步后暂停等</li><li>同时 Node 进程可以将执行栈信息、变量信息等发送给交互进程</li></ul></li><li>于是其他应用程序可以调试 Node 程序</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token parameter variable">--inspect</span> 启动模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>vscode 创建 launch.json 可以调试</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
  <span class="token comment">// Hover to view descriptions of existing attributes.</span>
  <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attach&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;调试node&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">9229</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-跨域-——-jsonp" tabindex="-1"><a class="header-anchor" href="#_9-跨域-——-jsonp" aria-hidden="true">#</a> 9.跨域 —— JSONP</h3><h4 id="_1-同源策略" tabindex="-1"><a class="header-anchor" href="#_1-同源策略" aria-hidden="true">#</a> 1）同源策略</h4><ul><li>同源，协议、端口、主机名完全相同</li><li>浏览器不允许使用非同源的数据</li></ul><h4 id="_2-解决方案" tabindex="-1"><a class="header-anchor" href="#_2-解决方案" aria-hidden="true">#</a> 2）解决方案</h4><ul><li>JSONP</li><li>CORS</li></ul><h4 id="_3-jsonp" tabindex="-1"><a class="header-anchor" href="#_3-jsonp" aria-hidden="true">#</a> 3）JSONP</h4><ul><li>浏览器端生成一个 script 元素，访问数据接口</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    script<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9527/api/student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器响应一段 JS 代码，调用某个函数，并把响应的数据传入</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> limit <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>limit <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>sex <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">callback(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>json<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-缺陷" tabindex="-1"><a class="header-anchor" href="#_4-缺陷" aria-hidden="true">#</a> 4）缺陷</h4><ul><li>会严重影响服务器的正常响应格式 <ul><li>JSONP 要求服务器响应一段 JS 代码</li><li>但在非跨域的情况下，服务器又需要响应一个正常的 JSON 格式</li></ul></li><li>只能使用 GET 请求 <ul><li><code>script</code> 元素发出的请求只能是 <code>GET</code> 请求</li></ul></li></ul><h3 id="_10-跨域-——-cors" tabindex="-1"><a class="header-anchor" href="#_10-跨域-——-cors" aria-hidden="true">#</a> 10.跨域 —— CORS</h3><ul><li>CORS，Cross-Origin Resource Sharing 跨域资源共享</li><li>是基于 HTTP1.1 的一种跨域解决方案</li><li><mark>如果浏览器要跨域访问服务器的资源，需要获得服务器的允许</mark></li></ul><h4 id="_1-交互模式" tabindex="-1"><a class="header-anchor" href="#_1-交互模式" aria-hidden="true">#</a> 1）交互模式</h4><ul><li>一个请求可以附带很多信息，从而会对服务器造成不同程度的影响</li><li>如：有的请求只是获取一些新闻，有的请求会改动服务器的数据</li><li>针对不同的请求，CORS 规定了三种不同的交互模式 <ul><li>简单请求</li><li>需要预检的请求</li><li>附带身份凭证的请求</li></ul></li><li>这三种模式从上到下层层递进 <ul><li>请求可以做的事越来越多，要求也越来越严格</li></ul></li><li>当浏览器端运行了一段 Ajax 代码 <ul><li>无论是使用 XMLHttpRequest 还是 Fetch API</li><li>浏览器会首先判断它属于哪一种请求模式</li></ul></li></ul><h4 id="_2-简单请求的判定" tabindex="-1"><a class="header-anchor" href="#_2-简单请求的判定" aria-hidden="true">#</a> 2）简单请求的判定</h4><ul><li>当请求 <mark>同时满足</mark> 以下条件时，浏览器会认为是一个简单请求</li></ul><table><thead><tr><th>条件</th><th>取值</th></tr></thead><tbody><tr><td>请求方法</td><td>GET<br>POST<br>HEAD</td></tr><tr><td>请求头仅包含安全的字段</td><td><code>Accept</code><br><code>Accept-Language</code><br><code>Content-Language</code><br><code>Content-Type</code><br><code>DPR</code><br><code>Downlink</code><br><code>Save-Data</code><br><code>Viewport-Width</code><br><code>Width</code></td></tr><tr><td>请求头如果包含 <code>Content-Type</code></td><td><code>text/plain</code><br><code>multipart/form-data</code><br><code>application/x-www-form-urlencoded</code></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 请求方法不满足要求，不是简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加入了额外的请求头，不是简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// content-type不满足要求，不是简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-简单请求的交互规范" tabindex="-1"><a class="header-anchor" href="#_3-简单请求的交互规范" aria-hidden="true">#</a> 3）简单请求的交互规范</h4><ul><li>当浏览器判定某个 ajax 跨域请求是简单请求时</li><li>请求头中会自动添加 <code>Origin</code> 字段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在页面 \`http://my.com/index.html\` 中有以下代码造成了跨域</span>
<span class="token comment">// 简单请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/news&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 请求头</span>
GET /api/news/ HTTP/1.1
<span class="token key atrule">Host</span><span class="token punctuation">:</span> crossdomain.com
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> keep<span class="token punctuation">-</span>alive
<span class="token punctuation">...</span>
<span class="token key atrule">Referer</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com/index.html
<span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com <span class="token comment"># 告诉服务器是哪个源地址在跨域请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器响应头中应包含 <code>Access-Control-Allow-Origin</code><ul><li><code>*</code>：表示允许所有源地址跨域访问</li><li>具体的源：如：<code>http://my.com</code> 表示仅允许该源地址跨域访问</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>实际上，这两个值对于客户端 <code>http://my.com</code> 而言都一样 <ul><li>因为客户端才不会管其他源服务器允不允许，就关心自己是否被允许</li></ul></li><li>当然，服务器也可以维护一个可被允许的源列表 <ul><li>如果请求的 <code>Origin</code> 命中该列表，就响应 <code>*</code> 或具体的源</li></ul></li><li>为了避免后续的麻烦，强烈推荐响应具体的源</li></ul></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>HTTP/1.1 200 OK
<span class="token key atrule">Date</span><span class="token punctuation">:</span> Tue<span class="token punctuation">,</span> 21 Apr 2020 08<span class="token punctuation">:</span>03<span class="token punctuation">:</span>35 GMT
<span class="token punctuation">...</span>
<span class="token key atrule">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com
<span class="token punctuation">...</span>

消息体中的数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt=""></p><h4 id="_4-需要预检的请求" tabindex="-1"><a class="header-anchor" href="#_4-需要预检的请求" aria-hidden="true">#</a> 4）需要预检的请求</h4><ul><li>简单的请求对服务器的威胁不大，所以允许使用上述的简单交互即可完成</li><li>但是如果浏览器不认为这是一种简单请求，就会按照下面的流程进行 <ul><li>浏览器发送预检请求，询问服务器是否允许</li><li>服务器允许</li><li>浏览器发送真实请求</li><li>服务器完成真实的响应</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在页面 \`http://my.com/index.html\` 中有以下代码造成了跨域</span>
<span class="token comment">// 需要预检的请求</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://crossdomain.com/api/user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token comment">// post 请求</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置请求头</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;袁小进&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 设置请求体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-预检请求的交互规范" tabindex="-1"><a class="header-anchor" href="#_5-预检请求的交互规范" aria-hidden="true">#</a> 5）预检请求的交互规范</h4><ul><li>浏览器发送预检请求，询问服务器是否允许 <ul><li>这并非要发出的真实请求，请求中不包含响应头，也没有消息体</li><li>这是一个预检请求，目的是询问服务器，是否允许后续的真实请求</li><li>预检请求 <mark>没有请求体</mark>，包含了后续真实请求要做的事情 <ul><li>请求方法为<code>OPTIONS</code></li><li>没有请求体</li><li>请求头中包含 <ul><li><code>Origin</code>：请求的源，和简单请求的含义一致</li><li><code>Access-Control-Request-Method</code>：后续的真实请求将使用的请求方法</li><li><code>Access-Control-Request-Headers</code>：后续的真实请求会改动的请求头</li></ul></li></ul></li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>OPTIONS /api/user HTTP/1.1
<span class="token key atrule">Host</span><span class="token punctuation">:</span> crossdomain.com
<span class="token punctuation">...</span>
<span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com
<span class="token key atrule">Access-Control-Request-Method</span><span class="token punctuation">:</span> POST
<span class="token key atrule">Access-Control-Request-Headers</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> content<span class="token punctuation">-</span>type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器允许 <ul><li>服务器收到预检请求后，可以检查预检请求中包含的信息</li><li>如果允许这样的请求，需要响应下面的消息格式</li><li>对于预检请求，不需要响应任何的消息体，只需要在响应头中添加： <ul><li><code>Access-Control-Allow-Origin</code>：和简单请求一样，表示允许的源</li><li><code>Access-Control-Allow-Methods</code>：表示允许的后续真实的请求方法</li><li><code>Access-Control-Allow-Headers</code>：表示允许改动的请求头</li><li><code>Access-Control-Max-Age</code>：告诉浏览器，多少秒内，对于同样的请求源、方法、头，都不需要再发送预检请求了</li></ul></li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>HTTP/1.1 200 OK
<span class="token key atrule">Date</span><span class="token punctuation">:</span> Tue<span class="token punctuation">,</span> 21 Apr 2020 08<span class="token punctuation">:</span>03<span class="token punctuation">:</span>35 GMT
<span class="token punctuation">...</span>
<span class="token key atrule">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com
<span class="token key atrule">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> POST
<span class="token key atrule">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> content<span class="token punctuation">-</span>type
<span class="token key atrule">Access-Control-Max-Age</span><span class="token punctuation">:</span> <span class="token number">86400</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浏览器发送真实请求 <ul><li>预检被服务器允许后，浏览器就会发送真实请求了</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>POST /api/user HTTP/1.1
<span class="token key atrule">Host</span><span class="token punctuation">:</span> crossdomain.com
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> keep<span class="token punctuation">-</span>alive
<span class="token punctuation">...</span>
<span class="token key atrule">Referer</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com/index.html
<span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com

<span class="token punctuation">{</span><span class="token key atrule">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;袁小进&quot;</span><span class="token punctuation">,</span> <span class="token key atrule">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器响应真实请求</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>HTTP/1.1 200 OK
<span class="token key atrule">Date</span><span class="token punctuation">:</span> Tue<span class="token punctuation">,</span> 21 Apr 2020 08<span class="token punctuation">:</span>03<span class="token punctuation">:</span>35 GMT
<span class="token punctuation">...</span>
<span class="token key atrule">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//my.com
<span class="token punctuation">...</span>

添加用户成功
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当完成预检之后，后续的处理与简单请求相同</li></ul><p><img src="`+o+`" alt=""></p><h4 id="_6-附带身份凭证的请求" tabindex="-1"><a class="header-anchor" href="#_6-附带身份凭证的请求" aria-hidden="true">#</a> 6）附带身份凭证的请求</h4><ul><li>默认情况下，ajax 的跨域请求并不会附带 cookie</li><li>某些需要权限的操作就无法进行 <ul><li>可以通过简单的配置实现附带 cookie</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// xhr</span>
<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// fetch api</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;include&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时，该跨域的 ajax 请求就是一个附带身份凭证的请求</li><li>当一个请求需要附带 cookie 时，无论是简单请求，还是预检请求，都会在请求头中添加 <code>cookie</code> 字段 <ul><li>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</li></ul></li><li>只需要在响应头中添加 <code>Access-Control-Allow-Credentials: true</code> 即可</li><li>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin: *</code>，所以不推荐使用 <code>*</code></p></div><h4 id="_7-js-访问指定的响应头" tabindex="-1"><a class="header-anchor" href="#_7-js-访问指定的响应头" aria-hidden="true">#</a> 7）JS 访问指定的响应头</h4><ul><li>在跨域访问时，JS 只能拿到一些最基本的响应头 <ul><li>如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</li></ul></li><li>如果要访问其他头，则需要服务器设置 <code>Access-Control-Expose-Headers</code><ul><li>让服务器把允许浏览器访问的头放入白名单</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Expose-Headers</span><span class="token punctuation">:</span> authorization<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_11-cors-中间件" tabindex="-1"><a class="header-anchor" href="#_11-cors-中间件" aria-hidden="true">#</a> 11.CORS 中间件</h3>`,66),Fs={href:"https://github.com/expressjs/cors#readme",target:"_blank",rel:"noopener noreferrer"},zs=p(`<h4 id="_1-自定义中间件基础原理" tabindex="-1"><a class="header-anchor" href="#_1-自定义中间件基础原理" aria-hidden="true">#</a> 1）自定义中间件基础原理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/corsMiddleware.js</span>
<span class="token keyword">const</span> allowOrigins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理预检请求</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Access-Control-Allow-Methods</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;access-control-request-method&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Access-Control-Allow-Headers</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;access-control-request-headers&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 处理附带身份凭证的请求</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Credentials&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 处理简单请求</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;origin&quot;</span> <span class="token keyword">in</span> req<span class="token punctuation">.</span>headers <span class="token operator">&amp;&amp;</span> allowOrigins<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;access-control-allow-origin&quot;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用第三方中间件" tabindex="-1"><a class="header-anchor" href="#_2-使用第三方中间件" aria-hidden="true">#</a> 2）使用第三方中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;cors&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// app.use(cors());</span>

<span class="token keyword">const</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;http://127.0.0.1:5500&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:9527&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">origin</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;not allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-session" tabindex="-1"><a class="header-anchor" href="#_12-session" aria-hidden="true">#</a> 12.Session</h3><h4 id="_1-cookie-和-session-对比" tabindex="-1"><a class="header-anchor" href="#_1-cookie-和-session-对比" aria-hidden="true">#</a> 1）Cookie 和 Session 对比</h4><ul><li>通常项目都是 Cookie、Session、JWT 相互配合存储信息</li><li>不存在谁取代谁</li></ul><table><thead><tr><th>对比项</th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端</td><td>服务器端</td></tr><tr><td>存储格式</td><td>只能是字符串格式</td><td>可以是任何格式</td></tr><tr><td>存储量</td><td>存储量有限（多数浏览器只提供 4KB）</td><td>存储量理论上是无限的</td></tr><tr><td>数据安全</td><td>数据容易被获取、被篡改，容易丢失</td><td>数据难以被获取、被篡改，不易丢失</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">Cookie 存储量有限解决方案</p><ul><li>可用 sessionStorage、localStorage 替换</li><li>存储量可达 10MB 左右</li><li>但是不会自动发送给服务器</li><li>且无法设置 cookie 的一些配置项</li></ul></div><h4 id="_2-session-原理" tabindex="-1"><a class="header-anchor" href="#_2-session-原理" aria-hidden="true">#</a> 2）Session 原理</h4><p><img src="`+kn+'" alt=""></p><ul><li>服务器存储的 sessionID 基本用的都是 UUID <ul><li>UUID，Universal Unique Identity，全球唯一 ID</li><li>需要保证唯一性</li></ul></li></ul><h4 id="_3-使用中间件" tabindex="-1"><a class="header-anchor" href="#_3-使用中间件" aria-hidden="true">#</a> 3）使用中间件</h4>',13),Qs={href:"https://github.com/expressjs/session",target:"_blank",rel:"noopener noreferrer"},Xs=p(`<ul><li>配置项的 secret 用于加密 cookie <ul><li>使用 cookie 中间件时应该用相同的密钥解密</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express-session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&quot;yuanjin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;sessionid&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-使用-session-完成登录认证" tabindex="-1"><a class="header-anchor" href="#_4-使用-session-完成登录认证" aria-hidden="true">#</a> 4）使用 session 完成登录认证</h4><ul><li>客户端发送请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9527/api/admin/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">loginPwd</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

updateStu<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9527/api/student/1201&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器 API 接口保存 session</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> adminService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginId<span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginPwd
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> result<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      value <span class="token operator">=</span> cryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//登录成功</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>loginUser <span class="token operator">=</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>token 中间件判断 session</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用于解析token</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// /api/student/:id 和  /api/student/1771</span>
  <span class="token keyword">const</span> apis <span class="token operator">=</span> needTokenApi<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token function">pathToRegexp</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> api<span class="token punctuation">.</span>method <span class="token operator">===</span> req<span class="token punctuation">.</span>method <span class="token operator">&amp;&amp;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>apis<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//说明已经登录过了</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">handleNonToken</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-jwt" tabindex="-1"><a class="header-anchor" href="#_13-jwt" aria-hidden="true">#</a> 13.JWT</h3><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1）背景</h4>`,11),Gs=n("li",null,"随着前后端分离的发展，以及数据中心的建立，越来越多的公司会创建一个中心服务器，服务于各种产品线",-1),Vs=n("li",null,[s("而这些产品线上的产品可能有着各种终端设备 "),n("ul",null,[n("li",null,"包括但不仅限于浏览器、桌面应用、移动端应用、平板应用、甚至智能家居")])],-1),$s=n("li",null,"实际上，不同的产品线通常有自己的服务器，产品内部的数据一般和自己的服务器交互",-1),Ys=n("li",null,[s("但中心服务器仍然有必要存在，因为同一家公司的产品总是会存在共享的数据 "),n("ul",null,[n("li",null,"比如用户数据")])],-1),Ks=n("li",null,"这些设备与中心服务器之间会进行 HTTP 通信",-1),Zs=n("mark",null,"认证和授权",-1),na=n("li",null,"如：登录",-1),sa=n("li",null,"各种设备发送消息到中心服务器，然后中心服务器响应一个身份令牌",-1),aa={href:"http://www.yuanjin.tech/article/98",target:"_blank",rel:"noopener noreferrer"},ta=p('<p><img src="'+dn+'" alt=""></p><ul><li>这种结构也可以继续使用传统的 cookie 方式传递令牌信息 <ul><li>cookie 在传输中无非是一个消息头而已</li><li>只不过浏览器对这个消息头有特殊处理罢了</li></ul></li><li>但浏览器之外的设备肯定不喜欢 cookie <ul><li>因为浏览器有着对 cookie 完善的管理机制</li><li>但是在其他设备上，就需要开发者自己手动处理了</li></ul></li><li>JWT 的出现就是为了解决这个问题</li></ul><h4 id="_2-简介" tabindex="-1"><a class="header-anchor" href="#_2-简介" aria-hidden="true">#</a> 2）简介</h4><ul><li>JWT, JSON Web Token</li><li>为多种终端设备提供统一的、安全的令牌格式</li></ul><p><img src="'+vn+`" alt=""></p><ul><li>可以存储到 cookie，也可以存储到 localStorage</li><li>可以使用任何传输方式来传输 <ul><li>一般来说，会使用 <mark>消息头</mark></li><li>如：当登录成功后，服务器可以给客户端响应一个 JWT</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>HTTP/1.1 200 OK
<span class="token punctuation">---</span>
set<span class="token punctuation">-</span>cookie<span class="token punctuation">:</span>token=JWT令牌
authorization<span class="token punctuation">:</span>JWT令牌
<span class="token punctuation">---</span>
<span class="token punctuation">{</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> token<span class="token punctuation">:</span>JWT令牌 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以出现在响应的任何一个地方 <ul><li>客户端和服务器自行约定即可</li></ul></li><li>可以出现在响应的多个地方 <ul><li>如：为了充分利用浏览器的 cookie，同时为了照顾其他设备</li><li>可以让 JWT 出现在 <code>set-cookie</code> 和 <code>authorization</code> 或 <code>body</code>中 <ul><li>会增加额外的传输量</li></ul></li></ul></li><li>可以存储到任何位置 <ul><li>如：手机文件、PC 文件、localStorage、cookie</li></ul></li><li>当后续请求发生时，只需要将它作为请求的一部分发送到服务器即可</li></ul><p><img src="`+c+`" alt=""></p><div class="hint-container tip"><p class="hint-container-title">JWT 格式</p><ul><li>JWT 没有明确要求附带到请求的格式</li><li>通常会使用如下的格式 <ul><li>这种格式是 OAuth2 附带 token 的一种规范格式</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>GET /api/resources HTTP/1.1
<span class="token punctuation">---</span>
<span class="token key atrule">authorization</span><span class="token punctuation">:</span> bearer JWT令牌
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-令牌的组成" tabindex="-1"><a class="header-anchor" href="#_3-令牌的组成" aria-hidden="true">#</a> 3）令牌的组成</h4><ul><li>为了保证令牌的安全性，JWT 令牌由三个部分组成</li><li>完整格式：<code>header.payload.signature</code></li></ul><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>header</td><td>令牌头部，记录了整个令牌的类型和签名算法</td></tr><tr><td>payload</td><td>令牌负荷，记录了保存的主体信息<br>如：要保存的用户信息</td></tr><tr><td>signature</td><td>令牌签名，按照头部固定的签名算法对整个令牌进行签名<br>该签名的作用是：保证令牌不被伪造和篡改</td></tr></tbody></table><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9.BCwUy3jnUQ_E6TqCayc7rCHkx<span class="token punctuation">-</span>vxxdagUwPOWqwYCFc
<span class="token comment"># header：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span>
<span class="token comment"># payload：eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9</span>
<span class="token comment"># signature: BCwUy3jnUQ_E6TqCayc7rCHkx-vxxdagUwPOWqwYCFc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-header" tabindex="-1"><a class="header-anchor" href="#_4-header" aria-hidden="true">#</a> 4）header</h4><ul><li>令牌头部，记录了整个令牌的类型和签名算法</li><li>格式是一个 JSON 对象</li><li>alg（algorithm） <ul><li>signature 部分使用的签名算法，通常可以取两个值</li><li>HS256：一种对称加密算法，使用同一个秘钥对 signature 加密解密</li><li>RS256：一种非对称加密算法，使用私钥加密，公钥解密</li></ul></li><li>typ（type） <ul><li>整个令牌的类型，固定写 <code>JWT</code> 即可</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),pa=n("li",null,[s("设置好 "),n("code",null,"header"),s(" 后就可以生成 "),n("code",null,"header"),s(" 部分了")],-1),ea=n("code",null,"header",-1),oa=n("code",null,"base64 url",-1),ca=p("<li><code>base64 url</code> 不是一个加密算法，而是一种编码方式</li><li>是在 <code>base64</code> 算法的基础上对 <code>+</code> 、 <code>=</code> 、 <code>/</code> 三个字符做出特殊处理的算法</li><li>而 <code>base64</code> 是使用 64 个可打印字符来表示一个二进制数据</li>",3),la={href:"https://baike.baidu.com/item/base64/8545775?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},ia=n("li",null,[s("浏览器提供了 "),n("code",null,"btoa"),s(" 函数对 header 编码")],-1),ua=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">typ</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同样的，浏览器也提供了 <code>atob</code> 函数对其解码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>NodeJS 中没有提供这两个函数，可以安装第三方库 <code>atob</code> 和 <code>bota</code></li><li>或者手动编码解码</li></ul></div><h4 id="_5-payload" tabindex="-1"><a class="header-anchor" href="#_5-payload" aria-hidden="true">#</a> 5）payload</h4><ul><li>JWT 的主体信息，仍然是一个 JSON 对象</li><li>可以包含以下内容</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;ss&quot;</span>：<span class="token string">&quot;发行者&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;iat&quot;</span>：<span class="token string">&quot;发布时间&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;exp&quot;</span>：<span class="token string">&quot;到期时间&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;sub&quot;</span>：<span class="token string">&quot;主题&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;aud&quot;</span>：<span class="token string">&quot;听众&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;nbf&quot;</span>：<span class="token string">&quot;在此之前不可用&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;jti&quot;</span>：<span class="token string">&quot;JWT ID&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以全写，也可以一个都不写，只是一个规范</li><li>就算写了，也需要在将来验证这个 JWT 令牌时手动处理才能发挥作用</li></ul><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>ss</code></td><td>发行该 JWT 的是谁<br>可以写公司名字，也可以写服务名称</td></tr><tr><td><code>iat</code></td><td>该 JWT 的发放时间<br>通常写当前时间的时间戳</td></tr><tr><td><code>exp</code></td><td>该 JWT 的到期时间<br>通常写时间戳</td></tr><tr><td><code>sub</code></td><td>该 JWT 是用于干嘛的</td></tr><tr><td><code>aud</code></td><td>该 JWT 是发放给哪个终端的<br>可以是终端类型，也可以是用户名称，随意一点</td></tr><tr><td><code>nbf</code></td><td>一个时间点<br>在该时间点到达之前，这个令牌是不可用的</td></tr><tr><td><code>jti</code></td><td>JWT 的唯一编号<br>设置此项的目的，主要是为了防止重放攻击</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">重放攻击</p><p>在某些场景下，用户使用之前的令牌发送到服务器，被服务器正确的识别，从而导致不可预期的行为发生</p></div><ul><li>payload 这一部分只是一个 json 对象而已</li><li>可以向对象中加入任何想要加入的信息 <ul><li><code>foo: bar</code>是自定义的信息</li><li><code>iat: 1587548215</code>是 JWT 规范中的信息</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1587548215</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>payload 部分和 header 一样，需要通过 <code>base64 url</code> 编码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">iat</span><span class="token operator">:</span> <span class="token number">1587548215</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-signature" tabindex="-1"><a class="header-anchor" href="#_6-signature" aria-hidden="true">#</a> 6）signature</h4><ul><li>JWT 的签名，保证了整个 JWT 不被篡改</li><li>这部分的生成，是对前面两个部分的编码结果，按照头部指定的方式进行加密 <ul><li>如：头部指定的加密方法是 <code>HS256</code>，前面两部分的编码结果是<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9</code></li><li>则第三部分就是用对称加密算法 <code>HS256</code> 对字符串 <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9</code> 进行加密</li><li>当然需要指定一个秘钥，比如 <code>shhhhh</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">HS256</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token string">&quot;shhhhh&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// BCwUy3jnUQ_E6TqCayc7rCHkx-vxxdagUwPOWqwYCFc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将三部分组合在一起，就得到了完整的 JWT</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE1ODc1NDgyMTV9.BCwUy3jnUQ_E6TqCayc7rCHkx<span class="token punctuation">-</span>vxxdagUwPOWqwYCFc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>由于签名使用的秘钥保存在服务器，客户端就无法伪造出签名，因为拿不到秘钥</li><li>之所以说无法伪造 JWT，就是因为第三部分 signature 的存在</li><li>而前面两部分并没有加密，只是一个编码结果而已，可以认为几乎是明文传输 <ul><li>不要把敏感的信息存放到 JWT 中，如：密码</li></ul></li></ul><h4 id="_7-令牌的验证" tabindex="-1"><a class="header-anchor" href="#_7-令牌的验证" aria-hidden="true">#</a> 7）令牌的验证</h4><ul><li>令牌在服务器组装完成后，会以任意的方式发送到客户端</li><li>客户端会把令牌保存起来，后续的请求会将令牌发送给服务器</li><li>而服务器需要验证令牌是否正确 <ul><li>对 <code>header + payload</code> 用同样的秘钥和加密算法进行重新加密</li><li>把加密的结果和传入 JWT 的 <code>signature</code> 进行对比</li><li>如果完全相同，则表示 JWT 没有被篡改</li><li>如果不同，肯定是被篡改过了</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>传入的header.传入的payload.传入的signature
新的signature = header中的加密算法(传入的header.传入的payload, 秘钥)
验证：新的signature === 传入的signature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当令牌验证为没有被篡改后，服务器可以进行其他验证 <ul><li>如：是否过期、听众是否满足要求等等</li></ul></li><li>这些验证都需要服务器手动完成，没有哪个服务器会自动验证 <ul><li>可以借助第三方库来完成</li></ul></li></ul><h4 id="_8-jwt-的特点" tabindex="-1"><a class="header-anchor" href="#_8-jwt-的特点" aria-hidden="true">#</a> 8）JWT 的特点</h4><ul><li>JWT 本质上是一种令牌格式</li><li>和终端设备无关，同样和服务器无关，甚至与如何传输无关，只是规范了令牌的格式而已</li><li>JWT 由三部分组成：header、payload、signature <ul><li>主体信息在 payload</li></ul></li><li>JWT 难以被篡改和伪造 <ul><li>因为有第三部分的签名存在</li></ul></li></ul><h3 id="_14-登录和认证-——-服务器开发" tabindex="-1"><a class="header-anchor" href="#_14-登录和认证-——-服务器开发" aria-hidden="true">#</a> 14.登录和认证 —— 服务器开发</h3>`,27),ra={href:"https://github.com/auth0/node-jsonwebtoken#readme",target:"_blank",rel:"noopener noreferrer"},ka=n("li",null,"Express 依赖 jsonwebtoken 库封装了 express-jwt 中间件",-1),da=p(`<h4 id="_1-颁发-jwt" tabindex="-1"><a class="header-anchor" href="#_1-颁发-jwt" aria-hidden="true">#</a> 1）颁发 JWT</h4><ul><li>确定过期时间</li><li>确定主体</li><li>确定密钥</li><li>确定传输方式 <ul><li>Cookie</li><li>Authorization</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/jwt.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">publish</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> maxAge <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> secrect<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> maxAge<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 添加到cookie</span>
  res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span>cookieKey<span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">maxAge</span><span class="token operator">:</span> maxAge <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 添加其他传输</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-认证-jwt" tabindex="-1"><a class="header-anchor" href="#_2-认证-jwt" aria-hidden="true">#</a> 2）认证 JWT</h4><ul><li>获取 JWT <ul><li>从 Cookie 中</li><li>从 Authorization 中 <ul><li>带 Bearer</li><li>不带 Bearer</li></ul></li></ul></li><li>验证 JWT</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/jwt.js</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">verify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> token<span class="token punctuation">;</span>
  <span class="token comment">// 尝试从cookie中获取</span>
  token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span>cookieKey<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// cookie中没有</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试中header中</span>
    token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 没有token</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// authorization: bearer token</span>
    token <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    token <span class="token operator">=</span> token<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-服务器-api-登录接口保存-jwt" tabindex="-1"><a class="header-anchor" href="#_3-服务器-api-登录接口保存-jwt" aria-hidden="true">#</a> 3）服务器 API 登录接口保存 JWT</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> adminService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginId<span class="token punctuation">,</span>
      req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>loginPwd
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> value <span class="token operator">=</span> result<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
      <span class="token comment">// 登录成功</span>
      jwt<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-token-中间件解析-jwt" tabindex="-1"><a class="header-anchor" href="#_4-token-中间件解析-jwt" aria-hidden="true">#</a> 4）token 中间件解析 JWT</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// /api/student/:id 和  /api/student/1771</span>
  <span class="token keyword">const</span> apis <span class="token operator">=</span> needTokenApi<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token function">pathToRegexp</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> api<span class="token punctuation">.</span>method <span class="token operator">===</span> req<span class="token punctuation">.</span>method <span class="token operator">&amp;&amp;</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>apis<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 认证通过</span>
    req<span class="token punctuation">.</span>userId <span class="token operator">=</span> result<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 认证失败</span>
    <span class="token function">handleNonToken</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-添加-whoami-接口" tabindex="-1"><a class="header-anchor" href="#_5-添加-whoami-接口" aria-hidden="true">#</a> 5）添加 whoami 接口</h4><ul><li>API 接口</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">&quot;/whoami&quot;</span><span class="token punctuation">,</span>
  <span class="token function">asyncHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> adminService<span class="token punctuation">.</span><span class="token function">getAdminById</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>token 中间件白名单</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> needTokenApi <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student/:id&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/student&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/api/admin/whoami&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-登录和认证-——-客户端开发" tabindex="-1"><a class="header-anchor" href="#_15-登录和认证-——-客户端开发" aria-hidden="true">#</a> 15.登录和认证 —— 客户端开发</h3><h4 id="_1-工程结构" tabindex="-1"><a class="header-anchor" href="#_1-工程结构" aria-hidden="true">#</a> 1）工程结构</h4><ul><li>client 目录 <ul><li>存放前端 Vue 工程</li></ul></li><li>public 目录 <ul><li>存放前端 Vue 工程打包后的 dist 目录下的文件</li></ul></li><li>根目录 <ul><li>后端 Node 工程</li></ul></li></ul><h4 id="_2-服务端准备" tabindex="-1"><a class="header-anchor" href="#_2-服务端准备" aria-hidden="true">#</a> 2）服务端准备</h4><ul><li>nodemon 忽略 client 目录</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.json&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;ignore&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;package*.json&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;nodemon.json&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;public&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;client&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>取消服务端路由的白名单限制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">origin</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">]</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JWT 配置代码取消使用 Cookie <ul><li>真实开发环境下后端不会管理 Cookie</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/jwt.js</span>
<span class="token comment">// 颁发jwt</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">publish</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> maxAge <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> secrect<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">expiresIn</span><span class="token operator">:</span> maxAge<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 认证jwt</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">verify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> token<span class="token punctuation">;</span>
  token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 没有token</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// authorization: bearer token</span>
  token <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  token <span class="token operator">=</span> token<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> token<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> token<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-搭建-vue-工程" tabindex="-1"><a class="header-anchor" href="#_3-搭建-vue-工程" aria-hidden="true">#</a> 3）搭建 Vue 工程</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue create client
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>package.json</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;client&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.1.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;axios&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^0.19.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;core-js&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.6.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.6.11&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-router&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.1.6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vuex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.1.3&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@vue/cli-plugin-babel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~4.3.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-plugin-router&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~4.3.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-plugin-vuex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~4.3.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;@vue/cli-service&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~4.3.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;vue-template-compiler&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.6.11&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置-api-代理" tabindex="-1"><a class="header-anchor" href="#_4-配置-api-代理" aria-hidden="true">#</a> 4）配置 API 代理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:9527&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-封装-axios-配置" tabindex="-1"><a class="header-anchor" href="#_5-封装-axios-配置" aria-hidden="true">#</a> 5）封装 axios 配置</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// service/request.js</span>
<span class="token doc-comment comment">/**
 * 1. 发送请求的时候，如果有token，需要附带到请求头中
 * 2. 响应的时候，如果有token，保存token到本地（localStorage）
 * 3. 响应的时候，如果响应的消息码是403（没有token，token失效），在本地删除token
 */</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发送请求</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> axios<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">authorization</span><span class="token operator">:</span> <span class="token string">&quot;bearer &quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 保存token到本地</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> resp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 本地删除token</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">403</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-封装-api-请求接口" tabindex="-1"><a class="header-anchor" href="#_6-封装-api-请求接口" aria-hidden="true">#</a> 6）封装 API 请求接口</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// service/loginService.js</span>
<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&quot;./request&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 模拟网络延迟</span>
<span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">login</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">loginId<span class="token punctuation">,</span> loginPwd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/admin/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    loginId<span class="token punctuation">,</span>
    loginPwd<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loginOut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">whoAmI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/admin/whoami&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-封装登录用户的数据仓库模块" tabindex="-1"><a class="header-anchor" href="#_7-封装登录用户的数据仓库模块" aria-hidden="true">#</a> 7）封装登录用户的数据仓库模块</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store/loginUser.js</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> loginService <span class="token keyword">from</span> <span class="token string">&quot;../service/loginService&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">isLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>data <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>isLoading <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> loginId<span class="token punctuation">,</span> loginPwd <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setIsLoading&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setData&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setIsLoading&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setData&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      loginService<span class="token punctuation">.</span><span class="token function">loginOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">whoAmI</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setIsLoading&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> loginService<span class="token punctuation">.</span><span class="token function">whoAmI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setData&quot;</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setData&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;setIsLoading&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-使用数据仓库" tabindex="-1"><a class="header-anchor" href="#_8-使用数据仓库" aria-hidden="true">#</a> 8）使用数据仓库</h4><ul><li>导出数据仓库和模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store/index.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> loginUser <span class="token keyword">from</span> <span class="token string">&quot;./loginUser&quot;</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    loginUser<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>页面初始化后先判断是否已登录</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./store&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 在网站被访问时，需要用token去换取用户的身份</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser/whoAmI&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-登录功能" tabindex="-1"><a class="header-anchor" href="#_9-登录功能" aria-hidden="true">#</a> 9）登录功能</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// views/Login.vue</span>
<span class="token keyword">async</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loginId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginId<span class="token punctuation">,</span>
    <span class="token literal-property property">loginPwd</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginPwd<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成功</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;账号密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-配置路由守卫" tabindex="-1"><a class="header-anchor" href="#_10-配置路由守卫" aria-hidden="true">#</a> 10）配置路由守卫</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// router/index.js</span>
<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/protect&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../views/Protect.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>loginUser<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 有用户</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../views/Login.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-打包" tabindex="-1"><a class="header-anchor" href="#_11-打包" aria-hidden="true">#</a> 11）打包</h4><ul><li>打包到服务器静态资源目录 public</li><li>访问 http://localhost:9527</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:9527&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">outputDir</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),va=n("li",null,"解决服务器刷新后 404 问题",-1),ma={href:"https://www.npmjs.com/package/connect-history-api-fallback",target:"_blank",rel:"noopener noreferrer"},ba=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;connect-history-api-fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">history</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-场景-——-日志记录" tabindex="-1"><a class="header-anchor" href="#_16-场景-——-日志记录" aria-hidden="true">#</a> 16.场景 —— 日志记录</h3><h4 id="_1-修改日志配置文件" tabindex="-1"><a class="header-anchor" href="#_1-修改日志配置文件" aria-hidden="true">#</a> 1）修改日志配置文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// logger.js</span>
<span class="token keyword">const</span> log4js <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;log4js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 封装sql和api公共appenders</span>
<span class="token keyword">const</span> <span class="token function-variable function">getCommonAppenders</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pathName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义一个sql日志出口</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;dateFile&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;logs&quot;</span><span class="token punctuation">,</span> pathName<span class="token punctuation">,</span> <span class="token string">&quot;logging.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxLogSize</span><span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 配置文件的最大字节数</span>
    <span class="token literal-property property">keepFileExt</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">numBackups</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 日志文件保留三天</span>
    <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&quot;%c [%d{yyyy-MM-dd hh:mm:ss}] [%p]: %m%n&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

log4js<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token function">getCommonAppenders</span><span class="token punctuation">(</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;stdout&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">api</span><span class="token operator">:</span> <span class="token function">getCommonAppenders</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sql</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">api</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">appenders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 程序正/异常退出时，还没记录完成的日志记录完</span>
process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  log4js<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sqlLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> apiLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;api&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> defaultLogger <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>sqlLogger <span class="token operator">=</span> sqlLogger<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>apiLogger <span class="token operator">=</span> apiLogger<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>logger <span class="token operator">=</span> defaultLogger<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-定义记录-api-请求日志中间件" tabindex="-1"><a class="header-anchor" href="#_2-定义记录-api-请求日志中间件" aria-hidden="true">#</a> 2）定义记录 API 请求日志中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/apiLoggerMiddleware.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> apiLogger <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../logger.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> log4js <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;log4js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 手动记录</span>
<span class="token comment">// module.exports = (req, res, next) =&gt; {</span>
<span class="token comment">//   next();</span>
<span class="token comment">//   apiLogger.debug(\`\${req.method} \${req.path} \${req.ip}\`);</span>
<span class="token comment">// };</span>

<span class="token comment">// 自动记录</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> log4js<span class="token punctuation">.</span><span class="token function">connectLogger</span><span class="token punctuation">(</span>apiLogger<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-请求-api-接口前使用中间件" tabindex="-1"><a class="header-anchor" href="#_3-请求-api-接口前使用中间件" aria-hidden="true">#</a> 3）请求 API 接口前使用中间件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./apiLoggerMiddleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-场景-——-文件上传" tabindex="-1"><a class="header-anchor" href="#_17-场景-——-文件上传" aria-hidden="true">#</a> 17.场景 —— 文件上传</h3><h4 id="_1-文件上传使用的-http-报文格式" tabindex="-1"><a class="header-anchor" href="#_1-文件上传使用的-http-报文格式" aria-hidden="true">#</a> 1）文件上传使用的 HTTP 报文格式</h4><ul><li>消息体使用 form-data 格式传输</li><li><code>----WebKitFormBoundary7MA4YWxkTrZu0gW</code> 是分界线 <ul><li>分割表单中每一个数据</li><li>随机生成的字符串</li></ul></li><li>表单数据是键值对</li><li>该格式适合传输大数据</li></ul><p><img src="`+mn+`" alt=""></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST / HTTP/1.1
Host: www.baidu.com
Cookie: BAIDUID=3DF49B9E3CFF87996DCF09B1CB293BB2:FG=1; BDSVRTM=0
Content-Length: 368
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name=&quot;a&quot;

1
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name=&quot;b&quot;

2
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name=&quot;img&quot;; filename=&quot;/D:/01WebCode/测试资源/12eqwdd.png&quot;
Content-Type: image/png

(data)
------WebKitFormBoundary7MA4YWxkTrZu0gW--
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-客户端使用传统-form-表单上传文件" tabindex="-1"><a class="header-anchor" href="#_2-客户端使用传统-form-表单上传文件" aria-hidden="true">#</a> 2）客户端使用传统 form 表单上传文件</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>服务器定义 API 接口</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/api/upload.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;服务器完成了图片处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/api/upload&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-客户端使用-ajax-创建-formdata-对象上传文件" tabindex="-1"><a class="header-anchor" href="#_3-客户端使用-ajax-创建-formdata-对象上传文件" aria-hidden="true">#</a> 3）客户端使用 ajax 创建 FormData 对象上传文件</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> inpA <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;[name=a]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inpFile <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;[name=img]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构建form-data格式的消息体</span>
    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> inpA<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> inpFile<span class="token punctuation">.</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/upload&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 有错误</span>
          <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          img<span class="token punctuation">.</span>src <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> upload<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-服务器解析处理请求体" tabindex="-1"><a class="header-anchor" href="#_4-服务器解析处理请求体" aria-hidden="true">#</a> 4）服务器解析处理请求体</h4>`,21),ha={href:"https://github.com/expressjs/multer#readme",target:"_blank",rel:"noopener noreferrer"},ga=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/api/upload.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;multer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存的文件没有后缀名，会自动创建目录</span>
<span class="token comment">// const upload = multer({</span>
<span class="token comment">//   dest: path.resolve(__dirname, &quot;../../public&quot;, &quot;upload&quot;),</span>
<span class="token comment">// });</span>

<span class="token comment">// 配置磁盘存储引擎，使保存的文件有后缀名，需要手动创建目录</span>
<span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 上传的文件存储的目录，一般在gitignore中忽略，服务器本身有自己的目录存放用户上传的文件</span>
  <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../public/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 时间戳-6位随机字符.文件后缀</span>
    <span class="token keyword">const</span> timeStamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> randomStr <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timeStamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>randomStr<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ext<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  storage<span class="token punctuation">,</span>
  <span class="token literal-property property">limits</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">150</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">fileFilter</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 验证文件后缀名</span>
    <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> whitelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.gif&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>whitelist<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">your ext name of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>extname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not support</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-错误处理" tabindex="-1"><a class="header-anchor" href="#_5-错误处理" aria-hidden="true">#</a> 5）错误处理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/errorMiddleware.js</span>
<span class="token keyword">const</span> getMsg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./getSendResult&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;multer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取基地址（调用中间件的use函数的第一个参数）</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// const errObj = {</span>
    <span class="token comment">//   code: 500,</span>
    <span class="token comment">//   msg: err instanceof Error ? err.message : err,</span>
    <span class="token comment">// };</span>
    <span class="token comment">// // 发生了错误</span>
    <span class="token comment">// res.status(500).send(errObj);</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">multer<span class="token punctuation">.</span>MulterError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>getMsg<span class="token punctuation">.</span><span class="token function">getErr</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> errObj <span class="token operator">=</span> err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> err<span class="token punctuation">.</span>message <span class="token operator">:</span> err<span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>getMsg<span class="token punctuation">.</span><span class="token function">getErr</span><span class="token punctuation">(</span>errObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-场景-——-文件下载" tabindex="-1"><a class="header-anchor" href="#_18-场景-——-文件下载" aria-hidden="true">#</a> 18.场景 —— 文件下载</h3><h4 id="_1-api-接口" tabindex="-1"><a class="header-anchor" href="#_1-api-接口" aria-hidden="true">#</a> 1）API 接口</h4><ul><li>约定请求 <code>GET /download/文件名</code> 时</li><li>请求 API，获取 resources 目录下对应的文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/download&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./api/download&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>请求服务器目录下的文件</li><li><code>res.download(绝对路径，下载时的默认文件名，错误处理对象)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/api/download.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/:filename&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> absPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
    __dirname<span class="token punctuation">,</span>
    <span class="token string">&quot;../../resources&quot;</span><span class="token punctuation">,</span>
    req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>filename
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>absPath<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-原理" tabindex="-1"><a class="header-anchor" href="#_2-原理" aria-hidden="true">#</a> 2）原理</h4><ul><li>响应头中的关键字段 <code>Content-Disposition</code></li><li>告诉客户端如何处理响应的数据/文件 <ul><li><code>attachment</code>：将响应体作为附件处理</li><li>附件格式触发浏览器下载行为</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;Content-Disposition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;attachment; filename=&#39;test.png&#39;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 文件类型</span>
  <span class="token property">&quot;Content-Length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;22620&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 文件字节数</span>
  <span class="token property">&quot;Accept-Ranges&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bytes&quot;</span> <span class="token comment">// 是否支持断点续传，表示服务器支持断点续传的单位，没有该属性或值为null则不支持</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-迅雷下载协议" tabindex="-1"><a class="header-anchor" href="#_3-迅雷下载协议" aria-hidden="true">#</a> 3）迅雷下载协议</h4><ul><li>得到完整的下载地址</li><li>格式转换为 <code>AA地址ZZ</code></li><li>然后转换为 base64 编码</li><li>最后拼接协议头 <code>thunder://base64编码</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">resrole</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>thunder<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/res/hill.zip<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;a[resrole=thunder]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> thunderLink <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">AA</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>a<span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ZZ</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  thunderLink <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span>thunderLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
  thunderLink <span class="token operator">=</span> <span class="token string">&quot;thunder://&quot;</span> <span class="token operator">+</span> thunderLink<span class="token punctuation">;</span>
  a<span class="token punctuation">.</span>href <span class="token operator">=</span> thunderLink<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-断点续传" tabindex="-1"><a class="header-anchor" href="#_4-断点续传" aria-hidden="true">#</a> 4）断点续传</h4><ul><li>发送请求时，请求头携带 <code>Ranges</code></li><li>实现读取流指定范围的数据</li><li>有些下载器在发送下载请求前会先发送 <code>HEAD</code> 请求 <ul><li>通过该请求响应头中的 <code>Accept-Ranges</code> 判断是否支持断点续传</li><li>如果支持，后续下载请求再携带 <code>Ranges</code></li></ul></li></ul><h3 id="_19-场景-——-图片水印" tabindex="-1"><a class="header-anchor" href="#_19-场景-——-图片水印" aria-hidden="true">#</a> 19.场景 —— 图片水印</h3><h4 id="_1-加水印方案一-上传时加水印" tabindex="-1"><a class="header-anchor" href="#_1-加水印方案一-上传时加水印" aria-hidden="true">#</a> 1）加水印方案一：上传时加水印</h4><ul><li>用户上传原始图片</li><li>服务器保存原始图片和水印图片</li><li>用户请求图片时返回水印图片</li><li>请求响应速度快，修改水印较麻烦</li></ul><h4 id="_2-加水印方案二-动态水印" tabindex="-1"><a class="header-anchor" href="#_2-加水印方案二-动态水印" aria-hidden="true">#</a> 2）加水印方案二：动态水印</h4><ul><li>用户上传原始图片</li><li>服务器只保存原始图片</li><li>用户请求图片时服务器动态加水印</li><li>请求响应速度慢，修改水印较方便</li></ul><h4 id="_3-原理" tabindex="-1"><a class="header-anchor" href="#_3-原理" aria-hidden="true">#</a> 3）原理</h4>`,23),ya={href:"https://github.com/oliver-moran/jimp",target:"_blank",rel:"noopener noreferrer"},qa=p(`<ul><li>其实就是修改图片数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/util/watermark.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jimp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jimp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 给一张图片加水印</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mark <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>
  waterFile<span class="token punctuation">,</span>
  originFile<span class="token punctuation">,</span>
  targetFile<span class="token punctuation">,</span>
  proportion <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 原始图片宽高比例（目标比例）</span>
  marginProportion <span class="token operator">=</span> <span class="token number">0.01</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>water<span class="token punctuation">,</span> origin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    jimp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>waterFile<span class="token punctuation">)</span><span class="token punctuation">,</span>
    jimp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>originFile<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 对水印图片进行缩放</span>
  <span class="token keyword">const</span> curProportion <span class="token operator">=</span> origin<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>width <span class="token operator">/</span> water<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  water<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>curProportion <span class="token operator">/</span> proportion<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 计算位置</span>
  <span class="token keyword">const</span> right <span class="token operator">=</span> origin<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>width <span class="token operator">*</span> marginProportion<span class="token punctuation">;</span>
  <span class="token keyword">const</span> bottom <span class="token operator">=</span> origin<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>height <span class="token operator">*</span> marginProportion<span class="token punctuation">;</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> origin<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>width <span class="token operator">-</span> right <span class="token operator">-</span> water<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  <span class="token keyword">const</span> y <span class="token operator">=</span> origin<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>height <span class="token operator">-</span> bottom <span class="token operator">-</span> water<span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span>height<span class="token punctuation">;</span>

  <span class="token comment">// 写入水印</span>
  origin<span class="token punctuation">.</span><span class="token function">composite</span><span class="token punctuation">(</span>water<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> jimp<span class="token punctuation">.</span><span class="token constant">BLEND_SOURCE_OVER</span><span class="token punctuation">,</span>
    <span class="token literal-property property">opacitySource</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> origin<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mark<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-上传图片时加水印" tabindex="-1"><a class="header-anchor" href="#_4-上传图片时加水印" aria-hidden="true">#</a> 4）上传图片时加水印</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> watermark <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../../util/watermark&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> waterPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../public/img/water.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../public/origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token comment">// 加水印</span>
  <span class="token keyword">const</span> newPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
    __dirname<span class="token punctuation">,</span>
    <span class="token string">&quot;../../public/upload&quot;</span><span class="token punctuation">,</span>
    req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">watermark</span><span class="token punctuation">(</span>waterPath<span class="token punctuation">,</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-场景-——-图片防盗链" tabindex="-1"><a class="header-anchor" href="#_20-场景-——-图片防盗链" aria-hidden="true">#</a> 20.场景 —— 图片防盗链</h3><ul><li>根据浏览器请求头的字段 <code>referer</code></li><li>判断当前请求的主机是否是服务器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/imgProtectMiddleware.js</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> host <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>host<span class="token punctuation">;</span> <span class="token comment">// 获取本网站的主机名（包括端口号）</span>
  <span class="token keyword">let</span> referer <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>referer<span class="token punctuation">;</span>

  <span class="token comment">// 只处理图片</span>
  <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jpeg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.gif&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>referer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    referer <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">.</span>host<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>referer <span class="token operator">&amp;&amp;</span> host <span class="token operator">!==</span> referer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">&quot;/img/logo.jpg&quot;</span><span class="token punctuation">;</span> <span class="token comment">// url rewrite</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-场景-——-代理【重要】" tabindex="-1"><a class="header-anchor" href="#_21-场景-——-代理【重要】" aria-hidden="true">#</a> 21.场景 —— 代理【重要】</h3><p><img src="`+bn+`" alt=""></p><h4 id="_1-手写代理中间件" tabindex="-1"><a class="header-anchor" href="#_1-手写代理中间件" aria-hidden="true">#</a> 1）手写代理中间件</h4><ul><li>请求 <code>http://localhost:9527/data/api/local</code></li><li>代理到服务器 <code>http://yuanjin.tech:5100/api/local</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/proxyMiddleware.js</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token string">&quot;/data&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不需要代理</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 需要代理</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> req<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建代理请求对象 request</span>
  <span class="token keyword">const</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;yuanjin.tech&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">5100</span><span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> req<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 代理响应对象 response</span>
      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      response<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把请求体写入到代理请求对象的请求体中</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用第三方中间件-1" tabindex="-1"><a class="header-anchor" href="#_2-使用第三方中间件-1" aria-hidden="true">#</a> 2）使用第三方中间件</h4>`,13),fa={href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"},wa=p(`<ul><li>vue 中的代理配置使用的就是该中间件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createProxyMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http-proxy-middleware&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不配置context，默认该服务器所有请求都会走代理</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token string">&quot;/data&quot;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://yuanjin.tech:5100&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">pathRewrite</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-场景-——-模版引擎【扩展】" tabindex="-1"><a class="header-anchor" href="#_22-场景-——-模版引擎【扩展】" aria-hidden="true">#</a> 22.场景 —— 模版引擎【扩展】</h3><h4 id="_1-两种渲染方式" tabindex="-1"><a class="header-anchor" href="#_1-两种渲染方式" aria-hidden="true">#</a> 1）两种渲染方式</h4><p><img src="`+hn+'" alt=""></p><h4 id="_2-模板引擎" tabindex="-1"><a class="header-anchor" href="#_2-模板引擎" aria-hidden="true">#</a> 2）模板引擎</h4>',6),xa=n("li",null,"在静态内容中插入动态内容",-1),_a=n("li",null,"mustache（Vue）",-1),ja={href:"https://github.com/mde/ejs",target:"_blank",rel:"noopener noreferrer"},Sa=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;ejs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ejs
  <span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span><span class="token string">&quot;./test.ejs&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">number</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
生成的数字是：&lt;%= number %&gt;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">number</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.31928499351079287</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-模板引擎生成学生数据" tabindex="-1"><a class="header-anchor" href="#_3-模板引擎生成学生数据" aria-hidden="true">#</a> 3）模板引擎生成学生数据</h4><ul><li>客户端请求 <code>http://localhost:9527/student</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- routes/views/students.ejs --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>学生列表页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>学生总数： &lt;%= total %&gt; , 当前第&lt;%= page %&gt;页，每页&lt;%= limit %&gt;条数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      &lt;% datas.forEach(stu =&gt; { %&gt;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>&lt;%= stu.name %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      &lt;% }) %&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>?page=&lt;%=+page-1%&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>?page=&lt;%=+page+1%&gt;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>控制器 Controller 处理请求</li><li>向模板页面传递数据（模型 Model）到视图 View</li><li>模板响应请求</li><li>这个过程其实就是 MVC</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/controller/student.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> studentService <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../../services/studentService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> limit <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>limit <span class="token operator">||</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sex <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>sex <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// total   datas</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> studentService<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;./students.ejs&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>result<span class="token punctuation">,</span>
    page<span class="token punctuation">,</span>
    limit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用模板引擎</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;views&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/student&quot;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./controller/student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-场景-——-生成二维码" tabindex="-1"><a class="header-anchor" href="#_23-场景-——-生成二维码" aria-hidden="true">#</a> 23.场景 —— 生成二维码</h3><ul><li>表示为字符串</li></ul><h4 id="_1-矩阵点" tabindex="-1"><a class="header-anchor" href="#_1-矩阵点" aria-hidden="true">#</a> 1）矩阵点</h4><ul><li>通常是黑色或白色的小点</li><li>深色表示 1</li><li>白色表示 0</li></ul><h4 id="_2-位置探测组" tabindex="-1"><a class="header-anchor" href="#_2-位置探测组" aria-hidden="true">#</a> 2）位置探测组</h4><ul><li>三个位于角落的嵌套矩形</li><li>用于定位二维码图片的方向</li></ul><h4 id="_3-version" tabindex="-1"><a class="header-anchor" href="#_3-version" aria-hidden="true">#</a> 3）Version</h4><ul><li>1 ～ 40 的数字</li><li>数字越大，表示整个二维码的矩阵越大 <ul><li>1 表示 <code>21 * 21</code></li><li>40 表示 <code>177 * 177</code></li></ul></li></ul><h4 id="_4-mode" tabindex="-1"><a class="header-anchor" href="#_4-mode" aria-hidden="true">#</a> 4）mode</h4><ul><li>字符编码方式 <ul><li>使用 ASCII 编码会占用过多字节</li><li>一个字符占一个字节（8bytes）</li></ul></li><li>Numeric <ul><li>只编码数字</li></ul></li><li>Alphanumeric <ul><li>可编码数字、字母</li></ul></li><li>Kanji <ul><li>可编码中文、日文</li></ul></li><li>Byte <ul><li>一个字符占一个字节（8bytes）</li></ul></li></ul><h4 id="_5-纠错等级" tabindex="-1"><a class="header-anchor" href="#_5-纠错等级" aria-hidden="true">#</a> 5）纠错等级</h4><ul><li>L：Low</li><li>M：Midium</li><li>Q：Quartile</li><li>H：High</li><li>纠错等级越高 <ul><li>冗余信息越多</li><li>能够表达的字符量越少</li></ul></li></ul><h4 id="_6-生成二维码" tabindex="-1"><a class="header-anchor" href="#_6-生成二维码" aria-hidden="true">#</a> 6）生成二维码</h4>`,21),Ta={href:"https://github.com/soldair/node-qrcode",target:"_blank",rel:"noopener noreferrer"},Ca=p(`<ul><li>服务端生成</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> QRCode <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;qrcode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
QRCode<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&quot;https://duyi.ke.qq.com/?tuin=a5d48d54&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>客户端生成</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>divcode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/qrcodejs/1.0.0/qrcode.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">new</span> <span class="token class-name">QRCode</span><span class="token punctuation">(</span>divcode<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;http://yuanjin.tech&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>
    <span class="token literal-property property">colorDark</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">colorLight</span><span class="token operator">:</span> <span class="token string">&quot;#fff&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">correctLevel</span><span class="token operator">:</span> QRCode<span class="token punctuation">.</span>CorrectLevel<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">,</span>
    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&quot;./img/logo.jpg&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24-场景-——-生成验证码" tabindex="-1"><a class="header-anchor" href="#_24-场景-——-生成验证码" aria-hidden="true">#</a> 24.场景 —— 生成验证码</h3><ul><li>防止机器提交</li></ul><h4 id="_1-类型" tabindex="-1"><a class="header-anchor" href="#_1-类型" aria-hidden="true">#</a> 1）类型</h4><ul><li>普通验证码</li><li>行为验证码</li></ul><h4 id="_2-流程" tabindex="-1"><a class="header-anchor" href="#_2-流程" aria-hidden="true">#</a> 2）流程</h4>`,9),Ia=n("li",null,"客户端通过 img 元素的 src 地址获取验证码图片",-1),Aa={href:"https://github.com/produck/svg-captcha/blob/1.x/README_CN.md",target:"_blank",rel:"noopener noreferrer"},Pa=n("li",null,"服务器保存随机图片中的文字",-1),Na=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">refreshCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  imgCaptcha<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/captcha?rad=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
imgCaptcha<span class="token punctuation">.</span>onclick <span class="token operator">=</span> refreshCaptcha<span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">loginId</span><span class="token operator">:</span> loginId<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    <span class="token literal-property property">loginPwd</span><span class="token operator">:</span> loginPwd<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>captchaArea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!==</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">.</span>captcha <span class="token operator">=</span> captcha<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/admin/login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;验证码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    captchaArea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>
    <span class="token function">refreshCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>验证 <ul><li>服务器判断是否对验证码进行验证</li><li>验证客户端传递的验证码是否和服务器保存的一致</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/captchaMiddleware.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> svgCaptcha <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;svg-captcha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/captcha&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> captcha <span class="token operator">=</span> svgCaptcha<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ignoreChars</span><span class="token operator">:</span> <span class="token string">&quot;iIl10oO&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">noise</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 把验证码中的文本存放到session中</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha <span class="token operator">=</span> captcha<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&quot;svg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>captcha<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">validateCaptcha</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用户传递的验证码</span>
  <span class="token keyword">const</span> reqCaptcha <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>captcha <span class="token operator">?</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>captcha<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>reqCaptcha <span class="token operator">!==</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 验证码有问题</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;验证码有问题&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">captchaHandler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果session中没有访问记录</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 把这一次请求的访问时间记录下来</span>
  <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果在一小段时间中请求达到了一定的数量，就可能是机器</span>
  <span class="token keyword">const</span> duration <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> repeat <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> now <span class="token operator">-</span> time <span class="token operator">&lt;=</span> duration
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>records<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> repeat <span class="token operator">||</span> <span class="token string">&quot;captcha&quot;</span> <span class="token keyword">in</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 验证验证码</span>
    <span class="token function">validateCaptcha</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> captchaHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> captchaHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25-场景-——-客户端缓存" tabindex="-1"><a class="header-anchor" href="#_25-场景-——-客户端缓存" aria-hidden="true">#</a> 25.场景 —— 客户端缓存</h3><ul><li>在一个 C/S 结构中，最基本的缓存分为两种 <ul><li>客户端缓存</li><li>服务器缓存</li></ul></li></ul><h4 id="_1-缓存的基本原理" tabindex="-1"><a class="header-anchor" href="#_1-缓存的基本原理" aria-hidden="true">#</a> 1）缓存的基本原理</h4><ul><li>客户端缓存，将某一次的响应结果保存在客户端（如：浏览器）中</li><li>后续的请求仅需要从缓存中读取即可</li><li>极大地降低了服务器的处理压力</li></ul><p><img src="`+l+`" alt=""></p><blockquote><p>这只是一个简易的原理图，实际情况可能有差异</p><br><p>这里就涉及到缓存策略的问题</p><br><p>哪些资源需要加入到缓存，哪些不需要？</p><br><p>缓存的时间是多久呢？</p><br><p>如果服务器的资源有改动，客户端如何更新缓存呢？</p><br><p>如果缓存过期了，可是服务器上的资源并没有发生变动，又该如何处理呢？</p><br><p>.......</p><br><p>要回答这些问题，就必须要清楚 <code>HTTP</code> 中关于缓存的协议</p></blockquote><h4 id="_2-来自服务器的缓存指令" tabindex="-1"><a class="header-anchor" href="#_2-来自服务器的缓存指令" aria-hidden="true">#</a> 2）来自服务器的缓存指令</h4><blockquote><p>当客户端发出一个 GET 请求到服务器，服务器可能有以下的内心活动</p><br><p>你请求的这个资源，我很少会改动它，干脆你把它缓存起来吧，以后就不要来烦我了</p></blockquote><ul><li>为了表达这个美好的愿望，服务器在 <mark>响应头</mark> 中加入了以下内容</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Cache-Control</span><span class="token punctuation">:</span> max<span class="token punctuation">-</span>age=3600 <span class="token comment"># 需要缓存该资源，缓存时间是 3600 秒（1 小时）</span>
<span class="token key atrule">ETag</span><span class="token punctuation">:</span> W/&quot;121<span class="token punctuation">-</span>171ca289ebf&quot; <span class="token comment"># 资源编号</span>
<span class="token key atrule">Date</span><span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> 30 Apr 2020 12<span class="token punctuation">:</span>39<span class="token punctuation">:</span>56 GMT <span class="token comment"># 响应该资源的服务器格林威治时间</span>
<span class="token key atrule">Last-Modified</span><span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> 30 Apr 2020 08<span class="token punctuation">:</span>16<span class="token punctuation">:</span>31 GMT <span class="token comment"># 该资源上次修改的格林威治时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果客户端是其他应用程序 <ul><li>可能根本不会缓存任何东西</li></ul></li><li>如果客户端是一个浏览器 <ul><li>浏览器把这次请求得到的响应体缓存到本地文件中</li><li>浏览器标记这次请求的请求方法和请求路径</li><li>浏览器标记这次缓存的时间是 3600 秒</li><li>浏览器记录服务器的响应时间是格林威治时间 <code>2020-04-30 12:39:56</code></li><li>浏览器记录服务器给予的资源编号 <code>W/&quot;121-171ca289ebf&quot;</code></li><li>浏览器记录资源的上一次修改时间是格林威治时间 <code>2020-04-30 08:16:31</code></li></ul></li><li>这一次的记录非常重要，为以后浏览器要不要去请求服务器提供了各种依据</li></ul><p><img src="`+i+'" alt=""></p><h4 id="_3-来自客户端的缓存指令" tabindex="-1"><a class="header-anchor" href="#_3-来自客户端的缓存指令" aria-hidden="true">#</a> 3）来自客户端的缓存指令</h4><ul><li>当客户端再次请求 <code>GET /index.js</code> 时</li><li>会有一个决策过程，到缓存中去寻找是否有缓存的资源【<mark>缓存策略</mark>】 <ul><li>缓存中是否有匹配的请求方法和路径</li><li>如果有，该缓存资源是否还有效</li></ul></li><li>以上两个验证会导致浏览器产生不同的行为</li></ul><p><img src="'+u+'" alt=""></p><p><img src="'+r+`" alt=""></p><ul><li>验证是否有匹配的缓存 <ul><li>只需要验证当前的请求方法 <code>GET</code> 和当前的请求路径 <code>/index.js</code> 是否有对应的缓存存在即可</li><li>如果没有，就直接请求服务器，和第一次请求服务器时一样</li></ul></li><li>关键在于 <mark>验证缓存是否有效</mark><ul><li><code>max-age + Date</code> 得到一个过期时间，看看这个过期时间是否大于当前时间</li><li>如果是，则表示缓存还没有过期，仍然有效</li><li>如果不是，则表示缓存失效</li></ul></li></ul><h5 id="a-缓存有效" tabindex="-1"><a class="header-anchor" href="#a-缓存有效" aria-hidden="true">#</a> a）缓存有效</h5><ul><li>当浏览器发现缓存有效时，完全不会请求服务器，直接使用缓存即可得到结果</li><li>此时，如果断开网络，会发现资源仍然可用，极大地降低服务器压力</li><li>但当服务器更改了资源后，浏览器不知道，只要缓存有效，就会直接使用缓存</li></ul><h5 id="b-缓存无效" tabindex="-1"><a class="header-anchor" href="#b-缓存无效" aria-hidden="true">#</a> b）缓存无效</h5><ul><li>当浏览器发现缓存已经过期，并不会直接把缓存删除</li><li>而是再次请求服务器确认这个缓存能否继续使用【<mark>缓存确认</mark>】</li><li>于是，浏览器向服务器发出了一个 <mark>带缓存的请求</mark><ul><li>即加入了以下的请求头</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">If-Modified-Since</span><span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> 30 Apr 2020 08<span class="token punctuation">:</span>16<span class="token punctuation">:</span>31 GMT <span class="token comment"># 该资源上次修改的格林威治时间</span>
<span class="token key atrule">If-None-Match</span><span class="token punctuation">:</span> W/&quot;121<span class="token punctuation">-</span>171ca289ebf&quot; <span class="token comment"># 该资源的编号，变动则缓存无效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>之所以要发两个信息，是为了兼容不同的服务器 <ul><li>有些服务器只认 <code>If-Modified-Since</code></li><li>有些服务器只认 <code>If-None-Match</code></li><li>有些服务器两个都认</li></ul></li><li>目前的很多服务器，只要发现 <code>If-None-Match</code> 存在，就不会看 <code>If-Modified-Since</code></li><li><code>If-Modified-Since</code> 是 <code>HTTP 1.0</code> 版本的规范</li><li><code>If-None-Match</code> 是 <code>HTTP 1.1</code> 的规范</li><li>服务器可能会产生两个情况 <ul><li>缓存已经失效 <ul><li>服务器再次给予一个正常的响应：响应码 200，带响应体</li><li>同时可以附带上新的缓存指令</li><li>客户端就会重新缓存新的内容</li></ul></li><li>缓存仍然有效 <ul><li>服务器给予一个简单的响应：响应码 <code>304 Not Modified</code>，无响应体</li><li>响应头带上新的缓存指令</li></ul></li></ul></li></ul><blockquote><p>相当于告诉客户端</p><br><p>你的缓存资源仍然可用，我给你一个新的缓存时间，你那边更新一下就可以了</p></blockquote><ul><li>可以最大程度的减少网络传输</li><li>因为如果资源还有效，服务器就不会传输消息体</li></ul><p><img src="`+k+`" alt=""></p><h4 id="_4-cache-control" tabindex="-1"><a class="header-anchor" href="#_4-cache-control" aria-hidden="true">#</a> 4）Cache-Control</h4><ul><li>服务器向客户端响应的一个消息头</li><li>提供了一个 <code>max-age</code> 用于指定缓存时间</li><li>还可以设置下面一个或多个值</li></ul><table><thead><tr><th>属性</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td><code>public</code></td><td>指示服务器资源是公开的</td><td>如：有一个页面资源，所有人看到的都是一样的<br>这个值对于浏览器而言没有什么意义，但可能在某些场景可能有用<br>本着「我告知，你随意」的原则，<code>http</code> 协议中很多时候都是客户端或服务器告诉另一端详细的信息，至于另一端用不用，完全看它自己</td></tr><tr><td><code>private</code></td><td>指示服务器资源是私有的</td><td>如：有一个页面资源，每个用户看到的都不一样<br>这个值对于浏览器而言没有什么意义，但可能在某些场景可能有用<br>本着「我告知，你随意」的原则，<code>http</code> 协议中很多时候都是客户端或服务器告诉另一端详细的信息，至于另一端用不用，完全看它自己</td></tr><tr><td><code>no-cache</code></td><td>告知客户端可以缓存这个资源，但不要 <mark>直接</mark> 使用它</td><td>缓存之后，后续的每一次请求都需要附带缓存指令，让服务器验证这个资源有没有过期</td></tr><tr><td><code>no-store</code></td><td>告知客户端不要对这个资源做任何的缓存，之后的每一次请求都按照正常的普通请求进行</td><td>若设置了这个值，浏览器将不会对该资源做出任何的缓存处理</td></tr><tr><td><code>max-age</code></td><td></td><td></td></tr></tbody></table><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Cache-Control</span><span class="token punctuation">:</span> public<span class="token punctuation">,</span> max<span class="token punctuation">-</span>age=3600 <span class="token comment"># 表示这是一个公开资源，请缓存1个小时</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-expire" tabindex="-1"><a class="header-anchor" href="#_5-expire" aria-hidden="true">#</a> 5）Expire</h4><ul><li>在 <code>HTTP1.0</code> 版本中，是通过 <code>Expire</code> 响应头来指定过期时间点的</li><li><code>HTTP1.1</code> 版本更改为通过 <code>Cache-Control</code> 的 <code>max-age</code> 来记录</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Expire</span><span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> 30 Apr 2020 23<span class="token punctuation">:</span>38<span class="token punctuation">:</span>38 GMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-记录缓存时的有效期" tabindex="-1"><a class="header-anchor" href="#_6-记录缓存时的有效期" aria-hidden="true">#</a> 6）记录缓存时的有效期</h4><ul><li>浏览器会按照服务器响应头的要求，自动记录缓存到本地文件，并设置各种相关信息 <ul><li>在这些信息中， <mark>有效期</mark> 尤为关键，决定了这个缓存可以使用多久</li></ul></li><li>浏览器会根据服务器不同的响应情况，设置不同的有效期</li></ul><p><img src="`+d+'" alt=""></p><ul><li>如：当 <code>max-age</code> 设置为 0 时，缓存立即过期 <ul><li>虽然立即过期，但缓存仍然被记录下来</li><li>后续的请求通过缓存指令发送到服务器，来确认资源是否被更改</li></ul></li><li>因此 <code>Cache-Control: max-age=0</code> 类似于 <code>Cache-Control: no-cache</code></li></ul><h4 id="_7-pragma" tabindex="-1"><a class="header-anchor" href="#_7-pragma" aria-hidden="true">#</a> 7）Pragma</h4><ul><li><code>HTTP1.0</code> 版本的消息头 <ul><li>当该消息头出现在请求中时，是向服务器表达：不要考虑任何缓存，返回一个正常的结果</li></ul></li><li>在 <code>HTTP1.1</code> 版本中，可以在 <mark>请求头</mark> 中加入 <code>Cache-Control: no-cache</code> 实现</li><li>在 Chrome 浏览器中调试时，如果勾选了 <code>Disable Cache</code>，则发送的请求中会附带该信息</li></ul><h4 id="_8-vary" tabindex="-1"><a class="header-anchor" href="#_8-vary" aria-hidden="true">#</a> 8）Vary</h4><ul><li>有时是否有缓存，不仅仅是判断请求方法和请求路径是否匹配，可能还要判断头部信息是否匹配</li><li>此时，就可以使用 <code>Vary</code> 字段来指定要区分的消息头</li><li>如：当使用 <code>GET /personal.html</code> 请求服务器时，请求头中 cookie 的值不一样，得到的页面也不一样 <ul><li>如果还按照之前的做法，仅仅匹配请求方法和请求路径，如果 cookie 变动，可能得到的仍然是之前的页面</li></ul></li><li>正确的做法如下</li></ul><p><img src="'+v+`" alt=""></p><h4 id="_9-使用版本号或-hash" tabindex="-1"><a class="header-anchor" href="#_9-使用版本号或-hash" aria-hidden="true">#</a> 9）使用版本号或 hash</h4><ul><li>vue 或其他基于 webpack 搭建的工程中，打包的结果很多文件名类似于 <code>app.68297cd8.css</code></li><li>文件的中间部分使用了 <code>hash</code> 值</li><li>可以让客户端长时间地缓存该文件，减轻服务器的压力 <ul><li>当文件改动后，文件 hash 值也会随之而变，如：<code>app.446fccb8.css</code></li><li>客户端要请求新的文件时，就会发现路径从 <code>app.68297cd8.css</code> 变成了 <code>app.446fccb8.css</code><ul><li>由于之前的缓存路径无法匹配到，因此就会发送新的请求来获取新资源</li></ul></li></ul></li><li>在构建工具出现前，通常是在资源路径后面加入版本号来获取新版本的文件 <ul><li>如：页面中引入了一个 css 资源 <code>app.css</code></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app.css?v=1.0.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>缓存的路径是 <code>/app.css?v=1.0.0</code></li><li>当服务器的版本发生变化时，可以给予新的版本号，让 html 中的路径发生变动</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app.css?v=1.0.1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>由于新的路径无法命中缓存，于是浏览器就会发送新的普通请求来获取这个资源</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes/init.js</span>
<span class="token comment">// 映射public目录中的静态资源</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> staticRoot <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// app.use(express.static(staticRoot));</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>staticRoot<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">max-age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-总结" tabindex="-1"><a class="header-anchor" href="#_10-总结" aria-hidden="true">#</a> 10）总结</h4><ul><li>服务器无法知道客户端到底有没有像浏览器那样缓存文件</li><li>只管根据请求的情况来决定如何响应</li><li>很多后端语言搭建的服务器都会自带默认缓存规则，支持不同程度的修改</li></ul><p><img src="`+m+'" alt=""></p><ul><li>浏览器在发出请求时会判断要不要使用缓存</li><li>当收到服务器响应时，会自动根据缓存指令进行处理</li></ul><p><img src="'+b+'" alt=""></p><h3 id="_26-场景-——-富文本框" tabindex="-1"><a class="header-anchor" href="#_26-场景-——-富文本框" aria-hidden="true">#</a> 26.场景 —— 富文本框</h3>',58),Oa={href:"https://www.wangeditor.com/",target:"_blank",rel:"noopener noreferrer"},Ma=p(`<ul><li>一个可以被编辑的 div</li><li>编辑后得到的结果是一个 html 字符串</li></ul><h4 id="_1-模式-1" tabindex="-1"><a class="header-anchor" href="#_1-模式-1" aria-hidden="true">#</a> 1）模式 1</h4><ul><li>用户点击上传图片，选择图片</li><li>富文本框将图片信息发送到服务器（配置接口）</li><li>服务器会返回一个图片的 url 路径</li><li>富文本框生成一个 img 元素，使用该 url 路径插入到富文本框内部</li></ul><h4 id="_2-模式-2" tabindex="-1"><a class="header-anchor" href="#_2-模式-2" aria-hidden="true">#</a> 2）模式 2</h4><ul><li>用户点击上传图片，选择图片</li><li>在客户端生成图片的 base64 格式</li><li>富文本框生成一个 img 元素，使用该 base64 路径插入到富文本框内部</li><li>图片不会上传到服务器</li></ul><h2 id="五-补充" tabindex="-1"><a class="header-anchor" href="#五-补充" aria-hidden="true">#</a> （五）补充</h2><h3 id="_1-websocket-原理" tabindex="-1"><a class="header-anchor" href="#_1-websocket-原理" aria-hidden="true">#</a> 1.WebSocket 原理</h3><h4 id="_1-socket" tabindex="-1"><a class="header-anchor" href="#_1-socket" aria-hidden="true">#</a> 1）Socket</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>抽象接口，基于 TCP/IP 协议</li><li>浏览器没有实现该接口，开发者无法使用</li></ul></div><ul><li>客户端连接服务器（TCP / IP），三次握手，建立了连接通道</li><li>客户端和服务器通过 socket 接口发送消息和接收消息 <ul><li>任何一端在任何时候，都可以向另一端发送任何消息</li></ul></li><li>有一端断开了，通道销毁</li></ul><h4 id="_2-http" tabindex="-1"><a class="header-anchor" href="#_2-http" aria-hidden="true">#</a> 2）HTTP</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Socket 基础上形成</p></div><ul><li>客户端连接服务器（TCP / IP），三次握手，建立了连接通道</li><li>客户端发送一个 HTTP 格式的消息（消息头、消息体），服务器响应 HTTP 格式的消息（消息头 消息体） <ul><li>客户端主动，服务器被动</li><li>如果客户端请求头携带了 <code>Connection: keep-alive</code>（长连接），则可以多次发送消息再进入下一步 <ul><li>此时服务器不会主动断开，客户端也不会立马断开</li></ul></li></ul></li><li>客户端或服务器断开，通道销毁</li></ul><h4 id="_3-实时性" tabindex="-1"><a class="header-anchor" href="#_3-实时性" aria-hidden="true">#</a> 3）实时性</h4><ul><li>遇到需要实时响应消息的场景，HTTP 处理比较麻烦 <ul><li>如，股票信息实时变化，需要服务器持续返回响应数据</li></ul></li><li>HTTP 有两种方式解决 <ul><li>轮询 <ul><li>客户端开启定时器，间隔发送请求</li><li>会导致建立许多没必要的连接</li></ul></li><li>长连接 <ul><li>请求头携带 <code>Connection: keep-alive</code></li><li>服务器遇到长连接会开启线程，有额外开销</li><li>优于轮询</li></ul></li></ul></li></ul><h4 id="_4-websocket" tabindex="-1"><a class="header-anchor" href="#_4-websocket" aria-hidden="true">#</a> 4）WebSocket</h4><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>专门用于解决实时传输的问题</li><li>基于 socket 接口</li></ul></div><ul><li>客户端连接服务器（TCP / IP），三次握手，建立了连接通道</li><li>客户端发送一个 HTTP 格式的消息（<mark>特殊格式</mark>），服务器也响应一个 HTTP 格式的消息（<mark>特殊格式</mark>） <ul><li>又叫 HTTP 握手</li></ul></li><li>双发自由通信，通信格式按照 WebSocket 的要求进行</li><li>客户端或服务器断开，通道销毁</li></ul><h4 id="_5-使用-websocket-通信" tabindex="-1"><a class="header-anchor" href="#_5-使用-websocket-通信" aria-hidden="true">#</a> 5）使用 WebSocket 通信</h4><ul><li>通常都是使用第三方库 socket.io</li></ul><h5 id="a-客户端-浏览器" tabindex="-1"><a class="header-anchor" href="#a-客户端-浏览器" aria-hidden="true">#</a> a）客户端（浏览器）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个websocket，同时，发送连接到服务器</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://localhost:5008&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 建立连接，HTTP 握手完成后触发</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接已建立&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 接收消息</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来自服务器的数据&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 连接通道关闭时触发</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;通道关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 发送消息</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 客户端主动断开连接，需要时断开</span>
<span class="token comment">// ws.close();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求头携带了以下关键信息</li><li>服务器收到消息后确认使用 WebSocket 协议通信</li><li>key 是浏览器随机生成的</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket
<span class="token key atrule">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-服务器" tabindex="-1"><a class="header-anchor" href="#b-服务器" aria-hidden="true">#</a> b）服务器</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;收到客户端的连接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 建立连接后立马发送消息，所以只接收一次即可</span>
  socket<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> httpContent <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将请求头分割为对象格式</span>
    <span class="token keyword">let</span> parts <span class="token operator">=</span> httpContent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parts<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去掉首行GET / /HTTP1.1</span>
    parts <span class="token operator">=</span> parts
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取浏览器随机生成的key</span>
    <span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> hash <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>
      headers<span class="token punctuation">[</span><span class="token string">&quot;Sec-WebSocket-Key&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> key <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;base64&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 服务器响应请求，101切换协议</span>
    socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">

</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 接收客户端后续的请求数据</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-服务端的握手响应" tabindex="-1"><a class="header-anchor" href="#_6-服务端的握手响应" aria-hidden="true">#</a> 6）服务端的握手响应</h4><ul><li>在 WebSocket 的 HTTP 握手阶段，服务器响应头中需要包含如下内容</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket
<span class="token key atrule">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中 <code>Sec-WebSocket-Accept</code> 来自于以下算法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">base64</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span>Sec <span class="token operator">-</span> WebSocket <span class="token operator">-</span> Key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 Node 中可以使用以下代码获得</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;crypto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hash <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&quot;sha1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hash<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>requestKey <span class="token operator">+</span> <span class="token string">&quot;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> key <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&quot;base64&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>requestKey</code> 来自于客户端请求头中的 <code>Sec-WebSocket-Key</code></li></ul><h3 id="_2-socket-io" tabindex="-1"><a class="header-anchor" href="#_2-socket-io" aria-hidden="true">#</a> 2.socket.io</h3>`,35),Da={href:"https://socket.io/",target:"_blank",rel:"noopener noreferrer"},La=p(`<ul><li>适用于多种客户端</li><li>底层基于 WebSocket，但是封装的很深</li></ul><h4 id="_1-服务器" tabindex="-1"><a class="header-anchor" href="#_1-服务器" aria-hidden="true">#</a> 1）服务器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> socketIO <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;socket.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 搭建express服务器</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提供websocket服务</span>
<span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token function">socketIO</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当有一个新的客户端连接到服务器，连接成功后触发</span>
io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;新的客户端连接进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听客户端的msg消息</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 每隔两秒钟，发送一个消息给客户端，事件名为test</span>
  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test message from server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 连接断开后触发</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听端口</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5008</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server listening on 5008&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-客户端" tabindex="-1"><a class="header-anchor" href="#_2-客户端" aria-hidden="true">#</a> 2）客户端</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>发送数据到服务器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/socket.io/2.3.0/socket.io.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 参数可传服务器地址，不传使用当前页面地址</span>
  <span class="token comment">// const socket = io.connect(&quot;http://localhost:5008&quot;);</span>
  <span class="token keyword">const</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 发送消息到服务器，事件名为msg</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;msg from client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听服务器发送的消息，事件名为test</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 连接断开后触发</span>
  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-在线聊天室" tabindex="-1"><a class="header-anchor" href="#_3-在线聊天室" aria-hidden="true">#</a> 3.在线聊天室</h3><h4 id="_1-客户端发送的消息格式" tabindex="-1"><a class="header-anchor" href="#_1-客户端发送的消息格式" aria-hidden="true">#</a> 1）客户端发送的消息格式</h4><ul><li>获取当前所有在线用户 <ul><li>消息名称：users</li><li>消息内容：无</li></ul></li><li>登录 <ul><li>消息名称：login</li><li>消息内容：用户名</li></ul></li><li>消息 <ul><li>消息名称：msg</li><li>消息内容：<code>{to:&quot;目标用户名，null表示所有人&quot;, content:&quot;消息内容&quot;}</code></li></ul></li></ul><h4 id="_2-服务器发送的消息格式" tabindex="-1"><a class="header-anchor" href="#_2-服务器发送的消息格式" aria-hidden="true">#</a> 2）服务器发送的消息格式</h4><ul><li>获取当前所有在线用户 <ul><li>消息名称：users</li><li>消息内容：用户数组</li></ul></li><li>登录 <ul><li>消息名称：login</li><li>消息内容：true 或 false <ul><li>true 表示登录成功</li><li>false 表示登录失败（昵称已存在）</li></ul></li></ul></li><li>新用户进入 <ul><li>消息名称：userin</li><li>消息内容：用户名</li></ul></li><li>用户离开 <ul><li>消息名称：userout</li><li>消息内容：用户名</li></ul></li><li>新消息来了 <ul><li>消息名称：new msg</li><li>消息内容：<code>{from:&quot;用户名&quot;, content:&quot;消息内容&quot;, to:&quot;接收消息的人，如果是null，表示所有人&quot;}</code></li></ul></li></ul><h4 id="_3-搭建服务器" tabindex="-1"><a class="header-anchor" href="#_3-搭建服务器" aria-hidden="true">#</a> 3）搭建服务器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// express</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// websocket</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./chatServer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听端口</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5008</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server listening on 5008&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-客户端" tabindex="-1"><a class="header-anchor" href="#_4-客户端" aria-hidden="true">#</a> 4）客户端</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 客户端发送消息给服务器
 */</span>
<span class="token comment">// 进入聊天室</span>
page<span class="token punctuation">.</span><span class="token function-variable function">onLogin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 监听发送消息</span>
page<span class="token punctuation">.</span><span class="token function-variable function">onSendMsg</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">me<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    to<span class="token punctuation">,</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> msg<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  page<span class="token punctuation">.</span><span class="token function">addMsg</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
  page<span class="token punctuation">.</span><span class="token function">clearInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 客户端监听服务器消息
 */</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    page<span class="token punctuation">.</span><span class="token function">intoChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;昵称不可用，请更换昵称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 渲染成员列表</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">users</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  page<span class="token punctuation">.</span><span class="token function">initChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> u <span class="token keyword">of</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    page<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 用户进入</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;userin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  page<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 用户离开</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;userout&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  page<span class="token punctuation">.</span><span class="token function">removeUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 收到新消息</span>
socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;new msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  page<span class="token punctuation">.</span><span class="token function">addMsg</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>from<span class="token punctuation">,</span> result<span class="token punctuation">.</span>content<span class="token punctuation">,</span> result<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-服务器" tabindex="-1"><a class="header-anchor" href="#_5-服务器" aria-hidden="true">#</a> 5）服务器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> socketIO <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;socket.io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用户数组，模拟数据库</span>
<span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token function">socketIO</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>

  io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前用户名</span>
    <span class="token keyword">let</span> curUser <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 监听客户端消息</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        data <span class="token operator">===</span> <span class="token string">&quot;所有人&quot;</span> <span class="token operator">||</span>
        users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>username <span class="token operator">===</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 昵称不可用</span>
        socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 昵称可用</span>
        users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">username</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
          socket<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        curUser <span class="token operator">=</span> data<span class="token punctuation">;</span>
        socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 新用户进入了</span>
        socket<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;userin&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回当前聊天室所有成员</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> arr <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
      socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 发送消息</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送给指定的用户</span>
        <span class="token keyword">const</span> us <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>username <span class="token operator">===</span> data<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> u <span class="token operator">=</span> us<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        u<span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;new msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">from</span><span class="token operator">:</span> curUser<span class="token punctuation">,</span>
          <span class="token literal-property property">content</span><span class="token operator">:</span> data<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
          <span class="token literal-property property">to</span><span class="token operator">:</span> data<span class="token punctuation">.</span>to<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送给所有人</span>
        socket<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;new msg&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">from</span><span class="token operator">:</span> curUser<span class="token punctuation">,</span>
          <span class="token literal-property property">content</span><span class="token operator">:</span> data<span class="token punctuation">.</span>content<span class="token punctuation">,</span>
          <span class="token literal-property property">to</span><span class="token operator">:</span> data<span class="token punctuation">.</span>to<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 客户端断开（用户离开）</span>
    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      socket<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;userout&quot;</span><span class="token punctuation">,</span> curUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
      users <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>username <span class="token operator">!==</span> curUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-csrf-攻击和防御" tabindex="-1"><a class="header-anchor" href="#_4-csrf-攻击和防御" aria-hidden="true">#</a> 4.CSRF 攻击和防御</h3><ul><li>用户访问了恶意网站后才会被攻击</li></ul><h4 id="_1-csrf-特点和原理" tabindex="-1"><a class="header-anchor" href="#_1-csrf-特点和原理" aria-hidden="true">#</a> 1）CSRF 特点和原理</h4><ul><li>CSRF，Cross Site Request Forgery，跨站请求伪造</li><li>本质：恶意网站把正常用户作为媒介，通过模拟正常用户的操作，攻击其登录过的站点</li></ul><p><img src="`+gn+'" alt=""></p><ul><li>用户访问正常站点，登录后，获取到正常站点的令牌，以 cookie 的形式保存</li></ul><p><img src="'+yn+`" alt=""></p><ul><li>用户访问恶意站点，恶意站点通过某种形式去请求正常站点（请求伪造），迫使正常用户把令牌传递到正常站点，完成攻击</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://alipay.com/api/transfer?target=yuanjin&amp;money=1000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+qn+'" alt=""></p><h4 id="_2-防御" tabindex="-1"><a class="header-anchor" href="#_2-防御" aria-hidden="true">#</a> 2）防御</h4><h5 id="a-cookie-的-samesite" tabindex="-1"><a class="header-anchor" href="#a-cookie-的-samesite" aria-hidden="true">#</a> a）cookie 的 SameSite</h5><ul><li>现在很多浏览器都支持 <mark>禁止跨域附带的 cookie</mark></li><li>只需要把 cookie 设置的 <code>SameSite</code> 设置为 <code>Strict</code> 即可</li><li>这种方法非常简单，极其有效，但前提条件是：用户不能使用太旧的浏览器</li></ul><table><thead><tr><th>SamSite 取值</th><th>说明</th></tr></thead><tbody><tr><td>Strict</td><td>严格，所有跨站请求都不附带 cookie，有时会导致用户体验不好</td></tr><tr><td>Lax</td><td>宽松，所有跨站的超链接、GET 请求的表单、预加载连接时会发送 cookie，其他情况不发送</td></tr><tr><td>None</td><td>无限制</td></tr></tbody></table><h5 id="b-验证-referer-和-origin" tabindex="-1"><a class="header-anchor" href="#b-验证-referer-和-origin" aria-hidden="true">#</a> b）验证 referer 和 Origin</h5><ul><li>页面中的二次请求都会附带 referer 或 Origin 请求头</li><li>向服务器表示该请求来自于哪个源或页面，服务器可以通过这个头进行验证</li><li>但某些浏览器的 referer 是可以被用户禁止的，尽管这种情况极少</li></ul><h5 id="c-使用非-cookie-令牌" tabindex="-1"><a class="header-anchor" href="#c-使用非-cookie-令牌" aria-hidden="true">#</a> c）使用非 cookie 令牌</h5><ul><li>要求每次请求需要在请求体或请求头中附带 token</li><li>请求的时候：<code>authorization: token</code></li></ul><h5 id="d-验证码" tabindex="-1"><a class="header-anchor" href="#d-验证码" aria-hidden="true">#</a> d）验证码</h5><ul><li>要求每个要防止 CSRF 的请求都必须要附带验证码</li><li>容易把正常的用户逼疯</li></ul><h5 id="e-表单随机数" tabindex="-1"><a class="header-anchor" href="#e-表单随机数" aria-hidden="true">#</a> e）表单随机数</h5><ul><li>服务端渲染时，生成一个随机数</li><li>客户端提交时要提交这个随机数，然后服务器端进行对比</li><li>该随机数是一次性的</li></ul><div class="hint-container info"><p class="hint-container-title">流程</p><ol><li>客户端请求服务器，请求添加学生的页面，传递 cookie</li><li>服务器生成一个随机数，放到 session 中</li><li>生成页面时，表单中加入一个隐藏的表单域 <code>&lt;input type=&quot;hidden&quot; name=&quot;hash&quot; value=&quot;&lt;%=session[&#39;key&#39;] %&gt;&quot;&gt;</code></li><li>填写好信息后，提交表单，会自动提交隐藏的随机数</li><li>服务器拿到 cookie，判断是否登录过</li><li>服务器对比提交过来的随机数和之前的随机数是否一致</li><li>服务器清除掉 session 中的随机数</li></ol></div><h5 id="f-二次验证" tabindex="-1"><a class="header-anchor" href="#f-二次验证" aria-hidden="true">#</a> f）二次验证</h5><ul><li>当做出敏感操作时，进行二次验证</li></ul><h3 id="_5-xss-攻击和防御" tabindex="-1"><a class="header-anchor" href="#_5-xss-攻击和防御" aria-hidden="true">#</a> 5.XSS 攻击和防御</h3><ul><li>XSS，Cross Site Scripting，跨站脚本攻击 <ul><li>为了和 CSS 区分，不使用该缩写</li></ul></li><li>用户正常访问网站时也会被攻击 <ul><li>网站安全性没有做好</li></ul></li><li>通常发生在服务端渲染网站</li></ul><h4 id="_1-存储型-xss" tabindex="-1"><a class="header-anchor" href="#_1-存储型-xss" aria-hidden="true">#</a> 1）存储型 XSS</h4><h5 id="a-原理" tabindex="-1"><a class="header-anchor" href="#a-原理" aria-hidden="true">#</a> a）原理</h5><ul><li>恶意用户提交了恶意内容到服务器</li><li>服务器没有识别，保存了恶意内容到数据库</li><li>正常用户访问服务器</li><li>服务器在不知情的情况下，给予了之前的恶意内容，让正常用户遭到攻击</li></ul><h5 id="b-防御" tabindex="-1"><a class="header-anchor" href="#b-防御" aria-hidden="true">#</a> b）防御</h5>',47),Ea=n("li",null,"关键在于不要把恶意内容保存到数据库",-1),Ra=n("li",null,"Node 可以使用第三方库中间件",-1),Ja={href:"https://www.npmjs.com/package/xss",target:"_blank",rel:"noopener noreferrer"},Ua=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;xss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myxss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xss<span class="token punctuation">.</span>FilterXSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">onTagAttr</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> isWhiteAttr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">style=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>body<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> myxss<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-反射型-xss" tabindex="-1"><a class="header-anchor" href="#_2-反射型-xss" aria-hidden="true">#</a> 2）反射型 XSS</h4><ul><li>恶意用户分享了一个正常网站的链接，链接中带有恶意内容</li><li>正常用户点击了该链接</li><li>服务器在不知情的情况，把链接的恶意内容读取了出来，放进了页面中，让正常用户遭到攻击</li></ul><h4 id="_3-dom-型-xss" tabindex="-1"><a class="header-anchor" href="#_3-dom-型-xss" aria-hidden="true">#</a> 3）DOM 型 XSS</h4><h5 id="a-原理-1" tabindex="-1"><a class="header-anchor" href="#a-原理-1" aria-hidden="true">#</a> a）原理</h5><ul><li>恶意用户通过任何方式，向服务器中注入了一些 DOM 元素，从而影响了服务器的 DOM 结构</li><li>普通用户访问时，运行的是服务器的正常 js 代码</li></ul><h5 id="b-防御-1" tabindex="-1"><a class="header-anchor" href="#b-防御-1" aria-hidden="true">#</a> b）防御</h5><ul><li>模板引擎渲染时使用 <code>&lt;%= %&gt;</code> 让浏览器自动编码 <ul><li>如果使用 <code>&lt;%- %&gt;</code> 浏览器不会编码</li></ul></li><li>不要信任任何 DOM 元素</li></ul><h3 id="_6-nodejs-组成原理" tabindex="-1"><a class="header-anchor" href="#_6-nodejs-组成原理" aria-hidden="true">#</a> 6.NodeJS 组成原理</h3><p><img src="`+fn+`" alt=""></p><ul><li>黑色边框：Node</li><li>蓝色：JS 代码</li><li>橙色：C/C++代码 <ul><li>libuv：是一个 C/C++的库</li><li>Node 的事件循环是通过 libuv 实现的</li></ul></li><li>红色箭头：代码交付</li></ul><h4 id="_1-用户代码" tabindex="-1"><a class="header-anchor" href="#_1-用户代码" aria-hidden="true">#</a> 1）用户代码</h4><ul><li>JS 代码</li><li>开发者编写的</li></ul><h4 id="_2-第三方库" tabindex="-1"><a class="header-anchor" href="#_2-第三方库" aria-hidden="true">#</a> 2）第三方库</h4><ul><li>大部分仍然是 JS 代码</li><li>由其他开发者编写</li></ul><h4 id="_3-本地模块代码" tabindex="-1"><a class="header-anchor" href="#_3-本地模块代码" aria-hidden="true">#</a> 3）本地模块代码</h4><ul><li>JS 代码</li></ul><h4 id="_4-v8-引擎" tabindex="-1"><a class="header-anchor" href="#_4-v8-引擎" aria-hidden="true">#</a> 4）V8 引擎</h4><ul><li>C/C++代码</li><li>作用：把 JS 代码解释成为机器码</li><li>可以通过 V8 引擎的某种机制，扩展其功能</li></ul><div class="hint-container info"><p class="hint-container-title">gyp</p><ul><li>V8 引擎的扩展和对扩展的编译是通过 gyp 工具</li><li>某些第三方库需要使用 <code>node-gyp</code> 工具进行构建 <ul><li>需要先安装 <code>node-gyp</code> 构建工具</li></ul></li></ul></div><h3 id="_7-进程和线程" tabindex="-1"><a class="header-anchor" href="#_7-进程和线程" aria-hidden="true">#</a> 7.进程和线程</h3><h4 id="_1-进程" tabindex="-1"><a class="header-anchor" href="#_1-进程" aria-hidden="true">#</a> 1）进程</h4><ul><li>一个应用程序，总是通过操作系统启动的，当操作系统启动一个应用程序时，会给其分配一个进程</li><li>一个进程拥有 <mark>独立的、可伸缩的</mark> 内存空间，原则上不受其他进程干扰</li><li>进程之间是可以通信的，只要两个进程双方遵守一定的协议，如：IPC、HTTP</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>CPU 在不同的进程之间切换执行</p></div><ul><li>虽然一个应用程序在启动时只有一个进程，但在运行的过程中，可以开启新的进程，进程之间仍然保持相对独立</li><li>如果一个进程是 <mark>直接由操作系统开启</mark>，则叫做主进程</li><li>如果一个进程 B 是由进程 A 开启，则 A 是 B 的父进程，B 是 A 的子进程 <ul><li>子进程会继承父进程的一些信息，但仍然保持相对独立</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Node 中开启子进程</span>
<span class="token keyword">const</span> childProcess <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;child_process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导入内置模块</span>

<span class="token doc-comment comment">/**
 * 回调函数中可以获取子进程的标准输出，这种数据交互是通过IPC完成的，nodejs已经完成了处理
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">err</span> 开启进程过程中发生的错误
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">out</span> 子进程输出的正常内容
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">stdErr</span> 子进程输出的错误内容
 */</span>
childProcess<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>在子进程运行的命令<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> out<span class="token punctuation">,</span> stdErr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 子进程发生任何的错误，绝不会影响到父进程，它们的内存空间是完全隔离的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 过去，Node 没有提供给用户创建线程的接口，只能使用进程的方式</span>
<span class="token comment">// 过去，Node 还提供了 cluster 模块，通过另一种模式来创建进程</span>
<span class="token comment">// 现在，Node 提供了线程模块，对进程的操作已经很少使用了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-线程" tabindex="-1"><a class="header-anchor" href="#_2-线程" aria-hidden="true">#</a> 2）线程</h4><ul><li>操作系统启动一个进程（无论是主进程，还是子进程），都会自动为它分配一个线程，称之为主线程 <ul><li>主线程在运行的过程中，可以创建多个线程，这些线程称之为子线程</li></ul></li><li>当操作系统命令 CPU 去执行一个进程时，实际上，是在该进程的多个线程中切换执行</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>程序一定在线程上运行</p></div><ul><li>线程和进程很相似，它们都是独立运行</li><li>最大的区别在于：<mark>线程的内存空间没有隔离</mark>，共享进程的内存空间</li><li>线程之间的数据不用遵守任何协议，可以随意使用</li></ul><h5 id="a-什么时候使用" tabindex="-1"><a class="header-anchor" href="#a-什么时候使用" aria-hidden="true">#</a> a）什么时候使用</h5><ul><li>使用线程的主要目的，是为了充分使用多核 CPU</li><li>线程执行过程中，尽量的不要阻塞</li></ul><div class="hint-container tip"><p class="hint-container-title">最理想的线程效果</p><ul><li>线程数等于 CPU 的核数</li><li>线程永不阻塞 <ul><li>没有 IO</li><li>只存在大量运算</li></ul></li><li>线程相对独立，几乎不使用共享数据</li></ul></div><ul><li>线程一般处理 CPU 密集型操作（运算操作）</li><li>而 IO 密集型操作不适合使用线程，适合使用异步 <ul><li>只有一个线程</li><li>没有切换开销</li></ul></li></ul><h5 id="b-node-开启线程" tabindex="-1"><a class="header-anchor" href="#b-node-开启线程" aria-hidden="true">#</a> b）Node 开启线程</h5><ul><li>为了避免线程执行过程中共享数据产生的麻烦，Node 使用独特的线程机制来尽力规避</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建子线程的父线程</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Worker <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>线程执行的入口文件<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">workerData</span><span class="token operator">:</span> 开启线程时向其传递的数据<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// worker是子线程实例</span>

<span class="token comment">// 通过EventEmitter监听子线程的事件</span>
worker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当子线程退出时运行的事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 收到子线程发送的消息时运行的事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>任意消息<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父线程向子线程发送任意消息</span>
worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 退出子线程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子线程</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>
  isMainThread<span class="token punctuation">,</span> <span class="token comment">// 是否是主线程</span>
  parentPort<span class="token punctuation">,</span> <span class="token comment">// 用于与父线程通信的端口</span>
  workerData<span class="token punctuation">,</span> <span class="token comment">// 获取线程启动时传递的数据</span>
  threadId<span class="token punctuation">,</span> <span class="token comment">// 获取线程的唯一编号</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parentPort<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当收到父线程发送的消息时，触发的事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parentPort<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>workerData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向父线程发送消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-线程使用示例" tabindex="-1"><a class="header-anchor" href="#_3-线程使用示例" aria-hidden="true">#</a> 3）线程使用示例</h4><ul><li>判断素数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 素数：只能被1和自身整除的数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="a-单线程" tabindex="-1"><a class="header-anchor" href="#a-单线程" aria-hidden="true">#</a> a）单线程</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isPrime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./isPrime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./numbers.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5.634s</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-多线程" tabindex="-1"><a class="header-anchor" href="#b-多线程" aria-hidden="true">#</a> b）多线程</h5><ul><li>父线程</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Worker <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./numbers.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// CPU数量</span>
<span class="token keyword">const</span> cpuNumber <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment">// 每个线程需要处理的数字数量</span>
<span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> cpuNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 目前的线程数量</span>
<span class="token keyword">let</span> numbers <span class="token operator">=</span> cpuNumber<span class="token punctuation">;</span>
<span class="token comment">// 保存最终结果</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpuNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> len<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// worker是子线程实例</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./worker.js&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">workerData</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  worker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    numbers<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 所有线程都处理结束</span>
      console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.685s</span>
      <span class="token comment">// 输出最终结果</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子线程</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isPrime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./isPrime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>
  parentPort<span class="token punctuation">,</span> <span class="token comment">// 用于与父线程通信的端口</span>
  workerData<span class="token punctuation">,</span> <span class="token comment">// 获取线程启动时传递的数据</span>
  threadId<span class="token punctuation">,</span> <span class="token comment">// 获取线程的唯一编号</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;worker_threads&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">线程</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>threadId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> workerData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">处理完成，并把结果给予了主线程</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parentPort<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function Wa(Ba,Ha){const a=g("ExternalLinkIcon");return y(),q("div",null,[xn,_n,n("blockquote",null,[n("p",null,[n("a",jn,[s("Node 官网"),t(a)])]),Sn,n("p",null,[n("a",Tn,[s("Node 民间中文网"),t(a)])])]),Cn,n("ul",null,[In,An,Pn,n("li",null,[s("使用时、输出时可能需要使用 "),n("a",Nn,[s("十六进制"),t(a)]),s(" 表示")])]),On,n("blockquote",null,[n("p",null,[n("a",Mn,[s("官方文档"),t(a)])])]),Dn,n("blockquote",null,[n("p",null,[n("a",Ln,[s("官方文档"),t(a)])])]),En,n("blockquote",null,[n("p",null,[n("a",Rn,[s("官方文档"),t(a)])])]),Jn,n("blockquote",null,[n("p",null,[n("a",Un,[s("官方文档"),t(a)])])]),Wn,n("blockquote",null,[n("p",null,[n("a",Bn,[s("官方文档"),t(a)])])]),Hn,n("blockquote",null,[n("p",null,[n("a",Fn,[s("官方文档"),t(a)])])]),zn,n("blockquote",null,[n("p",null,[n("a",Qn,[s("官方文档"),t(a)])])]),Xn,n("blockquote",null,[n("p",null,[n("a",Gn,[s("阿里云"),t(a)])])]),Vn,$n,n("ul",null,[Yn,n("li",null,[s("安装 openssl "),n("ul",null,[n("li",null,[n("a",Kn,[s("下载源码，自行构建"),t(a)])]),n("li",null,[n("a",Zn,[s("下载 Windows 安装包"),t(a)]),s(", 安装路径配置到环境变量中")]),ns,ss])])]),as,n("blockquote",null,[n("p",null,[n("a",ts,[s("菜鸟教程"),t(a)])])]),ps,n("ul",null,[n("li",null,[n("a",es,[s("官方下载源"),t(a)])]),n("li",null,[n("a",os,[s("腾讯下载源"),t(a)])])]),cs,n("blockquote",null,[n("p",null,[n("a",ls,[s("GitHub 地址"),t(a)])])]),is,n("blockquote",null,[n("p",null,[n("a",us,[s("GitHub 地址"),t(a)])])]),rs,n("blockquote",null,[n("p",null,[n("a",ks,[s("MockJS"),t(a)])])]),ds,n("ul",null,[n("li",null,[n("a",vs,[s("豆瓣读书"),t(a)])])]),ms,n("ul",null,[n("li",null,[n("a",bs,[s("Axios"),t(a)]),hs]),n("li",null,[n("a",gs,[s("Cheerio"),t(a)]),ys])]),qs,n("blockquote",null,[n("p",null,[n("a",fs,[s("GitHub 地址"),t(a)])])]),ws,n("blockquote",null,[n("p",null,[n("a",xs,[s("NPM 包地址"),t(a)])])]),_s,n("blockquote",null,[n("p",null,[n("a",js,[s("官方文档"),t(a)])]),Ss,n("p",null,[n("a",Ts,[s("民间中文网"),t(a)])])]),Cs,n("ul",null,[n("li",null,[n("a",Is,[s("Validator"),t(a)]),As]),n("li",null,[n("a",Ps,[s("Validate.js"),t(a)]),Ns])]),Os,n("ul",null,[n("li",null,[n("a",Ms,[s("log4js"),t(a)])])]),Ds,n("blockquote",null,[n("p",null,[n("a",Ls,[s("官方文档"),t(a)])]),Es,n("p",null,[n("a",Rs,[s("民间中文网"),t(a)])])]),Js,n("blockquote",null,[n("p",null,[n("a",Us,[s("GitHub 地址"),t(a)])])]),Ws,n("blockquote",null,[n("p",null,[n("a",Bs,[s("GitHub 地址"),t(a)])])]),Hs,n("blockquote",null,[n("p",null,[n("a",Fs,[s("GitHub 地址"),t(a)])])]),zs,n("blockquote",null,[n("p",null,[n("a",Qs,[s("GitHub 地址"),t(a)])])]),Xs,n("ul",null,[Gs,Vs,$s,Ys,Ks,n("li",null,[s("一般来说，中心服务器至少承担着 "),Zs,s(" 的功能 "),n("ul",null,[na,sa,n("li",null,[s("参见 "),n("a",aa,[s("cookie 原理详解"),t(a)])])])])]),ta,n("ul",null,[pa,n("li",null,[s("把 "),ea,s(" 部分使用 "),oa,s(" 编码即可 "),n("ul",null,[ca,n("li",null,[s("具体的做法参考 "),n("a",la,[s("百度百科"),t(a)])])])]),ia]),ua,n("ul",null,[n("li",null,[n("a",ra,[s("jsonwebtoken"),t(a)])]),ka]),da,n("ul",null,[va,n("li",null,[n("a",ma,[s("History API Fallback"),t(a)])])]),ba,n("blockquote",null,[n("p",null,[n("a",ha,[s("multer"),t(a)])])]),ga,n("blockquote",null,[n("p",null,[n("a",ya,[s("Jimp"),t(a)])])]),qa,n("blockquote",null,[n("p",null,[n("a",fa,[s("http-proxy-middleware"),t(a)])])]),wa,n("ul",null,[xa,n("li",null,[s("常见模板引擎 "),n("ul",null,[_a,n("li",null,[n("a",ja,[s("ejs"),t(a)])])])])]),Sa,n("blockquote",null,[n("p",null,[n("a",Ta,[s("qrcode"),t(a)])])]),Ca,n("ul",null,[n("li",null,[s("获取验证码图片 "),n("ul",null,[Ia,n("li",null,[s("服务器生成 "),n("a",Aa,[s("随机图片"),t(a)])]),Pa])])]),Na,n("blockquote",null,[n("p",null,[n("a",Oa,[s("wangEditor"),t(a)])])]),Ma,n("blockquote",null,[n("p",null,[n("a",Da,[s("官方文档"),t(a)])])]),La,n("ul",null,[Ea,Ra,n("li",null,[n("a",Ja,[s("xss"),t(a)])])]),Ua])}const Xa=h(wn,[["render",Wa],["__file","02.html.vue"]]);export{Xa as default};
