const n=JSON.parse('{"key":"v-c6f083ba","path":"/notes/ECMAScript6-11/13.html","title":"十三、Promise","lang":"zh-CN","frontmatter":{"title":"十三、Promise","copyright":false,"date":"2023-01-01T00:00:00.000Z","category":["笔记","ECMAScript"],"tag":["尚硅谷","李强"]},"headers":[{"level":2,"title":"（一）基本语法","slug":"一-基本语法","link":"#一-基本语法","children":[]},{"level":2,"title":"（二）读取文件","slug":"二-读取文件","link":"#二-读取文件","children":[]},{"level":2,"title":"（三）发送 Ajax 请求","slug":"三-发送-ajax-请求","link":"#三-发送-ajax-请求","children":[{"level":3,"title":"1.传统 xhr","slug":"_1-传统-xhr","link":"#_1-传统-xhr","children":[]},{"level":3,"title":"2.使用 Promise 封装","slug":"_2-使用-promise-封装","link":"#_2-使用-promise-封装","children":[]}]},{"level":2,"title":"（四）Promise.prototype.then","slug":"四-promise-prototype-then","link":"#四-promise-prototype-then","children":[{"level":3,"title":"1.调用 then 方法","slug":"_1-调用-then-方法","link":"#_1-调用-then-方法","children":[]},{"level":3,"title":"2.then 方法返回的结果","slug":"_2-then-方法返回的结果","link":"#_2-then-方法返回的结果","children":[]},{"level":3,"title":"3.then 方法可以链式调用","slug":"_3-then-方法可以链式调用","link":"#_3-then-方法可以链式调用","children":[]}]},{"level":2,"title":"（五）读取多个文件","slug":"五-读取多个文件","link":"#五-读取多个文件","children":[{"level":3,"title":"1.回调地狱读取文件","slug":"_1-回调地狱读取文件","link":"#_1-回调地狱读取文件","children":[]},{"level":3,"title":"2.使用 Promise 实现","slug":"_2-使用-promise-实现","link":"#_2-使用-promise-实现","children":[]}]},{"level":2,"title":"（六）Promise.prototype.catch","slug":"六-promise-prototype-catch","link":"#六-promise-prototype-catch","children":[]}],"git":{"createdTime":1672650149000,"updatedTime":1689308920000,"contributors":[{"name":"郁子IKUKO","email":"1147998314@qq.com","commits":2}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"notes/ECMAScript6-11/13.md","localizedDate":"2023年1月1日","excerpt":"<h2> （一）基本语法</h2>\\n<ul>\\n<li><code>Promise</code> 是 <code>ES6</code> 引入的异步编程的新解决方案\\n<ul>\\n<li>是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</li>\\n</ul>\\n</li>\\n<li>Promise 构造函数： <code>Promise (excutor) {}</code></li>\\n<li><code>Promise.prototype.then</code> 方法</li>\\n<li><code>Promise.prototype.catch</code> 方法</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 实例化Promise对象</span>\\n<span class=\\"token keyword\\">const</span> p <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Promise</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve<span class=\\"token punctuation\\">,</span> reject</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 获得一个数据</span>\\n    <span class=\\"token keyword\\">let</span> data <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"数据库中的用户数据\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// // 调用resolve后p对象状态变为“成功”</span>\\n    <span class=\\"token comment\\">// resolve(data);</span>\\n\\n    <span class=\\"token comment\\">// 调用reject后p对象状态变为“失败”</span>\\n    <span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 调用Promise对象的then方法</span>\\np<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// p为成功时执行</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">reason</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// p为失败时指向</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span>reason<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
