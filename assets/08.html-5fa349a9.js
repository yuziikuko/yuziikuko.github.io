import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-1ca76096.js";const t={},p=e(`<h2 id="一-setstate-更新状态的两种写法" tabindex="-1"><a class="header-anchor" href="#一-setstate-更新状态的两种写法" aria-hidden="true">#</a> （一）setState 更新状态的两种写法</h2><h3 id="_1-对象式的-setstate" tabindex="-1"><a class="header-anchor" href="#_1-对象式的-setstate" aria-hidden="true">#</a> 1.对象式的 <code>setState</code></h3><ul><li><code>setState(stateChange, [callback])</code></li><li><code>stateChange</code> 为状态改变对象，该对象可以体现出状态的更改</li><li><code>callback</code> 是可选的回调函数，它在状态更新完毕、界面也更新后（render 调用后）才被调用</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>
<span class="token comment">// this.setState({ count: count + 1 });</span>
<span class="token comment">// setState的调用是同步的，但是后续引起React更新的动作是异步的</span>
<span class="token comment">// console.log(&quot;13行的输出&quot;, this.state.count); // 0</span>

<span class="token comment">// callback是React更新状态后被调用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-函数式的-setstate" tabindex="-1"><a class="header-anchor" href="#_2-函数式的-setstate" aria-hidden="true">#</a> 2.函数式的 <code>setState</code></h3><ul><li><code>setState(updater, [callback])</code></li><li><code>updater</code> 为返回的 <code>stateChange</code> 对象的函数</li><li><code>updater</code> 可以接收到 <code>state</code> 和 <code>props</code></li><li><code>callback</code> 是可选的回调函数，它在状态更新、界面也更新后（render 调用后）才被调用</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> props<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3.总结</h3><ul><li>对象式的 <code>setState</code> 是函数式的 <code>setState</code> 的简写方式（语法糖）</li><li>使用原则 <ul><li>如果新状态不依赖于原状态 <ul><li>使用对象方式</li></ul></li><li>如果新状态依赖于原状态 <ul><li>使用函数方式</li></ul></li><li>如果需要在 <code>setState()</code> 执行后获取最新的状态数据 <ul><li>要在第二个 <code>callback</code> 函数中读取</li></ul></li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 依赖于原状态也可以用对象式</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-lazyload-——-路由组件的懒加载" tabindex="-1"><a class="header-anchor" href="#二-lazyload-——-路由组件的懒加载" aria-hidden="true">#</a> （二）<code>lazyLoad</code> —— 路由组件的懒加载</h2><h3 id="_1-lazy" tabindex="-1"><a class="header-anchor" href="#_1-lazy" aria-hidden="true">#</a> 1.<code>lazy()</code></h3><ul><li>通过 React 的 <code>lazy</code> 函数配合 <code>import()</code> 函数动态加载路由组件</li><li>路由组件代码会被分开打包</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/pages/Login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-suspense" tabindex="-1"><a class="header-anchor" href="#_2-suspense" aria-hidden="true">#</a> 2.<code>&lt;Suspense&gt;</code></h3><ul><li>通过 <code>&lt;Suspense&gt;</code> 指定在加载得到路由打包文件前显示一个自定义 <code>loading</code> 界面</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Xxxx<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Loading</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xxx<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>Xxxx<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-hooks" tabindex="-1"><a class="header-anchor" href="#三-hooks" aria-hidden="true">#</a> （三）Hooks</h2><h3 id="_1-react-hook-hooks-是什么" tabindex="-1"><a class="header-anchor" href="#_1-react-hook-hooks-是什么" aria-hidden="true">#</a> 1.React Hook/Hooks 是什么？</h3><ul><li><code>Hook</code> 是 React 16.8.0 版本增加的新特性/新语法</li><li>可以在函数组件中使用 <code>state</code> 以及其他的 React 特性</li></ul><h3 id="_2-三个常用的-hook" tabindex="-1"><a class="header-anchor" href="#_2-三个常用的-hook" aria-hidden="true">#</a> 2.三个常用的 Hook</h3><ul><li>State Hook：<code>React.useState()</code></li><li>Effect Hook：<code>React.useEffect()</code></li><li>Ref Hook：<code>React.useRef()</code></li></ul><h3 id="_3-state-hook" tabindex="-1"><a class="header-anchor" href="#_3-state-hook" aria-hidden="true">#</a> 3.State Hook</h3><h4 id="_1-作用" tabindex="-1"><a class="header-anchor" href="#_1-作用" aria-hidden="true">#</a> 1）作用</h4><ul><li>使函数组件也可以有 <code>state</code> 状态，并进行状态数据的读写操作</li></ul><h4 id="_2-语法" tabindex="-1"><a class="header-anchor" href="#_2-语法" aria-hidden="true">#</a> 2）语法</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">,</span> setXxx<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-说明" tabindex="-1"><a class="header-anchor" href="#_3-说明" aria-hidden="true">#</a> 3）说明</h4><ul><li>参数：第一次初始化指定的值在内部作缓存</li><li>返回值：包含 2 个元素的数组，第 1 个为内部当前状态值，第 2 个为更新状态值的函数</li></ul><h4 id="_4-setxxx-两种写法" tabindex="-1"><a class="header-anchor" href="#_4-setxxx-两种写法" aria-hidden="true">#</a> 4）setXxx()两种写法</h4><ul><li><code>setXxx(newValue)</code><ul><li>参数为非函数值，直接指定新的状态值，内部用其覆盖原来的状态值</li></ul></li><li><code>setXxx(value =&gt; newValue)</code><ul><li>参数为函数值，接收原本的状态值，返回新的状态值，内部用其覆盖原来的状态值</li></ul></li></ul><h3 id="_4-effect-hook" tabindex="-1"><a class="header-anchor" href="#_4-effect-hook" aria-hidden="true">#</a> 4.Effect Hook</h3><h4 id="_1-作用-1" tabindex="-1"><a class="header-anchor" href="#_1-作用-1" aria-hidden="true">#</a> 1）作用</h4><ul><li>使函数组件中可以执行副作用操作</li><li>用于模拟类组件中的生命周期钩子</li></ul><h4 id="_2-react-中的副作用操作" tabindex="-1"><a class="header-anchor" href="#_2-react-中的副作用操作" aria-hidden="true">#</a> 2）React 中的副作用操作</h4><ul><li>发送 ajax 请求获取数据</li><li>设置订阅消息、启动定时器</li><li>手动更改真实 DOM</li></ul><h4 id="_3-语法和说明" tabindex="-1"><a class="header-anchor" href="#_3-语法和说明" aria-hidden="true">#</a> 3）语法和说明</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在此可以执行任何带副作用操作</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在组件卸载前执行</span>
    <span class="token comment">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>stateValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果指定的是[], 回调函数只会在第一次render()后执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以把 <code>useEffect()</code> 看做如下三个函数的组合</p><ul><li><code>componentDidMount()</code></li><li><code>componentDidUpdate()</code></li><li><code>componentWillUnmount()</code></li></ul></div><h3 id="_5-ref-hook" tabindex="-1"><a class="header-anchor" href="#_5-ref-hook" aria-hidden="true">#</a> 5.Ref Hook</h3><h4 id="_1-作用-2" tabindex="-1"><a class="header-anchor" href="#_1-作用-2" aria-hidden="true">#</a> 1）作用</h4><ul><li>使函数组件中可以存储、查找组件内的标签或任意其他数据</li></ul><h4 id="_2-语法-1" tabindex="-1"><a class="header-anchor" href="#_2-语法-1" aria-hidden="true">#</a> 2）语法</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-备注" tabindex="-1"><a class="header-anchor" href="#_3-备注" aria-hidden="true">#</a> 3）备注</h4><ul><li>保存标签对象，功能与 <code>React.createRef()</code> 一样</li></ul><h2 id="四-fragment" tabindex="-1"><a class="header-anchor" href="#四-fragment" aria-hidden="true">#</a> （四）Fragment</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1.语法</h3><h4 id="_1-写法一-只能有一个-key-属性" tabindex="-1"><a class="header-anchor" href="#_1-写法一-只能有一个-key-属性" aria-hidden="true">#</a> 1）写法一：只能有一个 key 属性</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-写法二-不能有任何属性" tabindex="-1"><a class="header-anchor" href="#_2-写法二-不能有任何属性" aria-hidden="true">#</a> 2）写法二：不能有任何属性</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用" aria-hidden="true">#</a> 2.作用</h3><ul><li>组件中不用必须包裹一个真实的 DOM 根标签</li></ul><h2 id="五-context" tabindex="-1"><a class="header-anchor" href="#五-context" aria-hidden="true">#</a> （五）Context</h2><h3 id="_1-理解" tabindex="-1"><a class="header-anchor" href="#_1-理解" aria-hidden="true">#</a> 1.理解</h3><ul><li>一种组件间通信方式</li><li>常用于【祖组件】和【后代组件】间通信</li></ul><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2.使用</h3><h4 id="_1-创建-context-容器对象" tabindex="-1"><a class="header-anchor" href="#_1-创建-context-容器对象" aria-hidden="true">#</a> 1）创建 <code>Context</code> 容器对象</h4><ul><li>该对象必须定义在通信的祖孙组件都能访问到的作用域中</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> XxxContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-渲染子组件时-外面包裹-xxxcontext-provider-通过-value-属性给后代组件传递数据" tabindex="-1"><a class="header-anchor" href="#_2-渲染子组件时-外面包裹-xxxcontext-provider-通过-value-属性给后代组件传递数据" aria-hidden="true">#</a> 2）渲染子组件时，外面包裹 <code>XxxContext.Provider</code> ，通过 <code>value</code> 属性给后代组件传递数据</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">XxxContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>数据<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  &lt;子组件 /&gt;
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">XxxContext.Provider</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-后代组件读取数据" tabindex="-1"><a class="header-anchor" href="#_3-后代组件读取数据" aria-hidden="true">#</a> 3）后代组件读取数据</h4><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 方式一：仅适用于类组件</span>
<span class="token keyword">static</span> contextType <span class="token operator">=</span> xxxContext<span class="token punctuation">;</span> <span class="token comment">// 声明接收context</span>
<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">}</span> <span class="token comment">// 读取context中的value数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 方式二：函数组件与类组件都可以</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token comment">// value就是context中的value数据</span>
    要显示的内容
  <span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xxxContext.Consumer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-注意" tabindex="-1"><a class="header-anchor" href="#_3-注意" aria-hidden="true">#</a> 3.注意</h3><ul><li>在应用开发中一般不用 <code>context</code></li><li>一般都用它的封装 React 插件</li></ul><h2 id="六-组件优化" tabindex="-1"><a class="header-anchor" href="#六-组件优化" aria-hidden="true">#</a> （六）组件优化</h2><h3 id="_1-component-的-2-个问题" tabindex="-1"><a class="header-anchor" href="#_1-component-的-2-个问题" aria-hidden="true">#</a> 1.Component 的 2 个问题</h3><ul><li>只要执行 <code>setState()</code> ，即使不改变状态数据，组件也会重新 <code>render</code><ul><li>效率低</li></ul></li><li>只要当前组件重新 <code>render</code> ，即使子组件没有用到父组件的任何问题，也会自动重新 <code>render</code> 子组件 <ul><li>效率低</li></ul></li></ul><h3 id="_2-说明" tabindex="-1"><a class="header-anchor" href="#_2-说明" aria-hidden="true">#</a> 2.说明</h3><ul><li>因为 <code>Component</code> 中的 <code>shouldComponentUpdate()</code> 总是返回 <code>true</code> ，所以有上述问题</li><li>要想提高效率，只有当组件的 <code>state</code> 或 <code>props</code> 数据发生改变时才重新 <code>render</code></li></ul><h3 id="_3-解决" tabindex="-1"><a class="header-anchor" href="#_3-解决" aria-hidden="true">#</a> 3.解决</h3><h4 id="_1-方法一" tabindex="-1"><a class="header-anchor" href="#_1-方法一" aria-hidden="true">#</a> 1）方法一</h4><ul><li>重写 <code>shouldComponentUpdate()</code> 方法</li><li>比较新旧 <code>state</code> 或 <code>props</code> 数据，有变化才返回 <code>true</code> ，否则返回 <code>false</code></li></ul><h4 id="_2-方法二" tabindex="-1"><a class="header-anchor" href="#_2-方法二" aria-hidden="true">#</a> 2）方法二</h4><ul><li>使用 <code>PureComponent</code></li><li><code>PureComponent</code> 重写了 <code>shouldComponentUpdate()</code> 方法</li><li>只有 <code>state</code> 或 <code>props</code> 数据有变化才返回 <code>true</code></li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><ul><li>只是进行 <code>state</code> 和 <code>props</code> 数据的浅比较，如果只是数据对象内部数据变了，返回 <code>false</code></li><li>不要直接修改 <code>state</code> 数据，而是要产生新数据</li><li>项目中一般使用 <code>PureComponent</code> 来优化</li></ul></div><h2 id="七-render-props" tabindex="-1"><a class="header-anchor" href="#七-render-props" aria-hidden="true">#</a> （七）render props</h2><h3 id="_1-如何向组件内部动态传入带内容的结构-标签" tabindex="-1"><a class="header-anchor" href="#_1-如何向组件内部动态传入带内容的结构-标签" aria-hidden="true">#</a> 1.如何向组件内部动态传入带内容的结构（标签）？</h3><h4 id="_1-vue-中" tabindex="-1"><a class="header-anchor" href="#_1-vue-中" aria-hidden="true">#</a> 1）Vue 中</h4><ul><li>使用 <code>slot</code> 技术，也就是通过组件标签体传入结构</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-react-中" tabindex="-1"><a class="header-anchor" href="#_2-react-中" aria-hidden="true">#</a> 2）React 中</h4><ul><li>使用 <code>children</code> props <ul><li>通过组件标签体传入结构</li></ul></li><li>使用 <code>render</code> props <ul><li>通过组件标签属性传入结构，而且可以携带数据，一般用 <code>render</code> 函数属性</li></ul></li></ul><h3 id="_2-children-props" tabindex="-1"><a class="header-anchor" href="#_2-children-props" aria-hidden="true">#</a> 2.children props</h3><ul><li>问题：如果 B 组件需要 A 组件内的数据，无法实现</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xxxxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-render-props" tabindex="-1"><a class="header-anchor" href="#_3-render-props" aria-hidden="true">#</a> 3.render props</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span>
  <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">C</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">C</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>

<span class="token comment">// A组件</span>
<span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>内部state数据<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// C组件读取A组件传入的数据并显示</span>
<span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-错误边界" tabindex="-1"><a class="header-anchor" href="#八-错误边界" aria-hidden="true">#</a> （八）错误边界</h2><h3 id="_1-理解-1" tabindex="-1"><a class="header-anchor" href="#_1-理解-1" aria-hidden="true">#</a> 1.理解</h3><ul><li>错误边界(Error Boundary)</li><li>用来捕获后代组件错误，渲染出备用页面，类比 <code>getDerivedStateFromProps</code> 理解</li></ul><h3 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2.特点</h3><ul><li>只能捕获 <strong>后代组件生命周期</strong> 产生的错误</li><li>不能捕获自己组件产生的错误</li><li>不能捕获其他组件在合成事件、定时器中产生的错误</li></ul><h3 id="_3-使用方式" tabindex="-1"><a class="header-anchor" href="#_3-使用方式" aria-hidden="true">#</a> 3.使用方式</h3><ul><li><code>getDerivedStateFromError</code> 配合 <code>componentDidCatch</code> 使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生命周期函数，一旦后台组件报错就会触发</span>
<span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 在render之前触发</span>
  <span class="token comment">// 返回新的state</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 统计页面的错误，发送请求到后台</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九-组件间通信方式总结" tabindex="-1"><a class="header-anchor" href="#九-组件间通信方式总结" aria-hidden="true">#</a> （九）组件间通信方式总结</h2><h3 id="_1-组件间的关系" tabindex="-1"><a class="header-anchor" href="#_1-组件间的关系" aria-hidden="true">#</a> 1.组件间的关系</h3><ul><li>父子组件</li><li>兄弟组件（非嵌套组件）</li><li>祖孙组件（跨级组件）</li></ul><h3 id="_2-几种通信方式" tabindex="-1"><a class="header-anchor" href="#_2-几种通信方式" aria-hidden="true">#</a> 2.几种通信方式</h3><h4 id="_1-props" tabindex="-1"><a class="header-anchor" href="#_1-props" aria-hidden="true">#</a> 1）props</h4><ul><li><code>children</code> props</li><li><code>render</code> props</li></ul><h4 id="_2-消息订阅-发布" tabindex="-1"><a class="header-anchor" href="#_2-消息订阅-发布" aria-hidden="true">#</a> 2）消息订阅-发布</h4><ul><li>pub-sub</li><li>event</li><li>......</li></ul><h4 id="_3-集中式管理" tabindex="-1"><a class="header-anchor" href="#_3-集中式管理" aria-hidden="true">#</a> 3）集中式管理</h4><ul><li>redux</li><li>dva</li><li>......</li></ul><h4 id="_4-context" tabindex="-1"><a class="header-anchor" href="#_4-context" aria-hidden="true">#</a> 4）context</h4><ul><li>生产者-消费者模式</li></ul><h3 id="_3-比较好的搭配方式" tabindex="-1"><a class="header-anchor" href="#_3-比较好的搭配方式" aria-hidden="true">#</a> 3.比较好的搭配方式</h3><ul><li>父子组件 —— props</li><li>兄弟组件 —— 消息订阅-发布、集中式管理</li><li>祖孙组件 —— 消息订阅-发布、集中式管理、context（开发用得少，封装插件用的多）</li></ul>`,113),c=[p];function o(l,i){return n(),s("div",null,c)}const r=a(t,[["render",o],["__file","08.html.vue"]]);export{r as default};
