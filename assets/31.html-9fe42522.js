import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e as t}from"./app-1ca76096.js";const e={},i=t(`<h2 id="一-应用" tabindex="-1"><a class="header-anchor" href="#一-应用" aria-hidden="true">#</a> （一）应用</h2><ul><li>一种组件间通信的方式，适用于 <strong>子组件===&gt;父组件</strong></li><li>因为只能写在调用组件的组件标签上，所以必然是父子组件关系</li></ul><h2 id="二-使用场景" tabindex="-1"><a class="header-anchor" href="#二-使用场景" aria-hidden="true">#</a> （二）使用场景</h2><ul><li>A 是父组件，B 是子组件，B 想给 A 传数据</li><li>那么就要在 A 中给 B 绑定自定义事件</li><li><strong>事件的回调在 A 中定义</strong></li></ul><h2 id="三-绑定自定义事件" tabindex="-1"><a class="header-anchor" href="#三-绑定自定义事件" aria-hidden="true">#</a> （三）绑定自定义事件</h2><h3 id="_1-方式一" tabindex="-1"><a class="header-anchor" href="#_1-方式一" aria-hidden="true">#</a> 1.方式一</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在父组件中： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">@atguigu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 或 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name"><span class="token namespace">v-on:</span>atguigu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-方式二" tabindex="-1"><a class="header-anchor" href="#_2-方式二" aria-hidden="true">#</a> 2.方式二</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在父组件中： --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>demo<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若想让自定义事件只能触发一次，可以使用 once 修饰符，或 $once 方法</li></ul><h2 id="四-触发自定义事件" tabindex="-1"><a class="header-anchor" href="#四-触发自定义事件" aria-hidden="true">#</a> （四）触发自定义事件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">,</span> 数据<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五-解绑自定义事件" tabindex="-1"><a class="header-anchor" href="#五-解绑自定义事件" aria-hidden="true">#</a> （五）解绑自定义事件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六-绑定原生事件" tabindex="-1"><a class="header-anchor" href="#六-绑定原生事件" aria-hidden="true">#</a> （六）绑定原生事件</h2><ul><li>组件上也可以绑定原生 DOM 事件</li><li>需要使用 native 修饰符</li></ul><h2 id="七-注意" tabindex="-1"><a class="header-anchor" href="#七-注意" aria-hidden="true">#</a> （七）注意</h2><ul><li>通过 <code>this.$refs.xxx.$on(&quot;atguigu&quot;, 回调)</code> 绑定自定义事件时，回调 <strong>要么配置在 methods 中，要么用回调函数</strong></li><li>否则 this 指向会从当前组件的组件实例对象变为使用该组件的组件实例对象</li></ul>`,19),c=[i];function o(l,p){return n(),s("div",null,c)}const r=a(e,[["render",o],["__file","31.html.vue"]]);export{r as default};
