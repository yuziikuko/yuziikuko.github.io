import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as e,e as r}from"./app-1ca76096.js";const a={},i=r('<h2 id="一-事件的基本使用" tabindex="-1"><a class="header-anchor" href="#一-事件的基本使用" aria-hidden="true">#</a> （一）事件的基本使用</h2><ul><li>使用 <code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中 xxx 是事件名</li><li>事件的回调需要配置在 methods 对象中，最终会在 vm 上</li><li>methods 中配置的函数，<strong>不要用箭头函数</strong>，否则 this 就不再是 vm</li><li>methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 <strong>vm</strong> 或 <strong>组件实例对象</strong></li><li><code>@click=&quot;demo&quot;</code> 和 <code>@click=&quot;demo($event)&quot;</code> 效果一致，但后者可以传参</li></ul><h2 id="二-事件的修饰符" tabindex="-1"><a class="header-anchor" href="#二-事件的修饰符" aria-hidden="true">#</a> （二）事件的修饰符</h2><ul><li>修饰符可以连着写多个</li></ul><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>prevent</td><td>阻止默认事件（常用）</td></tr><tr><td>stop</td><td>阻止事件冒泡（常用）</td></tr><tr><td>once</td><td>事件只触发一次（常用）</td></tr><tr><td>capture</td><td>使用事件的捕获模式</td></tr><tr><td>self</td><td>只有 event.target 是当前操作的元素时才触发事件</td></tr><tr><td>passive</td><td>事件的默认行为立即执行，无需等待事件回调执行完毕</td></tr></tbody></table><h2 id="三-键盘事件" tabindex="-1"><a class="header-anchor" href="#三-键盘事件" aria-hidden="true">#</a> （三）键盘事件</h2><h3 id="_1-常用的按键别名" tabindex="-1"><a class="header-anchor" href="#_1-常用的按键别名" aria-hidden="true">#</a> 1.常用的按键别名</h3><table><thead><tr><th>中文</th><th>别名</th></tr></thead><tbody><tr><td>回车</td><td>enter</td></tr><tr><td>删除</td><td>delete（捕获“删除”和“退格”键）</td></tr><tr><td>退出</td><td>esc</td></tr><tr><td>空格</td><td>space</td></tr><tr><td>换行</td><td>tab（特殊：必须配合 keydown 使用）</td></tr><tr><td>上</td><td>up</td></tr><tr><td>下</td><td>down</td></tr><tr><td>左</td><td>left</td></tr><tr><td>右</td><td>right</td></tr></tbody></table><h3 id="_2-未提供别名" tabindex="-1"><a class="header-anchor" href="#_2-未提供别名" aria-hidden="true">#</a> 2.未提供别名</h3><ul><li>Vue 未提供别名的按键，可以使用按键原始的 key 值 <code>event.key</code> 去绑定</li><li>但注意要转为 kebab-case（短横线命名）</li><li>如：</li></ul><table><thead><tr><th>中文</th><th>别名</th></tr></thead><tbody><tr><td>CapsLock</td><td>caps-lock</td></tr></tbody></table><h3 id="_3-系统修饰键-用法特殊" tabindex="-1"><a class="header-anchor" href="#_3-系统修饰键-用法特殊" aria-hidden="true">#</a> 3.系统修饰键（用法特殊）</h3><ul><li>系统修饰键包括 <ul><li>Ctrl</li><li>Alt</li><li>Shift</li><li>Meta</li></ul></li></ul><h4 id="_1-配合-keyup-使用" tabindex="-1"><a class="header-anchor" href="#_1-配合-keyup-使用" aria-hidden="true">#</a> 1）配合 keyup 使用</h4><ul><li>按下修饰键的同时，再按下其他键，随后释放其他键，事件才能被触发</li></ul><h4 id="_2-配合-keydown-使用" tabindex="-1"><a class="header-anchor" href="#_2-配合-keydown-使用" aria-hidden="true">#</a> 2）配合 keydown 使用</h4><ul><li>正常按键即可触发事件</li></ul><h3 id="_4-keycode" tabindex="-1"><a class="header-anchor" href="#_4-keycode" aria-hidden="true">#</a> 4.keyCode</h3><ul><li>也可以使用 keyCode <code>event.keyCode</code> 指定具体的按键（不推荐）</li></ul><h3 id="_5-自定义按键别名" tabindex="-1"><a class="header-anchor" href="#_5-自定义按键别名" aria-hidden="true">#</a> 5.自定义按键别名</h3><ul><li>使用 <code>Vue.config.keyCodes.自定义键名 = 键码</code> 可以定制按键别名</li></ul>',21),h=[i];function l(o,c){return d(),e("div",null,h)}const u=t(a,[["render",l],["__file","08.html.vue"]]);export{u as default};
