import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-1240ea23.js";const o={},e=t(`<ul><li>扩展运算符 <code>...</code> 能将数组转换为逗号分隔的参数序列</li></ul><h2 id="一-运算符" tabindex="-1"><a class="header-anchor" href="#一-运算符" aria-hidden="true">#</a> （一）<code>...</code> 运算符</h2><ul><li><code>rest</code> 参数是放在函数声明时 <strong>形参</strong> 的位置</li><li><code>...</code> 扩展运算符是放在调用函数时 <strong>实参</strong> 的位置</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个数组</span>
<span class="token keyword">const</span> comic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;恶役&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;恋爱&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大女主&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 ... 转换为 &#39;恶役&#39;, &#39;恋爱&#39;, &#39;大女主&#39;</span>
<span class="token comment">// 声明一个函数</span>
<span class="token keyword">function</span> <span class="token function">cartoon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">cartoon</span><span class="token punctuation">(</span>comic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Arguments [Array(3), callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>

<span class="token function">cartoon</span><span class="token punctuation">(</span><span class="token operator">...</span>comic<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 相当于cartoon(&#39;恶役&#39;, &#39;恋爱&#39;, &#39;大女主&#39;);</span>
<span class="token comment">// Arguments(3) [&#39;恶役&#39;, &#39;恋爱&#39;, &#39;大女主&#39;, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-应用" tabindex="-1"><a class="header-anchor" href="#二-应用" aria-hidden="true">#</a> （二）应用</h2><h3 id="_1-数组的合并" tabindex="-1"><a class="header-anchor" href="#_1-数组的合并" aria-hidden="true">#</a> 1.数组的合并</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xiaopin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;沈腾&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;贾玲&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sketch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;王皓&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;史策&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// const xiju = xiaopin.concat(sketch);</span>
<span class="token keyword">const</span> xiju <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>xiaopin<span class="token punctuation">,</span> <span class="token operator">...</span>sketch<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiju<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;沈腾&#39;, &#39;贾玲&#39;, &#39;王皓&#39;, &#39;史策&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数组的克隆" tabindex="-1"><a class="header-anchor" href="#_2-数组的克隆" aria-hidden="true">#</a> 2.数组的克隆</h3><ul><li>此处拷贝是浅拷贝，数组内部的引用数据类型只拷贝内容不拷贝地址</li><li>浅拷贝：拷贝变量所存的值，如果是引用变量，那拷贝的就是它里面的地址</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sanzhihua <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;G&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sanyecao <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>sanzhihua<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sanyecao<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;E&#39;, &#39;G&#39;, &#39;M&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-将伪数组转为真正的数组" tabindex="-1"><a class="header-anchor" href="#_3-将伪数组转为真正的数组" aria-hidden="true">#</a> 3.将伪数组转为真正的数组</h3><ul><li>此处拷贝是浅拷贝，数组内部的引用数据类型只拷贝内容不拷贝地址</li><li>浅拷贝：拷贝变量所存的值，如果是引用变量，那拷贝的就是它里面的地址</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NodeList(3) [div, div, div] 是一个对象</span>

<span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [div, div, div] 是一个数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[e];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","09.html.vue"]]);export{d as default};
