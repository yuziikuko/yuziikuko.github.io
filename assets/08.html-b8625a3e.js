import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-f4db3521.js";const t={},l=e(`<h2 id="一-javascript-入门" tabindex="-1"><a class="header-anchor" href="#一-javascript-入门" aria-hidden="true">#</a> （一）JavaScript 入门</h2><h3 id="_1-web-发展史" tabindex="-1"><a class="header-anchor" href="#_1-web-发展史" aria-hidden="true">#</a> 1.Web 发展史</h3><ul><li>Mosaic，是互联网历史上第一个获普遍使用和能够显示图片的<strong>网页浏览器</strong>，于 1993 年问世</li></ul><h3 id="_2-浏览器组成" tabindex="-1"><a class="header-anchor" href="#_2-浏览器组成" aria-hidden="true">#</a> 2.浏览器组成</h3><ul><li>shell 部分</li><li>内核部分 <ul><li>渲染引擎（语法规则和渲染）</li><li>JS 引擎</li><li>其他模块</li></ul></li></ul><h3 id="_3-翻译过程" tabindex="-1"><a class="header-anchor" href="#_3-翻译过程" aria-hidden="true">#</a> 3.翻译过程</h3><h4 id="_1-编译" tabindex="-1"><a class="header-anchor" href="#_1-编译" aria-hidden="true">#</a> 1）编译</h4><ul><li>通篇翻译</li><li>将格式 1 的文件翻译成格式 2 的文件，由系统程序执行格式 2 文件</li><li>该类型的编程语言叫编译性语言</li><li>优点：过程快</li><li>缺点：翻译后的格式 2 文件移植性不好（不能跨平台）</li><li>如： <ul><li>C 语言： <code>.c =&gt; .obj</code></li><li>C++</li></ul></li></ul><h4 id="_2-解释" tabindex="-1"><a class="header-anchor" href="#_2-解释" aria-hidden="true">#</a> 2）解释</h4><ul><li>逐行翻译，逐行执行</li><li>直接翻译格式 1 的文件，翻译一行就交给系统程序执行一行</li><li>该类型的编程语言叫解释性语言</li><li>优点：直接翻译成机器码，可以跨平台</li><li>缺点：过程稍微慢一点</li><li>如： <ul><li>JavaScript</li><li>PHP</li><li>Python</li></ul></li></ul><h4 id="_3-java" tabindex="-1"><a class="header-anchor" href="#_3-java" aria-hidden="true">#</a> 3）Java</h4><ul><li>Java 既不是编译性语言，也不是解释性语言，是 oak 语言</li><li><code>.java</code> 文件通过 <code>javac</code> 命令编译成 <code>.class</code> 文件，再经过 <code>jvm</code> 虚拟机解释执行</li><li>可以跨平台</li></ul><h3 id="_4-js-特点" tabindex="-1"><a class="header-anchor" href="#_4-js-特点" aria-hidden="true">#</a> 4.JS 特点</h3><ul><li>解释性语言 <ul><li>不需要编译成文件，可以跨平台</li></ul></li><li>单线程</li><li>ECMA 标注 <ul><li>兼容于 ECMA 标准，因此也称为 ECMAScript</li></ul></li><li>三大部分： <ul><li>ECMAScript（ES）</li><li>DOM</li><li>BOM</li></ul></li></ul><h3 id="_5-主流浏览器" tabindex="-1"><a class="header-anchor" href="#_5-主流浏览器" aria-hidden="true">#</a> 5.主流浏览器</h3><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident -&gt; Edge</td></tr><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Chrome</td><td>Webkit -&gt; Blink</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>Opera</td><td>Presto -&gt; Blink</td></tr></tbody></table><h3 id="_6-js-引入" tabindex="-1"><a class="header-anchor" href="#_6-js-引入" aria-hidden="true">#</a> 6.JS 引入</h3><ul><li>页面内嵌标签 <ul><li><code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>外部引入 <ul><li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;location&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>为符合 Web 标准（W3C 标准中的一项），结构（HTML）、样式（CSS）、行为（JS）相分离 <ul><li>通常采用外部引入的方式</li></ul></li></ul><h3 id="_7-js-基本语法" tabindex="-1"><a class="header-anchor" href="#_7-js-基本语法" aria-hidden="true">#</a> 7.JS 基本语法</h3><h4 id="_1-变量-variable" tabindex="-1"><a class="header-anchor" href="#_1-变量-variable" aria-hidden="true">#</a> 1）变量 variable</h4><ul><li>变量声明 <ul><li>声明、赋值分解</li><li>单一 var 模式（多个变量一次性声明并赋值）</li></ul></li><li>命名规则 <ul><li>变量名必须以 <code>英文字母</code> 、 <code>_</code> 、 <code>$</code> 开头</li><li>变量名可以包括 <code>英文字母</code> 、 <code>_</code> 、 <code>$</code> 、 <code>数字</code></li><li>不可以用系统的关键字、保留字作为变量名</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token comment">// 赋值</span>
a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment">// 也可以同时进行</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">// 单一var</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
  d <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span>
  e <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>关键字</li></ul><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>break</td><td>else</td><td>new</td><td>var</td><td>case</td><td>finally</td><td>return</td></tr><tr><td>void</td><td>catch</td><td>for</td><td>switch</td><td>while</td><td>default</td><td>if</td></tr><tr><td>throw</td><td>delete</td><td>in</td><td>try</td><td>do</td><td>instanceof</td><td>typeof</td></tr></tbody></table><ul><li>保留字</li></ul><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>abstract</td><td>enum</td><td>int</td><td>short</td></tr><tr><td>boolean</td><td>export</td><td>interface</td><td>static</td></tr><tr><td>byte</td><td>extends</td><td>long</td><td>super</td></tr><tr><td>char</td><td>final</td><td>native</td><td>synchronized</td></tr><tr><td>class</td><td>float</td><td>package</td><td>throws</td></tr><tr><td>const</td><td>goto</td><td>private</td><td>transient</td></tr><tr><td>debugger</td><td>implements</td><td>protected</td><td>volatile</td></tr><tr><td>double</td><td>import</td><td>public</td><td></td></tr></tbody></table><h4 id="_2-值类型——数据类型" tabindex="-1"><a class="header-anchor" href="#_2-值类型——数据类型" aria-hidden="true">#</a> 2）值类型——数据类型</h4><ul><li>不可改变的原始值（栈数据） <ul><li>拷贝的是值</li><li>Number</li><li>String</li><li>Boolean</li><li>undefined</li><li>null</li></ul></li><li>引用值（堆数据） <ul><li>拷贝的是地址</li><li>Array</li><li>Object</li><li>Function</li><li>Date</li><li>RegExp</li></ul></li><li>栈（stack） <ul><li>FILO，先进后出，有底没顶</li></ul></li><li>堆（heap）</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>原始值不可改变：</p><p>变量重新赋值实际上是在栈顶再申请一块空间，将变量地址指向新空间，原地址重置为原始地址</p></div><h3 id="_8-js-语句基本规则" tabindex="-1"><a class="header-anchor" href="#_8-js-语句基本规则" aria-hidden="true">#</a> 8.JS 语句基本规则</h3><ul><li>语句后面要用分号 <code>;</code> 结束</li><li>JS 错误 <ul><li>低级错误（语法解析错误） <ul><li>逐行翻译前会通篇扫描，如果有解析错误，程序直接终止</li></ul></li><li>逻辑错误（标准错误） <ul><li>逐行翻译，遇到逻辑错误就停止在当前代码行</li></ul></li><li>语法错误会引发后续代码终止，但不会影响其它 JS 代码块</li></ul></li><li>书写格式要规范， <code>=+/-</code> 左右两边都应该有空格</li></ul><h3 id="_9-运算操作符" tabindex="-1"><a class="header-anchor" href="#_9-运算操作符" aria-hidden="true">#</a> 9.运算操作符</h3><ul><li><code>+</code><ul><li>数学运算</li><li>连接字符串</li><li>任何数据类型加字符串都等于字符串</li></ul></li><li><code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>=</code>、<code>()</code><ul><li>优先级 <code>=</code> 最低， <code>()</code> 最高</li></ul></li><li><code>++</code>、<code>--</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity(Number)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN(Number) =&gt; Not a Number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-比较运算符" tabindex="-1"><a class="header-anchor" href="#_10-比较运算符" aria-hidden="true">#</a> 10.比较运算符</h3><ul><li><code>&gt;</code>、<code>&lt;</code>、<code>==</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code></li><li>比较结果为 boolean 值</li><li>字符串比较的是 ASCII 码 <ul><li>0：48</li><li>A：65</li><li>a：98</li></ul></li><li><code>Infinity</code> === <code>Infinity</code></li><li><code>NaN</code> !== <code>NaN</code></li></ul><h3 id="_11-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_11-逻辑运算符" aria-hidden="true">#</a> 11.逻辑运算符</h3><ul><li>与 <code>&amp;&amp;</code><ul><li>全真为真</li><li>先看符号前的表达式 1，判断其结果转换为 boolean 值是否为真 <ul><li>真 <ul><li>只有两个表达式，那么返回符号后的表达式 2 的结果</li><li>不止两个表达式，继续判断下一个表达式转换为 boolean 值是否为真，重复上述逻辑</li></ul></li><li>假 <ul><li>返回符号前的表达式 1 的结果（不一定返回 false）</li></ul></li></ul></li><li>利用该特性可以作<strong>短路语句</strong>使用 <ul><li><code>2 &gt; 1 &amp;&amp; document.write(&quot;我输出了&quot;);</code></li></ul></li></ul></li><li>或 <code>||</code><ul><li>全假为假</li><li>先看符号前的表达式 1，判断其结果转换为 boolean 值是否为真 <ul><li>真 <ul><li>返回符号前的表达式 1 的结果</li></ul></li><li>假 <ul><li>只有两个表达式，那么返回符号后的表达式 2 的结果</li><li>不止两个表达式，继续判断下一个表达式转换为 boolean 值是否为真，重复上述逻辑</li></ul></li></ul></li><li>利用该特性可以作<strong>或者</strong>使用 <ul><li><code>var event = e || window.event;</code></li></ul></li></ul></li><li>非 <code>!</code><ul><li>非真即假</li><li>先将表达式转换为 boolean 值，再取反，返回结果</li></ul></li><li>运算结果为真实的值</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>转换为 boolean 值后为 false 的表达式：</p><ul><li><p>undefined</p></li><li><p>null</p></li><li><p>NaN</p></li><li><p><code>&quot;&quot;</code></p></li><li><p>0</p></li><li><p>false</p></li></ul></div><h3 id="_12-条件语句" tabindex="-1"><a class="header-anchor" href="#_12-条件语句" aria-hidden="true">#</a> 12.条件语句</h3><ul><li>if () {}</li><li>if () {} else if () {}</li><li>if (a &amp;&amp;b) {} <ul><li>a 成立<strong>并且</strong>b 成立时才执行</li></ul></li><li>if (a || b){} <ul><li>a 成立<strong>或者</strong>b 成立时执行</li></ul></li></ul><h3 id="_13-循环语句" tabindex="-1"><a class="header-anchor" href="#_13-循环语句" aria-hidden="true">#</a> 13.循环语句</h3><ul><li>for (var i = 0; i &lt; len; i++) {}</li><li>while(i &lt; len) {}</li><li>do {} while (i &lt; len) <ul><li>无论如何都先执行一次</li></ul></li></ul><h3 id="_14-类型判断" tabindex="-1"><a class="header-anchor" href="#_14-类型判断" aria-hidden="true">#</a> 14.类型判断</h3><ul><li><code>typeof()</code> 或者 <code>typeof 值</code></li><li>返回以下类型： <ul><li><code>number</code></li><li><code>string</code></li><li><code>boolean</code></li><li><code>object</code></li><li><code>undefined</code></li><li><code>function</code></li></ul></li><li>原始值问题：表示泛泛的引用值返回 object</li><li>历史遗留问题：表示空的占位符返回 object</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><ul><li>typeof({}) = object <ul><li>原始值问题</li></ul></li><li>typeof([]) = object <ul><li>原始值问题</li></ul></li><li>typeof(null) = object <ul><li>历史遗留问题</li></ul></li><li>在 JS 中使用未定义的值会报未定义错误 <ul><li><code>console.log(a);</code> =&gt; error: not defined</li><li>当且仅当 typeof 这一种情况可以使用未定义的值且不报错 <ul><li><code>console.log(typeof(a))</code> =&gt; undefined</li><li><code>typeof(typeof(a))</code> =&gt; string</li></ul></li></ul></li></ul></div><h3 id="_15-类型转换" tabindex="-1"><a class="header-anchor" href="#_15-类型转换" aria-hidden="true">#</a> 15.类型转换</h3><h4 id="_1-显式类型转换" tabindex="-1"><a class="header-anchor" href="#_1-显式类型转换" aria-hidden="true">#</a> 1）显式类型转换</h4><ul><li><code>Number(mix)</code><ul><li>关注点在于转成数字类型</li><li>boolean 值会转换</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;-123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -123</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parseInt(string, radix)</code><ul><li>关注点在于转成整型 <ul><li>boolean 值不会转换</li><li>从数字位开始转换至最后一位数字位，遇到非数字位则截断</li></ul></li><li>直接舍去小数点后的数字</li><li>radix 是积底，表示转换时采用的进制 <ul><li><strong>以 radix 为积底转成十进制的整数</strong></li><li>如：2、8、10、16</li><li>如果限制了进制，但是转的数字/字符串不是“1010”组合，则返回 NaN</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;10101010&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 170</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parseFloat(string)</code><ul><li>关注点在于转成浮点型 <ul><li>从数字位开始转换至最后一位数字位，遇到除第一个小数点外的非数字位则截断</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.0</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.3</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;12.3abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toString(radix)</code><ul><li>关注点在于转成字符串</li><li>用法不同于其他，需要使用调用函数的形式</li><li>radix 是积底，表示转换时的目标进制 <ul><li><strong>以十进制为积底转成 radix 进制的字符串</strong></li><li>如：2、8、10、16</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot; =&gt; 1 * 8 ^ 1 + 0 * 8 ^ 1 = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>undefined 和 null 不能调用 toString()</p><p>会直接报错</p></div><ul><li><code>String(mix)</code><ul><li>关注点在于转成字符串</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;false&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Boolean()</code><ul><li>关注点在于转成布尔值</li><li>除了以下六个值，其余全为 true <ul><li>undefined</li><li>null</li><li>NaN</li><li><code>&quot;&quot;</code></li><li>0</li><li>false</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#_2-隐式类型转换" aria-hidden="true">#</a> 2）隐式类型转换</h4><ul><li><code>isNaN()</code><ul><li>先把参数使用 <code>Number()</code> 转换，再将结果和 <code>NaN</code> 作比较</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;NaN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>++</code>、<code>--</code>、<code>+</code>、<code>-</code><ul><li>自增自减 <ul><li>先使用 <code>Number()</code> 转换，再将结果自增/自减</li></ul></li><li>一元正负 <ul><li>先使用 <code>Number()</code> 转换，再将转成正/负</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 124</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>+</code></p><ul><li>只要符号左右两个表达式其中之一是字符串，就会调用 <code>String()</code> 转成字符串类型</li></ul></li><li><p><code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></p><ul><li>先使用 <code>Number()</code> 转换，再运算结果</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span></span><span class="token punctuation">)</span>
<span class="token operator">=&gt;</span> <span class="token number">NaN</span> <span class="token operator">*</span> <span class="token number">1</span>
<span class="token operator">=&gt;</span> <span class="token number">NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>&amp;&amp;</code>、<code>||</code>、<code>!</code></p><ul><li>表达式转成 boolean 值用于判断，返回的是表达式的值</li></ul></li><li><p><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></p><ul><li>只要符号左右两个表达式其中之一是数字，就会调用 <code>Number()</code> 转成数字类型再比较</li><li>如果没有数字类型则转成字符串类型比较</li><li>两个字符串类型 <ul><li>比较的是 ASCII 码大小</li><li>逐位比较</li></ul></li></ul></li><li><p><code>==</code>、<code>!=</code></p><ul><li>判断是否相等，返回 boolean 值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">false</span> <span class="token operator">&gt;</span> <span class="token parameter"><span class="token boolean">true</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">100</span> <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token parameter"><span class="token keyword">null</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token parameter"><span class="token number">NaN</span></span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-不发生类型转换" tabindex="-1"><a class="header-anchor" href="#_3-不发生类型转换" aria-hidden="true">#</a> 3）不发生类型转换</h4><ul><li><code>===</code>、<code>!==</code><ul><li>绝对等于、绝对不等于</li><li>判断值，也判断类型</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">1</span> <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">1</span> <span class="token operator">!==</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token string">&quot;NaN&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span>
<span class="token number">NaN</span> <span class="token operator">!==</span> <span class="token string">&quot;NaN&quot;</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-函数" tabindex="-1"><a class="header-anchor" href="#二-函数" aria-hidden="true">#</a> （二）函数</h2><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1.定义</h3><ul><li>和数组、对象一致，也是引用值类型</li><li>保存在堆内存中，栈中保存堆内地址</li></ul><h4 id="_1-函数声明" tabindex="-1"><a class="header-anchor" href="#_1-函数声明" aria-hidden="true">#</a> 1）函数声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-命名函数表达式" tabindex="-1"><a class="header-anchor" href="#_2-命名函数表达式" aria-hidden="true">#</a> 2）命名函数表达式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function fn2 () {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// not defined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fn2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-匿名函数表达式" tabindex="-1"><a class="header-anchor" href="#_3-匿名函数表达式" aria-hidden="true">#</a> 3）匿名函数表达式</h4><ul><li>该方式更常用，所以简称为 <strong>函数表达式</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code here</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function () {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fn&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组成形式" tabindex="-1"><a class="header-anchor" href="#_2-组成形式" aria-hidden="true">#</a> 2.组成形式</h3><ul><li>函数名称</li><li>参数 <ul><li>形式参数——形参 <ul><li>函数的 <code>length</code> 属性绑定的是形参的个数</li><li><code>函数名.length</code></li></ul></li><li>实际参数——实参 <ul><li>函数体内中自定义了 <code>arguments</code> 实参列表，存储所有实参</li></ul></li><li>形参实参个数不需要保持一致</li></ul></li><li>返回值</li></ul><h4 id="_1-arguments-和形参" tabindex="-1"><a class="header-anchor" href="#_1-arguments-和形参" aria-hidden="true">#</a> 1）arguments 和形参</h4><ul><li>arguments 保存的是实参列表</li><li>arguments 和形参占用两块不同的内存</li><li>JS 内部定义了映射规则，只要 arguments 或形参中某一位置的值变化了，另一个位置相同的值也变化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// arguments: [1, 2]</span>
  <span class="token comment">// var a = 1;</span>

  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

  arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>arguments 和形参的映射关系只在初始时确定，未传值的形参不和 arguments 建立映射</li><li>一开始调用函数时 arguments 有多少个参数就有多少个</li><li>当实参数量少于形参时，即使函数体内再重新给未传值的形参赋值，此时对应的 arguments 下标的值也不会变化，仍然是 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// arguments: [1]</span>
  <span class="token comment">// var a = 1;</span>

  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),o=[l];function p(i,c){return s(),a("div",null,o)}const r=n(t,[["render",p],["__file","08.html.vue"]]);export{r as default};
