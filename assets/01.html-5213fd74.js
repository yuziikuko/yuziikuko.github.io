import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a,b as n,d as e,e as o}from"./app-49f9d899.js";const c={},r=a("h2",{id:"一-简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一-简介","aria-hidden":"true"},"#"),n(" （一）简介")],-1),u=a("h3",{id:"_1-官网",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-官网","aria-hidden":"true"},"#"),n(" 1.官网")],-1),d={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://react.docschina.org/",target:"_blank",rel:"noopener noreferrer"},k=o(`<h3 id="_2-介绍" tabindex="-1"><a class="header-anchor" href="#_2-介绍" aria-hidden="true">#</a> 2.介绍</h3><ul><li><p>用于动态构建用户界面的 JavaScript 库（只关注于视图）。</p></li><li><p>由 Facebook 公司开源。</p></li></ul><h3 id="_3-特点" tabindex="-1"><a class="header-anchor" href="#_3-特点" aria-hidden="true">#</a> 3.特点</h3><ul><li><p>声明式编码</p></li><li><p>组件化编码</p></li><li><p>React Native 编写原生应用</p></li><li><p>高效（优秀的 Diffing 算法）</p></li></ul><h3 id="_4-react-高效的原因" tabindex="-1"><a class="header-anchor" href="#_4-react-高效的原因" aria-hidden="true">#</a> 4.React 高效的原因</h3><ul><li><p>使用虚拟（Virtual）DOM，不总是直接操作页面真实 DOM。</p></li><li><p><code>DOM Diffing</code>算法，最小化页面重绘。</p></li></ul><h2 id="二-react-的基本使用" tabindex="-1"><a class="header-anchor" href="#二-react-的基本使用" aria-hidden="true">#</a> （二）React 的基本使用</h2><h3 id="_1-相关-js-库" tabindex="-1"><a class="header-anchor" href="#_1-相关-js-库" aria-hidden="true">#</a> 1.相关 JS 库</h3><ul><li><p><code>react.js</code> ：React 核心库。</p></li><li><p><code>react-dom.js</code> ：提供操作 DOM 的 React 扩展库。</p></li><li><p><code>babel.min.js</code> ：解析 JSX 语法代码转为 JS 代码的库。</p></li></ul><h3 id="_2-创建虚拟-dom-的两种方式" tabindex="-1"><a class="header-anchor" href="#_2-创建虚拟-dom-的两种方式" aria-hidden="true">#</a> 2.创建虚拟 DOM 的两种方式</h3><ul><li>JSX 方式：需要 babel 翻译，翻译后其实是 JS 方式的代码。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/babel&quot;</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token comment">/* 1.创建虚拟DOM */</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token comment">/* const VDom = &lt;h1 id=&quot;title&quot;&gt;Hello, React&lt;/h1&gt;; */</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> VDom <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>h1 id<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> React<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span><span class="token comment">/* 2.渲染虚拟DOM到页面 */</span><span class="token punctuation">}</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDom<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JS 方式：繁琐，几乎不用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
  <span class="token comment">// 1.创建虚拟DOM</span>
  <span class="token comment">// const VDom = ReactDOM.createElement(标签名, 标签属性, 标签内容);</span>
  <span class="token comment">// const VDom = React.createElement(&#39;h1&#39;, { id: &#39;title&#39; }, &#39;Hello, React&#39;);</span>
  <span class="token keyword">const</span> VDom <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;title&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, React&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 2.渲染虚拟DOM到页面</span>
  <span class="token comment">// ReactDOM.render(虚拟DOM, 容器)</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDom<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>babel 功能</p><ul><li><p>将 ES6 语法翻译成 ES5。</p></li><li><p>将 JSX 语法翻译成 JS。</p></li></ul></li></ul><h3 id="_3-关于虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_3-关于虚拟-dom" aria-hidden="true">#</a> 3.关于虚拟 DOM</h3><ul><li><p>本质是 Object 类型的对象（一般对象）。</p></li><li><p>虚拟 DOM 比较“轻”，真实 DOM 比较“重”，因为虚拟 DOM 是 React 内部在用，无需真实 DOM 上那么多的属性。</p></li><li><p>虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上。</p></li></ul><h2 id="三-react-jsx" tabindex="-1"><a class="header-anchor" href="#三-react-jsx" aria-hidden="true">#</a> （三）React-JSX</h2><h3 id="_1-xml" tabindex="-1"><a class="header-anchor" href="#_1-xml" aria-hidden="true">#</a> 1.XML</h3><ul><li>XML 早期用于存储和传输数据。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-json" tabindex="-1"><a class="header-anchor" href="#_2-json" aria-hidden="true">#</a> 2.JSON</h3><ul><li>XML 存储方式较繁琐，改用 JSON 格式。</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">19</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>JSON 内置的两个方法：</p><ul><li><p><code>parse()</code> ：将 JSON 字符串解析为 JS 中的数组和对象。</p></li><li><p><code>stringfy()</code> ：将 JS 中的数组和对象转换为 JSON 字符串。</p></li></ul></li></ul><h3 id="_3-jsx-语法规则" tabindex="-1"><a class="header-anchor" href="#_3-jsx-语法规则" aria-hidden="true">#</a> 3.JSX 语法规则</h3><ul><li><p>定义虚拟 DOM 时，不要写引号。</p></li><li><p>标签中混入 JS 表达式时要用 <code>{}</code> 。</p></li><li><p>样式的类名指定不要用 <code>class</code> ，要用 <code>className</code> ，为了避开 <code>class</code> 定义类的关键字。</p></li><li><p>内联样式要用 <code>style={{ key: value }}</code> 的形式</p><ul><li><p><code>key</code> 为小驼峰命名</p></li><li><p>第一个{}表示 <code>style</code> 内要写 JS 表达式</p></li><li><p>第二个{}表示这是一个对象。</p></li></ul></li><li><p>虚拟 DOM 的根标签只能有一个。</p></li><li><p>标签必须闭合。</p></li><li><p>标签首字母</p><ul><li><p>小写字母开头，则将该标签转为 html 中同名元素，若 html 中无该标签对应的同名元素则报错。</p></li><li><p>大写字母开头，React 则去渲染对应的组件，若组件未定义则报错。</p></li></ul></li></ul><h3 id="_4-区分【js-表达式】和【js-语句-代码-】" tabindex="-1"><a class="header-anchor" href="#_4-区分【js-表达式】和【js-语句-代码-】" aria-hidden="true">#</a> 4.区分【JS 表达式】和【JS 语句（代码）】</h3><ul><li><p>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方。</p><ul><li><p>a</p></li><li><p>a+b</p></li><li><p>demo(1)</p></li><li><p>arr.map()</p></li><li><p>function test() {}</p></li></ul></li><li><p>语句（代码）：</p><ul><li><p>if() {}</p></li><li><p>for() {}</p></li><li><p>switch() { case: xxx }</p></li></ul></li></ul><h2 id="四-模块与组件、模块化与组件化的理解" tabindex="-1"><a class="header-anchor" href="#四-模块与组件、模块化与组件化的理解" aria-hidden="true">#</a> （四）模块与组件、模块化与组件化的理解</h2><h3 id="_1-模块" tabindex="-1"><a class="header-anchor" href="#_1-模块" aria-hidden="true">#</a> 1.模块</h3><ul><li><p>理解：向外提供特定功能的 js 程序，一般就是一个 js 文件。</p></li><li><p>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p></li><li><p>作用：复用 js，简化项目编码，提高运行效率。</p></li></ul><h3 id="_2-组件" tabindex="-1"><a class="header-anchor" href="#_2-组件" aria-hidden="true">#</a> 2.组件</h3><ul><li><p>理解：用来实现局部功能效果的代码和资源的集合（html/css/js/image 等等）。</p></li><li><p>为什么：一个界面的功能更复杂。</p></li><li><p>作用：复用编码，简化项目编码，提高运行效率。</p></li></ul><h3 id="_3-模块化" tabindex="-1"><a class="header-anchor" href="#_3-模块化" aria-hidden="true">#</a> 3.模块化</h3><p>当应用的 js 都以模块来编写的时，这个应用就是一个模块化的应用。</p><h3 id="_4-组件化" tabindex="-1"><a class="header-anchor" href="#_4-组件化" aria-hidden="true">#</a> 4.组件化</h3><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用。</p>`,38);function m(v,b){const s=p("ExternalLinkIcon");return l(),i("div",null,[r,u,a("ul",null,[a("li",null,[a("p",null,[a("a",d,[n("英文官网"),e(s)])])]),a("li",null,[a("p",null,[a("a",h,[n("中文官网"),e(s)])])])]),k])}const f=t(c,[["render",m],["__file","01.html.vue"]]);export{f as default};
