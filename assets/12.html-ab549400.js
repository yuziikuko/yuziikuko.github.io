import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as h}from"./app-1ca76096.js";const d={},r=h('<h2 id="一-v-if" tabindex="-1"><a class="header-anchor" href="#一-v-if" aria-hidden="true">#</a> （一）v-if</h2><h3 id="_1-写法" tabindex="-1"><a class="header-anchor" href="#_1-写法" aria-hidden="true">#</a> 1.写法</h3><ul><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else=&quot;表达式&quot;</code></li></ul><h3 id="_2-适用于" tabindex="-1"><a class="header-anchor" href="#_2-适用于" aria-hidden="true">#</a> 2.适用于</h3><ul><li>DOM 元素是否显示的切换频率较低的场景</li></ul><h3 id="_3-特点" tabindex="-1"><a class="header-anchor" href="#_3-特点" aria-hidden="true">#</a> 3.特点</h3><ul><li>不展示的 DOM 元素直接被移除</li></ul><h3 id="_4-注意" tabindex="-1"><a class="header-anchor" href="#_4-注意" aria-hidden="true">#</a> 4.注意</h3><ul><li>v-if 可以和：v-else-if、v-else 一起使用</li><li>但要求结构不能被其他元素“打断”</li></ul><h2 id="二-v-show" tabindex="-1"><a class="header-anchor" href="#二-v-show" aria-hidden="true">#</a> （二）v-show</h2><h3 id="_1-写法-1" tabindex="-1"><a class="header-anchor" href="#_1-写法-1" aria-hidden="true">#</a> 1.写法</h3><ul><li><code>v-show=&quot;表达式&quot;</code></li></ul><h3 id="_2-适用于-1" tabindex="-1"><a class="header-anchor" href="#_2-适用于-1" aria-hidden="true">#</a> 2.适用于</h3><ul><li>DOM 元素是否显示的切换频率较高的场景</li></ul><h3 id="_3-特点-1" tabindex="-1"><a class="header-anchor" href="#_3-特点-1" aria-hidden="true">#</a> 3.特点</h3><ul><li>不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用 v-if 时，元素可能无法获取到，而使用 v-show 一定可以获取到</p></div>',17),l=[r];function t(o,n){return a(),i("div",null,l)}const u=e(d,[["render",t],["__file","12.html.vue"]]);export{u as default};
