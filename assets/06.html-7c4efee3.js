import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,d as s,a as n,b as a,e as t}from"./app-1240ea23.js";const u="/assets/TS进阶01-2d9d087d.png",r={},k=t('<h2 id="一-深入理解类和接口" tabindex="-1"><a class="header-anchor" href="#一-深入理解类和接口" aria-hidden="true">#</a> （一）深入理解类和接口</h2><h3 id="_1-面向对象概述" tabindex="-1"><a class="header-anchor" href="#_1-面向对象概述" aria-hidden="true">#</a> 1.面向对象概述</h3><h4 id="_1-意义" tabindex="-1"><a class="header-anchor" href="#_1-意义" aria-hidden="true">#</a> 1）意义</h4><ul><li>TS 为前端面向对象开发带来了契机 <ul><li>JS 语言没有类型检查，如果使用面向对象的方式开发，会产生大量的接口，而大量的接口会导致调用复杂度剧增</li><li>这种复杂度必须通过严格的类型检查来避免错误，尽管可以使用注释或文档或记忆力，但是它们没有强约束力</li><li>TS 带来了完整的类型系统，因此开发复杂程序时，无论接口数量有多少，都可以获得完整的类型检查，并且这种检查是据有强约束力的</li></ul></li><li>面向对象中有许多非常成熟的模式，能处理复杂问题 <ul><li>在过去的很多年中，在大型应用或复杂领域，面向对象已经积累了非常多的经验</li></ul></li></ul><h4 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念" aria-hidden="true">#</a> 2）概念</h4><ul><li>Oriented（基于） Object（事物），简称 OO，面向对象</li><li>是一种编程思想，提出一切以类对切入点思考问题</li><li>类是可以产生对象的模板</li></ul><table><thead><tr><th>编程思想</th><th>说明</th></tr></thead><tbody><tr><td>面向过程</td><td>以 <mark>功能流程</mark> 为思考切入点<br>不太适合大型应用<br>主要是模块化</td></tr><tr><td>函数式编程</td><td>以 <mark>数学运算</mark> 为思考切入点</td></tr><tr><td>面向对象</td><td>以 <mark>划分类</mark> 为思考切入点<br>类是最小的功能单元<br>主要是组件化</td></tr></tbody></table><blockquote><p>学开发最重要最难的是思维</p></blockquote><h4 id="_3-如何学习" tabindex="-1"><a class="header-anchor" href="#_3-如何学习" aria-hidden="true">#</a> 3）如何学习</h4><ul><li>TS 中的 OOP <ul><li>面向对象编程，Oriented Object Programming</li></ul></li><li>小游戏练习</li><li>理解 -&gt; 想法 -&gt; 实践 -&gt; 理解 -&gt; ....</li></ul><h3 id="_2-类的继承" tabindex="-1"><a class="header-anchor" href="#_2-类的继承" aria-hidden="true">#</a> 2.类的继承</h3><h4 id="_1-继承的作用" tabindex="-1"><a class="header-anchor" href="#_1-继承的作用" aria-hidden="true">#</a> 1）继承的作用</h4><ul><li>继承可以描述类与类之间的关系</li></ul><blockquote><p>坦克、玩家坦克、敌方坦克</p><br><p>玩家坦克是坦克，敌方坦克是坦克</p></blockquote><ul><li>如果 A 和 B 都是类，并且可以描述为 A 是 B，则 A 和 B 形成继承关系 <ul><li>B 是父类，A 是子类</li><li>B 派生 A，A 继承自 B</li><li>B 是 A 的基类，A 是 B 的派生类</li></ul></li><li>如果 A 继承自 B，则 A 中自动拥有 B 中的所有成员</li></ul>',15),d=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出生坐标</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EnemyTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-成员的重写" tabindex="-1"><a class="header-anchor" href="#_2-成员的重写" aria-hidden="true">#</a> 2）成员的重写</h4><ul><li>重写 Override <ul><li>子类中覆盖父类的成员</li></ul></li><li>子类成员不能改变父类成员的类型</li><li>无论是属性还是方法，子类都可以对父类的相应成员进行重写 <ul><li>但是重写时，需要保证 <mark>类型的匹配</mark></li></ul></li><li>注意 this 关键字 <ul><li>在继承关系中，this 的指向是动态的</li><li>调用方法时，根据 <mark>具体的调用者</mark> 确定 this 指向</li></ul></li><li>注意 super 关键字 <ul><li>在子类的方法中，可以使用 super 关键字读取父类成员</li><li>如果子类没有同名成员，可以使用 this 调用</li><li>如果子类有同名成员，this 调用的是子类自身的，super 才能调用父类的</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token comment">// 出生坐标</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;坦克&quot;</span><span class="token punctuation">;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;玩家坦克发射子弹&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;玩家坦克&quot;</span><span class="token punctuation">;</span>

  <span class="token function">mySayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EnemyTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;敌方坦克发射子弹&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;敌方坦克&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>x<span class="token punctuation">,</span> t<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 0</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 20</span>
p<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 玩家坦克发射子弹</span>
p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是一个玩家坦克</span>
p<span class="token punctuation">.</span><span class="token function">mySayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是一个玩家坦克</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-类型匹配" tabindex="-1"><a class="header-anchor" href="#_3-类型匹配" aria-hidden="true">#</a> 3）类型匹配</h4><ul><li>主要原则是 <mark>鸭子辨型法</mark></li><li>子类的对象，始终可以赋值给父类 <ul><li>面向对象中，这种现象叫做里氏替换原则</li></ul></li><li>如果需要判断一个数据的具体子类类型，可以使用 <code>instanceof</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;坦克&quot;</span><span class="token punctuation">;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;玩家坦克&quot;</span><span class="token punctuation">;</span>
  life<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EnemyTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;敌方坦克&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p<span class="token operator">:</span> Tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是一个玩家坦克</span>
<span class="token comment">// console.log(p.life); // 报错，只能使用Tank和PlayerTank共有的属性</span>

<span class="token comment">// 类型保护</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">PlayerTank</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>life<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5，可以确定当前行的p一定是PlayerTank</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-protected-修饰符" tabindex="-1"><a class="header-anchor" href="#_4-protected-修饰符" aria-hidden="true">#</a> 4）protected 修饰符</h4><table><thead><tr><th>修饰符</th><th>包含</th></tr></thead><tbody><tr><td>只读修饰符</td><td>readonly</td></tr><tr><td>访问权限修饰符</td><td>private、public、protected</td></tr></tbody></table><ul><li>受保护的成员，只能在自身和子类中访问</li><li>不会出现在编译结果中</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;坦克&quot;</span><span class="token punctuation">;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是一个</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EnemyTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;敌方坦克&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-单根性和传递性" tabindex="-1"><a class="header-anchor" href="#_5-单根性和传递性" aria-hidden="true">#</a> 5）单根性和传递性</h4><ul><li>单根性 <ul><li>每个类最多只能拥有一个父类</li></ul></li><li>传递性 <ul><li>如果 A 是 B 的父类，并且 B 是 C 的父类</li><li>则可以认为 A 也是 C 的父类</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;坦克&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayerTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EnemyTank</span> <span class="token keyword">extends</span> <span class="token class-name">Tank</span> <span class="token punctuation">{</span>
  health<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">BossTank</span> <span class="token keyword">extends</span> <span class="token class-name">EnemyTank</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;敌方坦克&quot;</span><span class="token punctuation">;</span>
  health<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BossTank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>health<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 敌方坦克 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-抽象类" tabindex="-1"><a class="header-anchor" href="#_3-抽象类" aria-hidden="true">#</a> 3.抽象类</h3><h4 id="_1-为什么需要抽象类" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要抽象类" aria-hidden="true">#</a> 1）为什么需要抽象类</h4>`,16),v=t(`<ul><li>某个类只表示一个抽象概念 <ul><li>主要用于提取子类共有的成员，而不能直接创建它的对象</li></ul></li><li>该类可以作为抽象类</li><li>给类前面加上 <code>abstract</code><ul><li>表示该类是一个抽象类，只用于继承</li><li>不可以创建一个抽象类的对象</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// class Chess {}</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pao</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Soldier</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Soldier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// const c = new Chess(); // 不应该创建这个对象 =&gt; 转换为抽象概念</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-抽象成员" tabindex="-1"><a class="header-anchor" href="#_2-抽象成员" aria-hidden="true">#</a> 2）抽象成员</h4><ul><li>父类中，可能知道有些成员是必须存在的，但是不知道该成员的值或实现是什么</li><li>因此，需要有一种强约束，让继承该类的子类必须要实现该成员</li><li>抽象类中可以有抽象成员，这些抽象成员必须在子类中实现</li><li>有三种实现方式 <ul><li>普通声明属性</li><li>构造函数中声明</li><li>读取器中声明</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// // 无法确定具体名字</span>
  <span class="token comment">// readonly name: string = &quot;&quot;;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token keyword">abstract</span> <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Horse&quot;</span><span class="token punctuation">;</span>
  <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> targetX<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> targetY<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;马走日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pao</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Pao&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> targetX<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> targetY<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;炮可以跳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Soldier</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Soldier&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> targetX<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> targetY<span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;兵只能走一格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-设计模式-——-模板模式" tabindex="-1"><a class="header-anchor" href="#_3-设计模式-——-模板模式" aria-hidden="true">#</a> 3）设计模式 —— 模板模式</h4><ul><li>设计模式 <ul><li>面对一些常见的功能场景，有一些固定的、经过多年实践的成熟方法</li><li>这些方法称之为设计模式</li></ul></li><li>模板模式 <ul><li>有些方法，所有的子类实现的流程完全一致，只是流程中的某个步骤的具体实现不一致</li><li>可以将该方法提取到父类，在父类中完成整个流程的实现</li><li>遇到实现不一致的方法时，将该方法做成抽象方法</li></ul></li><li>避免了子类重复调用父类的方法</li><li>对流程的调用顺序和方式作了强约束，方便团队协作</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义子类统一的流程作为模板</span>
  <span class="token function">move</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1.边界判断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;2.目前为止是否有己方棋子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.棋子移动规则判断【子类实现不一致】</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token punctuation">,</span> targetY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> targetX<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> targetY<span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;移动成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Pao</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Soldier</span> <span class="token keyword">extends</span> <span class="token class-name">Chess</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token function">rule</span><span class="token punctuation">(</span>targetX<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> targetY<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-静态成员" tabindex="-1"><a class="header-anchor" href="#_4-静态成员" aria-hidden="true">#</a> 4.静态成员</h3><h4 id="_1-什么是静态成员" tabindex="-1"><a class="header-anchor" href="#_1-什么是静态成员" aria-hidden="true">#</a> 1）什么是静态成员</h4><ul><li>附着在类上的成员（属于某个构造函数的成员） <ul><li>使用 static 修饰的成员</li></ul></li><li>实例成员 <ul><li>对象成员，属于某个类的对象</li><li>需要通过实例调用</li><li>逻辑上每个实例对象不同的属性或方法</li></ul></li><li>静态成员 <ul><li>非实例成员，属于某个类</li><li>直接通过类名调用</li><li>逻辑上每个类的实例共有的属性或方法</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">public</span> loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">/**
   * 该方法是实例方法，必须通过实例调用
   * 但是该方法就是为了生成实例对象，冲突了
   */</span>
  <span class="token comment">// login(loginId: string, loginPwd: string): User | undefined {</span>
  <span class="token comment">//   return undefined;</span>
  <span class="token comment">// }</span>

  <span class="token comment">/**
   * 相当于JS写法
   *    User.login = function (loginId, loginPwd) {}
   * 该方法是静态方法，必须通过类名调用
   */</span>
  <span class="token keyword">static</span> <span class="token function">login</span><span class="token punctuation">(</span>loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

User<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-静态方法中的-this" tabindex="-1"><a class="header-anchor" href="#_2-静态方法中的-this" aria-hidden="true">#</a> 2）静态方法中的 this</h4><ul><li>实例方法中的 this 指向的是 <mark>当前对象</mark></li><li>静态方法中的 this 指向的是 <mark>当前类</mark></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token comment">// 不同实例对象应该获得同一个用户列表，所以应该是静态成员</span>
  <span class="token keyword">static</span> users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">public</span> loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 将新创建的用户加入数组中
     */</span>
    <span class="token comment">// this.users.push(this); // 报错，第一个this本意是指向类，但在构造函数（实例方法）中指向当前对象</span>
    User<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁，账号是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">login</span><span class="token punctuation">(</span>loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token comment">// return User.users.find(</span>
    <span class="token comment">//   (u: User) =&gt; u.loginId === loginId &amp;&amp; u.loginPwd === loginPwd</span>
    <span class="token comment">// );</span>
    <span class="token comment">// 等同于</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>u<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>loginId <span class="token operator">===</span> loginId <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span>loginPwd <span class="token operator">===</span> loginPwd
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-设计模式-——-单例模式" tabindex="-1"><a class="header-anchor" href="#_3-设计模式-——-单例模式" aria-hidden="true">#</a> 3）设计模式 —— 单例模式</h4><ul><li>某些类在系统中最多只能有一个对象</li><li>为了避免开发者造成随意创建多个类对象的错误，可以使用单例模式进行强约束</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Board</span> <span class="token punctuation">{</span>
  width<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
  height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">700</span><span class="token punctuation">;</span>

  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;初始化棋盘&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 1.构造函数私有化，禁止使用new创建对象</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">/**
   * 写法一
   * 推荐
   */</span>
  <span class="token comment">// 2.定义私有的静态成员，表示该类在系统中唯一的对象</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> _board<span class="token operator">?</span><span class="token operator">:</span> Board<span class="token punctuation">;</span>
  <span class="token comment">// 3.定义公有的静态方法，只能调用该方法创建对象，内部返回系统中唯一的对象</span>
  <span class="token keyword">static</span> <span class="token function">createBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Board <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_board<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Board</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_board<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 写法二
   * 无法在需要时再创建对象
   * 无法实现在创建对象时完成其他操作
   */</span>
  <span class="token comment">// static readonly singleBoard = new Board();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-再谈接口" tabindex="-1"><a class="header-anchor" href="#_5-再谈接口" aria-hidden="true">#</a> 5.再谈接口</h3><ul><li>接口用于约束类、对象、函数，是一个类型契约</li></ul><blockquote><p>有一个马戏团，马戏团中有很多动物，包括：狮子、老虎、猴子、狗</p><br><p>这些动物都具有共同的特征：名字、年龄、种类名称，还包含一个共同的方法：打招呼</p><br><p>它们各自有各自的技能，技能是可以通过训练改变的</p><br><p>狮子和老虎能进行火圈表演，猴子能进行平衡表演，狗能进行智慧表演</p><br><p>马戏团中有以下常见的技能：</p><ul><li>火圈表演：单火圈、双火圈</li><li>平衡表演：独木桥、走钢丝</li><li>智慧表演：算术题、跳舞</li></ul></blockquote><h4 id="_1-不使用接口实现" tabindex="-1"><a class="header-anchor" href="#_1-不使用接口实现" aria-hidden="true">#</a> 1）不使用接口实现</h4><ul><li>对能力（成员函数）没有强约束力</li><li>容易将类型和能力耦合在一起</li><li>根本原因：系统中缺少对能力的定义</li></ul><h4 id="_2-接口基本使用" tabindex="-1"><a class="header-anchor" href="#_2-接口基本使用" aria-hidden="true">#</a> 2）接口基本使用</h4><ul><li>面向对象领域中的接口</li><li>表达了某个类是否拥有某种能力</li><li>某个类具有某种能力，其实就是实现了某种接口</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// interface.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IFireShow</span> <span class="token punctuation">{</span>
  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IFireShow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./interfaces&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">IFireShow</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;老虎&quot;</span><span class="token punctuation">;</span>

  <span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">穿越了单火圈</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">穿越了双火圈</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Java 中可以使用 <code>a instanceof b</code> 判断 a 是否继承了接口 b <ul><li>但由于 TS 编译后没有接口，且判断是在运行时执行</li><li>所以 TS 只能通过类型保护函数判断是否继承了接口</li></ul></li><li>类型保护函数 <ul><li>通过调用该函数，会触发 TS 的类型保护，该函数必须返回 boolean</li><li>返回值 <code>ani is IFireShow</code> 表示 ani 对象是否具有 IFireShow 类型</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// interface.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hasFireShow</span><span class="token punctuation">(</span>ani<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> ani <span class="token keyword">is</span> IFireShow <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ani <span class="token keyword">as</span> IFireShow<span class="token punctuation">)</span><span class="token punctuation">.</span>singleFire <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ani <span class="token keyword">as</span> IFireShow<span class="token punctuation">)</span><span class="token punctuation">.</span>doubleFire<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts</span>
animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasFireShow</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">.</span><span class="token function">singleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">doubleFire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-接口和类型别名的区别" tabindex="-1"><a class="header-anchor" href="#_3-接口和类型别名的区别" aria-hidden="true">#</a> 3）接口和类型别名的区别</h4><ul><li><mark>接口可以被类实现，而类型别名不可以</mark></li><li>接口可以继承类，表示该类的所有成员都在接口中【TS 特有】 <ul><li>用于合并多个类成员</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  a1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  a2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  a3<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>
  b1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  b2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  b3<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a1<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  a2<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  a3<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  b1<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  b2<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  b3<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-索引器" tabindex="-1"><a class="header-anchor" href="#_6-索引器" aria-hidden="true">#</a> 6.索引器</h3><ul><li>使用成员表达式 <code>对象[值]</code> ，其实就是索引器</li><li>在 TS 中，默认情况下，不对索引器（成员表达式）做严格的类型检查 <ul><li><code>const name = user[&quot;pid&quot;];</code> 访问不存在的属性不报错，返回 undefined</li><li>因为成员表达式访问的属性可能是执行时才能确定属性名</li></ul></li></ul><h4 id="_1-隐式-any" tabindex="-1"><a class="header-anchor" href="#_1-隐式-any" aria-hidden="true">#</a> 1）隐式 any</h4><ul><li>可以使用配置 <code>noImplicitAny</code> 开启对隐式 any 的检查</li><li>TS 根据实际情况推导出的 any 类型</li></ul><h4 id="_2-ts-中使用索引器" tabindex="-1"><a class="header-anchor" href="#_2-ts-中使用索引器" aria-hidden="true">#</a> 2）TS 中使用索引器</h4><ul><li>在索引器中，键的类型可以是字符串，也可以是数字</li><li>在类中，索引器书写的位置应该是 <mark>所有成员之前</mark></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token comment">// 针对所有成员</span>
  <span class="token comment">// [prop: string]: any;</span>
  <span class="token comment">// 或者</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span><span class="token string">&quot;pid&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
u<span class="token punctuation">[</span><span class="token string">&quot;sayHello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 JS 中，所有的成员名本质上，都是字符串</li><li>如果使用数字作为成员名，会自动转换为字符串</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
  <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">&quot;ass&quot;</span><span class="token punctuation">;</span>
  <span class="token number">2</span> <span class="token operator">=</span> <span class="token string">&quot;sfdg&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
  编译结果：
  class MyArray {
    constructor() {
      this[0] = &quot;1&quot;
    }
  }
*/</span>

<span class="token keyword">const</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
my<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">面试题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-ts-中索引器的作用" tabindex="-1"><a class="header-anchor" href="#_3-ts-中索引器的作用" aria-hidden="true">#</a> 3）TS 中索引器的作用</h4><ul><li>在严格的检查下，可以实现为类动态增加成员</li><li>可以实现动态的操作类成员</li><li>在 TS 中，如果某个类中使用了两种类型的索引器 <ul><li>要求两种索引器的值类型必须匹配</li><li>如果类型不一致，两个类型必须是父子关系</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">B</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> object<span class="token punctuation">;</span>
  <span class="token comment">// B 是 object 的子类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-this-指向约束" tabindex="-1"><a class="header-anchor" href="#_7-this-指向约束" aria-hidden="true">#</a> 7.this 指向约束</h3>`,45),m={href:"https://yehudakatz.com/2011/08/10/understanding-javascript-function-invocation-and-this/",target:"_blank",rel:"noopener noreferrer"},b=t(`<h4 id="_1-在-js-中-this-指向的几种情况" tabindex="-1"><a class="header-anchor" href="#_1-在-js-中-this-指向的几种情况" aria-hidden="true">#</a> 1）在 JS 中 this 指向的几种情况</h4><ul><li>大部分时候，this 的指向取决于函数的 <mark>调用方式</mark></li></ul><table><thead><tr><th>调用方式</th><th>this 指向</th></tr></thead><tbody><tr><td>直接调用函数（全局调用）</td><td>全局对象 Window/global<br>或启用严格模式：undefined</td></tr><tr><td>使用 <code>对象.方法</code> 调用</td><td>对象本身</td></tr><tr><td>dom 事件的处理函数</td><td>事件处理对象</td></tr><tr><td>特殊：箭头函数</td><td>在函数 <mark>声明时</mark> 确定指向<br>指向函数位置的 this</td></tr><tr><td>特殊：使用 bind、apply、call</td><td>手动绑定 this 对象</td></tr></tbody></table><h4 id="_2-ts-中的-this" tabindex="-1"><a class="header-anchor" href="#_2-ts-中的-this" aria-hidden="true">#</a> 2）TS 中的 this</h4><ul><li>不同方式调用函数时，this 的类型不同</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;ssf&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this 为 any</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this 为 类的实例对象</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置 <code>noImplicitThis</code><ul><li>表示不允许 this 隐式的指向 any</li></ul></li><li>在 TS 中，允许在书写函数时，手动声明该函数中 this 的指向 <ul><li>将 this 作为函数的第一个参数</li><li>该参数只用于约束 this</li><li>并不是真正的参数，也不会出现在编译结果中</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> IUser<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 字面量约束this</span>
<span class="token keyword">const</span> u<span class="token operator">:</span> IUser <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;ssf&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>
  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> say <span class="token operator">=</span> u<span class="token punctuation">.</span>sayHello<span class="token punctuation">;</span>
<span class="token comment">// say(); // 报错，这样调用this指向不明</span>

<span class="token comment">// 类约束this</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> IUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this 为 类的实例对象</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-项目实战-使用-webpack-ts-开发俄罗斯方块" tabindex="-1"><a class="header-anchor" href="#二-项目实战-使用-webpack-ts-开发俄罗斯方块" aria-hidden="true">#</a> （二）项目实战：使用 Webpack + TS 开发俄罗斯方块</h2><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h3><h4 id="_1-技术栈" tabindex="-1"><a class="header-anchor" href="#_1-技术栈" aria-hidden="true">#</a> 1）技术栈</h4><ul><li>Webpack</li><li>jQuery</li><li>TypeScript</li><li>面向对象开发</li></ul><h4 id="_2-项目目的" tabindex="-1"><a class="header-anchor" href="#_2-项目目的" aria-hidden="true">#</a> 2）项目目的</h4><ul><li>学习 TS 如何结合 Webpack 做开发</li><li>巩固 TS 的知识</li><li>锻炼逻辑思维能力</li><li>体验面向对象编程的思想</li></ul><h3 id="_2-工程搭建" tabindex="-1"><a class="header-anchor" href="#_2-工程搭建" aria-hidden="true">#</a> 2.工程搭建</h3><h4 id="_1-环境" tabindex="-1"><a class="header-anchor" href="#_1-环境" aria-hidden="true">#</a> 1）环境</h4><ul><li>浏览器</li><li>模块化</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;clean-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;html-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;ts-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.4.5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.4.5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.30.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.3.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;webpack-dev-server&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.3.1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --mode=production&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式打包</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server&quot;</span> <span class="token comment">// 启动服务器</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;teris-game&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MIT&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-webpack" tabindex="-1"><a class="header-anchor" href="#_2-webpack" aria-hidden="true">#</a> 2）Webpack</h4><ul><li>构建工具，根据入口文件寻找依赖，打包</li><li>安装 webpack</li><li>安装 html-webpack-plugin</li><li>安装 clean-webpack-plugin</li><li>安装 webpack-dev-server</li><li>安装 TS 的相应 loader <ul><li>ts-loader【官方】</li><li>awesome-typescript-loader【民间】</li></ul></li><li>本地项目依赖 typescript</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 启动文件/入口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 出口文件</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 根目录</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;script/bundle.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 文件位置</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 生成页面的模板</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 清空上次打包输出的文件</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 加载规则</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;ts-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">transpileOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析模块时读取的扩展名</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-系统模式" tabindex="-1"><a class="header-anchor" href="#_3-系统模式" aria-hidden="true">#</a> 3）系统模式</h4><ul><li>单一职能原则 <ul><li>每个类只做跟它相关的一件事</li></ul></li><li>开闭原则 <ul><li>系统中的类，应该对扩展开放，对修改关闭</li></ul></li><li>基于以上两个原则，采取数据-界面分离模式 <ul><li>如：React 中的展示组件和容器组件</li><li>react 库负责处理数据，react-dom/react-native 库负责页面展示</li></ul></li></ul><h3 id="_3-开发小方块类-square" tabindex="-1"><a class="header-anchor" href="#_3-开发小方块类-square" aria-hidden="true">#</a> 3.开发小方块类 Square</h3><div class="hint-container tip"><p class="hint-container-title">传统面向对象语言书写类属性时</p><ul><li>所有的属性全部私有化 <ul><li>Java：私有变量正常命名</li><li>C#：私有变量以 <code>_</code> 开头</li></ul></li><li>使用公开的方法提供对属性的访问 <ul><li>Java：使用公共的方法 <code>getX</code>、<code>setX</code></li><li>C#：使用访问器 <code>get x</code>、<code>set x</code></li></ul></li></ul></div><h4 id="_1-逻辑坐标" tabindex="-1"><a class="header-anchor" href="#_1-逻辑坐标" aria-hidden="true">#</a> 1）逻辑坐标</h4><ul><li>以任意面板左上角为原点，小方块左上角的坐标</li><li>与真实的像素值无关</li></ul><h4 id="_2-完成显示" tabindex="-1"><a class="header-anchor" href="#_2-完成显示" aria-hidden="true">#</a> 2）完成显示</h4><ul><li>能处理自己的数据，知道什么时候需要显示，但不知道怎么显示</li><li>只需要在类中定义一个属性，绑定显示者</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> IViewer<span class="token punctuation">,</span> Point <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> _point<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_point<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">point</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_point <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token comment">// 完成显示</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> _color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">color</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_color <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 属性：显示者</span>
  <span class="token keyword">private</span> _viewer<span class="token operator">?</span><span class="token operator">:</span> IViewer<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">viewer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">viewer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-开发小方块的显示类-squarepageviewer" tabindex="-1"><a class="header-anchor" href="#_4-开发小方块的显示类-squarepageviewer" aria-hidden="true">#</a> 4.开发小方块的显示类 SquarePageViewer</h3><ul><li>用于将一个小方块显示到页面上</li></ul><h3 id="_5-开发方块的组合类-squaregroup" tabindex="-1"><a class="header-anchor" href="#_5-开发方块的组合类-squaregroup" aria-hidden="true">#</a> 5.开发方块的组合类 SquareGroup</h3><h4 id="_1-属性-1-小方块的数组" tabindex="-1"><a class="header-anchor" href="#_1-属性-1-小方块的数组" aria-hidden="true">#</a> 1）属性 1：小方块的数组</h4><ul><li>该数组的组成不能发生变化，是只读数组</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> _squares<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span>Square<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
<span class="token keyword">private</span> _squares<span class="token operator">:</span> <span class="token keyword">readonly</span> Square<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-属性-2-形状" tabindex="-1"><a class="header-anchor" href="#_2-属性-2-形状" aria-hidden="true">#</a> 2）属性 2：形状</h4><ul><li>一个方块的组合，取决于组合的形状 <ul><li>一组相对坐标的组合，该组合中有一个特殊坐标，表示形状的中心</li></ul></li><li>如果知道形状、中心点坐标、颜色，就可以设置小方块的数组</li><li>中心点坐标设为 (0, 0)，每一个方块的坐标设为相对中心点坐标的坐标 <ul><li>这样整个方块组合移动、旋转时，都可以通过控制中心点坐标来实现</li><li>中心点其实是当前方块组合任意一个方块</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Square&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Shape <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SquareGroup</span> <span class="token punctuation">{</span>
  <span class="token comment">// 只读数组</span>
  <span class="token comment">// private _squares: ReadonlyArray&lt;Square&gt;;</span>
  <span class="token keyword">private</span> _squares<span class="token operator">:</span> <span class="token keyword">readonly</span> Square<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> _shape<span class="token operator">:</span> Shape<span class="token punctuation">,</span> <span class="token comment">// 各个方块相对中心点的坐标</span>
    <span class="token keyword">private</span> _centerPoint<span class="token operator">:</span> Point<span class="token punctuation">,</span> <span class="token comment">// 中心点的坐标</span>
    <span class="token keyword">private</span> _color<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置小方块的数组</span>
    <span class="token keyword">const</span> arr<span class="token operator">:</span> Square<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_shape<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      sq<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_color<span class="token punctuation">;</span>
      sq<span class="token punctuation">.</span>point <span class="token operator">=</span> <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
        y<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_squares <span class="token operator">=</span> arr<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">squares</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_squares<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 设置访问器
   * 修改中心点坐标后同步修改方块组合的坐标
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">centerPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Point <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">centerPoint</span><span class="token punctuation">(</span>v<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_shape<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_squares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>point <span class="token operator">=</span> <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
        y<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_centerPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-俄罗斯方块的生产者" tabindex="-1"><a class="header-anchor" href="#_6-俄罗斯方块的生产者" aria-hidden="true">#</a> 6.俄罗斯方块的生产者</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 随机产生一个俄罗斯方块
 * @param centerPoint 中心点坐标
 * @description 颜色随机，形状（其他方块坐标）随机
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createTeris</span> <span class="token operator">=</span> <span class="token punctuation">(</span>centerPoint<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> shapes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> shape <span class="token operator">=</span> shapes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// index = getRandom(0, colors.length);</span>
  <span class="token comment">// const color = colors[index];</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">256</span>
  <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SquareGroup</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> centerPoint<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-俄罗斯方块的规则类" tabindex="-1"><a class="header-anchor" href="#_7-俄罗斯方块的规则类" aria-hidden="true">#</a> 7.俄罗斯方块的规则类</h3><ul><li>提供一系列函数，根据游戏规则判断各种情况</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> GameConfig <span class="token keyword">from</span> <span class="token string">&quot;./GameConfig&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SquareGroup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./SquareGroup&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> MoveDirection<span class="token punctuation">,</span> Point<span class="token punctuation">,</span> Shape <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 类型保护函数
 * @param obj 判断对象
 * @returns 是否是 Point 类型
 */</span>
<span class="token keyword">const</span> isPoint <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> obj <span class="token keyword">is</span> Point <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>x <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TerisRule</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 判断某个形状的方块，是否能移动到目标位置
   * @param shape 方块形状
   * @param targetPoint 目标位置
   * @returns 是否能移动
   */</span>
  <span class="token keyword">static</span> <span class="token function">canIMove</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">,</span> targetPoint<span class="token operator">:</span> Point<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.假设中心点已经移动到了目标位置，算出每个方块坐标</span>
    <span class="token keyword">const</span> targetSquarePoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> shape<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      x<span class="token operator">:</span> s<span class="token punctuation">.</span>x <span class="token operator">+</span> targetPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
      y<span class="token operator">:</span> s<span class="token punctuation">.</span>y <span class="token operator">+</span> targetPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.边界判断：至少有一个方块坐标不在面板内</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      targetSquarePoints<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          p<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
          p<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> GameConfig<span class="token punctuation">.</span>panelSize<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span>
          p<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>
          p<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> GameConfig<span class="token punctuation">.</span>panelSize<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// /**</span>
  <span class="token comment">//  * 将方块移动到目标位置</span>
  <span class="token comment">//  * @param teris 待移动的方块</span>
  <span class="token comment">//  * @param targetPoint 目标位置</span>
  <span class="token comment">//  * @returns 是否移动成功</span>
  <span class="token comment">//  */</span>
  <span class="token comment">// static move(teris: SquareGroup, targetPoint: Point): boolean {}</span>

  <span class="token comment">// /**</span>
  <span class="token comment">//  * 将方块每次向目标方向移动1格</span>
  <span class="token comment">//  * @param teris 待移动的方块</span>
  <span class="token comment">//  * @param direction 目标方向</span>
  <span class="token comment">//  * @returns 是否移动成功</span>
  <span class="token comment">//  */</span>
  <span class="token comment">// static move(teris: SquareGroup, direction: MoveDirection): boolean {}</span>

  <span class="token comment">/**
   * 函数重载
   */</span>
  <span class="token keyword">static</span> <span class="token function">move</span><span class="token punctuation">(</span>teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">,</span> targetPoint<span class="token operator">:</span> Point<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">move</span><span class="token punctuation">(</span>teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">,</span> direction<span class="token operator">:</span> MoveDirection<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">move</span><span class="token punctuation">(</span>
    teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">,</span>
    targetPointOrDirection<span class="token operator">:</span> Point <span class="token operator">|</span> MoveDirection
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPoint</span><span class="token punctuation">(</span>targetPointOrDirection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">canIMove</span><span class="token punctuation">(</span>teris<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> targetPointOrDirection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        teris<span class="token punctuation">.</span>centerPoint <span class="token operator">=</span> targetPointOrDirection<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> direction <span class="token operator">=</span> targetPointOrDirection<span class="token punctuation">;</span>
      <span class="token keyword">let</span> targetPoint<span class="token operator">:</span> Point<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> MoveDirection<span class="token punctuation">.</span>down<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        targetPoint <span class="token operator">=</span> <span class="token punctuation">{</span>
          x<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
          y<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">===</span> MoveDirection<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        targetPoint <span class="token operator">=</span> <span class="token punctuation">{</span>
          x<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
          y<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        targetPoint <span class="token operator">=</span> <span class="token punctuation">{</span>
          x<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
          y<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>teris<span class="token punctuation">,</span> targetPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 将当前的方块，移动到目标方向的终点
   * @param teris 待移动的方块
   * @param direction 目标方向
   */</span>
  <span class="token keyword">static</span> <span class="token function">moveDirectly</span><span class="token punctuation">(</span>teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">,</span> direction<span class="token operator">:</span> MoveDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>teris<span class="token punctuation">,</span> direction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-开发旋转功能" tabindex="-1"><a class="header-anchor" href="#_8-开发旋转功能" aria-hidden="true">#</a> 8.开发旋转功能</h3><h4 id="_1-旋转的本质" tabindex="-1"><a class="header-anchor" href="#_1-旋转的本质" aria-hidden="true">#</a> 1）旋转的本质</h4><ul><li>根据当前形状，生成新的形状</li><li>顺时针：(x, y) =&gt; (-y, x)</li><li>逆时针：(x, y) =&gt; (y, -x)</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// SquareGroup.ts</span>
<span class="token comment">// 旋转方向是否为顺时针</span>
<span class="token keyword">protected</span> isClock<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 根据当前形状，生成新的形状
 */</span>
<span class="token function">afterRotateShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Shape <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>isClock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_shape<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      x<span class="token operator">:</span> <span class="token operator">-</span>p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
      y<span class="token operator">:</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_shape<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    x<span class="token operator">:</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
    y<span class="token operator">:</span> <span class="token operator">-</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-旋转的状态" tabindex="-1"><a class="header-anchor" href="#_2-旋转的状态" aria-hidden="true">#</a> 2）旋转的状态</h4><ul><li>有些方块是不旋转的 <ul><li>如：“田”型</li></ul></li><li>有些方块旋转时只有两种状态 <ul><li>如：“Z”型顺逆时针分步旋转</li></ul></li><li>rotate 方法有一种通用的实现方式 <ul><li>但是不同的情况下，会有不同的具体实现</li><li>模板模式</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>将 SquareGroup 作为父类 <ul><li>其他的方块都是它的子类，子类可以重写父类的方法</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SShape</span> <span class="token keyword">extends</span> <span class="token class-name">SquareGroup</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_centerPoint<span class="token operator">:</span> Point<span class="token punctuation">,</span> _color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>
      <span class="token punctuation">[</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      _centerPoint<span class="token punctuation">,</span>
      _color
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isClock <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isClock<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SquareShape</span> <span class="token keyword">extends</span> <span class="token class-name">SquareGroup</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>_centerPoint<span class="token operator">:</span> Point<span class="token punctuation">,</span> _color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>
      <span class="token punctuation">[</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      _centerPoint<span class="token punctuation">,</span>
      _color
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回当前形状 =&gt; 不旋转</span>
  <span class="token function">afterRotateShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Shape <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shape<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> createTeris <span class="token operator">=</span> <span class="token punctuation">(</span>centerPoint<span class="token operator">:</span> Point<span class="token punctuation">)</span><span class="token operator">:</span> SquareGroup <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> shapes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> shape <span class="token operator">=</span> shapes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getRandom</span><span class="token punctuation">(</span>
    <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token number">256</span>
  <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">shape</span><span class="token punctuation">(</span>centerPoint<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>旋转不能超出边界</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 旋转
 * @param teris 待旋转的方块
 * @returns 是否可以旋转（旋转后是否超出边界）
 */</span>
<span class="token keyword">static</span> <span class="token function">rotate</span><span class="token punctuation">(</span>teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newShape <span class="token operator">=</span> teris<span class="token punctuation">.</span><span class="token function">afterRotateShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">canIMove</span><span class="token punctuation">(</span>newShape<span class="token punctuation">,</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    teris<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-开发游戏类" tabindex="-1"><a class="header-anchor" href="#_9-开发游戏类" aria-hidden="true">#</a> 9.开发游戏类</h3><ul><li>清楚什么时候进行显示的切换，但不知道如何显示</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> GameConfig <span class="token keyword">from</span> <span class="token string">&quot;./GameConfig&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SquareGroup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./SquareGroup&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createTeris <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Teris&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TerisRule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./TerisRule&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GameStatus<span class="token punctuation">,</span> GameViewer<span class="token punctuation">,</span> MoveDirection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
  <span class="token comment">// 游戏状态</span>
  <span class="token keyword">private</span> _gameStatus<span class="token operator">:</span> GameStatus <span class="token operator">=</span> GameStatus<span class="token punctuation">.</span>init<span class="token punctuation">;</span>
  <span class="token comment">// 当前操作的方块组</span>
  <span class="token keyword">private</span> _currentTeris<span class="token operator">?</span><span class="token operator">:</span> SquareGroup<span class="token punctuation">;</span>
  <span class="token comment">// 下一个方块组</span>
  <span class="token keyword">private</span> _nextTeris<span class="token operator">:</span> SquareGroup <span class="token operator">=</span> <span class="token function">createTeris</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 下落计时器</span>
  <span class="token keyword">private</span> _timer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token comment">// 下落间隔时间</span>
  <span class="token keyword">private</span> _duration<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> _viewer<span class="token operator">:</span> GameViewer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCenterPoint</span><span class="token punctuation">(</span>GameConfig<span class="token punctuation">.</span>nextSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">showNext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 游戏开始
   */</span>
  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">=</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">;</span>
    <span class="token comment">// 给当前玩家操作的方块组赋值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switchTeris</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 游戏暂停
   */</span>
  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">=</span> GameStatus<span class="token punctuation">.</span>pause<span class="token punctuation">;</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_timer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 操作向左
   */</span>
  <span class="token function">controlLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      TerisRule<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">,</span> MoveDirection<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 操作向右
   */</span>
  <span class="token function">controlRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      TerisRule<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">,</span> MoveDirection<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 操作向下
   */</span>
  <span class="token function">controlDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      TerisRule<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">,</span> MoveDirection<span class="token punctuation">.</span>down<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 操作旋转
   */</span>
  <span class="token function">controlRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">===</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      TerisRule<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 更新当前方块组
   */</span>
  <span class="token keyword">private</span> <span class="token function">switchTeris</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris<span class="token punctuation">;</span>
    <span class="token comment">// 新方块组在面板中居中下落</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCenterPoint</span><span class="token punctuation">(</span>GameConfig<span class="token punctuation">.</span>panelSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris <span class="token operator">=</span> <span class="token function">createTeris</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下一个方块组在右侧区域中居中</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCenterPoint</span><span class="token punctuation">(</span>GameConfig<span class="token punctuation">.</span>nextSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">switchNext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">showNext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_nextTeris<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 方块组自由下落
   */</span>
  <span class="token keyword">private</span> <span class="token function">autoDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timer <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gameStatus <span class="token operator">!==</span> GameStatus<span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris <span class="token operator">&amp;&amp;</span>
        TerisRule<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_currentTeris<span class="token punctuation">,</span> MoveDirection<span class="token punctuation">.</span>down<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 重新计算中心点坐标，使该方块出现在特定区域的中上方
   * @param width 逻辑宽度（一个格子宽度）
   * @param teris 要计算中心点坐标的方块组
   */</span>
  <span class="token keyword">private</span> <span class="token function">resetCenterPoint</span><span class="token punctuation">(</span>width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> teris<span class="token operator">:</span> SquareGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.先更新中心点坐标</span>
    <span class="token keyword">const</span> x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    teris<span class="token punctuation">.</span>centerPoint <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.判断纵轴方向是否超出区域上方</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>teris<span class="token punctuation">.</span>squares<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sq<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sq<span class="token punctuation">.</span>point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// // 如果区域高度只有一格（游戏设置问题），程序会死循环</span>
      <span class="token comment">// TerisRule.move(teris, MoveDirection.down);</span>
      <span class="token comment">// 强制下移一格</span>
      teris<span class="token punctuation">.</span>centerPoint <span class="token operator">=</span> <span class="token punctuation">{</span>
        x<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
        y<span class="token operator">:</span> teris<span class="token punctuation">.</span>centerPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-触底处理" tabindex="-1"><a class="header-anchor" href="#_10-触底处理" aria-hidden="true">#</a> 10.触底处理</h3><h4 id="_1-触底" tabindex="-1"><a class="header-anchor" href="#_1-触底" aria-hidden="true">#</a> 1）触底</h4><ul><li>当前方块到达最底部</li></ul><h4 id="_2-触底时机-调用函数时机" tabindex="-1"><a class="header-anchor" href="#_2-触底时机-调用函数时机" aria-hidden="true">#</a> 2）触底时机（调用函数时机）</h4><ul><li>自动下落</li><li>玩家控制下落</li></ul><h4 id="_3-触底后-函数如何编写" tabindex="-1"><a class="header-anchor" href="#_3-触底后-函数如何编写" aria-hidden="true">#</a> 3）触底后（函数如何编写）</h4><ul><li>切换当前方块</li><li>保存已落下的方块</li><li>消除方块的处理 <ul><li>从界面上移除</li><li>从 exists 数组中移除</li><li>改变删除行上方的方块 y 坐标</li></ul></li><li>游戏是否结束 <ul><li>应该在切换下一个方块组前判断</li></ul></li></ul><h3 id="_11-积分" tabindex="-1"><a class="header-anchor" href="#_11-积分" aria-hidden="true">#</a> 11.积分</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> _score<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">get</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">score</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_score <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_viewer<span class="token punctuation">.</span><span class="token function">showScore</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获得最后一个分数小于当前分数的级别</span>
  <span class="token comment">// “!”表示去掉undefined的情况</span>
  <span class="token keyword">const</span> level <span class="token operator">=</span> GameConfig<span class="token punctuation">.</span>levels
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> level<span class="token punctuation">.</span>score <span class="token operator">&lt;=</span> val<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>level<span class="token punctuation">.</span>duration <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_duration<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_duration <span class="token operator">=</span> level<span class="token punctuation">.</span>duration<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_timer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-完成游戏界面" tabindex="-1"><a class="header-anchor" href="#_12-完成游戏界面" aria-hidden="true">#</a> 12.完成游戏界面</h3><h3 id="_13-总结" tabindex="-1"><a class="header-anchor" href="#_13-总结" aria-hidden="true">#</a> 13.总结</h3><ul><li>面向对象带来了新的开发方式 <ul><li>特别善于解决复杂问题</li></ul></li><li>TypeScript 的某些语法是专门为面向对象准备</li><li>学习一些设计模式</li><li>游戏特别容易使用面向对象的思维</li></ul><div class="hint-container tip"><p class="hint-container-title">开发追求</p><p>高内聚、低耦合</p></div><h2 id="三-装饰器" tabindex="-1"><a class="header-anchor" href="#三-装饰器" aria-hidden="true">#</a> （三）装饰器</h2><h3 id="_1-概述-1" tabindex="-1"><a class="header-anchor" href="#_1-概述-1" aria-hidden="true">#</a> 1.概述</h3><ul><li>面向对象的概念，decorator <ul><li>Java 中叫注解</li><li>C# 中叫特征</li></ul></li><li>在 Angular 中大量使用，React 中也会用到</li><li>目前 JS 支持装饰器</li></ul><h4 id="_1-解决的问题" tabindex="-1"><a class="header-anchor" href="#_1-解决的问题" aria-hidden="true">#</a> 1）解决的问题</h4><ul><li>装饰器能够带来额外的信息量，可以分离关注点</li><li>关注点问题 <ul><li>在定义某个东西时，应该最清楚该东西的相关情况</li></ul></li><li>信息书写位置的问题 <ul><li>如果要对某个类进行规则验证</li><li>只有在书写类的时候最清楚应该有什么规则</li></ul></li><li>重复代码的问题</li><li>问题产生的根源 <ul><li>某些信息在定义时，能够附加的信息量有限</li></ul></li></ul><h4 id="_2-装饰器的作用" tabindex="-1"><a class="header-anchor" href="#_2-装饰器的作用" aria-hidden="true">#</a> 2）装饰器的作用</h4><ul><li>为某些属性、类、参数、方法提供元数据信息</li><li>元数据 metadata <ul><li>描述数据的数据</li><li>类似 HTML 文档中的 meta</li></ul></li><li>元数据参与运行</li></ul><h4 id="_3-装饰器的本质" tabindex="-1"><a class="header-anchor" href="#_3-装饰器的本质" aria-hidden="true">#</a> 3）装饰器的本质</h4><ul><li>在 JS 中，装饰器是 <mark>一个函数</mark></li><li>装饰器要参与运行</li><li>装饰器可以修饰 <ul><li>类</li><li>成员（属性+方法）</li><li>参数</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  @<span class="token keyword">require</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">range</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">description</span></span><span class="token punctuation">(</span><span class="token string">&quot;账号&quot;</span><span class="token punctuation">)</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 描述是：账号，验证规则：1.必填，2.必须是3-5个字符</span>

  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 必须是6-12个字符</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 必须是0-100之间的数字</span>
  gender<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-类装饰器" tabindex="-1"><a class="header-anchor" href="#_2-类装饰器" aria-hidden="true">#</a> 2.类装饰器</h3><ul><li>类装饰器的本质是一个函数</li><li>在 JS 中对格式没有要求</li><li>在 TS 中要求该函数接收一个参数 <ul><li>表示类本身</li><li>即：构造函数本身</li></ul></li></ul><h4 id="_1-使用装饰器" tabindex="-1"><a class="header-anchor" href="#_1-使用装饰器" aria-hidden="true">#</a> 1）使用装饰器</h4><ul><li>格式：<code>@得到一个函数</code></li></ul><h4 id="_2-ts-中将变量约束为类" tabindex="-1"><a class="header-anchor" href="#_2-ts-中将变量约束为类" aria-hidden="true">#</a> 2）TS 中将变量约束为类</h4><ul><li>约束为 Function 类型 <ul><li>范围太广，包含了普通函数</li></ul></li><li>约束为 <code>new (参数) =&gt; object</code> 构造函数的格式 <ul><li>只有类有构造函数</li></ul></li></ul><h4 id="_3-ts-中使用装饰器" tabindex="-1"><a class="header-anchor" href="#_3-ts-中使用装饰器" aria-hidden="true">#</a> 3）TS 中使用装饰器</h4><ul><li>需要开启 <code>experimentalDecorators</code> 配置</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [class A]</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-装饰器函数的运行时间" tabindex="-1"><a class="header-anchor" href="#_4-装饰器函数的运行时间" aria-hidden="true">#</a> 4）装饰器函数的运行时间</h4><ul><li>在类定义后直接运行</li><li>编译结果是生成装饰器函数，包裹着类</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> __decorate <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ......</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-类装饰器的返回值" tabindex="-1"><a class="header-anchor" href="#_5-类装饰器的返回值" aria-hidden="true">#</a> 5）类装饰器的返回值</h4><ul><li>void <ul><li>仅运行函数</li></ul></li><li>返回一个新的类 <ul><li>会将新的类替换掉装饰目标</li><li>不建议使用，会丢失类型检查</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name">target</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// B {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-修饰不定参数的类" tabindex="-1"><a class="header-anchor" href="#_6-修饰不定参数的类" aria-hidden="true">#</a> 6）修饰不定参数的类</h4><ul><li>使用剩余参数</li><li>约束为 any 数组</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-手动调用装饰器" tabindex="-1"><a class="header-anchor" href="#_7-手动调用装饰器" aria-hidden="true">#</a> 7）手动调用装饰器</h4><ul><li>类装饰器要求必须有参数，表示描述信息</li><li>调用的函数必须返回一个函数（装饰器）</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span><span class="token punctuation">(</span><span class="token string">&quot;这是一个类&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-多个装饰器" tabindex="-1"><a class="header-anchor" href="#_8-多个装饰器" aria-hidden="true">#</a> 8）多个装饰器</h4><ul><li>会按照 <mark>后加入先调用</mark> 的顺序进行调用</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">d1</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">d2</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">d1</span></span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">d2</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 从下到上，先输出d2再输出d1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是手动调用函数的格式</li><li>则是从上到下调用函数，再从下到上调用装饰器</li></ul><div class="hint-container info"><p class="hint-container-title">面试题</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>
<span class="token comment">// 普通函数【装饰器工厂】</span>
<span class="token keyword">function</span> <span class="token function">d1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回值才是装饰器</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d1 decorator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">d2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;d2 decorator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">d1</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">d2</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">/**
d1
d2
d2 decorator
d1 decorator
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3-成员装饰器" tabindex="-1"><a class="header-anchor" href="#_3-成员装饰器" aria-hidden="true">#</a> 3.成员装饰器</h3><ul><li>可以有多个装饰器修饰</li></ul><h4 id="_1-属性" tabindex="-1"><a class="header-anchor" href="#_1-属性" aria-hidden="true">#</a> 1）属性</h4><ul><li>属性装饰器也是一个函数</li><li>该函数需要两个参数</li><li>参数 1 <ul><li>如果是静态属性，则为类本身【同类装饰器】</li><li>如果是实例属性，则为类的原型【常用】</li></ul></li><li>参数 2 <ul><li>固定为一个字符串，表示属性名</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 装饰实例属性</span>
<span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * target === A.prototype
   * {} &#39;prop1&#39;
   * {} &#39;prop2&#39;
   */</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>装饰静态属性</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * {} &#39;prop1&#39;
   * [class A] { prop2: &#39;&#39; } &#39;prop2&#39;
   */</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  prop1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span>
  <span class="token keyword">static</span> prop2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法" aria-hidden="true">#</a> 2）方法</h4><ul><li>方法装饰器也是一个函数</li><li>该函数需要三个参数</li><li>参数 1 <ul><li>如果是静态方法，则为类本身</li><li>如果是实例方法，则为类的原型</li></ul></li><li>参数 2 <ul><li>固定为一个字符串，表示方法名</li></ul></li><li>参数 3 <ul><li>属性描述对象</li><li><code>Object.defineProperty()</code> 的第三个参数</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">/**
  {} &#39;method1&#39; {
  value: [Function: method1],
    writable: true,
    enumerable: false,
    configurable: true
  }
  */</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">d</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以用于通用控制属性描述</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">enumerable</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// console.log(target, key, descriptor);</span>
  descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">useless</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  descriptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;方法已过期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">enumerable</span></span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">useless</span></span>
  <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;method1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">enumerable</span></span>
  <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-练习-类和属性的描述装饰器" tabindex="-1"><a class="header-anchor" href="#_4-练习-类和属性的描述装饰器" aria-hidden="true">#</a> 4.练习：类和属性的描述装饰器</h3><h4 id="_1-定义类装饰器和属性装饰器" tabindex="-1"><a class="header-anchor" href="#_1-定义类装饰器和属性装饰器" aria-hidden="true">#</a> 1）定义类装饰器和属性装饰器</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>

<span class="token comment">/**
 * 将类的装饰信息保存到该类的原型中
 * @param description 类的描述信息
 * @returns 类装饰器
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">classDescriptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span>description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>targetClass<span class="token operator">:</span> Constructor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    targetClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$classDescription <span class="token operator">=</span> description<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 将所有属性的信息保存到该类的原型中
 * @param description 属性的描述信息
 * @returns 属性装饰器
 * @description 该装饰器可能调用多次
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">propDescriptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span>description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>targetPrototype<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetPrototype<span class="token punctuation">.</span>$propDescriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      targetPrototype<span class="token punctuation">.</span>$propDescriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    targetPrototype<span class="token punctuation">.</span>$propDescriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      propName<span class="token punctuation">,</span>
      description<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 输出实例对象的相关描述信息
 * @param obj 实例对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> printObject <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.输出类的描述信息，没有则输出原型上的类名</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>$classDescription<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>$classDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(obj.__proto__.constructor.name);</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2.输出所有属性名描述信息和属性值，没有则输出属性名</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> prop <span class="token operator">=</span> obj<span class="token punctuation">.</span>$propDescriptions<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>propName <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prop<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用装饰器" tabindex="-1"><a class="header-anchor" href="#_2-使用装饰器" aria-hidden="true">#</a> 2）使用装饰器</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> classDescriptor<span class="token punctuation">,</span> printObject<span class="token punctuation">,</span> propDescriptor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Descriptor&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">classDescriptor</span></span><span class="token punctuation">(</span><span class="token string">&quot;用户类&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">propDescriptor</span></span><span class="token punctuation">(</span><span class="token string">&quot;用户名&quot;</span><span class="token punctuation">)</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginId <span class="token operator">=</span> loginId<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginPwd <span class="token operator">=</span> loginPwd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
用户类
    用户名: admin
    loginPwd: 123
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-reflect-metadata-库" tabindex="-1"><a class="header-anchor" href="#_5-reflect-metadata-库" aria-hidden="true">#</a> 5.reflect-metadata 库</h3><ul><li>手动将元数据信息绑定到原型上 <ul><li>会造成原型污染</li></ul></li></ul>`,126),y={href:"https://www.npmjs.com/package/reflect-metadata",target:"_blank",rel:"noopener noreferrer"},g=t(`<ul><li>保存元数据</li><li>这是一个基础库，多数第三方库会依赖该库开发</li></ul><h4 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1）基本使用</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 提供了一些全局对象</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一个类&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 传入 key-value，后续根据key值区分多个装饰器</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;prop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一个属性&quot;</span><span class="token punctuation">)</span>
  prop1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;prop1&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取附着在类A上的键名为a的元数据</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个类</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个类</span>

<span class="token comment">// 获取附着在obj对象上的某个成员的元数据</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;prop&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token string">&quot;prop1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-改造自定义类和属性装饰器" tabindex="-1"><a class="header-anchor" href="#_2-改造自定义类和属性装饰器" aria-hidden="true">#</a> 2）改造自定义类和属性装饰器</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Constructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">;</span>

<span class="token comment">// KEY值一定不能冲突，最好使用Symbol类型</span>
<span class="token comment">// const KEY = &quot;descriptor&quot;;</span>
<span class="token keyword">const</span> <span class="token constant">KEY</span> <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;descriptor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">descriptor</span> <span class="token operator">=</span> <span class="token punctuation">(</span>description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 输出实例对象的相关描述信息
 * @param obj 实例对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> printObject <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> classConstructor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>

  <span class="token comment">// 1.输出类的描述信息，没有则输出原型上的类名</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">hasMetadata</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> classConstructor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> classConstructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>classConstructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2.输出所有属性名描述信息和属性值，没有则输出属性名</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">hasMetadata</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\t</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> descriptor<span class="token punctuation">,</span> printObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./Descriptor&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">descriptor</span></span><span class="token punctuation">(</span><span class="token string">&quot;用户类&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">descriptor</span></span><span class="token punctuation">(</span><span class="token string">&quot;用户名&quot;</span><span class="token punctuation">)</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginId <span class="token operator">=</span> loginId<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginPwd <span class="token operator">=</span> loginPwd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
用户类
    用户名: admin
    loginPwd: 123
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-class-validator-和-class-transformer-库" tabindex="-1"><a class="header-anchor" href="#_6-class-validator-和-class-transformer-库" aria-hidden="true">#</a> 6.class-validator 和 class-transformer 库</h3><h4 id="_1-class-validator" tabindex="-1"><a class="header-anchor" href="#_1-class-validator" aria-hidden="true">#</a> 1）class-validator</h4>`,8),h={href:"https://www.npmjs.com/package/class-validator",target:"_blank",rel:"noopener noreferrer"},w=t(`<ul><li>在类上使用装饰器完成数据验证</li><li>使用前需要先安装 reflect-metadata 库</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  IsNotEmpty<span class="token punctuation">,</span>
  validate<span class="token punctuation">,</span>
  MinLength<span class="token punctuation">,</span>
  MaxLength<span class="token punctuation">,</span>
  Min<span class="token punctuation">,</span>
  Max<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">RegUser</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;账号不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">MinLength</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;账号必须至少有5个字符&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">MaxLength</span></span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;账号最多12个字符&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>

  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Min</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;年龄的最小值是0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Max</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;年龄的最大值是100&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>

  gender<span class="token operator">:</span> <span class="token string">&quot;男&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;女&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
post<span class="token punctuation">.</span>loginId <span class="token operator">=</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">;</span>
post<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token function">validate</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
[
  ValidationError {
    target: RegUser { loginId: &#39;22&#39;, loginPwd: &#39;123&#39;, age: -1, gender: &#39;女&#39; },
    value: &#39;22&#39;,
    property: &#39;loginId&#39;,
    children: [],
    constraints: { minLength: &#39;账号必须至少有5个字符&#39; }
  },
  ValidationError {
    target: RegUser { loginId: &#39;22&#39;, loginPwd:
    &#39;123&#39;, age: -1, gender: &#39;女&#39; },
    value: -1,
    property: &#39;age&#39;,
    children: [],
    constraints: { min: &#39;年龄的最小值是0&#39; }   
  }
]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-class-transformer" tabindex="-1"><a class="header-anchor" href="#_2-class-transformer" aria-hidden="true">#</a> 2）class-transformer</h4>`,3),f={href:"https://www.npmjs.com/package/class-transformer",target:"_blank",rel:"noopener noreferrer"},q=n("ul",null,[n("li",null,"将平面对象（JSON）转换为类对象"),n("li",null,"使用前需要先安装 reflect-metadata 库")],-1),_={href:"https://myjson.vercel.app/",target:"_blank",rel:"noopener noreferrer"},x=t(`<ul><li>模拟服务器数据</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> plainToClass<span class="token punctuation">,</span> Type <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-transformer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
  lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Number<span class="token punctuation">)</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>

  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">36</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

axios
  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.myjson.com/bins/1b59tw&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>users<span class="token operator">:</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> us <span class="token operator">=</span> <span class="token function">plainToClass</span><span class="token punctuation">(</span>User<span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> u <span class="token keyword">of</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> u<span class="token punctuation">.</span>age<span class="token punctuation">,</span> u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-补充" tabindex="-1"><a class="header-anchor" href="#_7-补充" aria-hidden="true">#</a> 7.补充</h3><h4 id="_1-参数装饰器" tabindex="-1"><a class="header-anchor" href="#_1-参数装饰器" aria-hidden="true">#</a> 1）参数装饰器</h4><ul><li>用于有 <mark>依赖注入/依赖倒置</mark> 的大型项目</li><li>要求函数有三个参数</li><li>参数 1 <ul><li>如果方法是静态的，则为类本身</li><li>如果方法是实例方法，则为类的原型</li></ul></li><li>参数 2 <ul><li>方法名称</li></ul></li><li>参数 3 <ul><li>在参数列表中的索引</li><li>从 0 开始</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">MyMath</span> <span class="token punctuation">{</span>
  <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">test</span></span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// {} sum 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-ts-自动注入的元数据" tabindex="-1"><a class="header-anchor" href="#_2-ts-自动注入的元数据" aria-hidden="true">#</a> 2）TS 自动注入的元数据</h4><ul><li>如果安装了 <code>reflect-metadata</code> 库</li><li>并且导入了该库，在某个成员上添加了元数据</li><li>并且启用了 <code>emitDecoratorMetadata</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Reflect</span></span><span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>则 TS 在编译结果中，会将约束的类型作为元数据加入到相应位置</li><li>TS 的类型检查（约束）将有机会在运行时进行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loginId <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;loginId&quot;</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-aop" tabindex="-1"><a class="header-anchor" href="#_3-aop" aria-hidden="true">#</a> 3）AOP</h4><ul><li>Aspect Oriented Programming <ul><li>一种编程方式（设计模式）</li><li>属于面向对象开发</li></ul></li><li>将一些在业务中共同出现的功能块，横向切分 <ul><li>以达到分离关注点的目的</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">RegUser</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  pid<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;11111&quot;</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">规则</span></span>
  email<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;admin@example.com&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * 将用户保存到数据库
   */</span>
  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 通过后保存数据库</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将验证处理抽离出来统一处理</span>
<span class="token keyword">function</span> <span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-类型演算" tabindex="-1"><a class="header-anchor" href="#四-类型演算" aria-hidden="true">#</a> （四）类型演算</h2><ul><li>根据已知的信息，计算出新的类型</li></ul><h3 id="_1-关键字-typeof" tabindex="-1"><a class="header-anchor" href="#_1-关键字-typeof" aria-hidden="true">#</a> 1.关键字 typeof</h3><ul><li>TS 中的 typeof 书写在 <mark>类型约束</mark> 的位置上</li><li>表示获取某个数据的类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 字面量类型</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string 【JS本身有的关键字】</span>

<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token keyword">typeof</span> a <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 让b和a的类型保持一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 typeof 作用于类时，得到的类型是该类的 <mark>构造函数</mark></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 需求：传入一个类，调用该类的构造函数，创建用户对象</span>
<span class="token comment">// function createUser(cls: ???): User {</span>

<span class="token comment">// function createUser(cls: new () =&gt; User): User {</span>
<span class="token comment">//   return new cls();</span>
<span class="token comment">// }</span>
<span class="token comment">// 或者</span>
<span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>cls<span class="token operator">:</span> <span class="token keyword">typeof</span> User<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token function">createUser</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-关键字-keyof" tabindex="-1"><a class="header-anchor" href="#_2-关键字-keyof" aria-hidden="true">#</a> 2.关键字 keyof</h3><ul><li>作用于类、接口、类型别名</li><li>用于获取其他类型中的所有成员名组成的联合类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// // 无法百分百确定 obj[prop] 属于接口定义的属性</span>
<span class="token comment">// function printUserProperty(obj:User, prop: string) {</span>
<span class="token comment">//   console.log(obj[prop]);</span>
<span class="token comment">// }</span>

<span class="token comment">// 接口属性变化时无法自动更新 prop 的限制类型</span>
<span class="token comment">// function printUserProperty(obj:User, prop: &quot;loginId&quot; | &quot;loginPwd&quot; | &quot;age&quot;) {</span>
<span class="token comment">//   console.log(obj[prop]);</span>
<span class="token comment">// }</span>

<span class="token keyword">function</span> <span class="token function">printUserProperty</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> User<span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token keyword">keyof</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-关键字-in" tabindex="-1"><a class="header-anchor" href="#_3-关键字-in" aria-hidden="true">#</a> 3.关键字 in</h3><ul><li>该关键字往往和 keyof 联用</li><li>限制某个索引类型的取值范围</li></ul><h4 id="_1-统一属性值得到新类型" tabindex="-1"><a class="header-anchor" href="#_1-统一属性值得到新类型" aria-hidden="true">#</a> 1）统一属性值得到新类型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用索引器定义类型别名，只能添加定义好的属性</span>
<span class="token keyword">type</span> <span class="token class-name">UserString</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// loginId: string;</span>
  <span class="token comment">// loginPwd: string;</span>
  <span class="token comment">// age: number;</span>

  <span class="token comment">// =&gt;</span>
  <span class="token comment">// [p in &quot;loginId&quot; | &quot;loginPwd&quot; | &quot;age&quot;]: string;</span>

  <span class="token comment">// =&gt;</span>
  <span class="token comment">// 将User的所有属性值类型变成字符串，得到一个新类型</span>
  <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// const u: UserString = {};</span>
<span class="token comment">// u.abc = &quot;123&quot;; // 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-拷贝所有属性值得到新类型并扩展新功能" tabindex="-1"><a class="header-anchor" href="#_2-拷贝所有属性值得到新类型并扩展新功能" aria-hidden="true">#</a> 2）拷贝所有属性值得到新类型并扩展新功能</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 保持User中所有属性值的类型不变，得到一个新类型</span>
<span class="token keyword">type</span> <span class="token class-name">UserObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">:</span> User<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 保持User中所有属性值的类型不变，得到一个只读的新类型</span>
<span class="token keyword">type</span> <span class="token class-name">UserReadonly</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">:</span> User<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 保持User中所有属性值的类型不变，得到一个可选的新类型</span>
<span class="token keyword">type</span> <span class="token class-name">UserPartial</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> User<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> User<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-得到多个类型的新类型" tabindex="-1"><a class="header-anchor" href="#_3-得到多个类型的新类型" aria-hidden="true">#</a> 3）得到多个类型的新类型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  loginId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  loginPwd<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  publishDate<span class="token operator">:</span> Date<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">NewString<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">NewReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">NewPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>p <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> u<span class="token operator">:</span> NewString<span class="token operator">&lt;</span>Article<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&quot;Sfsdf&quot;</span><span class="token punctuation">,</span>
  publishDate<span class="token operator">:</span> <span class="token string">&quot;sdf&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-ts-中预设的类型演算" tabindex="-1"><a class="header-anchor" href="#_4-ts-中预设的类型演算" aria-hidden="true">#</a> 4.TS 中预设的类型演算</h3><table><thead><tr><th>预设</th><th>说明</th></tr></thead><tbody><tr><td><code>Partial&lt;T&gt;</code></td><td>将类型 T 中的成员变为可选 <code>?:</code></td></tr><tr><td><code>Required&lt;T&gt;</code></td><td>将类型 T 中的成员变为必填 <code>-?:</code></td></tr><tr><td><code>Readonly&lt;T&gt;</code></td><td>将类型 T 中的成员变为只读 <code>readonly</code></td></tr><tr><td><code>Exclude&lt;T, U&gt;</code></td><td>从 T 中剔除可以赋值给 U 的类型</td></tr><tr><td><code>Extract&lt;T, U&gt;</code></td><td>提取 T 中可以赋值给 U 的类型</td></tr><tr><td><code>NonNullable&lt;T&gt;</code></td><td>从 T 中剔除 null 和 undefined</td></tr><tr><td><code>ReturnType&lt;T&gt;</code></td><td>获取函数返回值类型，T 是函数的类型</td></tr><tr><td><code>InstanceType&lt;T&gt;</code></td><td>获取构造函数类型的实例类型</td></tr></tbody></table><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> u1<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// let u2: Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot;, &quot;b&quot; | &quot;c&quot;&gt;; // &quot;a&quot; | &quot;d&quot;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;女&quot;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">NEWT</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;男&quot; | &quot;女&quot;</span>

<span class="token keyword">let</span> u3<span class="token operator">:</span> Extract<span class="token operator">&lt;</span><span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;c&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;e&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;f&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b&quot; | &quot;c&quot;</span>

<span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">returnType</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>Func<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> sum<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// number</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> u4<span class="token operator">:</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> User<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// User</span>

<span class="token comment">// 约束构造函数</span>
<span class="token keyword">type</span> <span class="token class-name">twoParamsConstructor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> User<span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Inst</span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>twoParamsConstructor<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// User</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-声明文件" tabindex="-1"><a class="header-anchor" href="#五-声明文件" aria-hidden="true">#</a> （五）声明文件</h2><ul><li>以 <code>.d.ts</code> 结尾的文件</li><li>为 JS 代码提供类型声明</li></ul><h3 id="_1-声明文件的位置" tabindex="-1"><a class="header-anchor" href="#_1-声明文件的位置" aria-hidden="true">#</a> 1.声明文件的位置</h3><h4 id="_1-放置到-tsconfig-json-配置中包含的目录中" tabindex="-1"><a class="header-anchor" href="#_1-放置到-tsconfig-json-配置中包含的目录中" aria-hidden="true">#</a> 1）放置到 <code>tsconfig.json</code> 配置中包含的目录中</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 只要声明文件在 src 目录或子目录下都可以识别到</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-放置到-node-modules-types-文件夹中" tabindex="-1"><a class="header-anchor" href="#_2-放置到-node-modules-types-文件夹中" aria-hidden="true">#</a> 2）放置到 <code>node_modules/@types</code> 文件夹中</h4><ul><li>通常是安装第三方包后存放</li></ul><h4 id="_3-手动配置" tabindex="-1"><a class="header-anchor" href="#_3-手动配置" aria-hidden="true">#</a> 3）手动配置</h4><ul><li>默认情况下会先从 include 配置目录中找</li><li>如果没有再从 node_modules 目录中找</li><li>开启该配置后，前面的配置都失效</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-与-js-代码所在目录相同-并且文件名也相同的文件" tabindex="-1"><a class="header-anchor" href="#_4-与-js-代码所在目录相同-并且文件名也相同的文件" aria-hidden="true">#</a> 4）与 JS 代码所在目录相同，并且文件名也相同的文件</h4><ul><li>最好的方式</li><li>实际上就是用 TS 代码书写的工程发布之后的格式</li></ul><p><img src="`+u+`" alt=""></p><h3 id="_2-编写" tabindex="-1"><a class="header-anchor" href="#_2-编写" aria-hidden="true">#</a> 2.编写</h3><h4 id="_1-自动生成" tabindex="-1"><a class="header-anchor" href="#_1-自动生成" aria-hidden="true">#</a> 1）自动生成</h4><ul><li>工程是使用 TS 开发的，发布（编译）之后是 JS 文件，发布的是 JS 文件</li><li>如果发布的文件，需要其他开发者使用，可以使用声明文件，来描述发布结果中的类型</li><li>配置 <code>tsconfig.json</code></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-手动编写" tabindex="-1"><a class="header-anchor" href="#_2-手动编写" aria-hidden="true">#</a> 2）手动编写</h4><ul><li>已有库是使用 JS 书写而成，并且更改该库的代码为 TS 成本较高 <ul><li>如：VueJS</li><li>可以先用声明文件对 JS 代码进一步描述</li><li>后面再慢慢修改为 TS 代码</li></ul></li><li>一些第三方库使用 JS 书写而成，并且这些第三方库没有提供声明文件</li></ul><h5 id="a-全局声明" tabindex="-1"><a class="header-anchor" href="#a-全局声明" aria-hidden="true">#</a> a）全局声明</h5><ul><li>声明一些全局的对象、属性、变量</li><li>namespace <ul><li>表示命名空间，可以将其认为是一个对象</li><li>命名空间中的内容必须通过 <code>命名空间.成员名</code> 访问</li><li>没有 ES6 模块化时要依托该关键字包裹</li><li>现仅用于声明文件</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 只是告诉TS编译时如何报错
 * 与代码运行时无关
 * 该文件不参与运行
 */</span>

<span class="token comment">// 写法一</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token builtin">console</span><span class="token operator">:</span> object<span class="token punctuation">;</span>

<span class="token comment">// 写法二</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token builtin">console</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 写法三</span>
<span class="token keyword">interface</span> <span class="token class-name">Console</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token builtin">console</span><span class="token operator">:</span> Console<span class="token punctuation">;</span>

<span class="token comment">// 写法四</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> <span class="token builtin">console</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TimeHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> TimeHandler<span class="token punctuation">,</span> miliseconds<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> TimeHandler<span class="token punctuation">,</span> miliseconds<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-模块声明" tabindex="-1"><a class="header-anchor" href="#b-模块声明" aria-hidden="true">#</a> b）模块声明</h5><ul><li>只有导入相应模块后，该声明文件才生效</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// types/lodash/index.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;lodash&quot;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">chunk</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c-三斜线指令" tabindex="-1"><a class="header-anchor" href="#c-三斜线指令" aria-hidden="true">#</a> c）三斜线指令</h5><ul><li>在一个声明文件中，包含另一个声明文件</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;../types/lodash/index.d.ts&quot; /&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-发布" tabindex="-1"><a class="header-anchor" href="#_3-发布" aria-hidden="true">#</a> 3.发布</h3><h4 id="_1-当前工程使用-ts-开发" tabindex="-1"><a class="header-anchor" href="#_1-当前工程使用-ts-开发" aria-hidden="true">#</a> 1）当前工程使用 TS 开发</h4><ul><li>编译完成后，将编译结果所在文件夹直接发布到 npm 上即可</li></ul><h4 id="_2-为其他第三方库开发的声明文件" tabindex="-1"><a class="header-anchor" href="#_2-为其他第三方库开发的声明文件" aria-hidden="true">#</a> 2）为其他第三方库开发的声明文件</h4><h5 id="a-发布到-types-中" tabindex="-1"><a class="header-anchor" href="#a-发布到-types-中" aria-hidden="true">#</a> a）发布到 <code>@types/**</code> 中</h5>`,68),S={href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,"Fork 到自己的开源库中",-1),M=n("li",null,"从自己的开源库中克隆到本地",-1),P=n("li",null,[a("本地新建分支（如：MyLodash4.3） "),n("ul",null,[n("li",null,"在新分支中进行声明文件的开发"),n("li",null,"在 types 目录中新建文件夹，在新的文件夹中开发声明文件")])],-1),I=n("li",null,"Push 分支到你的开源库",-1),j=n("li",null,"到官方的开源库中，提交 pull request",-1),C=t(`<h5 id="b-等待官方管理员审核-1-天" tabindex="-1"><a class="header-anchor" href="#b-等待官方管理员审核-1-天" aria-hidden="true">#</a> b）等待官方管理员审核（1 天）</h5><ul><li>审核通过之后，会将你的分支代码合并到主分支，然后发布到 npm</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @types/你发布的库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六-项目实战-电影管理系统" tabindex="-1"><a class="header-anchor" href="#六-项目实战-电影管理系统" aria-hidden="true">#</a> （六）项目实战：电影管理系统</h2><h3 id="_1-概述-2" tabindex="-1"><a class="header-anchor" href="#_1-概述-2" aria-hidden="true">#</a> 1.概述</h3><h4 id="_1-服务器端" tabindex="-1"><a class="header-anchor" href="#_1-服务器端" aria-hidden="true">#</a> 1）服务器端</h4><ul><li>提供 API 接口</li><li>TS + Express + MongoDB + class-validator + class-transformer</li></ul><h4 id="_2-客户端" tabindex="-1"><a class="header-anchor" href="#_2-客户端" aria-hidden="true">#</a> 2）客户端</h4><ul><li>Ajax 请求接口获得数据，使用数据渲染页面</li><li>TS + React 全家桶（react-router、redux、antd）</li></ul><h4 id="_3-开发顺序" tabindex="-1"><a class="header-anchor" href="#_3-开发顺序" aria-hidden="true">#</a> 3）开发顺序</h4><ul><li>先开发服务器端 <ul><li>使用 postman 测试</li></ul></li><li>再开发客户端</li></ul><div class="hint-container warning"><p class="hint-container-title">牢记</p><p>TS 是一个可选的（渐近式）、静态的类型系统</p></div><h3 id="_2-服务器开发环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-服务器开发环境搭建" aria-hidden="true">#</a> 2.服务器开发环境搭建</h3><h3 id="_3-使用-tslint-进行代码风格检查" tabindex="-1"><a class="header-anchor" href="#_3-使用-tslint-进行代码风格检查" aria-hidden="true">#</a> 3.使用 TSLint 进行代码风格检查</h3>`,14),A={href:"https://palantir.github.io/tslint/",target:"_blank",rel:"noopener noreferrer"},R=t(`<ul><li>和 ESLint 相似</li><li>用于检查代码风格</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx tslint <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-开发-movie-实体类" tabindex="-1"><a class="header-anchor" href="#_4-开发-movie-实体类" aria-hidden="true">#</a> 4.开发 Movie 实体类</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ArrayMinSize<span class="token punctuation">,</span> IsInt<span class="token punctuation">,</span> IsNotEmpty<span class="token punctuation">,</span> Max<span class="token punctuation">,</span> Min <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影名称不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影类型不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ArrayMinSize</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影类型至少得有一个&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> types<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;上映地区不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ArrayMinSize</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;上映地区至少得有一个&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> areas<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsInt</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长必须是整数&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Min</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长最小一分钟&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Max</span></span><span class="token punctuation">(</span><span class="token number">999999</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长过长&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> timeLong<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;是否热映不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> isHot<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;是否即将上映不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> isComing<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;是否是经典影片不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> isClassic<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> poster<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-处理-plain-object-的转换" tabindex="-1"><a class="header-anchor" href="#_5-处理-plain-object-的转换" aria-hidden="true">#</a> 5.处理 plain Object 的转换</h3><h4 id="_1-plain-object" tabindex="-1"><a class="header-anchor" href="#_1-plain-object" aria-hidden="true">#</a> 1）plain Object</h4><ul><li>平面对象 <code>const m: any = {}</code></li><li>客户端传递过来的对象可能是平面对象</li><li>数据验证直接通过</li></ul><h4 id="_2-转换-plain-object" tabindex="-1"><a class="header-anchor" href="#_2-转换-plain-object" aria-hidden="true">#</a> 2）转换 plain Object</h4><ul><li>使用 class-transformer</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> plainToClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-transformer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Movie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./entities/Movie&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// const m = new Movie();</span>
<span class="token keyword">const</span> m<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">2343</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span>types <span class="token operator">=</span> <span class="token string">&quot;sdf&quot;</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span>areas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;中国大陆&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span>isClassic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span>timeLong <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> movie <span class="token operator">=</span> <span class="token function">plainToClass</span><span class="token punctuation">(</span>Movie<span class="token punctuation">,</span> m <span class="token keyword">as</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定运行时数据的类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ArrayMinSize<span class="token punctuation">,</span> IsInt<span class="token punctuation">,</span> IsNotEmpty<span class="token punctuation">,</span> Max<span class="token punctuation">,</span> Min <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Type <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-transformer&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影名称不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">)</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影类型不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">ArrayMinSize</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;电影类型至少得有一个&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> types<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsNotEmpty</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长不可以为空&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">IsInt</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长必须是整数&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Min</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长最小一分钟&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Max</span></span><span class="token punctuation">(</span><span class="token number">999999</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;时长过长&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Type</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Number<span class="token punctuation">)</span>
  <span class="token keyword">public</span> timeLong<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-定义数据库模型" tabindex="-1"><a class="header-anchor" href="#_6-定义数据库模型" aria-hidden="true">#</a> 6.定义数据库模型</h3><h4 id="_1-技术选型" tabindex="-1"><a class="header-anchor" href="#_1-技术选型" aria-hidden="true">#</a> 1）技术选型</h4><ul><li>数据库使用 MongoDB</li><li>数据库驱动 <ul><li>mongodb <ul><li>官方驱动</li></ul></li><li>mongoose <ul><li>基于官方驱动优化而成</li></ul></li><li>两个驱动对 TS 的支持都不太友好</li></ul></li><li>其他数据库驱动 typeorm <ul><li>完全用 TS 编写</li><li>基于类</li><li>对 MongoDB 的支持不太友好</li></ul></li><li>没有完美解决方案，暂时选用 mongoose</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;@types/mongoose&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.3.27&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;mongoose&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.5.6&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数据库模型" tabindex="-1"><a class="header-anchor" href="#_2-数据库模型" aria-hidden="true">#</a> 2）数据库模型</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Mongoose <span class="token keyword">from</span> <span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Movie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entities/Movie&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 开发期间的类型检查（TS）</span>
<span class="token comment">// Mongoose.Document封装了id、save等常用属性和方法</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IMovie</span> <span class="token keyword">extends</span> <span class="token class-name">Mongoose</span><span class="token punctuation">.</span>Document<span class="token punctuation">,</span> Movie <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> movieSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mongoose</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Schema</span><span class="token generic class-name"><span class="token operator">&lt;</span>IMovie<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 运行期间的类型（JS）</span>
    name<span class="token operator">:</span> String<span class="token punctuation">,</span>
    types<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span>
    areas<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">,</span>
    timeLong<span class="token operator">:</span> Number<span class="token punctuation">,</span>
    isHot<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    isClassic<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    isComing<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    description<span class="token operator">:</span> String<span class="token punctuation">,</span>
    poster<span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    versionKey<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Mongoose<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">model</span><span class="token generic class-name"><span class="token operator">&lt;</span>IMovie<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Movie&quot;</span><span class="token punctuation">,</span> movieSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数据库配置文件" tabindex="-1"><a class="header-anchor" href="#_3-数据库配置文件" aria-hidden="true">#</a> 3）数据库配置文件</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Mongoose <span class="token keyword">from</span> <span class="token string">&quot;mongoose&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> MovieSchema <span class="token keyword">from</span> <span class="token string">&quot;./MovieSchema&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 写localhost会连接失败</span>
Mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;mongodb://127.0.0.1:27017/movieDB&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  useNewUrlParser<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接数据库成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 必须导出一个声明 var/function，所以要加 {}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> MovieSchema <span class="token keyword">as</span> MovieModel <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-增删改查功能" tabindex="-1"><a class="header-anchor" href="#_7-增删改查功能" aria-hidden="true">#</a> 7.增删改查功能</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MovieModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../db&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IMovie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../db/MovieSchema&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Movie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../entities/Movie&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MovieService</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">add</span><span class="token punctuation">(</span>movie<span class="token operator">:</span> Movie<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IMovie <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.转换类型</span>
    <span class="token comment">// movie = Movie.transformToClass(Movie, movie);</span>
    movie <span class="token operator">=</span> Movie<span class="token punctuation">.</span><span class="token function">transformToClass</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.数据验证</span>
    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token keyword">await</span> movie<span class="token punctuation">.</span><span class="token function">validateMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errors<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.添加到数据库</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> movie<span class="token operator">:</span> Movie<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 如果覆盖掉原来的平面对象，修改某些字段时
     * 未提供的字段有可能使用实体类的默认值覆盖现有值
     * 应该保持原有平面对象不被破坏
     */</span>
    <span class="token comment">// movie = Movie.transformToClass(movie);</span>

    <span class="token keyword">const</span> movieObj <span class="token operator">=</span> Movie<span class="token punctuation">.</span><span class="token function">transformToClass</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token keyword">await</span> movieObj<span class="token punctuation">.</span><span class="token function">validateMovie</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> errors<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        _id<span class="token operator">:</span> id<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      movie
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errors<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      _id<span class="token operator">:</span> id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IMovie <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-按条件查询电影" tabindex="-1"><a class="header-anchor" href="#_8-按条件查询电影" aria-hidden="true">#</a> 8.按条件查询电影</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 条件查询
 * @param condition 查询条件 page、limit、keyword
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">find</span><span class="token punctuation">(</span>
  condition<span class="token operator">:</span> SearchCondition
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ISearchResult<span class="token operator">&lt;</span>Movie<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> searchObj <span class="token operator">=</span> SearchCondition<span class="token punctuation">.</span><span class="token function">transformToClass</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token keyword">await</span> searchObj<span class="token punctuation">.</span><span class="token function">validateMovie</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      total<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      errors<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> movies <span class="token operator">=</span> <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token punctuation">{</span>
      $regex<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>searchObj<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>searchObj<span class="token punctuation">.</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> searchObj<span class="token punctuation">.</span>limit<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>searchObj<span class="token punctuation">.</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> MovieModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token punctuation">{</span>
      $regex<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>searchObj<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countDocuments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    total<span class="token punctuation">,</span>
    data<span class="token operator">:</span> movies<span class="token punctuation">,</span>
    errors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-完成-api-接口" tabindex="-1"><a class="header-anchor" href="#_9-完成-api-接口" aria-hidden="true">#</a> 9.完成 API 接口</h3><h4 id="_1-参数传递形式" tabindex="-1"><a class="header-anchor" href="#_1-参数传递形式" aria-hidden="true">#</a> 1）参数传递形式</h4><ul><li>params <ul><li><code>localhost:3000/api/movie/xxx</code></li></ul></li><li>query <ul><li><code>localhost:3000/api/movie/?xxx=yyy</code></li></ul></li></ul><h3 id="_10-完成图片上传接口" tabindex="-1"><a class="header-anchor" href="#_10-完成图片上传接口" aria-hidden="true">#</a> 10.完成图片上传接口</h3><h4 id="_1-一般流程" tabindex="-1"><a class="header-anchor" href="#_1-一般流程" aria-hidden="true">#</a> 1）一般流程</h4><ul><li>通常情况下，服务器会提供一个统一的 api 接口，用于处理上传的文件 <ul><li>如：<code>/api/upload</code></li></ul></li><li>客户端会使用 post 请求，请求服务器 <ul><li><code>content-type: multipart/form-data</code></li></ul></li><li>服务器得到上传的文件 <ul><li>使用 express 的中间件 multer</li></ul></li></ul><h4 id="_2-几个问题" tabindex="-1"><a class="header-anchor" href="#_2-几个问题" aria-hidden="true">#</a> 2）几个问题</h4><p>-设置上传的文件后缀名</p><ul><li>根据客户端的文件后缀名决定</li><li>限制文件的上传尺寸</li><li>限制文件的后缀名</li><li>响应给客户端 <ul><li>错误：响应错误消息</li><li>正确：响应文件的路径</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> multer <span class="token keyword">from</span> <span class="token string">&quot;multer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ResponseHelper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ResponseHelper&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> Express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  destination<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../../public/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">filename</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件名</span>
    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 后缀名</span>
    <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 文件全称</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>extname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> allowedExtensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.gif&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.bmp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jiff&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  storage<span class="token punctuation">,</span>
  limits<span class="token operator">:</span> <span class="token punctuation">{</span>
    fileSize<span class="token operator">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">fileFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>allowedExtensions<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;文件类型不正确&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">&quot;imgFile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">upload</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ResponseHelper<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      ResponseHelper<span class="token punctuation">.</span><span class="token function">sendData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-搭建客户端工程并完成-ajax-请求" tabindex="-1"><a class="header-anchor" href="#_11-搭建客户端工程并完成-ajax-请求" aria-hidden="true">#</a> 11.搭建客户端工程并完成 AJAX 请求</h3><ul><li>React 脚手架 <ul><li>create-react-app</li><li>NextJS（SSR）</li><li>UmiJS（阿里）</li></ul></li><li>有时服务器和客户端会共用一些类型 <ul><li>如果要处理此处的重复代码问题，最佳做法是自行使用 Webpack 搭建工程</li></ul></li><li>API 请求功能 <ul><li>客户端端口 3001，请求 <code>/api/movie</code></li><li>最终请求的地址：<code>http://localhost:3001/api/movie</code></li><li>需要使用 axios 的代理</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  IResponseData<span class="token punctuation">,</span>
  IResponseError<span class="token punctuation">,</span>
  ISearchCondition<span class="token punctuation">,</span>
  IResponsePageData<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./CommonTypes&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IMovie</span> <span class="token punctuation">{</span>
  _id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  types<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  areas<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  timeLong<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  isHot<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isComing<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isClassic<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  description<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  poster<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MovieService</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">add</span><span class="token punctuation">(</span>
    movie<span class="token operator">:</span> IMovie
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IResponseData<span class="token operator">&lt;</span>IMovie<span class="token operator">&gt;</span> <span class="token operator">|</span> IResponseError<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/api/movie&quot;</span><span class="token punctuation">,</span> movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">edit</span><span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    movie<span class="token operator">:</span> IMovie
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IResponseData<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token operator">|</span> IResponseError<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/api/movie/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token keyword">delete</span><span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IResponseData<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span> <span class="token operator">|</span> IResponseError<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/api/movie/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getMovieById</span><span class="token punctuation">(</span>
    id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IResponseData<span class="token operator">&lt;</span>IMovie <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/movie/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getMovies</span><span class="token punctuation">(</span>
    condition<span class="token operator">:</span> ISearchCondition
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IResponsePageData<span class="token operator">&lt;</span>IMovie<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/movie&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      params<span class="token operator">:</span> condition<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-创建-reducer-和-action" tabindex="-1"><a class="header-anchor" href="#_12-创建-reducer-和-action" aria-hidden="true">#</a> 12.创建 reducer 和 action</h3><h4 id="_1-redux" tabindex="-1"><a class="header-anchor" href="#_1-redux" aria-hidden="true">#</a> 1）Redux</h4><ul><li>适合大型项目</li><li>不是所有的状态数据都要放到 redux 中</li><li>action <ul><li>平面对象 plain object</li><li>描述了数据变化的方式</li></ul></li><li>reducer <ul><li>数据变化的具体内容</li><li>需要 action 触发</li></ul></li><li>store <ul><li>存储数据的仓库</li></ul></li></ul><h4 id="_2-actions" tabindex="-1"><a class="header-anchor" href="#_2-actions" aria-hidden="true">#</a> 2）Actions</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ISearchCondition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../services/CommonTypes&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IMovie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../services/MovieService&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ActionType&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">SaveMoviesAction</span> <span class="token operator">=</span> IAction<span class="token operator">&lt;</span>
  <span class="token string">&quot;movie_save&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    movies<span class="token operator">:</span> IMovie<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">SetLoadingAction</span> <span class="token operator">=</span> IAction<span class="token operator">&lt;</span><span class="token string">&quot;movie_set_loading&quot;</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">SetConditionAction</span> <span class="token operator">=</span> IAction<span class="token operator">&lt;</span>
  <span class="token string">&quot;movie_set_condition&quot;</span><span class="token punctuation">,</span>
  ISearchCondition
<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DeleteAction</span> <span class="token operator">=</span> IAction<span class="token operator">&lt;</span><span class="token string">&quot;movie_delete&quot;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MovieActions</span> <span class="token operator">=</span>
  <span class="token operator">|</span> SaveMoviesAction
  <span class="token operator">|</span> SetLoadingAction
  <span class="token operator">|</span> SetConditionAction
  <span class="token operator">|</span> DeleteAction<span class="token punctuation">;</span>

<span class="token keyword">const</span> saveMoviesAction <span class="token operator">=</span> <span class="token punctuation">(</span>
  movies<span class="token operator">:</span> IMovie<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  total<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">)</span><span class="token operator">:</span> SaveMoviesAction <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&quot;movie_save&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 负载/载荷</span>
    payload<span class="token operator">:</span> <span class="token punctuation">{</span>
      movies<span class="token punctuation">,</span>
      total<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setLoadingAction <span class="token operator">=</span> <span class="token punctuation">(</span>isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> SetLoadingAction <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&quot;movie_set_loading&quot;</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> isLoading<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setCondition <span class="token operator">=</span> <span class="token punctuation">(</span>condition<span class="token operator">:</span> ISearchCondition<span class="token punctuation">)</span><span class="token operator">:</span> SetConditionAction <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&quot;movie_set_condition&quot;</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> condition<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deleteAction <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> DeleteAction <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&quot;movie_delete&quot;</span><span class="token punctuation">,</span>
    payload<span class="token operator">:</span> id<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  saveMoviesAction<span class="token punctuation">,</span>
  setLoadingAction<span class="token punctuation">,</span>
  setCondition<span class="token punctuation">,</span>
  deleteAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-reducers" tabindex="-1"><a class="header-anchor" href="#_3-reducers" aria-hidden="true">#</a> 3）Reducers</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Reducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ISearchCondition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../services/CommonTypes&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IMovie <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../services/MovieService&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  MovieActions<span class="token punctuation">,</span>
  SaveMoviesAction<span class="token punctuation">,</span>
  SetConditionAction<span class="token punctuation">,</span>
  SetLoadingAction<span class="token punctuation">,</span>
  DeleteAction<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../actions/MovieAction&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">IMovieCondition</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>ISearchCondition<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IMovieState</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 电影数组
   */</span>
  data<span class="token operator">:</span> IMovie<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * 查询条件
   */</span>
  condition<span class="token operator">:</span> IMovieCondition<span class="token punctuation">;</span>
  <span class="token comment">/**
   * 总记录数
   */</span>
  total<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * 是否正在加载数据
   */</span>
  isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> defaultState<span class="token operator">:</span> IMovieState <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  condition<span class="token operator">:</span> <span class="token punctuation">{</span>
    page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    limit<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    key<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  total<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  isLoading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">MovieReducers<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Reducer<span class="token operator">&lt;</span>IMovieState<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> saveMovie<span class="token operator">:</span> MovieReducers<span class="token operator">&lt;</span>SaveMoviesAction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>state<span class="token punctuation">,</span>
  data<span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>movies<span class="token punctuation">,</span>
  total<span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>total<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setCondition<span class="token operator">:</span> MovieReducers<span class="token operator">&lt;</span>SetConditionAction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>state<span class="token punctuation">,</span>
  condition<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>state<span class="token punctuation">.</span>condition<span class="token punctuation">,</span>
    <span class="token operator">...</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setLoading<span class="token operator">:</span> MovieReducers<span class="token operator">&lt;</span>SetLoadingAction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>state<span class="token punctuation">,</span>
  isLoading<span class="token operator">:</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deleteMovie<span class="token operator">:</span> MovieReducers<span class="token operator">&lt;</span>DeleteAction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>state<span class="token punctuation">,</span>
  data<span class="token operator">:</span> state<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>_id <span class="token operator">!==</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>
  total<span class="token operator">:</span> state<span class="token punctuation">.</span>total <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> IMovieState <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token operator">:</span> MovieActions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可辨识联合类型</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;movie_save&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">saveMovie</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;movie_set_condition&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">setCondition</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;movie_set_loading&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">setLoading</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;movie_delete&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">deleteMovie</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-创建仓库" tabindex="-1"><a class="header-anchor" href="#_13-创建仓库" aria-hidden="true">#</a> 13.创建仓库</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> applyMiddleware<span class="token punctuation">,</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> rootReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./reducers/RootReducer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&quot;redux-logger&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-用-thunk-处理副作用" tabindex="-1"><a class="header-anchor" href="#_14-用-thunk-处理副作用" aria-hidden="true">#</a> 14.用 thunk 处理副作用</h3><ul><li>redux-thunk</li><li>redux-saga</li><li>dva <ul><li>基于 redux-saga</li><li>同时还是脚手架</li><li>阿里推出，缺少维护</li></ul></li><li>umijs <ul><li>基于 redux-saga 和 dva</li><li>阿里推出</li></ul></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/**
 * 副作用操作
 * 根据条件从服务器获取电影数据
 */</span>
<span class="token keyword">const</span> fetchMovies <span class="token operator">=</span> <span class="token punctuation">(</span>
  condition<span class="token operator">:</span> ISearchCondition
<span class="token punctuation">)</span><span class="token operator">:</span> ThunkAction<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> IRootState<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> MovieActions<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.设置加载状态</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setLoadingAction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.设置条件</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.获取服务器数据</span>
    <span class="token keyword">const</span> curCondition <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>movie<span class="token punctuation">.</span>condition<span class="token punctuation">;</span>
    <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> MovieService<span class="token punctuation">.</span><span class="token function">getMovies</span><span class="token punctuation">(</span>curCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4.更改仓库数据</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">saveMoviesAction</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关闭加载状态</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setLoadingAction</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> applyMiddleware<span class="token punctuation">,</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IRootState<span class="token punctuation">,</span> rootReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./reducers/RootReducer&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&quot;redux-logger&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> thunk<span class="token punctuation">,</span> <span class="token punctuation">{</span> ThunkMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * ThunkMiddleware&lt;IRootState&gt; 修改dispatch的类型判断
 * 不是用redux定义的action类型，使用thunk定义的函数类型
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  rootReducer<span class="token punctuation">,</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk <span class="token keyword">as</span> ThunkMiddleware<span class="token operator">&lt;</span>IRootState<span class="token operator">&gt;</span><span class="token punctuation">,</span> logger<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-添加路由功能" tabindex="-1"><a class="header-anchor" href="#_15-添加路由功能" aria-hidden="true">#</a> 15.添加路由功能</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Layout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./pages/Layout&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-router-dom&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> App<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Layout<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-制作布局" tabindex="-1"><a class="header-anchor" href="#_16-制作布局" aria-hidden="true">#</a> 16.制作布局</h3><h3 id="_17-制作电影表格组件-1" tabindex="-1"><a class="header-anchor" href="#_17-制作电影表格组件-1" aria-hidden="true">#</a> 17.制作电影表格组件 1</h3><ul><li>仓库里面有数据，但没有界面【容器组件】</li><li>MovieTable 组件有界面，但是没有数据【展示组件】</li><li>使用 react-redux 将两者连接起来</li></ul><h3 id="_18-制作电影表格组件-2" tabindex="-1"><a class="header-anchor" href="#_18-制作电影表格组件-2" aria-hidden="true">#</a> 18.制作电影表格组件 2</h3><h3 id="_19-制作电影表格组件-3" tabindex="-1"><a class="header-anchor" href="#_19-制作电影表格组件-3" aria-hidden="true">#</a> 19.制作电影表格组件 3</h3><h3 id="_20-制作图片上传组件" tabindex="-1"><a class="header-anchor" href="#_20-制作图片上传组件" aria-hidden="true">#</a> 20.制作图片上传组件</h3><ul><li>展示组件可以有状态 state</li><li>但是状态只与纯展示有关，不涉及数据</li></ul><h3 id="_21-制作电影表单组件" tabindex="-1"><a class="header-anchor" href="#_21-制作电影表单组件" aria-hidden="true">#</a> 21.制作电影表单组件</h3><h3 id="_22-制作修改电影页面" tabindex="-1"><a class="header-anchor" href="#_22-制作修改电影页面" aria-hidden="true">#</a> 22.制作修改电影页面</h3><h3 id="_23-项目打包" tabindex="-1"><a class="header-anchor" href="#_23-项目打包" aria-hidden="true">#</a> 23.项目打包</h3><h4 id="_1-组件属性的默认值" tabindex="-1"><a class="header-anchor" href="#_1-组件属性的默认值" aria-hidden="true">#</a> 1）组件属性的默认值</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">MyProps</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 必选</span>
  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// 必选</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&lt;</span>MyProps<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> defaultProps<span class="token operator">:</span> Pick<span class="token operator">&lt;</span>MyProps<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Test b<span class="token operator">=</span><span class="token string">&quot;34234&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-设置静态资源" tabindex="-1"><a class="header-anchor" href="#_2-设置静态资源" aria-hidden="true">#</a> 2）设置静态资源</h4><ul><li>解决刷新 404 问题</li><li>请求所有地址都重定向到根目录 index.html</li></ul>`,66),U={href:"https://www.npmjs.com/package/connect-history-api-fallback",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">history</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> Express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public/build&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">,</span> Express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-ts-和其他前端技术的融合" tabindex="-1"><a class="header-anchor" href="#七-ts-和其他前端技术的融合" aria-hidden="true">#</a> （七）TS 和其他前端技术的融合</h2><ul><li>看官方文档</li></ul>`,3);function E(G,O){const e=o("Mermaid"),p=o("ExternalLinkIcon");return i(),l("div",null,[k,s(e,{id:"mermaid-186",code:"eJxLzkksLnbJTEwvSszlUlAISczLVrCp0dVVCMhJrEwtAvFRhF3zUnMroaJwNkTKKb+4GCwDAIknGv4="}),d,s(e,{id:"mermaid-377",code:"eJxLzkksLnbJTEwvSszlUlB4trj76doJCjY1uroKL1euQRN52roVTeR50zouAMZ9HMA="}),v,n("blockquote",null,[n("p",null,[n("a",m,[a("https://yehudakatz.com/2011/08/10/understanding-javascript-function-invocation-and-this/"),s(p)])])]),b,n("blockquote",null,[n("p",null,[n("a",y,[a("reflect-metadata"),s(p)])])]),g,n("blockquote",null,[n("p",null,[n("a",h,[a("class-validator"),s(p)])])]),w,n("blockquote",null,[n("p",null,[n("a",f,[a("class-transformer"),s(p)])])]),q,n("blockquote",null,[n("p",null,[n("a",_,[a("MYJson"),s(p)])])]),x,n("ul",null,[n("li",null,[a("进入 GitHub 的开源项目 "),n("ul",null,[n("li",null,[n("a",S,[a("https://github.com/DefinitelyTyped/DefinitelyTyped"),s(p)])])])]),T,M,P,I,j]),C,n("blockquote",null,[n("p",null,[n("a",A,[a("TSLint"),s(p)])])]),R,n("blockquote",null,[n("p",null,[n("a",U,[a("connect-history-api-fallback"),s(p)])])]),D])}const L=c(r,[["render",E],["__file","06.html.vue"]]);export{L as default};
