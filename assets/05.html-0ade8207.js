import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-1ca76096.js";const i="/assets/JS相关面试题49-ec6bfb08.png",u="/assets/JS相关面试题01-54437151.png",r="/assets/JS相关面试题02-4745af0a.png",k="/assets/JS相关面试题03-82994fef.png",d="/assets/JS相关面试题04-991d11e4.png",v="/assets/JS相关面试题05-f63bd4a9.png",m="/assets/JS相关面试题06-887b6813.png",b="/assets/JS相关面试题07-b8fb23a8.png",h="/assets/JS相关面试题08-7c6a0970.png",g="/assets/JS相关面试题09-e347a755.png",f="/assets/JS相关面试题10-6151d60f.png",y="/assets/JS相关面试题11-52ad73a5.png",j="/assets/JS相关面试题12-7c762ef0.png",w="/assets/JS相关面试题13-8fd813dc.png",q="/assets/JS相关面试题14-1270a2a4.png",x="/assets/JS相关面试题15-32eeb2f0.png",_="/assets/JS相关面试题16-02fb292e.png",S="/assets/JS相关面试题17-3e9176bc.png",N="/assets/JS相关面试题18-80afde2e.png",O="/assets/JS相关面试题19-738083ed.png",J="/assets/JS相关面试题20-ef5edc85.png",E="/assets/JS相关面试题21-21d8d5a6.gif",C="/assets/JS相关面试题22-dbb43e43.gif",I="/assets/JS相关面试题23-d8aef572.png",T="/assets/JS相关面试题24-3b62b9d8.png",M="/assets/JS相关面试题25-5ea047c3.png",P="/assets/JS相关面试题26-3bf0e04b.png",H="/assets/JS相关面试题27-cd2c2c48.png",D="/assets/JS相关面试题28-1fba977c.png",z="/assets/JS相关面试题29-963ec63a.png",L="/assets/JS相关面试题30-73d4f19b.png",B="/assets/JS相关面试题31-93017363.png",W="/assets/JS相关面试题32-5aaa9cf3.png",A="/assets/JS相关面试题33-733e9d85.png",F="/assets/JS相关面试题34-5ebf3dd8.png",V="/assets/JS相关面试题35-8f5c8a3e.gif",U="/assets/JS相关面试题36-adc9f734.gif",G={},Y=p('<p><img src="'+i+`" alt=""></p><h2 id="一-let、var、const-的区别" tabindex="-1"><a class="header-anchor" href="#一-let、var、const-的区别" aria-hidden="true">#</a> （一）let、var、const 的区别</h2><h3 id="_1-经典真题" tabindex="-1"><a class="header-anchor" href="#_1-经典真题" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>let const var 的区别？什么是块级作用域？如何用？</li></ul><h3 id="_2-声明变量关键字汇总" tabindex="-1"><a class="header-anchor" href="#_2-声明变量关键字汇总" aria-hidden="true">#</a> 2.声明变量关键字汇总</h3><ul><li>在 JavaScript 中，一共存在 3 种声明变量的方式 <ul><li>var</li><li>let</li><li>const</li></ul></li><li>这是历史原因造成的 <ul><li>最初声明变量的关键字就是 var</li><li>但是为了解决作用域的问题，新增了 let 和 const 的方式</li></ul></li></ul><h3 id="_3-作用域" tabindex="-1"><a class="header-anchor" href="#_3-作用域" aria-hidden="true">#</a> 3.作用域</h3><ul><li>ES5 中的作用域有：全局作用域、函数作用域</li><li>ES6 中新增了块级作用域 <ul><li>块作用域由 <code>{ }</code> 包括</li><li>if 语句和 for 语句里面的 <code>{ }</code> 也属于块作用域</li></ul></li></ul><h3 id="_4-var-关键字" tabindex="-1"><a class="header-anchor" href="#_4-var-关键字" aria-hidden="true">#</a> 4.var 关键字</h3><h4 id="_1-没有块级作用域的概念" tabindex="-1"><a class="header-anchor" href="#_1-没有块级作用域的概念" aria-hidden="true">#</a> 1）没有块级作用域的概念</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-有全局作用域、函数作用域的概念" tabindex="-1"><a class="header-anchor" href="#_2-有全局作用域、函数作用域的概念" aria-hidden="true">#</a> 2）有全局作用域、函数作用域的概念</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Local Scope</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//20</span>
<span class="token punctuation">}</span>
<span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: b is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-不初始化值默认为-undefined" tabindex="-1"><a class="header-anchor" href="#_3-不初始化值默认为-undefined" aria-hidden="true">#</a> 3）不初始化值默认为 undefined</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-存在变量提升" tabindex="-1"><a class="header-anchor" href="#_4-存在变量提升" aria-hidden="true">#</a> 4）存在变量提升</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Local Scope</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>变量提升是因为 js 需要经历编译和执行阶段</li><li>而 js 在编译阶段的时候，会搜集所有的变量声明并且提前声明变量</li></ul><h4 id="_5-全局作用域用-var-声明的变量会挂载到-window-对象下" tabindex="-1"><a class="header-anchor" href="#_5-全局作用域用-var-声明的变量会挂载到-window-对象下" aria-hidden="true">#</a> 5）全局作用域用 var 声明的变量会挂载到 window 对象下</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-同一作用域中允许重复声明" tabindex="-1"><a class="header-anchor" href="#_6-同一作用域中允许重复声明" aria-hidden="true">#</a> 6）同一作用域中允许重复声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Global Scope</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

<span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Local Scope</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-let-关键字" tabindex="-1"><a class="header-anchor" href="#_5-let-关键字" aria-hidden="true">#</a> 5.let 关键字</h3><h4 id="_1-有块级作用域的概念" tabindex="-1"><a class="header-anchor" href="#_1-有块级作用域的概念" aria-hidden="true">#</a> 1）有块级作用域的概念</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: a is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-不存在变量提升" tabindex="-1"><a class="header-anchor" href="#_2-不存在变量提升" aria-hidden="true">#</a> 2）不存在变量提升</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: Cannot access &#39;a&#39; before initialization</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-暂时性死区" tabindex="-1"><a class="header-anchor" href="#_3-暂时性死区" aria-hidden="true">#</a> 3）暂时性死区</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: Cannot access &#39;a&#39; before initialization</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TDZ开始</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: Cannot access &#39;a&#39; before initialization</span>

  <span class="token keyword">let</span> a<span class="token punctuation">;</span> <span class="token comment">// TDZ结束</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

  a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),R={href:"https://link.segmentfault.com/?enc=K6pZVwgVNQb0IBQ9LTOuJg%3D%3D.p07UoPCGl5RslJ9ZnW9Nr36NFqs2pU%2FnSfWZUPIH3S1TUXzWdj22pH0lUMFVGVUwJkDpSHrYe8uKlYek%2FK4HBDYkJhc%2Fe2xiWo5V6teR%2BXY%3D",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,"The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variable’s LexicalBinding is evaluated.",-1),$=n("p",null,"当程序的控制流程在新的作用域（module、function 或 block 作用域）进行实例化时，在此作用域中用 let/const 声明的变量会先在作用域中被创建出来，但因此时还未进行词法绑定，所以是不能被访问的，如果访问就会抛出错误。因此，在这运行流程进入作用域创建变量，到变量可以被访问之间的这一段时间，就称之为暂时死区",-1),Q=n("br",null,null,-1),Z=n("p",null,"简单理解",-1),K=n("p",null,"ES6 规定，let/const 命令会使区块形成封闭的作用域。若在声明之前使用变量，就会报错",-1),nn=n("p",null,"总之，在代码块内，使用 let/const 命令声明变量之前，该变量都是不可用的",-1),sn=n("p",null,[s("这在语法上，称为 "),n("mark",null,"暂时性死区"),s("（Temporal Dead Zone，TDZ）")],-1),an=p(`<ul><li>上面不存在变量提升的例子中，其实也是暂时性死区</li><li>因为它有暂时性死区的概念，所以就不存在变量提升了</li></ul><h4 id="_4-同一块作用域中不允许重复声明" tabindex="-1"><a class="header-anchor" href="#_4-同一块作用域中不允许重复声明" aria-hidden="true">#</a> 4）同一块作用域中不允许重复声明</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  <span class="token keyword">let</span> <span class="token constant">A</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token constant">A</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Identifier &#39;A&#39; has already been declared</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  <span class="token keyword">var</span> <span class="token constant">A</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">A</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Identifier &#39;A&#39; has already been declared</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Block Scope</span>
  <span class="token keyword">let</span> <span class="token constant">A</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token constant">A</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Identifier &#39;A&#39; has already been declared</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-const-关键字" tabindex="-1"><a class="header-anchor" href="#_6-const-关键字" aria-hidden="true">#</a> 6.const 关键字</h3><h4 id="_1-必须立即初始化-不能留到以后赋值" tabindex="-1"><a class="header-anchor" href="#_1-必须立即初始化-不能留到以后赋值" aria-hidden="true">#</a> 1）必须立即初始化，不能留到以后赋值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Block Scope</span>
<span class="token keyword">const</span> a<span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Missing initializer in const declaration }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-常量的值不能改变" tabindex="-1"><a class="header-anchor" href="#_2-常量的值不能改变" aria-hidden="true">#</a> 2）常量的值不能改变</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Block Scope</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>const 保证的并不是变量的值不得改动，而是变量指向的那个 <mark>内存地址</mark> 所保存的数据不得改动</li></ul><h3 id="_7-特点总结" tabindex="-1"><a class="header-anchor" href="#_7-特点总结" aria-hidden="true">#</a> 7.特点总结</h3><h4 id="_1-var-关键字" tabindex="-1"><a class="header-anchor" href="#_1-var-关键字" aria-hidden="true">#</a> 1）var 关键字</h4><ul><li>没有块级作用域的概念</li><li>有全局作用域、函数作用域的概念</li><li>不初始化值默认为 undefined</li><li>存在变量提升</li><li>全局作用域用 var 声明的变量会挂载到 window 对象下</li><li>同一作用域中允许重复声明</li></ul><h4 id="_2-let-关键字" tabindex="-1"><a class="header-anchor" href="#_2-let-关键字" aria-hidden="true">#</a> 2）let 关键字</h4><ul><li>有块级作用域的概念</li><li>不存在变量提升</li><li>暂时性死区</li><li>同一块作用域中不允许重复声明</li></ul><h4 id="_3-const-关键字" tabindex="-1"><a class="header-anchor" href="#_3-const-关键字" aria-hidden="true">#</a> 3）const 关键字</h4><ul><li>与 let 特性一样，仅有 2 个差别</li><li>区别 1：必须立即初始化，不能留到以后赋值</li><li>区别 2：常量的值不能改变</li></ul><h3 id="_8-真题解答" tabindex="-1"><a class="header-anchor" href="#_8-真题解答" aria-hidden="true">#</a> 8.真题解答</h3><h4 id="_1-let-const-var-的区别-什么是块级作用域-如何用" tabindex="-1"><a class="header-anchor" href="#_1-let-const-var-的区别-什么是块级作用域-如何用" aria-hidden="true">#</a> 1）let const var 的区别？什么是块级作用域？如何用？</h4><blockquote><ol><li>var 定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问，有变量提升</li><li>let 定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问，无变量提升，不可以重复声明</li><li>const 用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改，无变量提升，不可以重复声明</li></ol><br><p>最初在 JS 中作用域有：全局作用域、函数作用域。没有块作用域的概念</p><p>ES6 中新增了块级作用域。块作用域由 { } 包括，if 语句和 for 语句里面的 { } 也属于块作用域</p><p>在以前没有块作用域的时候，在 if 或者 for 循环中声明的变量会泄露成全局变量，其次就是 { } 中的内层变量可能会覆盖外层变量。块级作用域的出现解决了这些问题</p></blockquote><h2 id="二-值和引用" tabindex="-1"><a class="header-anchor" href="#二-值和引用" aria-hidden="true">#</a> （二）值和引用</h2><h3 id="_1-经典真题-1" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-1" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>JS 的基本数据类型有哪些？基本数据类型和引用数据类型的区别</li></ul><h3 id="_2-js-中的数据类型" tabindex="-1"><a class="header-anchor" href="#_2-js-中的数据类型" aria-hidden="true">#</a> 2.JS 中的数据类型</h3><ul><li>在 JavaScript 中，数据类型整体上来讲可以分为基本类型和引用数据类型</li></ul><h4 id="_1-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_1-基本数据类型" aria-hidden="true">#</a> 1）基本数据类型</h4><ul><li>又被称为原始值或简单值</li><li>一共有 6 种 <ul><li>string</li><li>symbol</li><li>number</li><li>boolean</li><li>undefined</li><li>null</li></ul></li><li>其中 symbol 类型是在 ES6 里面新添加的基本数据类型</li></ul><h4 id="_2-引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-引用数据类型" aria-hidden="true">#</a> 2）引用数据类型</h4><ul><li>又被称为复杂值或引用值</li><li>只有 1 种</li><li>object <ul><li>包括数组、对象、函数</li></ul></li></ul><h3 id="_3-简单值-原始值" tabindex="-1"><a class="header-anchor" href="#_3-简单值-原始值" aria-hidden="true">#</a> 3.简单值（原始值）</h3><ul><li>是表示 JavaScript 中可用的数据或信息的最底层形式或最简单形式</li><li>简单类型的值被称为简单值，是因为它们是 <mark>不可细化</mark> 的 <ul><li>数字是数字</li><li>字符串是字符串</li><li>布尔值是 true 或 false</li><li>null 和 undefined 就是 null 和 undefined</li></ul></li><li>由于简单值的数据大小是固定的，所以简单值的数据是存储于 <mark>内存中的栈区</mark></li></ul><p><img src="`+u+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bol <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myNull <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> undef <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> myNull<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undef<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-null-是-object-类型" tabindex="-1"><a class="header-anchor" href="#_1-null-是-object-类型" aria-hidden="true">#</a> 1）null 是 object 类型</h4><ul><li>这是历史原因所遗留下来的问题</li><li>来源于 JavaScript 从第一个版本开始时的一个 bug，并且这个 bug 无法被修复，因为修复会破坏现有的代码</li><li>因为不同的对象在底层都表现为二进制，在 JavaScript 中，如果二进制前三位都为 0 则会被判断为 object 类型，null 的二进制全部为 0，自然前三位也是 0，所以执行 typeof 值会返回 object</li></ul><blockquote><p>例外，打印 <code>null == undefined</code> 时，返回的是 true，这也是面试时经常会被问到的一个问题</p><p>这两个值都表示“无”的意思</p></blockquote><h4 id="_2-null-和-undefined" tabindex="-1"><a class="header-anchor" href="#_2-null-和-undefined" aria-hidden="true">#</a> 2）null 和 undefined</h4><ul><li>通常情况下， 访问某个不存在的或者没有赋值的变量时，就会得到一个 undefined 值 <ul><li>JavaScript 会自动将声明时没有进行初始化的变量设为 undefined</li></ul></li><li>而 null 值表示空，null 不能通过 JavaScript 来自动赋值 <ul><li>即：必须要手动给某个变量赋值为 null</li></ul></li></ul><blockquote><p>为什么 JavaScript 要设置两个表示&quot;无&quot;的值呢？</p><br><p>这其实也是因为历史原因</p><p>1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 作为表示&quot;无&quot;的值。根据 C 语言的传统，null 被设计成可以自动转为 0</p><p>但是，JavaScript 的设计者，觉得这样做还不够，主要有以下两个原因</p><ol><li>null 像在 Java 里一样，被当成一个对象。但是，JavaScript 的数据类型分成原始类型（primitive）和复合类型（complex）两大类，作者觉得表示“无”的值最好不是对象</li><li>JavaScript 的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。作者觉得，如果 null 自动转为 0，很不容易发现错误</li></ol><p>因此，作者又设计了一个 undefined，先有 null 后有 undefined，是为了填补之前的坑</p></blockquote><ul><li>null 是一个表示“无”的 <mark>对象（空对象指针）</mark> ，转为数值时为 0</li><li>典型用法 <ul><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ul></li><li>undefined 是一个表示&quot;无&quot;的 <mark>原始值</mark>，转为数值时为 NaN</li><li>典型用法 <ul><li>变量被声明但没有赋值时，就等于 undefined</li><li>调用函数时，应该提供的参数没有提供，该参数等于 undefined</li><li>对象没有赋值的属性，该属性的值为 undefined</li><li>函数没有返回值时，默认返回 undefined</li></ul></li></ul><h3 id="_4-复杂值-引用值" tabindex="-1"><a class="header-anchor" href="#_4-复杂值-引用值" aria-hidden="true">#</a> 4.复杂值（引用值）</h3><ul><li>在 JavaScript 中，对象就是一个复杂值 <ul><li>因为对象可以向下拆分，拆分成多个简单值或者复杂值</li></ul></li><li>复杂值在内存中的 <mark>大小是未知的</mark><ul><li>因为复杂值可以包含任何值，而不是一个特定的已知值，所以复杂值的数据都是存储于 <mark>堆区</mark></li></ul></li></ul><p><img src="`+r+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单值</span>
<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token string">&quot;this is str&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 复杂值</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-访问方式" tabindex="-1"><a class="header-anchor" href="#_5-访问方式" aria-hidden="true">#</a> 5.访问方式</h3><h4 id="_1-按值访问" tabindex="-1"><a class="header-anchor" href="#_1-按值访问" aria-hidden="true">#</a> 1）按值访问</h4><ul><li>简单值是作为不可细化的值进行存储和使用的</li><li>引用它们会转移其值（值传递）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> str<span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null &quot;Hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-引用访问" tabindex="-1"><a class="header-anchor" href="#_2-引用访问" aria-hidden="true">#</a> 2）引用访问</h4><ul><li>复杂值是通过引用进行存储和操作的，而不是实际的值</li><li>创建一个包含复杂对象的变量时，其值是内存中的一个引用地址</li><li>引用一个复杂对象时，使用它的名称（即变量或对象属性）通过内存中的引用地址获取该对象值（地址传递）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zhangsan</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-比较方式" tabindex="-1"><a class="header-anchor" href="#_6-比较方式" aria-hidden="true">#</a> 6.比较方式</h3><ul><li>简单值采用值比较，而复杂值采用引用比较</li><li>复杂值只有在引用相同的对象（即有相同的地址）时才相等 <ul><li>即使是包含相同对象的两个变量也彼此不相等</li><li>因为它们并不指向同一个对象</li></ul></li></ul><h4 id="_1-示例-1" tabindex="-1"><a class="header-anchor" href="#_1-示例-1" aria-hidden="true">#</a> 1）示例 1</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例-2" tabindex="-1"><a class="header-anchor" href="#_2-示例-2" aria-hidden="true">#</a> 2）示例 2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj4 <span class="token operator">=</span> obj3<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">==</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">===</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ture</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-动态属性" tabindex="-1"><a class="header-anchor" href="#_7-动态属性" aria-hidden="true">#</a> 7.动态属性</h3><ul><li>可以为复杂值添加、修改、删除属性和方法</li><li>但简单值不可以</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>复杂值支持动态对象属性 <ul><li>因为可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新</li><li>一个新变量指向现有的复杂对象，并没有复制该对象</li><li>这就是复杂值有时被称为引用值的原因</li></ul></li><li>复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// abc abc abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-变量赋值" tabindex="-1"><a class="header-anchor" href="#_8-变量赋值" aria-hidden="true">#</a> 8.变量赋值</h3><ul><li>可以分为直接赋值和引用赋值</li></ul><h4 id="_1-直接赋值" tabindex="-1"><a class="header-anchor" href="#_1-直接赋值" aria-hidden="true">#</a> 1）直接赋值</h4><ul><li>将简单值赋值给变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-引用赋值" tabindex="-1"><a class="header-anchor" href="#_2-引用赋值" aria-hidden="true">#</a> 2）引用赋值</h4><ul><li>将一个复杂值的引用赋值给变量，这个引用指向堆区实际存在的数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span> <span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>；
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-真题解答" tabindex="-1"><a class="header-anchor" href="#_9-真题解答" aria-hidden="true">#</a> 9.真题解答</h3><h4 id="_1-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别" tabindex="-1"><a class="header-anchor" href="#_1-js-的基本数据类型有哪些-基本数据类型和引用数据类型的区别" aria-hidden="true">#</a> 1）JS 的基本数据类型有哪些？基本数据类型和引用数据类型的区别</h4><blockquote><p>在 JavaScript 中，数据类型整体上来讲可以分为两大类：基本类型和引用数据类型</p><ol><li>基本数据类型，一共有 6 种：</li></ol><p>string，symbol，number，boolean，undefined，null</p><p>其中 symbol 类型是在 ES6 里面新添加的基本数据类型</p><ol start="2"><li>引用数据类型，就只有 1 种：</li></ol><p>object</p><p>基本数据类型的值又被称之为原始值或简单值，而引用数据类型的值又被称之为复杂值或引用值</p><ol start="3"><li>两者的区别在于：</li></ol><p>原始值是表示 JavaScript 中可用的数据或信息的最底层形式或最简单形式。被称为原始值是因为它们不可细化</p><p>也就是说，数字是数字，字符是字符，布尔值是 true 或 false，null 和 undefined 就是 null 和 undefined。这些值本身很简单，不能够再进行拆分。由于原始值的数据大小是固定的，所以原始值的数据是存储于内存中的栈区里面的</p><p>在 JavaScript 中，对象就是一个引用值。因为对象可以向下拆分，拆分成多个简单值或者复杂值。引用值在内存中的大小是未知的，因为引用值可以包含任何值，而不是一个特定的已知值，所以引用值的数据都是存储于堆区里面</p><br><p>最后总结一下两者的区别：</p><ol><li>访问方式</li></ol><ul><li>原始值：访问到的是值</li><li>引用值：访问到的是引用地址</li></ul><ol start="2"><li>比较方式</li></ol><ul><li>原始值：比较的是值</li><li>引用值：比较的是地址</li></ul><ol start="3"><li>动态属性</li></ol><ul><li>原始值：无法添加动态属性</li><li>引用值：可以添加动态属性</li></ul><ol start="4"><li>变量赋值</li></ol><ul><li>原始值：赋值的是值</li><li>引用值：赋值的是地址</li></ul></blockquote><h2 id="三-包装类型" tabindex="-1"><a class="header-anchor" href="#三-包装类型" aria-hidden="true">#</a> （三）包装类型</h2><h3 id="_1-经典真题-2" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-2" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>是否了解 JavaScript 中的包装类型？</li></ul><h3 id="_2-包装类型" tabindex="-1"><a class="header-anchor" href="#_2-包装类型" aria-hidden="true">#</a> 2.包装类型</h3><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1）背景</h4><ul><li>按照最新 ES 标准定义 <ul><li>基本数据类型（primitive value）包括 undefined、null、boolean、number、symbol、string</li><li>引用类型包括 Object、Array、Date、RegExp</li></ul></li><li>这两个类型其中一个很明显的区别 <ul><li>引用类型有自己内置的方法，也可以自定义其他方法用来操作数据</li><li>而基本数据类型不能像引用类型那样有自己的内置方法对数据进行更多的操作</li></ul></li></ul><h4 id="_2-原理" tabindex="-1"><a class="header-anchor" href="#_2-原理" aria-hidden="true">#</a> 2）原理</h4><ul><li>ES 为 3 个基本数据类型提供了对应的特殊引用类型（包装类型） <ul><li>Boolean、Number、String</li></ul></li><li>基本包装类型和其他引用类型一样，拥有内置的方法可以对数据进行额外操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// string 基本类型</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>string 是一个基本类型，却能调用 charAt 的方法</li><li>是因为在执行第二行代码时，后台会自动进行下面的步骤 <ul><li>自动创建 String 类型的一个实例 <ul><li>和基本类型的值不同，这个实例就是一个基本包装类型的对象</li></ul></li><li>调用实例（对象）上指定的方法</li><li>销毁这个实例</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 平常写程序的过程</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// string 基本类型</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行到这一句时，后台会自动完成以下动作</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 1.找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span>
  <span class="token keyword">var</span> _str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2.然后这个对象就可以调用包装对象下的方法，并且返回结果给 s2</span>
  <span class="token keyword">var</span> s2 <span class="token operator">=</span> _str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3.之后这个临时创建的对象就被销毁了</span>
  _str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// h</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基本类型的值虽然没有方法可以调用，但是后台临时创建的包装对象上有内置方法可以调用 <ul><li>可以对字符串、数值、布尔值这三种基本数据类型的数据进行更多操作</li></ul></li><li>后台什么时候自动创建一个对应的基本包装类型的对象 <ul><li>取决于当前执行的代码是否是为了 <mark>获取值</mark></li></ul></li><li>即： <mark>读取一个基本类型的值/需要从内存中获取值</mark><ul><li>这个访问过程称为读取模式</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">&quot;hhh&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取模式，后台自动创建基本包装类型对象</span>
<span class="token keyword">var</span> test2 <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">// 赋值给变量 test2，也需要读取 test 的值，同上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-区别" tabindex="-1"><a class="header-anchor" href="#_3-区别" aria-hidden="true">#</a> 3）区别</h4><ul><li>基本包装类型的对象和引用类型的对象最大的一个区别 <ul><li><mark>对象的生存期</mark> 不同</li><li>导致基本包装类型无法自定义自己的方法</li></ul></li><li>对于引用类型的数据，在执行流离开当前作用域之前都会保存在内存中</li><li>对于自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，执行完毕就会立即被销毁</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">&quot;hhh&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面第二行代码给自动创建的 String 实例对象添加了 test 属性</p><p>虽然此刻代码执行时是生效的，但是在这行代码执行完毕后该 String 实例就会立刻被销毁，String 实例的 test 属性也就不存在了</p><p>当执行第三行代码时，由于是读取模式，又重新创建了新的 String 实例，而这个新创建的 String 实例没有 test 属性，结果就是 undefined</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 假设我们想给字符串添加一个属性 number ，后台会有如下步骤</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 1.找到对应的包装对象类型，然后通过包装对象创建出一个和基本类型值相同的对象</span>
  <span class="token keyword">var</span> _str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2.通过这个对象调用包装对象下的方法 但结果并没有被任何东西保存</span>
  _str<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token comment">// 3.这个对象又被销毁</span>
  _str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// undefined  当执行到这一句的时候，因为基本类型本来没有属性，后台又会重新重复上面的步骤</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 1.找到基本包装对象，然后又新开辟一个内存，创建一个值为 hello 对象</span>
  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2.因为包装对象下面没有 number 这个属性，所以又会重新添加，因为没有值，所以值是未定义;然后弹出结果</span>
  str<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token comment">// 3.这个对象又被销毁</span>
  str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-添加属性和方法" tabindex="-1"><a class="header-anchor" href="#_4-添加属性和方法" aria-hidden="true">#</a> 4）添加属性和方法</h4><ul><li>在基本包装对象的原型下面添加，每个对象都有原型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 给字符串添加方法  要写到对应的包装对象的原型下才行</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">last</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 执行到这一句，后台依然会偷偷的干这些事</span>
str<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 找到基本包装对象，new一个和字符串值相同的对象，</span>
  <span class="token keyword">var</span> _str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 通过这个对象找到了包装对象下的方法并调用</span>
  _str<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//  这个对象被销毁</span>
  _str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-真题解答" tabindex="-1"><a class="header-anchor" href="#_3-真题解答" aria-hidden="true">#</a> 3.真题解答</h3><h4 id="_1-是否了解-javascript-中的包装类型" tabindex="-1"><a class="header-anchor" href="#_1-是否了解-javascript-中的包装类型" aria-hidden="true">#</a> 1）是否了解 JavaScript 中的包装类型？</h4><blockquote><p>包装对象，就是当基本类型以对象的方式去使用时，JavaScript 会转换成对应的包装类型，相当于 new 一个对象，内容和基本类型的内容一样，然后当操作完成再去访问的时候，这个临时对象会被销毁，然后再访问时候就是 undefined</p><p>number、string、boolean 都有对应的包装类型</p><p>因为有了基本包装类型，所以 JavaScript 中的基本类型值可以被当作对象来访问</p><p>基本类型特征：</p><ol><li>每个包装类型都映射到同名的基本类型</li><li>在读取模式下访问基本类型值时，就会创建对应的基本包装类型的一个对象，从而方便了数据操作</li><li>操作基本类型值的语句一经执行完毕，就会立即销毁新创建的包装对象</li></ol></blockquote><h2 id="四-数据类型的转换" tabindex="-1"><a class="header-anchor" href="#四-数据类型的转换" aria-hidden="true">#</a> （四）数据类型的转换</h2><h3 id="_1-经典真题-3" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-3" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>JavaScript 中如何进行数据类型的转换？</li></ul><h3 id="_2-数据类型转换介绍" tabindex="-1"><a class="header-anchor" href="#_2-数据类型转换介绍" aria-hidden="true">#</a> 2.数据类型转换介绍</h3><ul><li>JavaScript 是一种动态类型语言</li><li>变量没有类型限制，可以随时赋予任意值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> y <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>变量 x 到底是数值还是字符串，取决于另一个变量 y 的值 <ul><li>y 为 true 时，x 是一个数值</li><li>y 为 false 时，x 是一个字符串</li><li>说明 x 的类型无法在编译阶段确定，必须等到运行时才能确定</li></ul></li><li>变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的 <ul><li>如果运算符发现，运算数据的类型与预期不符，就会自动转换类型</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span> <span class="token operator">-</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-强制转换-显式转换" tabindex="-1"><a class="header-anchor" href="#_3-强制转换-显式转换" aria-hidden="true">#</a> 3.强制转换（显式转换）</h3><ul><li>主要指使用 <code>Number()</code> 、 <code>String()</code> 和 <code>Boolean()</code> 三个函数</li><li>手动将各种类型的值，分别转换成数字、字符串或者布尔值</li></ul><h4 id="_1-number" tabindex="-1"><a class="header-anchor" href="#_1-number" aria-hidden="true">#</a> 1）Number()</h4><ul><li>可以将任意类型的值转化成数值</li></ul><h5 id="a-参数是原始类型值" tabindex="-1"><a class="header-anchor" href="#a-参数是原始类型值" aria-hidden="true">#</a> a）参数是原始类型值</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数值：转换后还是原来的值</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 324</span>

<span class="token comment">// 字符串：如果可以被解析为数值，则转换为相应的数值</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;324&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 324</span>

<span class="token comment">// 字符串：如果不可以被解析为数值，返回 NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;324abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// 空字符串转为0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>

<span class="token comment">// 布尔值：true 转成 1，false 转成 0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>

<span class="token comment">// undefined：转成 NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// null：转成0</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Number</code> 函数将字符串转为数值，要比 <code>parseInt</code> 函数严格很多</li><li>只要有一个字符无法转成数值，整个字符串就会被转为 <code>NaN</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;42 cats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;42 cats&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parseInt</code> 和 <code>Number</code> 函数都会自动过滤一个字符串前导和后缀的空格</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;\\t\\v\\r12.34\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;\\t\\v\\r12.34\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12.34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-参数是对象类型" tabindex="-1"><a class="header-anchor" href="#b-参数是对象类型" aria-hidden="true">#</a> b）参数是对象类型</h5><ul><li><code>Number</code> 方法的参数是对象时，将返回 <code>NaN</code></li><li>除非是包含单个数值的数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用对象自身的 <code>valueOf</code> 方法 <ul><li>如果返回原始类型的值，则直接对该值使用 <code>Number</code> 函数，不再进行后续步骤</li></ul></li><li>如果 <code>valueOf</code> 方法返回的还是对象，则改为调用对象自身的 <code>toString</code> 方法 <ul><li>如果 <code>toString</code> 方法返回原始类型的值，则对该值使用 <code>Number</code> 函数，不再进行后续步骤</li></ul></li><li>如果 <code>toString</code> 方法返回的是对象，就报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// 等同于</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>首先调用 <code>obj.valueOf</code> 方法, 结果返回对象本身</p><p>于是，继续调用 <code>obj.toString</code> 方法，返回字符串 <code>[object Object]</code></p><p>对这个字符串使用 <code>Number</code> 函数，得到 <code>NaN</code></p></blockquote><ul><li>默认情况下，对象的 <code>valueOf</code> 方法返回对象本身</li><li>所以一般总是会调用 <code>toString</code> 方法</li><li>而 <code>toString</code> 方法返回对象的类型字符串（比如 <code>[object Object]</code> ）</li><li>所以会有下面的结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果 <code>toString</code> 方法返回的不是原始类型的值，结果就会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// TypeError: Cannot convert object to primitive value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>valueOf</code> 和 <code>toString</code> 方法，都是可以自定义的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-string" tabindex="-1"><a class="header-anchor" href="#_2-string" aria-hidden="true">#</a> 2）String()</h4><ul><li><code>String</code> 函数可以将任意类型的值转化成字符串</li></ul><h5 id="a-参数是原始类型值-1" tabindex="-1"><a class="header-anchor" href="#a-参数是原始类型值-1" aria-hidden="true">#</a> a）参数是原始类型值</h5><ul><li>数值：转为相应的字符串</li><li>字符串：转换后还是原来的值</li><li>布尔值：<code>true</code> 转为字符串 <code>&quot;true&quot;</code>，<code>false</code> 转为字符串 <code>&quot;false&quot;</code></li><li>undefined：转为字符串 <code>&quot;undefined&quot;</code></li><li>null：转为字符串 <code>&quot;null&quot;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;abc&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-参数是对象" tabindex="-1"><a class="header-anchor" href="#b-参数是对象" aria-hidden="true">#</a> b）参数是对象</h5><ul><li>如果是对象，返回一个类型字符串</li><li>如果是数组，返回该数组的字符串形式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1,2,3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>String</code> 方法背后的转换规则与 <code>Number</code> 方法基本相同 <ul><li>只是 <mark>互换了 <code>valueOf</code> 方法和 <code>toString</code> 方法的执行顺序</mark></li></ul></li><li>先调用对象自身的 <code>toString</code> 方法 <ul><li>如果返回原始类型的值，则对该值使用 <code>String</code> 函数，不再进行以下步骤</li></ul></li><li>如果 <code>toString</code> 方法返回的是对象，再调用原对象的 <code>valueOf</code> 方法 <ul><li>如果 <code>valueOf</code> 方法返回原始类型的值，则对该值使用 <code>String</code> 函数，不再进行以下步骤</li></ul></li><li>如果 <code>valueOf</code> 方法返回的是对象，就报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;[object Object]&quot;</span>

<span class="token comment">// 等同于</span>
<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;[object Object]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>先调用对象的 <code>toString</code> 方法，发现返回的是字符串 <code>[object Object]</code> ，就不再调用 <code>valueOf</code>方法了</p></blockquote><ul><li>如果 <code>toString</code> 和 <code>valueOf</code> 方法，返回的都是对象，就会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// TypeError: Cannot convert object to primitive value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>valueOf</code> 和 <code>toString</code> 方法，都是可以自定义的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;3&quot;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;[object Object]&quot;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-boolean" tabindex="-1"><a class="header-anchor" href="#_3-boolean" aria-hidden="true">#</a> 3）Boolean()</h4><ul><li><code>Boolean()</code> 函数可以将任意类型的值转为布尔值</li><li>除了以下值的转换结果为 <code>false</code> ，其他的值全部为 <code>true</code><ul><li><code>false</code></li><li><code>undefined</code></li><li><code>null</code></li><li><code>0</code>（包含 <code>-0</code> 和 <code>+0</code> ）</li><li><code>NaN</code></li><li><code>&#39;&#39;</code>（空字符串）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有对象（包括空对象）的转换结果都是 <code>true</code></li><li><code>false</code> 对应的布尔对象 <code>new Boolean(false)</code> 也是 <code>true</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于 <code>obj1 &amp;&amp; obj2</code> 这样的场景，可能会需要较多的计算</p><p>为了保证性能，就统一规定，对象的布尔值为 <code>true</code></p></blockquote><h3 id="_4-自动转换-隐式转换" tabindex="-1"><a class="header-anchor" href="#_4-自动转换-隐式转换" aria-hidden="true">#</a> 4.自动转换（隐式转换）</h3><ul><li>以强制转换为基础</li><li>转换是自动完成的，用户不可见</li></ul><h4 id="_1-转换规则" tabindex="-1"><a class="header-anchor" href="#_1-转换规则" aria-hidden="true">#</a> 1）转换规则</h4><h5 id="a-不同类型的数据互相运算" tabindex="-1"><a class="header-anchor" href="#a-不同类型的数据互相运算" aria-hidden="true">#</a> a）不同类型的数据互相运算</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">123</span> <span class="token operator">+</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="b-对非布尔值类型的数据求布尔值" tabindex="-1"><a class="header-anchor" href="#b-对非布尔值类型的数据求布尔值" aria-hidden="true">#</a> b）对非布尔值类型的数据求布尔值</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c-对非数值类型的值使用一元运算符-即-和" tabindex="-1"><a class="header-anchor" href="#c-对非数值类型的值使用一元运算符-即-和" aria-hidden="true">#</a> c）对非数值类型的值使用一元运算符（即 <code>+</code> 和 <code>-</code> ）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token comment">// NaN</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>预期什么类型的值，就调用该类型的转换函数 <ul><li>如：某个位置预期为字符串，就调用 <code>String()</code> 函数进行转换</li><li>如果该位置既可以是字符串，也可能是数值，那么默认转为 <mark>数值</mark></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">自动转换具有不确定性，而且不易除错</p><p>建议在预期为布尔值、数值、字符串的地方，全部使用 <code>Boolean()</code> 、 <code>Number()</code> 和 <code>String()</code> 函数进行显式转换</p></div><h4 id="_2-自动转换为布尔值" tabindex="-1"><a class="header-anchor" href="#_2-自动转换为布尔值" aria-hidden="true">#</a> 2）自动转换为布尔值</h4><ul><li>JavaScript 遇到预期为布尔值的地方（如：<code>if</code> 语句的条件部分），会将非布尔值的参数自动转换为布尔值</li><li>系统内部会自动调用 <code>Boolean()</code> 函数</li><li>仅有以下值转换为 false <ul><li><code>undefined</code></li><li><code>null</code></li><li><code>+0</code>或<code>-0</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code>（空字符串）</li><li><code>false</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token number">NaN</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将一个表达式转为布尔值</li><li>内部调用的也是 <code>Boolean()</code> 函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>
expression <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 写法二</span>
<span class="token operator">!</span><span class="token operator">!</span>expression<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-自动转换为字符串" tabindex="-1"><a class="header-anchor" href="#_3-自动转换为字符串" aria-hidden="true">#</a> 3）自动转换为字符串</h4><ul><li>JavaScript 遇到预期为字符串的地方，会将非字符串的值自动转为字符串</li><li>先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串</li><li>字符串的自动转换，主要发生在 <mark>字符串的加法运算</mark> 时</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// &#39;51&#39;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5true&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5false&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5[object Object]&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5function (){}&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5undefined&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这种自动转换很容易出错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10020&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-自动转换为数值" tabindex="-1"><a class="header-anchor" href="#_4-自动转换为数值" aria-hidden="true">#</a> 4）自动转换为数值</h4><ul><li>JavaScript 遇到预期为数值的地方，会将参数值自动转换为数值</li><li>系统内部会自动调用 <code>Number()</code> 函数</li><li>除了加法运算符（+）有可能把运算子表达式转为字符串，其他运算符都会把运算子自动转成数值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;5&quot;</span> <span class="token operator">-</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">*</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token boolean">true</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token boolean">false</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token boolean">false</span> <span class="token operator">/</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token string">&quot;abc&quot;</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p><code>null</code> 转为数值时为 <code>0</code> ，而 <code>undefined</code> 转为数值时为 <code>NaN</code></p></div><ul><li>一元运算符也会转成数值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token operator">-</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token operator">-</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-真题解答" tabindex="-1"><a class="header-anchor" href="#_5-真题解答" aria-hidden="true">#</a> 5.真题解答</h3><h4 id="_1-javascript-中如何进行数据类型的转换" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中如何进行数据类型的转换" aria-hidden="true">#</a> 1）JavaScript 中如何进行数据类型的转换？</h4><blockquote><p>类型转换可以分为两种，隐性转换和显性转换</p><ol><li>隐性转换</li></ol><p>当不同数据类型之间进行相互运算，或者当对非布尔类型的数据求布尔值的时候，会发生隐性转换</p><p>预期为数字的时候：算术运算时，结果和运算的数都是数字，数据会转换为数字来进行计算</p><table><thead><tr><th>类型</th><th>转换前</th><th>转换后</th></tr></thead><tbody><tr><td>number</td><td>4</td><td>4</td></tr><tr><td>string</td><td>&quot;1&quot;</td><td>1</td></tr><tr><td>string</td><td>&quot;abc&quot;</td><td>NaN</td></tr><tr><td>string</td><td>&quot;&quot;</td><td>0</td></tr><tr><td>boolean</td><td>true</td><td>1</td></tr><tr><td>boolean</td><td>false</td><td>0</td></tr><tr><td>undefined</td><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>null</td><td>0</td></tr></tbody></table><p>预期为字符串的时候：有一个操作数为字符串时，使用 <code>+</code> 符号做相加运算时，会自动转换为字符串</p><p>预期为布尔的时候：前面在介绍布尔类型时所提到的 9 个值会转为 false，其余转为 true</p><ol start="2"><li>显性转换</li></ol><p>所谓显性转换，是指程序员强制将一种类型转换为另外一种类型，往往会使用到一些转换方法</p><p>常见的转换方法如下：</p><ul><li>转换为数值类型：<code>Number()</code>，<code>parseInt()</code>，<code>parseFloat()</code></li><li>转换为布尔类型：<code>Boolean()</code></li><li>转换为字符串类型：<code>toString()</code>，<code>String()</code></li></ul><p>当然，除了使用上面的转换方法，我们也可以通过一些快捷方式来进行数据类型的显性转换，如下：</p><ul><li>转换字符串：直接和一个空字符串拼接，例如：<code>a = &quot;&quot; + 数据</code></li><li>转换布尔：!!数据类型，例如：<code>!!&quot;Hello&quot;</code></li><li>转换数值：数据*1 或 /1，例如：<code>&quot;Hello * 1&quot;</code></li></ul></blockquote><h2 id="五-运算符" tabindex="-1"><a class="header-anchor" href="#五-运算符" aria-hidden="true">#</a> （五）运算符</h2><h3 id="_1-经典真题-4" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-4" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>下面代码中，a 在什么情况下会执行输出语句打印 1？</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-算术运算符" tabindex="-1"><a class="header-anchor" href="#_2-算术运算符" aria-hidden="true">#</a> 2.算术运算符</h3><ul><li>JavaScript 共提供 10 个算术运算符，用来完成基本的算术运算</li></ul><table><thead><tr><th>分类</th><th>举例</th></tr></thead><tbody><tr><td>加法运算符</td><td><code>x + y</code></td></tr><tr><td>减法运算符</td><td><code>x - y</code></td></tr><tr><td>乘法运算符</td><td><code>x * y</code></td></tr><tr><td>除法运算符</td><td><code>x / y</code></td></tr><tr><td>指数运算符</td><td><code>x ** y</code></td></tr><tr><td>余数运算符</td><td><code>x % y</code></td></tr><tr><td>自增运算符</td><td><code>++x</code> 或者 <code>x++</code></td></tr><tr><td>自减运算符</td><td><code>--x</code> 或者 <code>x--</code></td></tr><tr><td>数值运算符</td><td><code>+x</code></td></tr><tr><td>负数值运算符</td><td><code>-x</code></td></tr></tbody></table><h3 id="_3-算术运算符-加法运算符" tabindex="-1"><a class="header-anchor" href="#_3-算术运算符-加法运算符" aria-hidden="true">#</a> 3.算术运算符：加法运算符</h3><h4 id="_1-基本规则" tabindex="-1"><a class="header-anchor" href="#_1-基本规则" aria-hidden="true">#</a> 1）基本规则</h4><ul><li>求两个数值的和</li><li>JavaScript 允许非数值相加</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 布尔值都会自动转成数值，然后再相加。</span>
<span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果两个字符串相加，加法运算符会变成连接运算符</li><li>返回一个新的字符串，将两个原字符串连接在一起</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;bc&#39;</span>； <span class="token comment">// &quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果字符串和非字符串相加，非字符串会转成字符串，再连接在一起</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1a&quot;</span>
<span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;falsea&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加法运算符是在 <mark>运行时</mark> 决定，是执行相加还是执行连接 <ul><li>运算子的不同，导致了不同的语法行为</li><li>这种现象称为“重载”（overload）</li></ul></li><li>由于加法运算符存在重载，可能执行两种运算</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;3&quot;</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// &quot;345&quot;</span>
<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;75&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其他算术运算符（如：减法、除法和乘法）都不会发生重载</li><li>规则是：所有运算子一律转为数值，再进行相应的数学运算</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">-</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
<span class="token number">1</span> <span class="token operator">*</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token number">1</span> <span class="token operator">/</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 0.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-对象相加" tabindex="-1"><a class="header-anchor" href="#_2-对象相加" aria-hidden="true">#</a> 2）对象相加</h4><ul><li>必须先转成原始类型的值，然后再相加</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object Object]2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以自己定义 <code>valueOf</code> 方法或 <code>toString</code> 方法，得到想要的结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 <code>Date</code> 对象的实例相加，会优先执行 <code>toString</code> 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-算术运算符-余数运算符" tabindex="-1"><a class="header-anchor" href="#_4-算术运算符-余数运算符" aria-hidden="true">#</a> 4.算术运算符：余数运算符</h3><ul><li>余数运算符（<code>%</code>）返回前一个运算子被后一个运算子除，所得的余数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">12</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>运算结果的正负号由第一个运算子的正负号决定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
<span class="token number">1</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为了得到负数的正确余数值，可以先使用绝对值函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 错误的写法</span>
<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// 正确的写法</span>
<span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以用于浮点数的运算</li><li>由于浮点数不是精确的值，无法得到完全准确的结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">6.5</span> <span class="token operator">%</span> <span class="token number">2.1</span><span class="token punctuation">;</span> <span class="token comment">// 0.19999999999999973</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-算术运算符-自增和自减运算符" tabindex="-1"><a class="header-anchor" href="#_5-算术运算符-自增和自减运算符" aria-hidden="true">#</a> 5.算术运算符：自增和自减运算符</h3><h4 id="_1-基础使用" tabindex="-1"><a class="header-anchor" href="#_1-基础使用" aria-hidden="true">#</a> 1）基础使用</h4><ul><li>是一元运算符</li><li>作用是将运算子首先转为数值，然后加上 1 或者减去 1</li><li>会修改原始变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">++</span>x<span class="token punctuation">;</span> <span class="token comment">// 2</span>
x<span class="token punctuation">;</span> <span class="token comment">// 2</span>

<span class="token operator">--</span>x<span class="token punctuation">;</span> <span class="token comment">// 1</span>
x<span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运算之后，变量的值发生变化，这种效应叫做运算的副作用（side effect）</li><li><mark>自增和自减运算符是仅有的两个具有副作用的运算符</mark>，其他运算符都不会改变变量的值</li></ul><h4 id="_2-运算顺序" tabindex="-1"><a class="header-anchor" href="#_2-运算顺序" aria-hidden="true">#</a> 2）运算顺序</h4><ul><li>自增和自减运算符放在变量之后，会先返回变量操作前的值，再进行自增/自减操作</li><li>放在变量之前，会先进行自增/自减操作，再返回变量操作后的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token operator">++</span>y<span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-算术运算符-数值运算符-负数值运算符" tabindex="-1"><a class="header-anchor" href="#_6-算术运算符-数值运算符-负数值运算符" aria-hidden="true">#</a> 6.算术运算符：数值运算符，负数值运算符</h3><h4 id="_1-数值运算符" tabindex="-1"><a class="header-anchor" href="#_1-数值运算符" aria-hidden="true">#</a> 1）数值运算符（<code>+</code>）</h4><ul><li>同样使用加号，但它是一元运算符（只需要一个操作数） <ul><li>而加法运算符是二元运算符（需要两个操作数）</li></ul></li><li>可以将任何值转为数值（与 <code>Number</code> 函数的作用相同）</li><li>返回一个新的值，不会改变原始变量的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-负数值运算符" tabindex="-1"><a class="header-anchor" href="#_2-负数值运算符" aria-hidden="true">#</a> 2）负数值运算符（<code>-</code>）</h4><ul><li>将一个值转为数值，只不过得到的值正负相反</li><li>连用两个负数值运算符，等同于数值运算符</li><li>返回一个新的值，不会改变原始变量的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token comment">// -1</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-算术运算符-指数运算符" tabindex="-1"><a class="header-anchor" href="#_7-算术运算符-指数运算符" aria-hidden="true">#</a> 7.算术运算符：指数运算符</h3><ul><li>指数运算符（<code>**</code>）完成指数运算，前一个运算子是底数，后一个运算子是指数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>指数运算符是右结合，而不是左结合</li><li>即：多个指数运算符连用时，先进行最右边的计算</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 相当于 2 ** (3 ** 2)</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 512</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-算术运算符-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_8-算术运算符-赋值运算符" aria-hidden="true">#</a> 8.算术运算符：赋值运算符</h3><ul><li>赋值运算符（Assignment Operators）用于给变量赋值</li><li>最常见的赋值运算符是等号（<code>=</code>）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将 1 赋值给变量 x</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 将变量 y 的值赋值给变量 x</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋值运算符还可以与其他运算符结合，形成变体</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 等同于 x = x + y</span>
x <span class="token operator">+=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x - y</span>
x <span class="token operator">-=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x * y</span>
x <span class="token operator">*=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x / y</span>
x <span class="token operator">/=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x % y</span>
x <span class="token operator">%=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x ** y</span>
x <span class="token operator">**=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x &gt;&gt; y</span>
x <span class="token operator">&gt;&gt;=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x &lt;&lt; y</span>
x <span class="token operator">&lt;&lt;=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x &gt;&gt;&gt; y</span>
x <span class="token operator">&gt;&gt;&gt;=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x &amp; y</span>
x <span class="token operator">&amp;=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x | y</span>
x <span class="token operator">|=</span> y<span class="token punctuation">;</span>

<span class="token comment">// 等同于 x = x ^ y</span>
x <span class="token operator">^=</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先进行指定运算，然后将得到值返回给左边的变量</li></ul><h3 id="_9-比较运算符" tabindex="-1"><a class="header-anchor" href="#_9-比较运算符" aria-hidden="true">#</a> 9.比较运算符</h3><ul><li>用于比较两个值的大小</li><li>返回一个布尔值，表示是否满足指定的条件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>比较运算符可以比较各种类型的值，不仅仅是数值</li><li>JavaScript 一共提供了 8 个比较运算符</li></ul><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于运算符</td></tr><tr><td><code>&lt;</code></td><td>小于运算符</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于运算符</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于运算符</td></tr><tr><td><code>==</code></td><td>相等运算符</td></tr><tr><td><code>===</code></td><td>严格相等运算符</td></tr><tr><td><code>!=</code></td><td>不相等运算符</td></tr><tr><td><code>!==</code></td><td>严格不相等运算符</td></tr></tbody></table><ul><li>分成两类：相等比较和非相等比较</li><li>对于非相等的比较，算法是先看两个运算子是否都是字符串 <ul><li>如果是，就按照字典顺序比较（实际上是比较 Unicode 码点）</li><li>否则，将两个运算子都转成数值，再比较数值的大小</li></ul></li></ul><h3 id="_10-比较运算符-非相等运算符" tabindex="-1"><a class="header-anchor" href="#_10-比较运算符-非相等运算符" aria-hidden="true">#</a> 10.比较运算符：非相等运算符</h3><h4 id="_1-字符串的比较" tabindex="-1"><a class="header-anchor" href="#_1-字符串的比较" aria-hidden="true">#</a> 1）字符串的比较</h4><ul><li>字符串按照字典顺序进行比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;cat&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;dog&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token string">&quot;cat&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;catalog&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JavaScript 引擎内部首先比较首字符的 Unicode 码点</li><li>如果相等，再比较第二个字符的 Unicode 码点</li><li>以此类推</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;cat&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;Cat&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true&#39;</span>

<span class="token string">&quot;大&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;小&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-非字符串的比较" tabindex="-1"><a class="header-anchor" href="#_2-非字符串的比较" aria-hidden="true">#</a> 2）非字符串的比较</h4><ul><li>如果两个运算子中至少有一个不是字符串，需要分成以下两种情况</li></ul><h5 id="a-原始类型值" tabindex="-1"><a class="header-anchor" href="#a-原始类型值" aria-hidden="true">#</a> a）原始类型值</h5><ul><li>如果两个运算子都是原始类型的值，则是先转成数值再比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 5 &gt; Number(&#39;4&#39;)</span>
<span class="token comment">// 即 5 &gt; 4</span>

<span class="token boolean">true</span> <span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 Number(true) &gt; Number(false)</span>
<span class="token comment">// 即 1 &gt; 0</span>

<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 2 &gt; Number(true)</span>
<span class="token comment">// 即 2 &gt; 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与 <code>NaN</code> 的比较</li><li>任何值（包括 <code>NaN</code> 本身）与 <code>NaN</code> 使用非相等运算符进行比较，返回的都是 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">&gt;</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">&lt;=</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">NaN</span> <span class="token operator">&gt;</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">NaN</span> <span class="token operator">&lt;=</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-对象" tabindex="-1"><a class="header-anchor" href="#b-对象" aria-hidden="true">#</a> b）对象</h5><ul><li>如果运算子是对象，会转为原始类型的值，再进行比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
x <span class="token operator">&gt;</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 [2].valueOf().toString() &gt; &#39;11&#39;</span>
<span class="token comment">// 即 &#39;2&#39; &gt; &#39;11&#39;</span>

x<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
x <span class="token operator">&gt;</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 等同于 [2].valueOf() &gt; &#39;11&#39;</span>
<span class="token comment">// 即 &#39;1&#39; &gt; &#39;11&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两个对象之间的比较也是如此</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 [2].valueOf().toString() &gt; [1].valueOf().toString()</span>
<span class="token comment">// 即 &#39;2&#39; &gt; &#39;1&#39;</span>

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 [2].valueOf().toString() &gt; [11].valueOf().toString()</span>
<span class="token comment">// 即 &#39;2&#39; &gt; &#39;11&#39;</span>

<span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token operator">&gt;=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 { x: 2 }.valueOf().toString() &gt;= { x: 1 }.valueOf().toString()</span>
<span class="token comment">// 即 &#39;[object Object]&#39; &gt;= &#39;[object Object]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-比较运算符-严格相等运算符" tabindex="-1"><a class="header-anchor" href="#_11-比较运算符-严格相等运算符" aria-hidden="true">#</a> 11.比较运算符：严格相等运算符</h3><ul><li>JavaScript 提供两种相等运算符：<code>==</code> 和 <code>===</code></li><li>相等运算符（<code>==</code>）比较两个值是否相等 <ul><li>严格相等运算符（<code>===</code>）比较它们是否为“同一个值”</li></ul></li><li>如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回 <code>false</code><ul><li>而相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较</li></ul></li></ul><h4 id="_1-不同类型的值" tabindex="-1"><a class="header-anchor" href="#_1-不同类型的值" aria-hidden="true">#</a> 1）不同类型的值</h4><ul><li>如果两个值的类型不同，直接返回 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span>； <span class="token comment">// false</span>
<span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">&quot;true&quot;</span>； <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-同一类的原始类型值" tabindex="-1"><a class="header-anchor" href="#_2-同一类的原始类型值" aria-hidden="true">#</a> 2）同一类的原始类型值</h4><ul><li>同一类型的原始类型的值（数值、字符串、布尔值）比较时</li><li>值相同就返回 <code>true</code> ，值不同就返回 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0x1</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>NaN</code> 与任何值都不相等（包括自身）</li><li>正 <code>0</code> 等于负 <code>0</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-复合类型值" tabindex="-1"><a class="header-anchor" href="#_3-复合类型值" aria-hidden="true">#</a> 3）复合类型值</h4><ul><li>两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等</li><li>而是比较它们是否指向同一个地址</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果两个变量引用同一个对象，则它们相等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span>
v1 <span class="token operator">===</span> v2<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

obj1 <span class="token operator">&gt;</span> obj2<span class="token punctuation">;</span> <span class="token comment">// false</span>
obj1 <span class="token operator">&lt;</span> obj2<span class="token punctuation">;</span> <span class="token comment">// false</span>
obj1 <span class="token operator">===</span> obj2<span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-undefined-和-null" tabindex="-1"><a class="header-anchor" href="#_4-undefined-和-null" aria-hidden="true">#</a> 4）undefined 和 null</h4><ul><li><code>undefined</code> 和 <code>null</code> 与自身严格相等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于变量声明后默认值是<code>undefined</code>，因此两个只声明未赋值的变量是相等的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> v1<span class="token punctuation">;</span>
<span class="token keyword">var</span> v2<span class="token punctuation">;</span>
v1 <span class="token operator">===</span> v2<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-比较运算符-严格不相等运算符" tabindex="-1"><a class="header-anchor" href="#_12-比较运算符-严格不相等运算符" aria-hidden="true">#</a> 12.比较运算符：严格不相等运算符</h3><ul><li>严格不相等运算符（<code>!==</code>）的算法是先求严格相等运算符的结果，然后返回相反值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">!==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于</span>
<span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-比较运算符-相等运算符" tabindex="-1"><a class="header-anchor" href="#_13-比较运算符-相等运算符" aria-hidden="true">#</a> 13.比较运算符：相等运算符</h3><ul><li>相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>比较不同类型的数据时先将数据进行类型转换，然后再用严格相等运算符比较</li></ul><h4 id="_1-原始类型值" tabindex="-1"><a class="header-anchor" href="#_1-原始类型值" aria-hidden="true">#</a> 1）原始类型值</h4><ul><li>原始类型的值会转换成数值再进行比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 1 === Number(true)</span>

<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 0 === Number(false)</span>

<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 等同于 2 === Number(true)</span>

<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 等同于 2 === Number(false)</span>

<span class="token string">&quot;true&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 等同于 Number(&#39;true&#39;) === Number(true)</span>
<span class="token comment">// 等同于 NaN === 1</span>

<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 Number(&#39;&#39;) === 0</span>
<span class="token comment">// 等同于 0 === 0</span>

<span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 Number(&#39;&#39;) === Number(false)</span>
<span class="token comment">// 等同于 0 === 0</span>

<span class="token string">&quot;1&quot;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 等同于 Number(&#39;1&#39;) === Number(true)</span>
<span class="token comment">// 等同于 1 === 1</span>

<span class="token string">&quot;\\n  123  \\t&quot;</span> <span class="token operator">==</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// 因为字符串转为数字时，省略前置和后置的空格</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-对象与原始类型值比较" tabindex="-1"><a class="header-anchor" href="#_2-对象与原始类型值比较" aria-hidden="true">#</a> 2）对象与原始类型值比较</h4><ul><li>对象转换成原始类型的值，再进行比较</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组与数值的比较</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 数组与字符串的比较</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;1,2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 对象与布尔值的比较</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行 valueOf()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;执行 toString()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj <span class="token operator">==</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 执行 valueOf()</span>
<span class="token comment">// 执行 toString()</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-undefined-和-null" tabindex="-1"><a class="header-anchor" href="#_3-undefined-和-null" aria-hidden="true">#</a> 3）undefined 和 null</h4><ul><li><code>undefined</code> 和 <code>null</code> 只有与自身比较，或者互相比较时，才会返回 <code>true</code></li><li>与其他类型的值比较时，结果都为 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-相等运算符的缺点" tabindex="-1"><a class="header-anchor" href="#_4-相等运算符的缺点" aria-hidden="true">#</a> 4）相等运算符的缺点</h4><ul><li>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token number">2</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token string">&quot; \\t\\r\\n &quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这些表达式都不同于直觉，很容易出错</li><li>建议不要使用相等运算符（<code>==</code>），最好只使用严格相等运算符（<code>===</code>）</li></ul><h3 id="_14-比较运算符-不相等运算符" tabindex="-1"><a class="header-anchor" href="#_14-比较运算符-不相等运算符" aria-hidden="true">#</a> 14.比较运算符：不相等运算符</h3><ul><li>不相等运算符（<code>!=</code>）的算法是先求相等运算符的结果，然后返回相反值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">!=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// 等同于</span>
<span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-布尔运算符-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_15-布尔运算符-逻辑运算符" aria-hidden="true">#</a> 15.布尔运算符（逻辑运算符）</h3><ul><li>用于将表达式转为布尔值，一共包含四个运算符</li></ul><table><thead><tr><th>运算符</th><th>符号</th></tr></thead><tbody><tr><td>取反运算符</td><td><code>!</code></td></tr><tr><td>且（并）运算符</td><td><code>&amp;&amp;</code></td></tr><tr><td>或运算符</td><td><code>||</code></td></tr><tr><td>三元运算符</td><td><code>?:</code></td></tr></tbody></table><h3 id="_16-布尔运算符-取反运算符" tabindex="-1"><a class="header-anchor" href="#_16-布尔运算符-取反运算符" aria-hidden="true">#</a> 16.布尔运算符：取反运算符</h3><ul><li>取反运算符（!）是一个感叹号，用于将布尔值变为相反值</li><li>即：<code>true</code> 变成 <code>false</code> ，<code>false</code> 变成 <code>true</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于非布尔值，取反运算符会将其转为布尔值</li><li>以下六个值取反后为 <code>true</code> ，其他值都为 <code>false</code><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li>空字符串（<code>&#39;&#39;</code>）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token operator">!</span><span class="token number">54</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果对一个值连续做两次取反运算，等于将其转为对应的布尔值</li><li>与 <code>Boolean</code> 函数的作用相同</li><li>这是一种常用的类型转换的写法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span>x<span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-布尔运算符-且运算符" tabindex="-1"><a class="header-anchor" href="#_17-布尔运算符-且运算符" aria-hidden="true">#</a> 17.布尔运算符：且运算符</h3><ul><li>且运算符（<code>&amp;&amp;</code>）往往用于多个表达式的求值</li><li>如果第一个运算子的布尔值为 <code>true</code> ，则返回 <mark>第二个运算子的值</mark>（注意是值，不是布尔值）</li><li>如果第一个运算子的布尔值为 <code>false</code>，则直接返回 <mark>第一个运算子的值</mark>，且不再对第二个运算子求值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;t&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
<span class="token string">&quot;t&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;f&quot;</span>
<span class="token string">&quot;t&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
<span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
x<span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这种跳过第二个运算子的机制，被称为“短路”</li><li>有时可以取代 <code>if</code> 结构</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
i <span class="token operator">&amp;&amp;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>且运算符可以多个连用，这时返回 <mark>第一个布尔值为 <code>false</code> 的表达式的值</mark></li><li>如果所有表达式的布尔值都为 <code>true</code>，则返回 <mark>最后一个表达式的值</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>

<span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-布尔运算符-或运算符" tabindex="-1"><a class="header-anchor" href="#_18-布尔运算符-或运算符" aria-hidden="true">#</a> 18.布尔运算符：或运算符</h3><ul><li>或运算符（<code>||</code>）也用于多个表达式的求值</li><li>如果第一个运算子的布尔值为 <code>true</code> ，则返回 <mark>第一个运算子的值</mark> ，且不再对第二个运算子求值</li><li>如果第一个运算子的布尔值为 <code>false</code> ，则返回 <mark>第二个运算子的值</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;t&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;t&quot;</span>
<span class="token string">&quot;t&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;t&quot;</span>
<span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;f&quot;</span>
<span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>短路规则对这个运算符也适用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
x<span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）</li><li>或运算符可以多个连用，这时返回 <mark>第一个布尔值为 <code>true</code> 的表达式的值</mark></li><li>如果所有表达式都为 <code>false</code> ，则返回 <mark>最后一个表达式的值</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>或运算符常用于为一个变量设置默认值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">saveText</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  text <span class="token operator">=</span> text <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者写成</span>
<span class="token function">saveText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-布尔运算符-三元条件运算符" tabindex="-1"><a class="header-anchor" href="#_19-布尔运算符-三元条件运算符" aria-hidden="true">#</a> 19.布尔运算符：三元条件运算符</h3><ul><li>三元条件运算符（?:）由问号（?）和冒号（:）组成，分隔三个表达式</li><li>是唯一一个需要三个运算子的运算符</li><li>如果第一个表达式的布尔值为 <code>true</code> ，则返回第二个表达式的值，否则返回第三个表达式的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;t&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello&quot;</span>
<span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>三元条件表达式与 <code>if...else</code> 语句具有同样表达效果</li><li><code>if...else</code> 是语句，没有返回值</li><li>三元条件表达式是表达式，具有返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string">&quot;T&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_20-位运算符" tabindex="-1"><a class="header-anchor" href="#_20-位运算符" aria-hidden="true">#</a> 20.位运算符</h3><ul><li>按位运算符是将操作数换算成 32 位的二进制整数，然后按每一位来进行运算</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 的 32 位为：
00000000000000000000000000000101

100 的 32 位为：
00000000000000000000000001100100

15 的 32 位为：
00000000000000000000000000001111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-位运算符-按位非" tabindex="-1"><a class="header-anchor" href="#_21-位运算符-按位非" aria-hidden="true">#</a> 21.位运算符：按位非</h3><ul><li>按位非运算符 <code>~</code> 会把数字转为 32 位二进制整数，然后反转每一位</li><li>所有的 1 变为 0，所有的 0 变为 1</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>5 的 32 位为：
00000000000000000000000000000101

~5 的 32 位为：
11111111111111111111111111111010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>转换出来就为 -6</li><li>按位非，实质上是对操作数求负，然后减去 1</li></ul><h3 id="_22-位运算符-按位与" tabindex="-1"><a class="header-anchor" href="#_22-位运算符-按位与" aria-hidden="true">#</a> 22.位运算符：按位与</h3><ul><li>按位或运算符 <code>&amp;</code> 会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位与运算</li><li>全 1 为 1</li></ul><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">&amp;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>12 的 32 位二进制表示为：1100</li><li>10 的 32 位二进制表示为：1010</li><li>按位与的结果为：1000</li></ul><h3 id="_23-位运算符-按位或" tabindex="-1"><a class="header-anchor" href="#_23-位运算符-按位或" aria-hidden="true">#</a> 23.位运算符：按位或</h3><ul><li>按位或运算符 <code>|</code> 会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位或运算</li><li>全 0 为 0</li></ul><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">|</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>12 的 32 位二进制表示为：1100</li><li>10 的 32 位二进制表示为：1010</li><li>按位或的结果为：1110</li></ul><h3 id="_24-位运算符-按位异或" tabindex="-1"><a class="header-anchor" href="#_24-位运算符-按位异或" aria-hidden="true">#</a> 24.位运算符：按位异或</h3><ul><li>按位或运算符 <code>^</code> 会把两个数字转为 32 位二进制整数，并对两个数的每一位执行按位异或运算</li><li>异 1 同 0</li></ul><table><thead><tr><th>第一个数字</th><th>第二个数字</th><th>结果</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">^</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>12 的 32 位二进制表示为：1100</li><li>10 的 32 位二进制表示为：1010</li><li>按位异或的结果为：0110</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Hello 被转换为了 NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">^</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">^</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">^</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token operator">^</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">^</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">^</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是非整数值，两个操作数中只有一个为真，就返回 1</li><li>如果两个操作数都是真，或者都是假，就返回 0</li></ul><h3 id="_25-位运算符-按位移位" tabindex="-1"><a class="header-anchor" href="#_25-位运算符-按位移位" aria-hidden="true">#</a> 25.位运算符：按位移位</h3><ul><li>按位移位运算符 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 会将所有位向左或者向右移动指定的数量</li><li>实际上就是高效率地将数字乘以或者除以 2 的指定数的次方</li><li><code>&lt;&lt;</code>：乘以 2 的指定数次方</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token comment">// 2 乘以 2 的 2 次方</span>
<span class="token comment">// 00000010 转换为 00001000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&gt;&gt;</code>：除以 2 的指定数次方</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
<span class="token comment">// 16 除以 2 的 1 次方</span>
<span class="token comment">// 00010000转换为00001000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-其他运算符" tabindex="-1"><a class="header-anchor" href="#_26-其他运算符" aria-hidden="true">#</a> 26.其他运算符</h3><h4 id="_1-void-运算符" tabindex="-1"><a class="header-anchor" href="#_1-void-运算符" aria-hidden="true">#</a> 1）void 运算符</h4><ul><li>执行一个表达式，然后不返回任何值，或者说返回 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token comment">// void (0); // undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>推荐括号写法</li><li>void 运算符的优先性很高，如果不使用括号，容易造成错误的结果</li><li>如：“void 4 + 7” 实际上等同于 “(void 4) + 7”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
x<span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个运算符的主要用途是浏览器的书签工具（Bookmarklet），以及在超级链接中插入代码防止网页跳转</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- &lt;a href=&quot;http://example.com&quot; onclick=&quot;f(); return false;&quot;&gt;点击&lt;/a&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript: void(f())<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用户点击链接提交表单，但是不产生页面跳转</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript: void(document.form.submit())<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_2-逗号运算符" aria-hidden="true">#</a> 2）逗号运算符</h4><ul><li>对两个表达式求值，并返回后一个表达式的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b&quot;</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token punctuation">;</span> <span class="token comment">// 1</span>
y<span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi!</span>

value<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_27-运算顺序" tabindex="-1"><a class="header-anchor" href="#_27-运算顺序" aria-hidden="true">#</a> 27.运算顺序</h3><h4 id="_1-优先级" tabindex="-1"><a class="header-anchor" href="#_1-优先级" aria-hidden="true">#</a> 1）优先级</h4><ul><li>各种运算符的优先级别（Operator Precedence）是不一样的</li><li>优先级高的运算符先执行，优先级低的运算符后执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 34</span>
<span class="token comment">// 4 + (5 * 6); // 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>乘法运算符（ <code>*</code> ）的优先性高于加法运算符（ <code>+</code> ）</li><li>先执行乘法，再执行加法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> y <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> x <span class="token operator">:</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// var y = ((arr.length &lt;= 0) || (arr[0] === undefined)) ? x : arr[0];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据语言规格，这五个运算符的优先级从高到低依次为 <ul><li>小于等于（ &lt;= )</li><li>严格相等（ === ）</li><li>或（ || ）</li><li>三元（ ?: ）</li><li>等号（ = ）</li></ul></li><li>记住所有运算符的优先级，是非常难的，也是没有必要的</li></ul><h4 id="_2-圆括号的作用" tabindex="-1"><a class="header-anchor" href="#_2-圆括号的作用" aria-hidden="true">#</a> 2）圆括号的作用</h4><ul><li>用来提高运算的优先级</li><li>因为它的优先级是最高的，即圆括号中的表达式会第一个运算</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>圆括号不是运算符，而是一种语法结构</li><li>一共有两种用法 <ul><li>把表达式放在圆括号之中，提升运算的优先级</li><li>跟在函数的后面，作用是调用函数</li></ul></li><li>因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// (x) = 2;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果整个表达式都放在圆括号之中，那么不会有任何效果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// (expression);</span>
<span class="token comment">// 等同于</span>
expression<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数放在圆括号中，会返回函数本身</li><li>如果圆括号紧跟在函数的后面，就表示调用函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// (f); // function f(){return 1;}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>圆括号中只能放置表达式</li><li>如果将语句放在圆括号之中，就会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// SyntaxError: Unexpected token var</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-左结合和右结合" tabindex="-1"><a class="header-anchor" href="#_3-左结合和右结合" aria-hidden="true">#</a> 3）左结合和右结合</h4><ul><li>对于优先级别相同的运算符，同时出现时就会有计算顺序的问题</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一</span>
<span class="token punctuation">(</span>a <span class="token constant">OP</span> b<span class="token punctuation">)</span> <span class="token constant">OP</span> c

<span class="token comment">// 方式二</span>
a <span class="token constant">OP</span> <span class="token punctuation">(</span>b <span class="token constant">OP</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式一是将左侧两个运算数结合在一起 <ul><li>采用这种解释方式的运算符，称为“左结合”（left-to-right associativity）运算符</li></ul></li><li>方式二是将右侧两个运算数结合在一起 <ul><li>这样的运算符称为“右结合”运算符（right-to-left associativity）</li></ul></li><li>JavaScript 语言的大多数运算符是“左结合”</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span> <span class="token comment">// 引擎解释如下</span>
<span class="token comment">// (x + y) + z;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>少数运算符是“右结合”</li><li>最主要的是赋值运算符（ = ）和三元条件运算符（ ?: ）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>w <span class="token operator">=</span> x <span class="token operator">=</span> y <span class="token operator">=</span> z<span class="token punctuation">;</span>
q <span class="token operator">=</span> a <span class="token operator">?</span> b <span class="token operator">:</span> c <span class="token operator">?</span> d <span class="token operator">:</span> e <span class="token operator">?</span> f <span class="token operator">:</span> g<span class="token punctuation">;</span>

<span class="token comment">// 引擎解释如下</span>
<span class="token comment">// w = (x = (y = z));</span>
<span class="token comment">// q = a ? b : (c ? d : (e ? f : g));</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指数运算符（ <code>**</code> ）也是右结合</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 相当于 2 ** (3 ** 2)</span>
<span class="token comment">// 512</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28-真题解答" tabindex="-1"><a class="header-anchor" href="#_28-真题解答" aria-hidden="true">#</a> 28.真题解答</h3><h4 id="_1-下面代码中-a-在什么情况下会执行输出语句打印-1" tabindex="-1"><a class="header-anchor" href="#_1-下面代码中-a-在什么情况下会执行输出语句打印-1" aria-hidden="true">#</a> 1）下面代码中，a 在什么情况下会执行输出语句打印 1？</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>方法一：利用 toString() 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：利用 valueOf() 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="六-原型和原型链" tabindex="-1"><a class="header-anchor" href="#六-原型和原型链" aria-hidden="true">#</a> （六）原型和原型链</h2><h3 id="_1-经典真题-5" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-5" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>说一说你对 JavaScript 中原型与原型链的理解？（美团 2019 年）</li><li>对一个构造函数实例化后，它的原型链指向什么？</li></ul><h3 id="_2-原型与原型链介绍" tabindex="-1"><a class="header-anchor" href="#_2-原型与原型链介绍" aria-hidden="true">#</a> 2.原型与原型链介绍</h3><ul><li>在 Brendan Eich 设计 JavaScript 时，借鉴了 Self 和 Smalltalk 这两门基于原型的语言</li><li>之所以选择基于原型的对象系统，是因为作者一开始就没有打算在 JavaScript 中加入类的概念</li><li>设计初衷就是为非专业的开发人员（例如网页设计者）提供一个方便的工具</li><li>由于大部分网页设计者都没有任何的编程背景，所以在设计 JavaScript 时也是尽可能使其简单、易学</li><li>所以 JavaScript 中的原型以及原型链成为了这门语言最大的一个特点</li><li>JavaScript 是一门基于原型的语言，<mark>对象是通过原型对象产生的</mark></li></ul><h3 id="_2-克隆对象" tabindex="-1"><a class="header-anchor" href="#_2-克隆对象" aria-hidden="true">#</a> 2.克隆对象</h3><ul><li>ES5 中提供了 Object.create 方法，可以用来克隆对象</li></ul><h4 id="_1-原型对象" tabindex="-1"><a class="header-anchor" href="#_1-原型对象" aria-hidden="true">#</a> 1）原型对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arms</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">legs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;walking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zhangsan <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>arms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>legs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
zhangsan<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// walking</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过 Object.create 方法对 person 对象进行克隆，克隆出来一个名为 zhangsan 的对象</p><p>所以 person 对象就是 zhangsan 这个对象的原型对象</p><p>person 对象上面的属性和方法，zhangsan 这个对象上面都有</p></blockquote><ul><li>通过 <code>__proto__</code> 属性可以访问到一个对象的原型对象</li></ul><h4 id="_2-新属性" tabindex="-1"><a class="header-anchor" href="#_2-新属性" aria-hidden="true">#</a> 2）新属性</h4><ul><li>可以传入第 2 个参数，是一个 JSON 对象</li><li>该对象可以书写新对象的新属性以及属性特性</li><li>通过这种方式，基于对象创建的新对象，可以 <mark>继承</mark> 祖辈对象的属性和方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arms</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">legs</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;walking&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zhangsan <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">born</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;chengdu&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zhangxiaosan <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;zhangxiaosan&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zhangxiaosan</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">.</span>born<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// chengdu</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">.</span>arms<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">.</span>legs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
zhangxiaosan<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// walking</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>zhangxiaosan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>zhangsan 这个对象是从 person 这个对象克隆而来的，而 zhangxiaosan 这个对象又是从 zhangsan 这个对象克隆而来，以此 <mark>形成了一条原型链</mark></p><p>无论是 person 对象，还是 zhangsan 对象上面的属性和方法，zhangxiaosan 这个对象都能继承到</p></blockquote><p><img src="`+k+`" alt=""></p><ul><li>这就是 JavaScript 中最原始的创建对象的方式</li><li>一个对象是通过克隆另外一个对象所得到的</li><li>通过克隆可以创造一个一模一样的对象</li><li>被克隆的对象是新对象的原型对象</li></ul><h3 id="_3-构造函数模拟类" tabindex="-1"><a class="header-anchor" href="#_3-构造函数模拟类" aria-hidden="true">#</a> 3.构造函数模拟类</h3><blockquote><p>随着 JavaScript 语言的发展，这样创建对象的方式还是太过于麻烦了</p><p>开发者还是期望 JavaScript 能够像 Java、C# 等标准面向对象语言一样，通过类来批量的生成对象</p><p>于是出现了通过构造函数来模拟类的形式</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性写在类里面</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法挂在原型对象上面</span>
<span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 苹果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12000</span>
apple<span class="token punctuation">.</span><span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台苹果电脑</span>

<span class="token keyword">const</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span> <span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huawei<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 华为</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huawei<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7000</span>
huawei<span class="token punctuation">.</span><span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台华为电脑</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Computer 函数称为构造函数，为了区分普通函数和构造函数，一般构造函数的函数名会 <mark>首字母大写</mark></li><li>构造函数一般配合 new 关键字使用 <ul><li>每 new 一次，就会生成一个新的对象</li><li>在构造函数中的 this 就指向这个新生成的对象</li></ul></li><li>Computer 构造函数的实例方法并没有书写在构造函数里面，而是写在了 Computer.prototype 上 <ul><li>实际上就是 Computer 实例对象的原型对象</li></ul></li></ul><p><img src="`+d+`" alt=""></p><h4 id="_1-重要的三角关系" tabindex="-1"><a class="header-anchor" href="#_1-重要的三角关系" aria-hidden="true">#</a> 1）重要的三角关系</h4><ul><li>JavaScript 中每个对象都有一个原型对象 <ul><li>可以通过 <code>__proto__</code> 属性来访问到对象的原型对象</li></ul></li><li>构造函数的 <code>prototype</code> 属性指向一个对象 <ul><li>这个对象是该构造函数实例化出来的对象的原型对象</li></ul></li><li>原型对象的 <code>constructor</code> 属性也指向其构造函数</li><li>实例对象的 <code>constructor</code> 属性访问的是原型对象上的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性写在类里面</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法挂在原型对象上面</span>
<span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Computer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性写在类里面</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法挂在原型对象上面</span>
<span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Computer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 数组的三角关系</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// 其实所有的构造函数的原型对象都相同</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Date<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Number<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所有的构造函数，无论是自定义的还是内置的，它们的原型对象都是同一个对象</p></blockquote><h4 id="_2-原型对象的原型链" tabindex="-1"><a class="header-anchor" href="#_2-原型对象的原型链" aria-hidden="true">#</a> 2）原型对象的原型链</h4><p><img src="`+v+`" alt=""></p><ul><li>在 JavaScript 中，每一个对象，都有一个原型对象</li><li>而原型对象上面也有一个自己的原型对象，一层一层向上找，最终会到达 <mark>null</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性写在类里面</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法挂在原型对象上面</span>
<span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Object: null prototype] {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 自定义构造函数函数</span>
<span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Computer<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  Computer<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Computer<span class="token punctuation">.</span>__proto__
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-真题解答" tabindex="-1"><a class="header-anchor" href="#_4-真题解答" aria-hidden="true">#</a> 4.真题解答</h3><h4 id="_1-说一说你对-javascript-中原型与原型链的理解-美团-2019-年" tabindex="-1"><a class="header-anchor" href="#_1-说一说你对-javascript-中原型与原型链的理解-美团-2019-年" aria-hidden="true">#</a> 1）说一说你对 JavaScript 中原型与原型链的理解？（美团 2019 年）</h4><blockquote><ul><li>每个对象都有一个 <code>__proto__</code> 属性，该属性指向自己的原型对象</li><li>每个构造函数都有一个 prototype 属性，该属性指向实例对象的原型对象</li><li>原型对象里的 constructor 指向构造函数本身</li></ul><br><p>每个对象都有自己的原型对象，而原型对象本身，也有自己的原型对象，从而形成了一条原型链条</p><br><p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</p></blockquote><h4 id="_2-对一个构造函数实例化后-它的原型链指向什么" tabindex="-1"><a class="header-anchor" href="#_2-对一个构造函数实例化后-它的原型链指向什么" aria-hidden="true">#</a> 2）对一个构造函数实例化后，它的原型链指向什么？</h4><blockquote><p>指向该构造函数实例化出来对象的原型对象</p><p>对于构造函数来讲，可以通过 prototype 访问到该对象</p><p>对于实例对象来讲，可以通过隐式属性 <code>__proto__</code> 来访问到</p></blockquote><h2 id="七-执行栈和执行上下文" tabindex="-1"><a class="header-anchor" href="#七-执行栈和执行上下文" aria-hidden="true">#</a> （七）执行栈和执行上下文</h2><h3 id="_1-经典真题-6" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-6" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>谈谈你对 JavaScript 执行上下文栈理解</li></ul><h3 id="_2-执行上下文介绍" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文介绍" aria-hidden="true">#</a> 2.执行上下文介绍</h3><ul><li>Execution Context，代码（全局代码、函数代码）执行前进行的准备工作，也称为执行上下文环境</li><li>运行 JavaScript 代码，当代码执行进入一个环境时，就会为该环境创建一个执行上下文 <ul><li>会在运行代码前做一些准备工作</li><li>如：确定作用域，创建局部变量对象等</li></ul></li></ul><h4 id="_1-javascript-中的执行环境" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中的执行环境" aria-hidden="true">#</a> 1）JavaScript 中的执行环境</h4><ul><li>全局环境 =&gt; 全局执行上下文</li><li>函数环境 =&gt; 函数执行上下文</li><li>eval 函数环境（已不推荐使用） =&gt; eval 函数执行上下文</li></ul><h4 id="_2-顺序" tabindex="-1"><a class="header-anchor" href="#_2-顺序" aria-hidden="true">#</a> 2）顺序</h4><ul><li>JavaScript 运行时首先会进入全局环境，对应会生成全局上下文</li><li>程序代码中基本都会存在函数，调用函数就会进入函数执行环境，对应就会生成该函数的执行上下文 <ul><li>声明多个函数，对应会生成多个函数执行上下文</li></ul></li><li>在 JavaScript 中，通过 <mark>栈的存取方式</mark> 来管理执行上下文 <ul><li>称为执行栈，或函数调用栈（Call Stack）</li></ul></li></ul><h4 id="_3-栈数据结构" tabindex="-1"><a class="header-anchor" href="#_3-栈数据结构" aria-hidden="true">#</a> 3）栈数据结构</h4><ul><li>栈遵循“先进后出，后进先出”的规则，LIFO（Last In First Out）规则</li><li>栈中放入/取出的操作，也可称为入栈/出栈</li><li>栈数据结构的特点 <ul><li>后进先出，先进后出</li><li>出口在顶部，且仅有一个</li></ul></li></ul><h3 id="_3-执行栈-函数调用栈" tabindex="-1"><a class="header-anchor" href="#_3-执行栈-函数调用栈" aria-hidden="true">#</a> 3.执行栈（函数调用栈）</h3><ul><li>程序执行进入一个执行环境时，它的执行上下文就会被创建，并被推入执行栈中（入栈）</li><li>程序执行完成时，它的执行上下文就会被销毁，并从栈顶被推出（出栈），控制权交由下一个执行上下文</li><li>因为 JavaScript 在执行代码时最先进入全局环境 <ul><li><mark>处于栈底的永远是全局环境的执行上下文</mark></li><li><mark>处于栈顶的是当前正在执行函数的执行上下文</mark></li></ul></li><li>当函数调用完成后，就会从栈顶被推出 <ul><li>理想的情况下，闭包会阻止该操作</li></ul></li><li>全局环境只有一个，对应的全局执行上下文也只有一个 <ul><li>只有当页面被关闭之后它才会从执行栈中被推出，否则一直存在于栈底</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;I am bar&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt=""></p><h3 id="_4-执行上下文的数量限制-堆栈溢出" tabindex="-1"><a class="header-anchor" href="#_4-执行上下文的数量限制-堆栈溢出" aria-hidden="true">#</a> 4.执行上下文的数量限制（堆栈溢出）</h3><ul><li>执行上下文可存在多个 <ul><li>虽然没有明确的数量限制，但如果超出栈分配的空间，会造成堆栈溢出</li></ul></li><li>常见于递归调用，没有终止条件造成死循环的场景</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 递归调用自身</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 报错： Uncaught RangeError: Maximum call stack size exceeded</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-执行上下文的生命周期" tabindex="-1"><a class="header-anchor" href="#_5-执行上下文的生命周期" aria-hidden="true">#</a> 5.执行上下文的生命周期</h3><ul><li>有两个阶段 <ul><li>创建阶段（进入执行上下文） <ul><li>函数被调用时，进入函数环境，为其创建一个执行上下文</li></ul></li><li>执行阶段（代码执行） <ul><li>执行函数中的代码时</li></ul></li></ul></li></ul><h4 id="_1-创建阶段" tabindex="-1"><a class="header-anchor" href="#_1-创建阶段" aria-hidden="true">#</a> 1）创建阶段</h4><ul><li>创建变量对象（VO，Variable Object） <ul><li>确定函数的形参并赋值</li><li>函数环境会初始化创建 Arguments 对象并赋值</li><li>确定普通字面量形式的函数声明并赋值</li><li>变量声明，函数表达式声明，<mark>未赋值</mark></li></ul></li><li>确定 this 指向 <ul><li>由调用者确定</li></ul></li><li>确定作用域 <ul><li>词法环境决定</li><li>哪里声明定义，就在哪里确定</li></ul></li></ul><h4 id="_2-变量对象" tabindex="-1"><a class="header-anchor" href="#_2-变量对象" aria-hidden="true">#</a> 2）变量对象</h4><ul><li>当处于执行上下文的建立阶段时，可以将整个上下文环境看作是一个对象</li><li>该对象拥有 3 个属性 <ul><li>变量对象</li><li>作用域链</li><li>this 指向</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 变量对象，里面包含 Arguments 对象，形式参数，函数和局部变量</span>
  <span class="token literal-property property">variableObject</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 作用域链，包含内部上下文所有变量对象的列表</span>
  <span class="token literal-property property">scopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 上下文中 this 的指向对象</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在函数的建立阶段，首先会建立 Arguments 对象</li><li>然后确定形式参数，检查当前上下文中的函数声明 <ul><li>每找到一个函数声明，就在 variableObject 下面用函数名建立一个属性</li><li>属性值就指向该函数在内存中的地址的一个引用</li></ul></li><li>如果上述函数名已经存在于 variableObject（简称 VO）中 <ul><li>对应的属性值会被新的引用给覆盖</li></ul></li><li>最后确定当前上下文中的局部变量 <ul><li>如果遇到和函数名同名的变量，则会忽略该变量</li></ul></li></ul><h4 id="_3-执行阶段" tabindex="-1"><a class="header-anchor" href="#_3-执行阶段" aria-hidden="true">#</a> 3）执行阶段</h4><ul><li>变量对象赋值 <ul><li>变量赋值</li><li>函数表达式赋值</li></ul></li><li>调用函数</li><li>顺序执行其它代码</li></ul><h4 id="_4-生命周期" tabindex="-1"><a class="header-anchor" href="#_4-生命周期" aria-hidden="true">#</a> 4）生命周期</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">privateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>建立阶段的变量对象 <ul><li>除了 Arguments、函数的声明、形式参数被赋予了具体的属性值外</li><li>其它的变量属性默认的都是 undefined</li><li>并且普通形式声明的函数的提升在变量的上面</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">variableObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 确定 Arguments 对象</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token number">0</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 确定形式参数</span>
    <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token comment">// 确定函数引用</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&quot;pointer to function c()&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 局部变量 初始值为 undefined</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token comment">// 局部变量 初始值为 undefined</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">scopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一旦建立阶段结束，引擎就会进入代码执行阶段 <ul><li>只有在代码执行阶段，局部变量才会被赋予具体的值</li><li>这其实也就解释了变量提升的原理</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">variableObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token number">0</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&quot;pointer to function c()&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// a 变量被赋值为 Hello</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// b 变量被赋值为 privateB() 函数</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&quot;pointer to function privateB()&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">scopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-iife-函数中的生命周期" tabindex="-1"><a class="header-anchor" href="#_5-iife-函数中的生命周期" aria-hidden="true">#</a> 5）IIFE 函数中的生命周期</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>该函数在建立阶段的变量对象 <ul><li>首先确定 Arguments 对象</li><li>然后是形式参数（本例中不存在形式参数）</li><li>接下来开始确定函数的引用 <ul><li>找到 foo 函数后，创建 foo 标识符来指向 foo 函数</li><li>之后同名的 foo 变量不会再被创建，会直接被忽略</li></ul></li><li>然后创建 bar 变量，初始值为 undefined</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">variableObject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;pointer to function foo()&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">scopeChain</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>建立阶段完成之后，进入代码执行阶段，开始一句一句的执行代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// foo 被重新赋值 变成了一个字符串</span>
  <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello string</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-真题解答" tabindex="-1"><a class="header-anchor" href="#_6-真题解答" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-谈谈你对-javascript-执行上下文栈理解" tabindex="-1"><a class="header-anchor" href="#_1-谈谈你对-javascript-执行上下文栈理解" aria-hidden="true">#</a> 1）谈谈你对 JavaScript 执行上下文栈理解</h4><blockquote><ol><li>什么是执行上下文？</li></ol><p>简而言之，执行上下文是评估和执行 JavaScript 代码的环境的抽象概念。每当 JavaScript 代码在运行的时候，它都是在执行上下文中运行</p><ol start="2"><li>执行上下文的类型</li></ol><p>JavaScript 中有三种执行上下文类型</p><ul><li>全局执行上下文：这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事，创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文</li><li>函数执行上下文：每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li><li>Eval 函数执行上下文：执行在 eval 函数内部的代码也会有它属于自己的执行上下文</li></ul><ol start="3"><li>调用栈</li></ol><p>调用栈是解析器（如浏览器中的的 JavaScript 解析器）的一种机制，可以在脚本调用多个函数时，跟踪每个函数在完成执行时应该返回控制的点（如什么函数正在执行，什么函数被这个函数调用，下一个调用的函数是谁）</p><ul><li>当脚本要调用一个函数时，解析器把该函数添加到栈中并且执行这个函数</li><li>任何被这个函数调用的函数会进一步添加到调用栈中，并且运行到它们被上个程序调用的位置</li><li>当函数运行结束后，解释器将它从堆栈中取出，并在主代码列表中继续执行代码</li><li>如果栈占用的空间比分配给它的空间还大，那么则会导致“栈溢出”错误</li></ul></blockquote><h2 id="八-作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#八-作用域和作用域链" aria-hidden="true">#</a> （八）作用域和作用域链</h2><h3 id="_1-经典真题-7" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-7" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>谈谈你对作用域和作用域链的理解？</li></ul><h3 id="_2-作用域-scope" tabindex="-1"><a class="header-anchor" href="#_2-作用域-scope" aria-hidden="true">#</a> 2.作用域（Scope）</h3><ul><li>作用域是在运行时代码中的某些特定部分中变量、函数和对象的可访问性</li><li>即：作用域决定了代码区块中变量和其他资源的可见性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> inVariable <span class="token operator">=</span> <span class="token string">&quot;内层变量2&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: inVariable is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>变量 inVariable 在全局作用域没有声明，所以在全局作用域下取值会报错</p></blockquote><ul><li>作用域就是一个独立的地盘，让变量不会外泄、暴露出去</li><li>作用域最大的用处就是 <mark>隔离变量</mark> ，不同作用域下同名变量不会有冲突</li><li>ES6 之前 JavaScript 只有全局作用域和函数作用域</li><li>ES6 提供了块级作用域，可通过 let 和 const 体现</li></ul><h3 id="_3-全局作用域" tabindex="-1"><a class="header-anchor" href="#_3-全局作用域" aria-hidden="true">#</a> 3.全局作用域</h3><ul><li>在代码中任何地方都能访问到的对象拥有全局作用域</li></ul><h4 id="_1-拥有全局作用域的情况" tabindex="-1"><a class="header-anchor" href="#_1-拥有全局作用域的情况" aria-hidden="true">#</a> 1）拥有全局作用域的情况</h4><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> outVariable <span class="token operator">=</span> <span class="token string">&quot;我是最外层变量&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 最外层变量</span>
<span class="token keyword">function</span> <span class="token function">outFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 最外层函数</span>
  <span class="token keyword">var</span> inVariable <span class="token operator">=</span> <span class="token string">&quot;内层变量&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内层函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我是最外层变量</span>
<span class="token function">outFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内层变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inVariable is not defined</span>
<span class="token function">innerFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// innerFun is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有未定义直接赋值的变量自动声明为拥有全局作用域</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  variable <span class="token operator">=</span> <span class="token string">&quot;未定义直接赋值的变量&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> inVariable2 <span class="token operator">=</span> <span class="token string">&quot;内层变量2&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">outFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 要先执行这个函数，否则根本不知道里面是啥</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 未定义直接赋值的变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVariable2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inVariable2 is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有 window 对象的属性拥有全局作用域</li><li>如：window.name、window.location、window.top 等等</li></ul><h4 id="_2-全局作用域弊端" tabindex="-1"><a class="header-anchor" href="#_2-全局作用域弊端" aria-hidden="true">#</a> 2）全局作用域弊端</h4><ul><li>会污染全局命名空间，容易引起命名冲突</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 张三写的代码中</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 李四写的代码中</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因此 jQuery、Zepto 等库的源码，所有的代码都会放在 <code>(function(){....})()</code> 中</li><li>放在里面的所有变量，都不会被外泄和暴露，不会污染到全局，不会对其他的库或者 JS 脚本造成影响</li><li>这是函数作用域的一个体现</li></ul><h3 id="_4-函数作用域" tabindex="-1"><a class="header-anchor" href="#_4-函数作用域" aria-hidden="true">#</a> 4.函数作用域</h3><ul><li>指声明在函数内部的变量</li><li>和全局作用域相反，局部作用域一般只在 <mark>固定的代码片段内可访问到</mark></li><li>最常见的如：函数内部 =&gt; 函数作用域</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> stuName <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">innerSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">innerSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 脚本错误</span>
<span class="token function">innerSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 脚本错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行</mark></li></ul><p><img src="`+h+`" alt=""></p><blockquote><p>输出的结果为 2、4、12</p><p>1 是全局作用域，有标识符 foo</p><p>2 是作用域 foo，有标识符 a、bar、b</p><p>3 是作用域 bar，仅有标识符 c</p></blockquote><ul><li>块语句（大括号 <code>{}</code> 中间的语句，如：if、switch 条件语句或 for、while 循环语句），不像函数</li><li>不会创建一个新的作用域</li><li>在块语句中定义的变量将保留在它们已经存在的作用域中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// &#39;if&#39; 条件语句块不会创建一个新的作用域</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Hammad&quot;</span><span class="token punctuation">;</span> <span class="token comment">// name 依然在全局作用域中</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &#39;Hammad&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-块级作用域" tabindex="-1"><a class="header-anchor" href="#_5-块级作用域" aria-hidden="true">#</a> 5.块级作用域</h3><ul><li>块级作用域可通过 let 和 const 声明</li><li>所声明的变量在指定块的作用域外无法被访问</li></ul><h4 id="_1-创建块级作用域" tabindex="-1"><a class="header-anchor" href="#_1-创建块级作用域" aria-hidden="true">#</a> 1）创建块级作用域</h4><ul><li>在一个函数内部</li><li>在一个代码块（由一对花括号包裹）内部</li></ul><h4 id="_2-块级作用域特点" tabindex="-1"><a class="header-anchor" href="#_2-块级作用域特点" aria-hidden="true">#</a> 2）块级作用域特点</h4><h5 id="a-声明变量不会提升到代码块顶部" tabindex="-1"><a class="header-anchor" href="#a-声明变量不会提升到代码块顶部" aria-hidden="true">#</a> a）声明变量不会提升到代码块顶部</h5><ul><li>需要手动将 let、const 声明放置到顶部，以便让变量在整个代码块内部可用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// value 在此处不可用</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// value 在此处不可用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-禁止重复声明" tabindex="-1"><a class="header-anchor" href="#b-禁止重复声明" aria-hidden="true">#</a> b）禁止重复声明</h5><ul><li>如果一个标识符已经在代码块内部被定义，那么在此代码块内使用同一个标识符进行 let 声明就会抛出错误</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught SyntaxError: Identifier &#39;count&#39; has already been declared</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果在嵌套的作用域内使用 let 声明一个同名的新变量，则不会抛出错误</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment">// 不会抛出错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
  <span class="token comment">// 其他代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c-循环中绑定块级作用域" tabindex="-1"><a class="header-anchor" href="#c-循环中绑定块级作用域" aria-hidden="true">#</a> c）循环中绑定块级作用域</h5><ul><li>可以把声明的计数器变量限制在循环内</li><li>需求: 点击某个按钮, 提示“点击的是第 n 个按钮”</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>点击任意一个按钮，都是弹出“第四个” <ul><li>因为 i 是全局变量，执行到点击事件时 i 的值为 3</li></ul></li><li>最简单的是用 let 声明 i</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;个&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-作用域链" tabindex="-1"><a class="header-anchor" href="#_6-作用域链" aria-hidden="true">#</a> 6.作用域链</h3><h4 id="_1-自由变量" tabindex="-1"><a class="header-anchor" href="#_1-自由变量" aria-hidden="true">#</a> 1）自由变量</h4><ul><li>当前作用域没有定义的变量</li><li>自由变量的值需要向父级作用域寻找 <ul><li>这种说法并不严谨</li><li>要到创建这个函数的作用域中寻找</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 a 在这里就是一个自由变量</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-作用域链" tabindex="-1"><a class="header-anchor" href="#_2-作用域链" aria-hidden="true">#</a> 2）作用域链</h4><ul><li>如果父级没找到自由变量的值</li><li>再一层一层向上寻找，直到找到全局作用域还是没找到，就返回 undefined</li><li>这种一层一层的关系，就是作用域链</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100 自由变量，顺作用域链向父作用域找</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200 自由变量，顺作用域链向父作用域找</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300 本作用域的变量</span>
  <span class="token punctuation">}</span>
  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-关于自由变量的取值" tabindex="-1"><a class="header-anchor" href="#_7-关于自由变量的取值" aria-hidden="true">#</a> 7.关于自由变量的取值</h3><blockquote><p>上文提到要到父作用域中取，其实有时候这种解释会产生歧义</p></blockquote><h4 id="_1-示例-1-1" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-1" aria-hidden="true">#</a> 1）示例 1</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10，而不是 20</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 fn 函数中取自由变量 x 的值时，要到创建 fn 函数的那个作用域中取</li><li><mark>无论 fn 函数将在哪里调用</mark></li><li>这里强调的是“创建”，而不是“调用” <ul><li>这就是所谓的“静态作用域”</li></ul></li></ul><h4 id="_2-示例-2-1" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-1" aria-hidden="true">#</a> 2）示例 2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> food <span class="token operator">=</span> <span class="token string">&quot;rice&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eat </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> food <span class="token operator">=</span> <span class="token string">&quot;noodle&quot;</span><span class="token punctuation">;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eat rice</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于 <code>eat()</code> 函数来说，创建该函数时的父级上下文为全局上下文</li><li>所以 food 的值为 rice</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> food <span class="token operator">=</span> <span class="token string">&quot;rice&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> food <span class="token operator">=</span> <span class="token string">&quot;noodle&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">eat </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eat noodle</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于 <code>eat()</code> 函数来说，创建时的父级上下文为 IIFE</li><li>所以 food 的值为 noodle</li></ul><h3 id="_8-作用域与执行上下文" tabindex="-1"><a class="header-anchor" href="#_8-作用域与执行上下文" aria-hidden="true">#</a> 8.作用域与执行上下文</h3><ul><li>JavaScript 属于解释型语言</li><li>执行分为：解释和执行两个阶段</li></ul><h4 id="_1-解释阶段" tabindex="-1"><a class="header-anchor" href="#_1-解释阶段" aria-hidden="true">#</a> 1）解释阶段</h4><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><h4 id="_2-执行阶段" tabindex="-1"><a class="header-anchor" href="#_2-执行阶段" aria-hidden="true">#</a> 2）执行阶段</h4><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><h4 id="_3-区分" tabindex="-1"><a class="header-anchor" href="#_3-区分" aria-hidden="true">#</a> 3）区分</h4><ul><li>作用域在函数定义时确定 <ul><li>而不是在函数调用时确定</li><li>因为解释阶段会确定作用域规则</li></ul></li><li>执行上下文在函数执行前创建 <ul><li>this 的指向在函数执行时确定</li></ul></li><li>作用域访问的变量由编写代码的结构确定</li></ul><div class="hint-container danger"><p class="hint-container-title">作用域和执行上下文之间的最大区别</p><ul><li>执行上下文在运行时确定，随时可能改变</li><li>作用域在定义时就确定，并且不会改变</li></ul></div><h3 id="_9-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_9-真题解答-1" aria-hidden="true">#</a> 9.真题解答</h3><h4 id="_1-谈谈你对作用域和作用域链的理解" tabindex="-1"><a class="header-anchor" href="#_1-谈谈你对作用域和作用域链的理解" aria-hidden="true">#</a> 1）谈谈你对作用域和作用域链的理解？</h4><blockquote><ol><li>作业域</li></ol><p>ES5 中只存在两种作用域：全局作用域和函数作用域，ES6 新增了块级作用域</p><p>在 JavaScript 中将作用域定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套子作用域中根据标识符名称查找变量（变量名或者函数名）</p><ol start="2"><li>作用域链</li></ol><p>当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止</p><p>而作用域链，就是由当前作用域与上层作用域的一系列变量对象组成，保证了当前执行的作用域对符合访问权限的变量和函数的有序访问</p><p>作用域链有一个非常重要的特性，那就是作用域中的值是在函数创建的时候，就已经被存储了，是静态的</p><p>所谓静态，就是说作用域中的值一旦被确定了，永远不会变。函数可以永远不被调用，但是作用域中的值在函数创建的时候就已经被写入了，并且存储在函数作用域链对象里面</p></blockquote><h2 id="九-this-指向" tabindex="-1"><a class="header-anchor" href="#九-this-指向" aria-hidden="true">#</a> （九）this 指向</h2><h3 id="_1-经典真题-8" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-8" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>this 的指向有哪几种？</li></ul><h3 id="_2-this-指向的规律" tabindex="-1"><a class="header-anchor" href="#_2-this-指向的规律" aria-hidden="true">#</a> 2.this 指向的规律</h3><ul><li><mark>this 总是返回一个对象</mark></li></ul><blockquote><p>关于 this 的指向，有一种广为流传的说法就是“谁调用它，this 就指向谁”</p><p>这样的说法没有太大的问题，但是并不是太全面</p></blockquote><ul><li>在函数体中，非显式或隐式地简单调用函数时 <ul><li>在严格模式下，函数内的 this 会被绑定到 undefined 上</li><li>在非严格模式下，会被绑定到全局对象 window/global 上</li></ul></li><li>一般使用 new 方法调用构造函数时 <ul><li>构造函数内的 this 会被绑定到新创建的实例对象上</li></ul></li><li>一般通过 call/apply/bind 方法显式调用函数时 <ul><li>函数体内的 this 会被绑定到指定参数的对象上</li></ul></li><li>一般通过上下文对象调用函数时 <ul><li>函数体内的 this 会被绑定到该对象上</li></ul></li><li>在箭头函数中 <ul><li>this 的指向由外层（函数或全局）作用域决定</li></ul></li></ul><h3 id="_3-全局环境中的-this" tabindex="-1"><a class="header-anchor" href="#_3-全局环境中的-this" aria-hidden="true">#</a> 3.全局环境中的 this</h3><h4 id="_1-示例-1-2" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-2" aria-hidden="true">#</a> 1）示例 1</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window or global</span>
<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例-2-2" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-2" aria-hidden="true">#</a> 2）示例 2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window or global</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fn1 <span class="token operator">=</span> foo<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this 仍然指向 window</p><p>fn 函数在 foo 对象中作为该对象的一个方法，但是在赋值给 fn1 之后，fn1 仍然是在 window 的全局环境下执行的</p><p>因此上面的代码仍然会输出 window 和 undefined</p></blockquote><h4 id="_3-示例-3" tabindex="-1"><a class="header-anchor" href="#_3-示例-3" aria-hidden="true">#</a> 3）示例 3</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { bar: 10, fn: [Function: fn] }</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this 指向的是最后调用它的对象</p><p>在 foo.fn() 语句中，this 指向的是 foo 对象</p></blockquote><h3 id="_4-上下文对象调用中的-this" tabindex="-1"><a class="header-anchor" href="#_4-上下文对象调用中的-this" aria-hidden="true">#</a> 4.上下文对象调用中的 this</h3><h4 id="_1-示例-1-3" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-3" aria-hidden="true">#</a> 1）示例 1</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this 指向当前的对象 student，所以最终会返回 true</p></blockquote><h4 id="_2-示例-2-3" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-3" aria-hidden="true">#</a> 2）示例 2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">son</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangxiaosan&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>son<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zhangxiaosan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>this 指向最后调用它的对象(son)</p></blockquote><h4 id="_3-示例-3-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-3-1" aria-hidden="true">#</a> 3）示例 3</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;o1&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;o2&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;o3&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> fn <span class="token operator">=</span> o1<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// o1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第三个是 undefined</p><p>这里将 o1.fn 赋值给了 fn，所以 <code>fn === function () { return this.text; }</code></p><p>该函数在调用的时候，是直接 fn() 的形式调用的，并不是以对象的形式</p><p>相当于还是全局调用，指向 window，所以打印出 undefined</p></blockquote><h3 id="_5-this-指向绑定事件的元素" tabindex="-1"><a class="header-anchor" href="#_5-this-指向绑定事件的元素" aria-hidden="true">#</a> 5.this 指向绑定事件的元素</h3><ul><li>DOM 元素绑定事件时，事件处理函数里面的 this 指向 <mark>绑定事件的元素</mark></li><li>事件处理函数里面的 <code>e.target</code> 指向 <mark>触发事件的元素</mark></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>color-list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// this 是绑定事件的元素</span>
<span class="token comment">// target 是触发事件的元素 和 srcElement 等价</span>
<span class="token keyword">let</span> colorList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;color-list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
colorList<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;target:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;srcElement:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+`" alt=""></p><ul><li>在 div 节点的事件函数内部，有一个局部的 callback 方法</li><li>该方法被作为普通函数调用时，callback 内部的 this 是指向全局对象 window 的</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// div1</span>
  <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为是普通函数调用，所以 this 指向 window</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时有一种简单的解决方案</li><li>可以用一个变量 <mark>保存 div 节点的引用</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;window&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// div1</span>
  <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 保存当前 this 的指向</span>
  <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// div1</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>this 的指向受函数运行环境的影响，指向经常改变，使得开发变得困难和模糊</li><li>所以在封装 sdk 或者写一些复杂函数的时候经常会用到 this 指向绑定，以避免出现不必要的问题</li></ul></div><h3 id="_6-call、apply、bind-方法修改-this-指向" tabindex="-1"><a class="header-anchor" href="#_6-call、apply、bind-方法修改-this-指向" aria-hidden="true">#</a> 6.call、apply、bind 方法修改 this 指向</h3><h4 id="_1-function-prototype-call" tabindex="-1"><a class="header-anchor" href="#_1-function-prototype-call" aria-hidden="true">#</a> 1）Function.prototype.call()</h4><h5 id="a-指定-this-的指向" tabindex="-1"><a class="header-anchor" href="#a-指定-this-的指向" aria-hidden="true">#</a> a）指定 this 的指向</h5><ul><li>即：指定函数执行时所在的的作用域</li><li>然后在指定的作用域中执行函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this 指向 window</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 改变 this 指向 obj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-一个参数-this-新指向" tabindex="-1"><a class="header-anchor" href="#b-一个参数-this-新指向" aria-hidden="true">#</a> b）一个参数：this 新指向</h5><ul><li>call 方法的参数应该是对象 obj</li><li>如果参数为空或 null、undefined，则默认指向全局对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">456</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果参数不是以上类型</li><li>则转化成对应的包装对象，然后传入方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number {[[PrimitiveValue]]: 5}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c-多个参数" tabindex="-1"><a class="header-anchor" href="#c-多个参数" aria-hidden="true">#</a> c）多个参数</h5><ul><li>第一个参数是 this 指向的对象</li><li>之后的是函数回调所需的参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="d-应用" tabindex="-1"><a class="header-anchor" href="#d-应用" aria-hidden="true">#</a> d）应用</h5><ul><li>调用对象的原生方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// 覆盖掉继承的 hasOwnProperty 方法</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">hasOwnProperty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-function-prototype-apply" tabindex="-1"><a class="header-anchor" href="#_2-function-prototype-apply" aria-hidden="true">#</a> 2）Function.prototype.apply()</h4><ul><li>作用和 call 类似，也是改变 this 指向，然后调用该函数</li><li>唯一区别是 apply 接收 <mark>数组</mark> 作为函数执行时的参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="a-参数" tabindex="-1"><a class="header-anchor" href="#a-参数" aria-hidden="true">#</a> a）参数</h5><ul><li>第一个参数是 this 所要指向的那个对象 <ul><li>如果设为 null 或 undefined，则等同于指定全局对象</li></ul></li><li>第二个参数是一个数组 <ul><li>该数组的所有成员依次作为参数，传入原函数</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-应用" tabindex="-1"><a class="header-anchor" href="#b-应用" aria-hidden="true">#</a> b）应用</h5><ul><li>输出数组的最大值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用 Array 构造函数将数组中的空值转化成 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[&#39;a&#39;,undefined,&#39;b&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">空元素与 undefined 的差别</p><p>数组的 forEach 方法会跳过空元素，但是不会跳过 undefined</p></div><ul><li>配合数组对象的 slice 方法可以将一个类似数组的对象（如：arguments 对象）转为真正的数组</li><li>被处理的对象必须要有 length 属性，以及相对应的数字键</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, undefined]</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-function-prototype-bind" tabindex="-1"><a class="header-anchor" href="#_3-function-prototype-bind" aria-hidden="true">#</a> 3）Function.prototype.bind()</h4><ul><li>bind 用于将函数体内的 this 绑定到某个对象，然后返回一个新函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1481869925657</span>

<span class="token keyword">var</span> print <span class="token operator">=</span> d<span class="token punctuation">.</span>getTime<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: this is not a Date object.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>报错是因为 d.getTime 赋值给 print 后，getTime 内部的 this 指向发生变化，不再指向 date 对象实例</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> print <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1481869925657</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="a-一个参数" tabindex="-1"><a class="header-anchor" href="#a-一个参数" aria-hidden="true">#</a> a）一个参数</h5><ul><li>接收的参数就是所要绑定的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token function-variable function">inc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>绑定到其他对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token function-variable function">inc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> func <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-多个参数" tabindex="-1"><a class="header-anchor" href="#b-多个参数" aria-hidden="true">#</a> b）多个参数</h5><ul><li>将这些参数绑定到原函数的参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> newAdd <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x</span>
<span class="token function">newAdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果第一个参数是 null 或 undefined，即是将 this 绑定到全局对象</li><li>函数运行时 this 指向顶层对象（浏览器为 window，Node 为 global）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> plus5 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">plus5</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>主要目的是绑定参数 x，以后每次运行新函数 plus5 只需要提供另一个参数 y</p></blockquote><h5 id="c-每一次返回一个新函数" tabindex="-1"><a class="header-anchor" href="#c-每一次返回一个新函数" aria-hidden="true">#</a> c）每一次返回一个新函数</h5><ul><li>会产生一些问题</li><li>如：监听事件的时候，不能写成下面这样</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>click 事件绑定 bind 方法生成的一个匿名函数</p><p>这样会导致无法取消绑定</p></blockquote><ul><li>正确的写法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> listener <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  ...</span>
element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="d-结合回调函数使用" tabindex="-1"><a class="header-anchor" href="#d-结合回调函数使用" aria-hidden="true">#</a> d）结合回调函数使用</h5><ul><li>使用回调模式时的常见错误，是将包含 this 的方法直接当作回调函数</li><li>解决方法就是使用 bind 方法，将 counter.inc 绑定 counter</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token function-variable function">inc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">callIt</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">callIt</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counter<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>callIt 方法会调用回调函数</p><p>如果直接把 counter.inc 传入，调用时 counter.inc 内部的 this 就会指向全局对象</p><p>使用 bind 方法将 counter.inc 绑定 counter 后，this 总是指向 counter</p></blockquote><ul><li>某些数组方法接受一个函数当作参数</li><li>这些函数内部的 this 指向很可能也会出错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">times</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">print</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>times<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有任何输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>obj.print 内部 this.times 的 this 指向 obj</p><p>但是，forEach 方法的回调函数内部的 this.name 却是指向全局对象，导致没有办法取到值</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>times<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 bind 方法绑定 this</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>times<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 张三</span>
<span class="token comment">// 张三</span>
<span class="token comment">// 张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="e-结合-call-方法使用" tabindex="-1"><a class="header-anchor" href="#e-结合-call-方法使用" aria-hidden="true">#</a> e）结合 call 方法使用</h5><ul><li>可以改写一些 JavaScript 原生方法的使用形式</li><li>以数组的 slice 方法为例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数组的 slice 方法从 [1, 2, 3] 里面，按照指定位置和长度切分出另一个数组</p><p>本质是在 [1, 2, 3] 上调用 Array.prototype.slice 方法，因此可以用 call 方法表达这个过程，得到同样的结果</p><p>call 方法实质上是调用 Function.prototype.call 方法，因此上面的表达式可以用 bind 方法改写</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> slice <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>将 Array.prototype.slice 变成 Function.prototype.call 方法所在的对象</p><p>调用时就变成了 Array.prototype.slice.call</p><p>类似的写法还可以用于其他数组方法</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> push <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pop <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>

<span class="token function">pop</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>再进一步，将 Function.prototype.call 方法绑定到 Function.prototype.bind 对象</p><p>意味着 bind 的调用形式也可以被改写</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bind <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">bind</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>将 Function.prototype.bind 方法绑定在 Function.prototype.call 上</p><p>所以 bind 方法就可以直接使用，不需要在函数实例上使用</p></blockquote><h3 id="_7-箭头函数的-this-指向" tabindex="-1"><a class="header-anchor" href="#_7-箭头函数的-this-指向" aria-hidden="true">#</a> 7.箭头函数的 this 指向</h3><ul><li>当 this 是以函数的形式调用时，指向的是全局对象</li><li>箭头函数的 this 始终指向外层的作用域</li></ul><h4 id="_1-示例-1-4" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-4" aria-hidden="true">#</a> 1）示例 1</h4><ul><li>普通函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指向 obj 对象</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { x: 10, test: [Function: test] }</span>
<span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>箭头函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// {}</span>
<span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>this 实际上指向的是全局对象</li><li>将这段代码放入浏览器运行 <ul><li>在浏览器中用 var 所声明的变量会成为全局对象 window 的一个属性</li></ul></li></ul><p><img src="`+f+`" alt=""></p><h4 id="_2-示例-2-4" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-4" aria-hidden="true">#</a> 2）示例 2</h4><ul><li>普通函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">i</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// i 是以函数的形式被调用的，所以 this 指向全局</span>
      <span class="token comment">// 在浏览器环境中打印出 JavaScript，node 里面为 undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JavaScript</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>箭头函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">i</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 由于 i 为一个箭头函数，所以 this 是指向外层的</span>
      <span class="token comment">// 所以 this.name 将会打印出 PHP</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// PHP</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-箭头函数不能作为构造函数" tabindex="-1"><a class="header-anchor" href="#_3-箭头函数不能作为构造函数" aria-hidden="true">#</a> 3）箭头函数不能作为构造函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// TypeError: Test is not a constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_8-真题解答-1" aria-hidden="true">#</a> 8.真题解答</h3><h4 id="_1-this-的指向有哪几种" tabindex="-1"><a class="header-anchor" href="#_1-this-的指向有哪几种" aria-hidden="true">#</a> 1）this 的指向有哪几种？</h4><blockquote><p>this 的指向规律有如下几条：</p><ol><li>在函数体中，非显式或隐式地简单调用函数时，在严格模式下，函数内的 this 会被绑定到 undefined 上，在非严格模式下则会被绑定到全局对象 window/global 上</li><li>一般使用 new 方法调用构造函数时，构造函数内的 this 会被绑定到新创建的对象上</li><li>一般通过 call/apply/bind 方法显式调用函数时，函数体内的 this 会被绑定到指定参数的对象上</li><li>一般通过上下文对象调用函数时，函数体内的 this 会被绑定到该对象上</li><li>在箭头函数中，this 的指向是由外层（函数或全局）作用域来决定的</li></ol></blockquote><h2 id="十-垃圾回收与内存泄漏" tabindex="-1"><a class="header-anchor" href="#十-垃圾回收与内存泄漏" aria-hidden="true">#</a> （十）垃圾回收与内存泄漏</h2><h3 id="_1-经典真题-9" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-9" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>请介绍一下 JavaScript 中的垃圾回收站机制</li></ul><h3 id="_2-内存泄露" tabindex="-1"><a class="header-anchor" href="#_2-内存泄露" aria-hidden="true">#</a> 2.内存泄露</h3><ul><li>程序的运行需要内存 <ul><li>只要程序申请内存空间，操作系统或者运行时（runtime）就必须供给内存</li></ul></li><li>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存 <ul><li>否则，内存占用越来越高</li><li>轻则影响系统性能，重则导致进程崩溃</li></ul></li><li>如果没有及时释放不再用到的内存，就会造成内存泄漏（memory leak）</li></ul><h3 id="_3-javascript-中的垃圾回收" tabindex="-1"><a class="header-anchor" href="#_3-javascript-中的垃圾回收" aria-hidden="true">#</a> 3.JavaScript 中的垃圾回收</h3><ul><li>浏览器的 JavaScript 具有自动垃圾回收机制（GC，Garbage Collection）</li><li>执行环境会负责管理代码执行过程中使用的内存</li></ul><h4 id="_1-原理" tabindex="-1"><a class="header-anchor" href="#_1-原理" aria-hidden="true">#</a> 1）原理</h4><ul><li>垃圾收集器会定期（周期性）找出那些不再继续使用的变量，然后释放其内存</li></ul><h4 id="_2-gc-不是实时的" tabindex="-1"><a class="header-anchor" href="#_2-gc-不是实时的" aria-hidden="true">#</a> 2）GC 不是实时的</h4><ul><li>因为其开销比较大</li><li>且 GC 过程中会停止响应其他操作</li><li>所以垃圾回收器会按照固定的时间间隔，周期性地执行</li></ul><h4 id="_3-不再使用的变量" tabindex="-1"><a class="header-anchor" href="#_3-不再使用的变量" aria-hidden="true">#</a> 3）不再使用的变量</h4><ul><li>也就是生命周期结束的变量，当然只可能是局部变量 <ul><li>全局变量的生命周期直至浏览器卸载页面才会结束</li><li>局部变量只在函数的执行过程中存在</li></ul></li><li>在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值</li><li>然后在函数中使用这些变量，直至函数结束</li><li>而闭包中由于内部函数的原因，外部函数并不能算是结束 <ul><li>所以闭包中的变量不会被回收</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当 fn1 被调用时，进入 fn1 的执行环境，会开辟一块内存，用于存放对象 <code>{ name: &#39;zhangsan&#39;, age: 10 }</code></p><p>而当调用结束后，离开 fn1 的执行环境，那么该块内存会被 JavaScript 引擎中的垃圾回收器自动释放</p><br><p>在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放</p><br><p>这里问题就出现了：到底哪个变量是没有用的？</p></blockquote><ul><li>所以垃圾收集器必须跟踪到底哪个变量没用</li><li>对于不再有用的变量打上标记，以备将来收回其内存</li><li>用于标记的无用变量的策略可能因实现而有所区别</li><li>通常情况下有两种实现方式 <ul><li>标记清除【常用】</li><li>引用计数</li></ul></li></ul><h3 id="_4-标记清除" tabindex="-1"><a class="header-anchor" href="#_4-标记清除" aria-hidden="true">#</a> 4.标记清除</h3><ul><li>JavaScript 中最常用的垃圾回收方式</li><li>当变量进入环境时，就将这个变量标记为“进入环境” <ul><li>如：在函数中声明一个变量</li></ul></li><li>当变量离开环境时，则将其标记为“离开环境”</li></ul><blockquote><p>从逻辑上讲，永远不能释放进入环境的变量所占用的内存</p><p>因为只要执行流进入相应的环境，就可能会用到它们</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// a被标记，进入环境</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// b被标记，进入环境</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行完毕后,a、b 又被标记为离开环境，被回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>垃圾回收器在运行的时候会给存储在 <mark>内存中的所有变量</mark> 都加上标记</li><li>然后去掉 <mark>环境中的变量</mark> 以及 <mark>被环境中的变量引用的变量的标记（闭包）</mark></li><li>之后再被加上标记的变量将被视为准备删除的变量 <ul><li>因为环境中的变量已经无法访问到这些变量了</li></ul></li><li>最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>到目前为止，IE9+、Firefox、Opera、Chrome、Safari 的 JS 实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同</p></div><h3 id="_5-引用计数" tabindex="-1"><a class="header-anchor" href="#_5-引用计数" aria-hidden="true">#</a> 5.引用计数</h3><ul><li>跟踪记录每个值被引用的次数</li></ul><h4 id="_1-流程" tabindex="-1"><a class="header-anchor" href="#_1-流程" aria-hidden="true">#</a> 1）流程</h4><ul><li>当声明了一个变量并将一个 <mark>引用类型值</mark> 赋给该变量时，这个值的引用次数就是 1 <ul><li>如果同一个值又被赋给另一个变量，则该值的引用次数 +1</li><li>如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数 -1</li></ul></li><li>当这个值的引用次数变成 0 时，说明没有办法再访问这个值了 <ul><li>就可以回收其占用的内存空间</li></ul></li><li>当垃圾回收器下次再运行时，就会释放那些引用次数为 0 的值所占用的内存</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// a 指向对象的引用次数为 1</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// a 指向对象的引用次数加 1，为 2</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// a 指向对象的引用次数再加 1，为 3</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// a 指向对象的引用次数减 1，为 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Netscape Navigator3 是最早使用引用计数策略的浏览器，但很快就遇到一个严重的问题 —— 循环引用</p></div><h4 id="_2-循环引用" tabindex="-1"><a class="header-anchor" href="#_2-循环引用" aria-hidden="true">#</a> 2）循环引用</h4><ul><li>指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span>pro <span class="token operator">=</span> b<span class="token punctuation">;</span>
  b<span class="token punctuation">.</span>pro <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>a 和 b 的引用次数都是 2</p><p>fn 执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的</p><p>但是在引用计数策略下，因为 a 和 b 的引用次数不为 0，所以不会被垃圾回收器回收</p><p>如果 fn 函数被大量调用，就会造成内存泄露</p><p>在 IE7 与 IE8 上，内存直线上升</p></blockquote><h3 id="_6-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_6-真题解答-1" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-请介绍一下-javascript-中的垃圾回收站机制" tabindex="-1"><a class="header-anchor" href="#_1-请介绍一下-javascript-中的垃圾回收站机制" aria-hidden="true">#</a> 1）请介绍一下 JavaScript 中的垃圾回收站机制</h4><blockquote><p>JavaScript 具有自动垃圾回收机制。垃圾收集器会按照固定的时间间隔周期性的执行</p><p>JavaScript 常见的垃圾回收方式：标记清除、引用计数方式</p><ol><li>标记清除</li></ol><ul><li>工作原理：当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存</li><li>工作流程：</li><li>垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记；</li><li>去掉环境中的变量以及被环境中的变量引用的变量的标记；</li><li>被加上标记的会被视为准备删除的变量；</li><li>垃圾回收器完成内存清理工作，销毁那些带标记的值并回收他们所占用的内存空间</li></ul><ol start="2"><li>引用计数</li></ol><ul><li>工作原理：跟踪记录每个值被引用的次数</li><li>工作流程：</li><li>声明了一个变量并将一个引用类型的值赋值给这个变量，这个引用类型值的引用次数就是 1；</li><li>同一个值又被赋值给另一个变量，这个引用类型值的引用次数加 1；</li><li>当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减 1；</li><li>当引用次数变成 0 时，说明没办法访问这个值了；</li><li>当垃圾收集器下一次运行时，它就会释放引用次数是 0 的值所占的内存</li></ul></blockquote><h2 id="十一-闭包" tabindex="-1"><a class="header-anchor" href="#十一-闭包" aria-hidden="true">#</a> （十一）闭包</h2><h3 id="_1-经典真题-10" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-10" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>闭包是什么？闭包的应用场景有哪些？怎么销毁闭包？</li></ul><h3 id="_2-前置知识" tabindex="-1"><a class="header-anchor" href="#_2-前置知识" aria-hidden="true">#</a> 2.前置知识</h3><h4 id="_1-javascript-中的作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中的作用域和作用域链" aria-hidden="true">#</a> 1）JavaScript 中的作用域和作用域链</h4><ul><li>作用域就是一个独立的地盘，让变量不会外泄、暴露出去，不同作用域下同名变量不会有冲突</li><li>作用域在定义时就确定，并且不会改变</li><li>如果在当前作用域中没有查到值，就会向上级作用域查找，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链</li></ul><h4 id="_2-javascript-中的垃圾回收" tabindex="-1"><a class="header-anchor" href="#_2-javascript-中的垃圾回收" aria-hidden="true">#</a> 2）JavaScript 中的垃圾回收</h4><ul><li>JavaScript 执行环境会负责管理代码执行过程中使用的内存，其中就涉及到一个垃圾回收机制</li><li>垃圾收集器会定期（周期性）找出那些不再继续使用的变量，只要该变量不再使用了，就会被垃圾收集器回收，然后释放其内存。如果该变量还在使用，那么就不会被回收</li></ul><h3 id="_3-闭包介绍" tabindex="-1"><a class="header-anchor" href="#_3-闭包介绍" aria-hidden="true">#</a> 3.闭包介绍</h3><ul><li>闭包不是一个具体的技术，而是一种现象</li><li>指在定义函数时，周围环境中的信息可以在函数中使用</li><li>即：执行函数时，只要在函数中使用了外部的数据，就创建了闭包</li><li>作用域链是实现闭包的手段</li></ul><h4 id="_1-创建闭包" tabindex="-1"><a class="header-anchor" href="#_1-创建闭包" aria-hidden="true">#</a> 1）创建闭包</h4><p><img src="`+y+'" alt=""></p><blockquote><p>在函数 a 中定义了一个变量 i，然后打印这个 i 变量</p><p>对于 a 函数，函数作用域中存在 i 这个变量</p><p>所以在调试时可以看到 Local 中存在变量 i</p></blockquote><p><img src="'+j+'" alt=""></p><blockquote><p>将声明 i 变量的动作放到了 a 函数外面，也就是说 a 函数在自己的作用域已经找不到这个 i 变量了</p><p>会顺着作用域链一层一层往外找，如果出现了这种情况，也就是函数使用了外部数据的情况，就会创建闭包</p></blockquote><ul><li>“闭”可以理解为“封闭，闭环”，“包”可以理解为“一个类似于包裹的空间”</li><li>闭包实际上可以看作是一个封闭的空间，用来存储变量</li></ul><h4 id="_2-闭包中的变量" tabindex="-1"><a class="header-anchor" href="#_2-闭包中的变量" aria-hidden="true">#</a> 2）闭包中的变量</h4><ul><li>一个函数下所有的变量声明是否会被放入到闭包 <ul><li>要看其他地方有没有对这个变量进行引用</li></ul></li></ul><p><img src="'+w+'" alt=""></p><blockquote><p>函数 c 中一个变量都没有创建，却要打印 i、j、k 和 x，这些变量分别存在于 a、b 函数以及全局作用域中，因此创建了 3 个闭包</p><p>全局闭包里面存储了 i 的值，闭包 a 中存储了变量 j 和 k 的值，闭包 b 中存储了变量 x 的值</p><p>但是函数 b 中的 y 变量并没有被放在闭包中，所以要不要放入闭包取决于该变量有没有被引用</p></blockquote><h4 id="_3-销毁闭包" tabindex="-1"><a class="header-anchor" href="#_3-销毁闭包" aria-hidden="true">#</a> 3）销毁闭包</h4><ul><li>自动形成的闭包会被销毁</li></ul><p><img src="'+q+`" alt=""></p><blockquote><p>在第 16 行尝试打印输出变量 k，显然会报错</p><p>此时已经没有任何闭包存在，垃圾回收器会自动回收没有引用的变量，不会有任何内存占用的情况</p></blockquote><h4 id="_4-手动创建闭包" tabindex="-1"><a class="header-anchor" href="#_4-手动创建闭包" aria-hidden="true">#</a> 4）手动创建闭包</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> food <span class="token operator">=</span> <span class="token string">&quot;鸡翅&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸡翅</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>声明了一个名为 eat 的函数，并对它进行调用</p><p>JavaScript 引擎会创建一个 eat 函数的执行上下文，其中声明 food 变量并赋值</p><p>当该方法执行完后，上下文被销毁，food 变量也会跟着消失</p><p>因为 food 变量属于 eat 函数的局部变量，作用于 eat 函数中，会随着 eat 的执行上下文创建而创建，销毁而销毁</p><p>所以再次打印 food 变量时，就会报错，该变量不存在</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> food <span class="token operator">=</span> <span class="token string">&quot;鸡翅&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> look <span class="token operator">=</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">look</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸡翅</span>
<span class="token function">look</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸡翅</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>eat 函数返回一个函数，并在这个内部函数中访问 food 这个局部变量。调用 eat 函数并将结果赋给 look 变量，这个 look 指向了 eat 函数中的内部函数，然后调用它，最终输出 food 的值</p><p>垃圾回收器只会回收没有被引用到的变量，但是一旦一个变量还被引用着的，垃圾回收器就不会回收此变量</p><p>向外部返回了 eat 内部的匿名函数，而这个匿名函数有引用了 food，所以垃圾回收器不会对其进行回收</p></blockquote><h3 id="_4-闭包应用" tabindex="-1"><a class="header-anchor" href="#_4-闭包应用" aria-hidden="true">#</a> 4.闭包应用</h3><ul><li>通过闭包可以让外部环境访问到函数内部的局部变量</li><li>通过闭包可以让局部变量持续保存下来，不随着它的上下文环境一起销毁</li></ul><h4 id="_1-解决全局变量污染的问题" tabindex="-1"><a class="header-anchor" href="#_1-解决全局变量污染的问题" aria-hidden="true">#</a> 1）解决全局变量污染的问题</h4><blockquote><p>早期在 JavaScript 还无法进行模块化的时候，在多人协作时，如果定义过多的全局变量，有可能造成全局变量命名冲突</p></blockquote><ul><li>使用闭包来解决功能对变量的调用</li><li>将变量写到一个独立的空间里面</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;GlobalName&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 全局变量</span>
<span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;initName&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印 name</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 形成接口</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// initName</span>

<span class="token keyword">var</span> initSuper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;initSuperName&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打印 name</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 形成接口</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">initSuper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// initSuperName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-闭包总结" tabindex="-1"><a class="header-anchor" href="#_5-闭包总结" aria-hidden="true">#</a> 5.闭包总结</h3><ul><li>闭包是一个封闭的空间，存储了在其他地方会引用到的该作用域的值</li><li>在 JavaScript 中是通过作用域链来实现闭包</li><li>只要在函数中使用了外部的数据，就创建了闭包 <ul><li>这种情况下所创建的闭包，编码时不需要关心</li></ul></li><li>还可以通过一些手段手动创建闭包，从而让外部环境访问到函数内部的局部变量，让局部变量持续保存下来，不随着它的上下文环境一起销毁</li></ul><h3 id="_6-闭包经典问题" tabindex="-1"><a class="header-anchor" href="#_6-闭包经典问题" aria-hidden="true">#</a> 6.闭包经典问题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>预期的结果是过 1 秒后分别输出 i 变量的值为 1，2，3。但是，执行的结果是：4，4，4</p><p>问题就出在闭包身上，循环中的 setTimeout 访问了外部变量 i，形成闭包</p><p>而 i 变量只有 1 个，所以循环 3 次的 setTimeout 中都访问的是同一个变量。循环到第 4 次，i 变量增加到 4，不满足循环条件，循环结束，代码执行完后上下文结束。但是，那 3 个 setTimeout 等 1 秒钟后才执行，由于闭包的原因，所以它们仍然能访问到变量 i，不过此时 i 变量值已经是 4 了</p><p>要解决这个问题，可以让 setTimeout 中的匿名函数不再访问外部变量，而是访问自己内部的变量</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这样 setTimeout 中就可以不用访问 for 循环声明的变量 i 了，而是采用调用函数传参的方式把变量 i 的值传给了 setTimeout，这样就不再创建闭包，因为在自己的作用域里面能够找到 i 这个变量</p><p>还可以使用 ES6 中的 let 关键字</p><p>let 声明的变量有块作用域，如果放在循环中，那么每次循环都会有一个新的变量 i，这样即使有闭包也没问题，因为每个闭包保存的都是不同的 i 变量</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-真题解答" tabindex="-1"><a class="header-anchor" href="#_7-真题解答" aria-hidden="true">#</a> 7.真题解答</h3><h4 id="_1-闭包是什么-闭包的应用场景有哪些-怎么销毁闭包" tabindex="-1"><a class="header-anchor" href="#_1-闭包是什么-闭包的应用场景有哪些-怎么销毁闭包" aria-hidden="true">#</a> 1）闭包是什么？闭包的应用场景有哪些？怎么销毁闭包？</h4><blockquote><p>闭包是一个封闭的空间，里面存储了在其他地方会引用到的该作用域的值，在 JavaScript 中是通过作用域链来实现的闭包</p><p>只要在函数中使用了外部的数据，就创建了闭包，这种情况下所创建的闭包在编码时是不需要去关心的</p><p>还可以通过一些手段手动创建闭包，从而让外部环境访问到函数内部的局部变量，让局部变量持续保存下来，不随着它的上下文环境一起销毁</p><p>使用闭包可以解决一个全局变量污染的问题</p><p>如果是自动产生的闭包，无需操心闭包的销毁，而如果是手动创建的闭包，可以把被引用的变量设置为 null，即手动清除变量，这样下次 JavaScript 垃圾回收器在进行垃圾回收时，发现此变量已经没有任何引用了，就会把设为 null 的量给回收了</p></blockquote><h2 id="十二-dom-事件的注册和移除" tabindex="-1"><a class="header-anchor" href="#十二-dom-事件的注册和移除" aria-hidden="true">#</a> （十二）DOM 事件的注册和移除</h2><h3 id="_1-经典真题-11" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-11" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>总结一下 DOM 中如何注册事件和移除事件</li></ul><h3 id="_2-dom-注册事件" tabindex="-1"><a class="header-anchor" href="#_2-dom-注册事件" aria-hidden="true">#</a> 2.DOM 注册事件</h3><h4 id="_1-html-元素中注册事件" tabindex="-1"><a class="header-anchor" href="#_1-html-元素中注册事件" aria-hidden="true">#</a> 1）HTML 元素中注册事件</h4><ul><li>HTML 元素中注册的事件，又被称为行内事件监听器</li><li>是在浏览器中处理事件最原始的方法</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我知道你已经点击了，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 JavaScript 中只需要书写对应的 test 事件处理函数即可</li><li>但是这种方法已经过时了 <ul><li>JavaScript 代码与 HTML 标记混杂在一起，破坏了结构和行为分离的理念</li><li>每个元素只能为每种事件类型绑定一个事件处理器</li><li>事件处理器的代码隐藏于标记中，很难找到事件是在哪里声明的</li></ul></li><li>现在多用于简单的事件测试</li></ul><h4 id="_2-dom0-级方式注册事件" tabindex="-1"><a class="header-anchor" href="#_2-dom0-级方式注册事件" aria-hidden="true">#</a> 2）DOM0 级方式注册事件</h4><ul><li>首先取到要为其绑定事件的元素节点对象</li><li>然后给这些节点对象的事件处理属性赋值一个函数</li><li>可以达到 JavaScript 代码和 HTML 代码相分离的目的</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每个元素只能绑定一个函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test,too&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当为该 DOM 元素绑定 2 个相同类型的事件时</li><li>后面的事件处理函数就会把前面的事件处理函数给覆盖掉</li></ul><h4 id="_2-dom2-级方式注册事件" tabindex="-1"><a class="header-anchor" href="#_2-dom2-级方式注册事件" aria-hidden="true">#</a> 2）DOM2 级方式注册事件</h4><ul><li>通过 addEventListener 方法来为一个 DOM 元素添加多个事件处理函数</li><li>接收 3 个参数：事件名、事件处理函数、布尔值 <ul><li>如果这个布尔值为 true，则在捕获阶段处理事件</li><li>如果为 false，则在冒泡阶段处理事件</li><li>若最后的布尔值不填写，则默认为 false</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test,too&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 IE 中与 addEventListener 方法对应的是 attachEvent 方法</p></blockquote><h3 id="_3-dom-移除事件" tabindex="-1"><a class="header-anchor" href="#_3-dom-移除事件" aria-hidden="true">#</a> 3.DOM 移除事件</h3><ul><li>通过 DOM0 级来添加的事件，只需要将 DOM 元素的事件处理属性赋值为 null 即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 该事件只会生效一次</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  test<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 DOM2 级来添加的事件，可以使用 removeEventLister 方法删除</li><li>如果要通过该方法移除 <mark>某一类事件类型的一个事件</mark><ul><li>需要先单独书写将绑定的处理函数</li><li>然后 addEventListener 绑定时第 2 个参数传入要绑定的函数名</li><li>再通过该函数名移除当前事件</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//DOM 2级添加事件</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  test<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只删除第一个点击事件</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is a test,too&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
test<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> fn1<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_4-真题解答-1" aria-hidden="true">#</a> 4.真题解答</h3><h4 id="_1-总结一下-dom-中如何注册事件和移除事件" tabindex="-1"><a class="header-anchor" href="#_1-总结一下-dom-中如何注册事件和移除事件" aria-hidden="true">#</a> 1）总结一下 DOM 中如何注册事件和移除事件</h4><blockquote><p>注册事件的方式常见的有 3 种方式：</p><ol><li>HTML 元素中注册的事件</li></ol><p>这种方式又被称之为行内事件监听器。这是在浏览器中处理事件最原始的方法</p><ol start="2"><li>DOM0 级方式注册事件</li></ol><p>这种方式是首先取到要为其绑定事件的元素节点对象，然后给这些节点对象的事件处理属性赋值一个函数</p><ol start="3"><li>DOM2 级方式注册事件</li></ol><p>DOM2 级通过 addEventListener 方法来为一个 DOM 元素添加多个事件处理函数</p><p>该方法接收 3 个参数：事件名、事件处理函数、布尔值</p><p>如果这个布尔值为 true，则在捕获阶段处理事件，如果为 false，则在冒泡阶段处理事件。若最后的布尔值不填写，则和 false 效果一样，也就是说默认为 false，在冒泡阶段进行事件的处理</p><br><p>关于移除注册的事件，如果是 DOM0 级方式注册的事件，直接将值设置为 null 即可。如果是 DOM2 级注册的事件，可以使用 removeEventListener 方法来移除事件</p></blockquote><h2 id="十三-dom-事件的传播机制" tabindex="-1"><a class="header-anchor" href="#十三-dom-事件的传播机制" aria-hidden="true">#</a> （十三）DOM 事件的传播机制</h2><h3 id="_1-经典真题-12" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-12" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>谈一谈事件委托以及冒泡原理</li></ul><h3 id="_2-事件" tabindex="-1"><a class="header-anchor" href="#_2-事件" aria-hidden="true">#</a> 2.事件</h3><blockquote><p>事件最早是在 IE3 和 NetscapeNavigator2 中出现的，当时是作为分担服务器运算负担的一种手段</p><p>要实现和网页的互动，就需要通过 JavaScript 里面的事件来实现</p><p>每次用户与一个网页进行交互，例如点击链接，按下一个按键或者移动鼠标时，就会触发一个事件。程序可以检测这些事件，然后对此作出响应。从而形成一种交互</p><p>这样可以使页面变得更加的有意思，而不仅仅像以前一样只能进行浏览</p><p>在早期拨号上网的年代，如果所有的功能都放在服务器端进行处理的话，效率是非常低的</p><p>JavaScript 最初被设计出来就是用来解决这些问题的。通过允许一些功能在客户端处理，以节省到服务器的往返时间</p></blockquote><ul><li>JavaScript 中采用事件监听器监听事件是否发生 <ul><li>类似于一个通知，当事件发生时，事件监听器会让程序知道，然后程序就可以做出相应的响应</li></ul></li><li>通过这种方式，就可以避免让程序不断地去检查事件是否发生，让程序在等待事件发生的同时，可以继续做其他的任务</li></ul><h3 id="_3-事件流" tabindex="-1"><a class="header-anchor" href="#_3-事件流" aria-hidden="true">#</a> 3.事件流</h3><blockquote><p>当浏览器发展到第 4 代时（IE4 及 Netscape4），浏览器开发团队遇到了一个很有意思的问题：页面的哪一部分会拥有某个特定的事件？</p><p>想象在一张纸上的一组同心圆。如果把手指放在圆心上，那么手指指向的不是一个圆，而是纸上的所有圆。</p><p>好在两家公司的浏览器开发团队在看待浏览器事件方面还是一致的</p><p>如果单击了某个按钮，他们都认为单击事件不仅仅发生在按钮上，甚至也单击了整个页面</p><p>但有意思的是，IE 和 Netscape 开发团队居然提出了差不多是完全相反的事件流的概念</p></blockquote><ul><li>IE 的事件流是事件冒泡流</li><li>Netscape 的事件流是事件捕获流</li></ul><h3 id="_4-事件冒泡流" tabindex="-1"><a class="header-anchor" href="#_4-事件冒泡流" aria-hidden="true">#</a> 4.事件冒泡流</h3><ul><li>IE 的事件流叫做事件冒泡（event bubbling）</li><li>即：事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收</li><li>然后逐级向上传播到较为不具体的节点（文档）</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果单击了页面中的 div 元素，那么这个 click 事件沿 DOM 树向上传播</li><li>在每一级节点上都会发生，按照如下顺序进行传播 <ul><li>div</li><li>body</li><li>html</li><li>document</li></ul></li><li>所有现代浏览器都支持事件冒泡 <ul><li>IE9、Firefox、Chrome、Safari 将事件一直冒泡到 window 对象</li><li>IE8 以下浏览器将事件冒泡到 document 对象就停止</li></ul></li></ul><h4 id="_1-查看文档具体的冒泡顺序" tabindex="-1"><a class="header-anchor" href="#_1-查看文档具体的冒泡顺序" aria-hidden="true">#</a> 1）查看文档具体的冒泡顺序</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>还原<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// IE8 以下浏览器返回 div body html document</span>
<span class="token comment">// 其他浏览器返回 div body html document window</span>
reset<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;div\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;body\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;html\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;document\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;window\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-事件捕获流" tabindex="-1"><a class="header-anchor" href="#_5-事件捕获流" aria-hidden="true">#</a> 5.事件捕获流</h3><ul><li>Netscape Communicator 团队提出的另一种事件流叫做事件捕获（event capturing）</li><li>事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件 <ul><li>在事件到达预定目标之前就捕获它</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在事件捕获过程中，document 对象首先接收到 click 事件，然后事件沿 DOM 树依次向下，一直传播到事件的实际目标，即 div 元素 <ul><li>document</li><li>html</li><li>body</li><li>div</li></ul></li><li>IE9、Firefox、Chrome、Safari* 等现代浏览器都支持事件捕获 <ul><li>也是从 window 对象开始捕获</li></ul></li><li>IE8 以下浏览器不支持</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reset<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>还原<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// IE8 以下浏览器不支持</span>
<span class="token comment">// 其他浏览器返回 window document html body div</span>
reset<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;div\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;body\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;html\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;document\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">&quot;window\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用的 addEventListener 的方式来绑定的事件，并将第 2 个参数设置为了 true 表示使用事件捕获的方式来触发事件</li></ul><h3 id="_6-标准-dom-事件流" tabindex="-1"><a class="header-anchor" href="#_6-标准-dom-事件流" aria-hidden="true">#</a> 6.标准 DOM 事件流</h3><ul><li>DOM 标准采用的是 <mark>捕获 + 冒泡</mark> 的方式</li><li>两种事件流都会触发 DOM 的所有对象，从 document 对象开始，也在 document 对象结束 <ul><li>即：起点和终点都是 document 对象</li><li>很多浏览器可以一直捕获 + 冒泡到 window 对象</li></ul></li></ul><h4 id="_1-dom-事件流示意图" tabindex="-1"><a class="header-anchor" href="#_1-dom-事件流示意图" aria-hidden="true">#</a> 1）DOM 事件流示意图</h4><p><img src="`+x+`" alt=""></p><ul><li>DOM 标准规定事件流包括三个阶段 <ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul></li></ul><h4 id="_2-事件捕获阶段" tabindex="-1"><a class="header-anchor" href="#_2-事件捕获阶段" aria-hidden="true">#</a> 2）事件捕获阶段</h4><ul><li>实际目标 div 在捕获阶段不会触发事件</li><li>捕获阶段从 window 开始，然后到 document、html，最后到 body 意味着捕获阶段结束</li></ul><h4 id="_3-处于目标阶段" tabindex="-1"><a class="header-anchor" href="#_3-处于目标阶段" aria-hidden="true">#</a> 3）处于目标阶段</h4><ul><li>事件在 div 上发生并处理</li><li>但是本次事件处理会被看成是冒泡阶段的一部分</li></ul><h4 id="_4-冒泡阶段" tabindex="-1"><a class="header-anchor" href="#_4-冒泡阶段" aria-hidden="true">#</a> 4）冒泡阶段</h4><ul><li>事件又传播回文档 document 对象</li></ul><h3 id="_7-事件委托" tabindex="-1"><a class="header-anchor" href="#_7-事件委托" aria-hidden="true">#</a> 7.事件委托</h3><ul><li>事件冒泡一个最大的好处就是可以实现事件委托</li><li>事件委托，又被称为事件代理</li></ul><blockquote><p>在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面整体的运行性能，导致这一问题的原因是多方面的</p><p>首先，每个函数都是对象，都会占用内存，内存中的对象越多，性能就越差</p><p>其次，必须事先指定所有事件处理程序而导致的 DOM 访问次数，会延迟整个页面的交互就绪时间</p></blockquote><ul><li>对事件处理程序过多问题的解决方案就是事件委托</li><li>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件</li><li>如：click 事件会一直冒泡到 document 层次 <ul><li>可以为整个页面指定一个 onclick 事件处理程序</li><li>不必给每个可单击的元素分别添加事件处理程序</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>color-list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>yellow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>black<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>white<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将事件监听器绑定到父元素 ul 上，即可对所有的 li 元素添加事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> colorList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;color-list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
colorList<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果之后再为这个 ul 添加新的 li 元素的话，新的 li 元素也会自动添加上相同的事件</li><li>虽然我们使用事件代理避免了为每一个 li 元素添加相同的事件，但是如果用户没有点击 li，而是点击的 ul，同样也会触发事件</li><li>可以对点击的节点进行判断，保证用户只在点击 li 的时候才触发事件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> colorList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;color-list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
colorList<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">&quot;LI&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;点击 li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-真题解答-2" tabindex="-1"><a class="header-anchor" href="#_8-真题解答-2" aria-hidden="true">#</a> 8.真题解答</h3><h4 id="_1-谈一谈事件委托以及冒泡原理" tabindex="-1"><a class="header-anchor" href="#_1-谈一谈事件委托以及冒泡原理" aria-hidden="true">#</a> 1）谈一谈事件委托以及冒泡原理</h4><blockquote><p>事件委托，又被称之为事件代理。在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面整体的运行性能，导致这一问题的原因是多方面的</p><p>首先，每个函数都是对象，都会占用内存，内存中的对象越多，性能就越差，其次，必须事先指定所有事件处理程序而导致的 DOM 访问次数，会延迟整个页面的交互就绪时间</p><p>对事件处理程序过多问题的解决方案就是事件委托</p><p>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。例如，click 事件会一直冒泡到 document 层次。也就是说，我们可以为整个页面指定一个 onclick 事件处理程序，而不必给每个可单击的元素分别添加事件处理程序</p><p>事件冒泡（event bubbling），是指事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</p></blockquote><h2 id="十四-阻止事件默认行为" tabindex="-1"><a class="header-anchor" href="#十四-阻止事件默认行为" aria-hidden="true">#</a> （十四）阻止事件默认行为</h2><h3 id="_1-经典真题-13" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-13" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>如何阻止默认事件？</li></ul><h3 id="_2-默认行为" tabindex="-1"><a class="header-anchor" href="#_2-默认行为" aria-hidden="true">#</a> 2.默认行为</h3><ul><li>一般是指 HTML 元素所自带的行为</li><li>如：点击一个 a 元素表示的是跳转</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如：一个带有 action 属性的 form 元素，点击表单元素中嵌套的提交按钮时，就会进行默认的提交</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>有些时候是不需要这些默认行为的</li><li>如：用户在填写了一个表单后，提交信息时采用 ajax 异步发送到服务器</li><li>此时就不需要表单 form 元素默认的提交跳转</li><li>所以需要阻止默认行为</li></ul><h3 id="_3-cancelable-属性" tabindex="-1"><a class="header-anchor" href="#_3-cancelable-属性" aria-hidden="true">#</a> 3.cancelable 属性</h3><ul><li>该属性返回一个布尔值，表示事件是否可以取消</li><li>该属性为只读属性 <ul><li>返回 true 时，表示可以取消</li><li>否则，表示不可取消</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> event<span class="token punctuation">.</span>cancelable<span class="token punctuation">;</span> <span class="token comment">// true，能够阻止当前事件</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-preventdefault-方法" tabindex="-1"><a class="header-anchor" href="#_4-preventdefault-方法" aria-hidden="true">#</a> 4.preventDefault 方法</h3><ul><li>DOM 中最常见，也是最标准的取消浏览器默认行为的方式，无返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-returnvalue-属性" tabindex="-1"><a class="header-anchor" href="#_5-returnvalue-属性" aria-hidden="true">#</a> 5.returnValue 属性</h3><ul><li>是一个 event 对象上的属性</li><li>该属性可读可写，默认值是 true <ul><li>将其设置为 false 就可以取消事件的默认行为</li></ul></li><li>与 preventDefault 方法的作用相同</li></ul><blockquote><p>该属性最早是在 IE 的事件对象中，实现了这种取消默认行为的方式，但是现在大多数浏览器都实现了该方式</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-return-false" tabindex="-1"><a class="header-anchor" href="#_6-return-false" aria-hidden="true">#</a> 6.return false</h3><ul><li>是一条语句，该语句写在事件处理函数中也可以阻止默认行为</li><li>如果该条语句写在 jQuery 代码中，能够同时阻止默认行为和阻止冒泡</li><li>但是在原生 JavaScript 中 <mark>只能阻止默认行为</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-defaultprevented-属性" tabindex="-1"><a class="header-anchor" href="#_7-defaultprevented-属性" aria-hidden="true">#</a> 7.defaultPrevented 属性</h3><ul><li>是 event 对象上的一个属性</li><li>该属性表示默认行为是否被阻止 <ul><li>返回 true 表示被阻止</li><li>返回 false 表示未被阻止</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 采用两种不同的方式来阻止浏览器默认行为，这是为了照顾其兼容性</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 将是否阻止默认行为的结果赋值给 &lt;a&gt; 标签的文本内容</span>
  test<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-真题解答-3" tabindex="-1"><a class="header-anchor" href="#_8-真题解答-3" aria-hidden="true">#</a> 8.真题解答</h3><h4 id="_1-如何阻止默认事件" tabindex="-1"><a class="header-anchor" href="#_1-如何阻止默认事件" aria-hidden="true">#</a> 1）如何阻止默认事件？</h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：全支持</span>
event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法二：该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</span>
event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// 方法三：不建议滥用，jQuery 中可以同时阻止冒泡和默认事件</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="十五-递归" tabindex="-1"><a class="header-anchor" href="#十五-递归" aria-hidden="true">#</a> （十五）递归</h2><h3 id="_1-经典真题-14" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-14" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>使用递归完成 1 到 100 的累加</li></ul><h3 id="_2-递归" tabindex="-1"><a class="header-anchor" href="#_2-递归" aria-hidden="true">#</a> 2.递归</h3><blockquote><p>A recursive method is a method that calls itself.</p></blockquote><ul><li>递归调用是一种特殊的调用形式</li><li>指的是方法自己调用自己的形式</li></ul><p><img src="`+_+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">neverEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;This is the method that never ends!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">neverEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-递归条件" tabindex="-1"><a class="header-anchor" href="#_3-递归条件" aria-hidden="true">#</a> 3.递归条件</h3><ul><li>递归调用必须有结束条件</li><li>每次调用的时候都需要根据需求改变传递的参数内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 求某个数的阶乘</span>
<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>整个递归的计算过程如下</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>===&gt; factorial(5)
===&gt; 5 * factorial(4)
===&gt; 5 * (4 * factorial(3))
===&gt; 5 * (4 * (3 * factorial(2)))
===&gt; 5 * (4 * (3 * (2 * factorial(1))))
===&gt; 5 * (4 * (3 * (2 * 1)))
===&gt; 5 * (4 * (3 * 2))
===&gt; 5 * (4 * 6)
===&gt; 5 * 24
===&gt; 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+`" alt=""></p><h3 id="_4-递归注意事项" tabindex="-1"><a class="header-anchor" href="#_4-递归注意事项" aria-hidden="true">#</a> 4.递归注意事项</h3><h4 id="_1-递归函数的优点是定义简单-逻辑清晰" tabindex="-1"><a class="header-anchor" href="#_1-递归函数的优点是定义简单-逻辑清晰" aria-hidden="true">#</a> 1）递归函数的优点是定义简单，逻辑清晰</h4><ul><li>理论上，所有的递归函数都可以用循环的方式来实现</li></ul><h4 id="_2-使用递归时需要注意防止栈溢出" tabindex="-1"><a class="header-anchor" href="#_2-使用递归时需要注意防止栈溢出" aria-hidden="true">#</a> 2）使用递归时需要注意防止栈溢出</h4><ul><li>在计算机中，函数调用是通过栈（stack）这种数据结构实现的</li><li>每当一个函数调用，栈就会加一层</li><li>每当函数返回，栈就会减一层</li><li>由于栈的大小不是无限的，所以递归调用的次数过多，会导致栈溢出</li></ul><h3 id="_5-递归示例" tabindex="-1"><a class="header-anchor" href="#_5-递归示例" aria-hidden="true">#</a> 5.递归示例</h3><h4 id="_1-计算从-x-加到-y-的结果" tabindex="-1"><a class="header-anchor" href="#_1-计算从-x-加到-y-的结果" aria-hidden="true">#</a> 1）计算从 x 加到 y 的结果</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5050</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-计算斐波那契数列" tabindex="-1"><a class="header-anchor" href="#_2-计算斐波那契数列" aria-hidden="true">#</a> 2）计算斐波那契数列</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>function <span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">calc</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">calc</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-真题解答-2" tabindex="-1"><a class="header-anchor" href="#_6-真题解答-2" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-使用递归完成-1-到-100-的累加" tabindex="-1"><a class="header-anchor" href="#_1-使用递归完成-1-到-100-的累加" aria-hidden="true">#</a> 1）使用递归完成 1 到 100 的累加</h4><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">calc</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5050</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="十六-属性描述符" tabindex="-1"><a class="header-anchor" href="#十六-属性描述符" aria-hidden="true">#</a> （十六）属性描述符</h2><h3 id="_1-经典真题-15" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-15" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>JavaScript 中对象的属性描述符有哪些？分别有什么作用？</li></ul><h3 id="_2-对象的属性" tabindex="-1"><a class="header-anchor" href="#_2-对象的属性" aria-hidden="true">#</a> 2.对象的属性</h3><h4 id="_1-数据属性" tabindex="-1"><a class="header-anchor" href="#_1-数据属性" aria-hidden="true">#</a> 1）数据属性</h4><ul><li>本质就是一个数据</li></ul><h4 id="_2-存取器属性" tabindex="-1"><a class="header-anchor" href="#_2-存取器属性" aria-hidden="true">#</a> 2）存取器属性</h4><ul><li>本质是一个函数 <ul><li>可以将它当作普通属性来使用</li></ul></li><li>当给该属性赋值时，会运行相应的 setter 函数</li><li>当获取该属性的值时，会运行相应的 getter 函数</li></ul><blockquote><p>除了存取器，还有一些其他的关键字，用以表示当前属性是否可写、是否有默认值、是否可枚举等，这些关键字就是属性描述符</p></blockquote><h3 id="_3-属性描述符" tabindex="-1"><a class="header-anchor" href="#_3-属性描述符" aria-hidden="true">#</a> 3.属性描述符</h3><ul><li>是 ECMAScript 5 新增的语法</li><li>其实就是一个内部对象，用来描述对象的属性的特性</li></ul><h4 id="_1-属性描述符的结构" tabindex="-1"><a class="header-anchor" href="#_1-属性描述符的结构" aria-hidden="true">#</a> 1）属性描述符的结构</h4><ul><li>属性描述符实际上就是一个对象</li><li>属性描述符一共有 6 个</li></ul><table><thead><tr><th>属性描述符</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>设置属性值，默认值为 undefined</td></tr><tr><td>writable</td><td>设置属性值是否可写，默认值为 true</td></tr><tr><td>enumerable</td><td>设置属性是否可枚举，默认为 true<br>即是否允许使用 <code>for...in</code> 语句或 <code>Object.keys()</code> 函数遍历访问</td></tr><tr><td>configurable</td><td>设置是否可设置属性特性，默认为 true<br>如果为 false，将无法删除该属性，不能够修改属性值，也不能修改属性的属性描述符</td></tr><tr><td>get</td><td>取值函数，默认为 undefined</td></tr><tr><td>set</td><td>存值函数，默认为 undefined</td></tr></tbody></table><h4 id="_2-设置示例" tabindex="-1"><a class="header-anchor" href="#_2-设置示例" aria-hidden="true">#</a> 2）设置示例</h4><ul><li>这几个属性不是都可以同时设置</li></ul><p><img src="`+N+`" alt=""></p><ul><li>使用 value 读写属性值的基本用法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义空对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 添加属性x，值为100</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 writable 属性禁止修改属性 x <ul><li>在正常模式下，如果 writable 为 false，重写属性值不会报错，但是操作失败</li><li>在严格模式下则会抛出异常</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置属性默认值为1</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token comment">// 禁止修改属性值</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 修改属性x的值</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 1 说明修改失败</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>configurable 可以禁止修改属性描述符 <ul><li>当其值为 false 时，value、writable、enumerable 和 configurable 禁止修改</li><li>同时禁止删除属性</li></ul></li><li>当 configurable 为 false 时，如果把 <code>writable: true</code> 改为 false 是允许的 <ul><li><mark>只要 writable 或 configurable 有一个为 true，则 value 也允许修改</mark></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 禁止配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 试图修改其值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 修改失败，返回undefined</span>
<span class="token comment">// 抛出异常</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出异常</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出异常</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出异常</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-get-和-set-函数" tabindex="-1"><a class="header-anchor" href="#_4-get-和-set-函数" aria-hidden="true">#</a> 4.get 和 set 函数</h3><ul><li>set 函数可以设置 value 属性值</li><li>get 函数可以读取 value 属性值</li><li>借助访问器，可以为属性的 value 设计高级功能 <ul><li>如：禁用部分特性、设计访问条件、利用内部变量或属性进行数据处理等</li></ul></li></ul><h4 id="_1-示例-1-5" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-5" aria-hidden="true">#</a> 1）示例 1</h4><ul><li>设计对象 obj 的 x 属性值必须为数字</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_x</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 初始值</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问器属性</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// getter</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span> <span class="token comment">// 返回_x属性值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// setter</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请输入数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_x <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 赋值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 抛出异常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例-2-5" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-5" aria-hidden="true">#</a> 2）示例 2</h4><ul><li>JavaScript 也支持一种简写方法 <ul><li>针对示例 1，通过以下方式可以快速定义属性</li></ul></li><li>取值函数 get 不能接收参数</li><li>存值函数 set 只能接收一个参数，用于设置属性的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 定义 _x 属性</span>
  <span class="token keyword">get</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 定义 x 属性的 getter</span>
  <span class="token keyword">set</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义 x 属性的 setter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请输入数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_x <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 赋值</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-操作属性描述符" tabindex="-1"><a class="header-anchor" href="#_5-操作属性描述符" aria-hidden="true">#</a> 5.操作属性描述符</h3><ul><li>属性描述符是一个内部对象，无法直接读写</li><li>可以通过下面几个函数进行操作</li></ul><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td><code>Object.getOwnPropertyDescriptor()</code></td><td>读出指定对象私有属性的属性描述符</td></tr><tr><td><code>Object.defineProperty()</code></td><td>通过定义属性描述符来定义或修改一个属性，然后返回修改后的描述符</td></tr><tr><td><code>Object.defineProperties()</code></td><td>同时定义多个属性描述符</td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>获取对象的所有私有属性</td></tr><tr><td><code>Object.keys()</code></td><td>获取对象的所有本地可枚举的属性</td></tr><tr><td><code>propertyIsEnumerable()</code></td><td>对象实例方法，直接调用，判断指定的属性是否可枚举</td></tr></tbody></table><h4 id="_1-示例-1-6" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-6" aria-hidden="true">#</a> 1）示例 1</h4><ul><li>定义 obj 的 x 属性允许配置特性</li><li>然后获取对象 obj 的 x 属性的属性描述符</li><li>修改属性描述符的 set 函数，重设检测条件，允许非数值型数字赋值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">_x</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据属性</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 初始值</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问器属性</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许修改配置</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// getter</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_x<span class="token punctuation">;</span> <span class="token comment">// 返回_x属性值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请输入数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_x <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// 赋值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取属性x的属性描述符</span>
<span class="token keyword">var</span> des <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 修改属性x的属性描述符set函数</span>
des<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 允许非数值型的数字，也可以进行赋值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;请输入数字&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_x <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 把一个给数值型数字赋值给属性x</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-示例-2-6" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-6" aria-hidden="true">#</a> 2）示例 2</h4><ul><li>先定义一个扩展函数，使用它可以把一个对象包含的属性以及丰富的信息复制给另一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">toObj<span class="token punctuation">,</span> fromObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 扩展对象</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> property <span class="token keyword">in</span> fromObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历对象属性</span>
    <span class="token comment">// 过滤掉继承属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fromObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token comment">// 复制完整的属性信息</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
      toObj<span class="token punctuation">,</span> <span class="token comment">// 目标对象</span>
      property<span class="token punctuation">,</span> <span class="token comment">// 私有属性</span>
      Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>fromObj<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token comment">// 获取属性描述符</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> toObj<span class="token punctuation">;</span> <span class="token comment">// 返回目标对象</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 新建对象</span>
obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义对象属性</span>
<span class="token function">extend</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义读取器对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-控制对象状态" tabindex="-1"><a class="header-anchor" href="#_6-控制对象状态" aria-hidden="true">#</a> 6.控制对象状态</h3><ul><li>JavaScript 提供了 3 种方法，用来精确控制一个对象的读写状态，防止对象被改变</li></ul><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td><code>Object.preventExtensions</code></td><td>阻止为对象添加新的属性</td></tr><tr><td><code>Object.seal</code></td><td>阻止为对象添加新的属性，同时也无法删除旧属性<br>等价于属性描述符的 <code>configurable: false</code><br>该方法不影响修改某个属性的值</td></tr><tr><td><code>Object.freeze</code></td><td>阻止为一个对象添加新属性、删除旧属性、修改属性值</td></tr></tbody></table><ul><li>同时提供了 3 个对应的辅助检查函数</li></ul><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td><code>Object.isExtensible</code></td><td>检查一个对象是否允许添加新的属性</td></tr><tr><td><code>Object.isSealed</code></td><td>检查一个对象是否使用了 Object.seal 方法</td></tr><tr><td><code>Object.isFrozen</code></td><td>检查一个对象是否使用了 Object.freeze 方法</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_7-真题解答-1" aria-hidden="true">#</a> 7.真题解答</h3><h4 id="_1-javascript-中对象的属性描述符有哪些-分别有什么作用" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中对象的属性描述符有哪些-分别有什么作用" aria-hidden="true">#</a> 1）JavaScript 中对象的属性描述符有哪些？分别有什么作用？</h4><blockquote><p>属性描述符一共有 6 个，可以选择使用</p><ol><li>value：设置属性值，默认值为 undefined</li><li>writable：设置属性值是否可写，默认值为 true</li><li>enumerable：设置属性是否可枚举，即是否允许使用 for/in 语句或 Object.keys() 函数遍历访问，默认为 true</li><li>configurable：设置是否可设置属性特性，默认为 true。如果为 false，将无法删除该属性，不能够修改属性值，也不能修改属性的属性描述符</li><li>get：取值函数，默认为 undefined</li><li>set：存值函数，默认为 undefined</li></ol><p>使用属性描述符的时候，get 和 set 以及 value 和 writable 这两组是互斥的，设置了 get 和 set 就不能设置 value 和 writable，反之设置了 value 和 writable 也就不可以设置 get 和 set</p></blockquote><h2 id="十七-class-和构造函数区别" tabindex="-1"><a class="header-anchor" href="#十七-class-和构造函数区别" aria-hidden="true">#</a> （十七）class 和构造函数区别</h2><h3 id="_1-经典真题-16" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-16" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>根据下面 ES6 构造函数的书写方式，要求写出 ES5 的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-回顾-class-的写法" tabindex="-1"><a class="header-anchor" href="#_2-回顾-class-的写法" aria-hidden="true">#</a> 2.回顾 class 的写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造器</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 原型方法</span>
  <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 静态方法</span>
  <span class="token keyword">static</span> <span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实例化一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 苹果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15000</span>
apple<span class="token punctuation">.</span><span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台苹果电脑</span>
Computer<span class="token punctuation">.</span><span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 电脑由显示器，主机，键鼠组成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-回顾构造函数的写法" tabindex="-1"><a class="header-anchor" href="#_3-回顾构造函数的写法" aria-hidden="true">#</a> 3.回顾构造函数的写法</h3><ul><li>通过构造函数来模拟类</li><li>实例方法挂在原型上面</li><li>静态方法就挂在构造函数上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Computer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Computer<span class="token punctuation">.</span><span class="token function-variable function">conStruct</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 苹果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15000</span>
apple<span class="token punctuation">.</span><span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台苹果电脑</span>
Computer<span class="token punctuation">.</span><span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 电脑由显示器，主机，键鼠组成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-class-和构造函数的区别" tabindex="-1"><a class="header-anchor" href="#_4-class-和构造函数的区别" aria-hidden="true">#</a> 4.class 和构造函数的区别</h3><h4 id="_1-调用方式" tabindex="-1"><a class="header-anchor" href="#_1-调用方式" aria-hidden="true">#</a> 1）调用方式</h4><ul><li>构造函数也是函数</li><li>可以通过函数调用的形式来调用该函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">Computer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码不会报错，因为没有使用 new 的方式来调用，所以不会生成一个对象，返回值就为 undefined</li><li>但是如果用同样方式调用 ES6 书写的类，会直接报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Computer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// TypeError: Class constructor Computer1 cannot be invoked without &#39;new&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES6 所书写的 class 必须通过 new 关键字调用</li></ul><h4 id="_2-实例化对象" tabindex="-1"><a class="header-anchor" href="#_2-实例化对象" aria-hidden="true">#</a> 2）实例化对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer2</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> apple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 类</span>
<span class="token keyword">var</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer1</span><span class="token punctuation">(</span><span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> huawei<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
name
price
showSth
-------
name
price
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES6 中的原型方法是不可被枚举的</li></ul><h4 id="_3-严格模式" tabindex="-1"><a class="header-anchor" href="#_3-严格模式" aria-hidden="true">#</a> 3）严格模式</h4><ul><li>ES6 的 class 中的所有代码均处于严格模式之下</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Computer1</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// 原型方法</span>
  <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Computer2</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  ...</span>
<span class="token punctuation">}</span>
<span class="token class-name">Computer2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在严格模式中方法不允许重复形参</li><li>ES6 的 class 声明方式会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// SyntaxError: Duplicate parameter name not allowed in this context</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-new-调用原型上的方法" tabindex="-1"><a class="header-anchor" href="#_4-new-调用原型上的方法" aria-hidden="true">#</a> 4）new 调用原型上的方法</h4><ul><li>ES6 形式所声明的类，原型上的方法不允许通过 new 调用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Computer2</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Computer2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Computer2<span class="token punctuation">.</span><span class="token function-variable function">conStruct</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer2</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">apple<span class="token punctuation">.</span>showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台undefined电脑</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>

<span class="token keyword">class</span> <span class="token class-name">Computer1</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造器</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 原型方法</span>
  <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 静态方法</span>
  <span class="token keyword">static</span> <span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer1</span><span class="token punctuation">(</span><span class="token string">&quot;华为&quot;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">huawei<span class="token punctuation">.</span>showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: huawei.showSth is not a constructor</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-babel-中具体的实现" tabindex="-1"><a class="header-anchor" href="#_5-babel-中具体的实现" aria-hidden="true">#</a> 5.Babel 中具体的实现</h3><ul><li>ES6 中的 class 实现虽然本质上是构造函数，但是内部是做了各种处理的</li><li>使用 Babel 对下面的代码进行转义</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转义之前的代码</span>
<span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造器</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 原型方法</span>
  <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">这是一台</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">电脑</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 静态方法</span>
  <span class="token keyword">static</span> <span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转义后的代码</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> Constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot call a class as a function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> descriptor <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span> <span class="token keyword">in</span> descriptor<span class="token punctuation">)</span> descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_createClass</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span> protoProps<span class="token punctuation">,</span> staticProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>protoProps<span class="token punctuation">)</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> protoProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>staticProps<span class="token punctuation">)</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">,</span> staticProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Constructor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> Computer <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造器</span>
  <span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Computer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">// 原型方法</span>

  <span class="token function">_createClass</span><span class="token punctuation">(</span>
    Computer<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;showSth&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&quot;\\u8FD9\\u662F\\u4E00\\u53F0&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;\\u7535\\u8111&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 静态方法</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;conStruct&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> Computer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 苹果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15000</span>
apple<span class="token punctuation">.</span><span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一台苹果电脑</span>
Computer<span class="token punctuation">.</span><span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 电脑由显示器，主机，键鼠组成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-classcallcheck" tabindex="-1"><a class="header-anchor" href="#_1-classcallcheck" aria-hidden="true">#</a> 1）_classCallCheck</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> Constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot call a class as a function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>核对构造方法的调用形式的</li><li>接收两个参数，一个是实例对象，另一个是构造函数</li><li>通过 instanceof 判断参数 instance 是否是 Constructor 的实例</li><li>如果不是就抛出错误</li></ul><h4 id="_2-defineproperties" tabindex="-1"><a class="header-anchor" href="#_2-defineproperties" aria-hidden="true">#</a> 2）_defineProperties</h4><ul><li>设置对象方法的属性描述符</li><li>包含是否可遍历、是否可写等信息</li><li>设置完成后将方法挂在 target 对象上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;target:::&quot;</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;props:::&quot;</span><span class="token punctuation">,</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> descriptor <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span> <span class="token keyword">in</span> descriptor<span class="token punctuation">)</span>
            descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token literal-property property">target</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;showSth&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> showSth<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
<span class="token literal-property property">target</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> Computer<span class="token punctuation">]</span>
<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;conStruct&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> conStruct<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-createclass" tabindex="-1"><a class="header-anchor" href="#_3-createclass" aria-hidden="true">#</a> 3）_createClass</h4><ul><li>接收的三个参数 <ul><li>构造函数</li><li>原型上的方法</li><li>静态方法</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_createClass</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span> protoProps<span class="token punctuation">,</span> staticProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Constructor::&quot;</span><span class="token punctuation">,</span>Constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;protoProps::&quot;</span><span class="token punctuation">,</span>protoProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;staticProps::&quot;</span><span class="token punctuation">,</span>staticProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>protoProps<span class="token punctuation">)</span>
        <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> protoProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>staticProps<span class="token punctuation">)</span>
        <span class="token function">_defineProperties</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">,</span> staticProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Constructor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token literal-property property">Constructor</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> Computer<span class="token punctuation">]</span>
<span class="token literal-property property">protoProps</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;showSth&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> showSth<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
<span class="token literal-property property">staticProps</span><span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;conStruct&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span>Function<span class="token operator">:</span> conStruct<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Computer <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造器</span>
  <span class="token keyword">function</span> <span class="token function">Computer</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进行调用确认</span>
    <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Computer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加实例属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token comment">// 原型方法</span>

  <span class="token comment">// 将实例方法和静态方法添加到构造函数上面</span>
  <span class="token function">_createClass</span><span class="token punctuation">(</span>
    Computer<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;showSth&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">showSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
            <span class="token string">&quot;\\u8FD9\\u662F\\u4E00\\u53F0&quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;\\u7535\\u8111&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 静态方法</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;conStruct&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">conStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;电脑由显示器，主机，键鼠组成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> Computer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-真题解答-3" tabindex="-1"><a class="header-anchor" href="#_6-真题解答-3" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的" tabindex="-1"><a class="header-anchor" href="#_1-根据下面-es6-构造函数的书写方式-要求写出-es5-的" aria-hidden="true">#</a> 1）根据下面 ES6 构造函数的书写方式，要求写出 ES5 的</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> Constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">Constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot call a class as a function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> descriptor <span class="token operator">=</span> props<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    descriptor<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span> <span class="token keyword">in</span> descriptor<span class="token punctuation">)</span> descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> descriptor<span class="token punctuation">.</span>key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">_createClass</span><span class="token punctuation">(</span><span class="token parameter">Constructor<span class="token punctuation">,</span> protoProps<span class="token punctuation">,</span> staticProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>protoProps<span class="token punctuation">)</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> protoProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>staticProps<span class="token punctuation">)</span> <span class="token function">_defineProperties</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">,</span> staticProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Constructor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> Example <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Example<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">_createClass</span><span class="token punctuation">(</span>Example<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> Example<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以解释出 <code>_classCallCheck</code>、<code>_defineProperties</code>、<code>_createClass</code> 这几个方法各自的作用是什么</p></blockquote><h2 id="十八-浮点数精度问题" tabindex="-1"><a class="header-anchor" href="#十八-浮点数精度问题" aria-hidden="true">#</a> （十八）浮点数精度问题</h2><h3 id="_1-经典真题-17" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-17" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>为什么 <code>console.log(0.2+0.1==0.3)</code> 得到的值为 false？</li></ul><h3 id="_2-浮点数精度常见问题" tabindex="-1"><a class="header-anchor" href="#_2-浮点数精度常见问题" aria-hidden="true">#</a> 2.浮点数精度常见问题</h3><ul><li>在 JavaScript 中整数和浮点数都属于 number 数据类型 <ul><li>所有数字都是以 64 位浮点数形式储存，即便是整数</li><li>所以在打印 1.00 这样的浮点数的结果是 1 而非 1.00</li></ul></li><li>在一些特殊的数值表示中，如：金额，这样看上去有点别扭，但是至少值是正确的</li><li>但是当浮点数做数学运算的时候，会发现一些问题</li></ul><h4 id="_1-场景一-进行浮点值运算结果的判断" tabindex="-1"><a class="header-anchor" href="#_1-场景一-进行浮点值运算结果的判断" aria-hidden="true">#</a> 1）场景一：进行浮点值运算结果的判断</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.7</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.7999999999999999</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.2</span> <span class="token operator">+</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.6000000000000001</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2.22</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.3200000000000003</span>

<span class="token comment">// 减法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1.5</span> <span class="token operator">-</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">-</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.09999999999999998</span>

<span class="token comment">// 乘法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19.9</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1989.9999999999998</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19.9</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1990</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9.7</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 969.9999999999999</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">39.7</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3970.0000000000005</span>

<span class="token comment">// 除法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">/</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.9999999999999996</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.69</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.06899999999999999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-场景二-将小数乘以-10-的-n-次方取整" tabindex="-1"><a class="header-anchor" href="#_2-场景二-将小数乘以-10-的-n-次方取整" aria-hidden="true">#</a> 2）场景二：将小数乘以 10 的 n 次方取整</h4><ul><li>如：将钱币的单位，从元转化成分</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.58</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 57</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-场景三-四舍五入保留-n-位小数" tabindex="-1"><a class="header-anchor" href="#_3-场景三-四舍五入保留-n-位小数" aria-hidden="true">#</a> 3）场景三：四舍五入保留 n 位小数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.335</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-精度问题成因" tabindex="-1"><a class="header-anchor" href="#_3-精度问题成因" aria-hidden="true">#</a> 3.精度问题成因</h3><ul><li>计算机底层只有 0 和 1，所以所有的运算最后实际上都是 <mark>二进制运算</mark></li><li>十进制整数利用辗转相除的方法可以准确地转换为二进制数</li></ul><p><img src="`+O+'" alt=""></p><h4 id="_1-ieee-754-标准" tabindex="-1"><a class="header-anchor" href="#_1-ieee-754-标准" aria-hidden="true">#</a> 1）IEEE 754 标准</h4><ul><li>JavaScript 里的数字是采用 IEEE 754 标准的 64 位双精度浮点数</li></ul><p><img src="'+J+`" alt=""></p><ul><li>该规范定义了浮点数的格式</li><li>对于 64 位的浮点数在内存中的表示，最高的 1 位是符号位，接着的 11 位是指数，剩下的 52 位为有效数字 <ul><li>符号位 S <ul><li>第 1 位是正负数符号位（sign）</li><li>0 代表正数，1 代表负数</li></ul></li><li>指数位 E <ul><li>中间的 11 位存储指数（exponent）</li><li>用来表示次方数</li></ul></li><li>尾数位 M <ul><li>最后的 52 位是尾数（mantissa）</li><li>储存小数部分，超出的部分自动进一舍零</li></ul></li></ul></li><li>浮点数最终在运算的时候实际上是一个符合该标准的二进制数</li><li>符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度</li></ul><blockquote><p>IEEE 754 规定，有效数字第一位默认总是 1，不保存在 64 位浮点数之中</p><p>也就是说，有效数字总是 <code>1.xx…xx</code> 的形式，其中 <code>xx…xx</code> 的部分保存在 64 位浮点数之中，最长可能为 52 位</p><p>因此，JavaScript 提供的有效数字最长为 53 个二进制位（64 位浮点的后 52 位 + 有效数字第一位的 1）</p><p>既然限定位数，必然有截断的可能</p></blockquote><h3 id="_4-浮点数转换为二进制" tabindex="-1"><a class="header-anchor" href="#_4-浮点数转换为二进制" aria-hidden="true">#</a> 4.浮点数转换为二进制</h3><ul><li>整数可以用除 2 取余的方式</li><li>小数可以用乘 2 取整的方式</li></ul><h4 id="_1-示例-1-7" tabindex="-1"><a class="header-anchor" href="#_1-示例-1-7" aria-hidden="true">#</a> 1）示例 1</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.1 转换为二进制：
0.1 * 2 =  0.2 =&gt; 小数部分 0.2，整数部分 0
0.2 * 2 =  0.4 =&gt; 小数部分 0.4，整数部分 0
0.4 * 2 =  0.8 =&gt; 小数部分 0.8，整数部分 0
0.8 * 2 =  1.6 =&gt; 小数部分 0.6，整数部分 1
0.6 * 2 =  1.2 =&gt; 小数部分 0.2，整数部分 1
0.2 * 2 =  0.4 =&gt; 小数部分 0.4，整数部分 0
从 0.2 开始循环
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最终能得到两个循环的二进制数</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.1：0.0001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1100 ...

0.2：0.0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这两个的和的二进制</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum：0.0100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>最终只能得到和的近似值</li><li>按照 IEEE 754 标准保留 52 位，按 0 舍 1 入来取值</li><li>然后转换为十进制数</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum ≈ 0.30000000000000004
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-示例-2-7" tabindex="-1"><a class="header-anchor" href="#_2-示例-2-7" aria-hidden="true">#</a> 2）示例 2</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.335</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>因为 1.335 其实是 1.33499999999999996447286321199</li><li>toFixed 虽然是四舍五入，但是是对 1.33499999999999996447286321199 进行四五入，所以得出 1.33</li></ul><h3 id="_5-整数精度问题" tabindex="-1"><a class="header-anchor" href="#_5-整数精度问题" aria-hidden="true">#</a> 5.整数精度问题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19571992547450991</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 19571992547450990</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19571992547450991</span> <span class="token operator">===</span> <span class="token number">19571992547450992</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 JavaScript 中 number 类型统一按浮点数处理</li><li>整数是按最大 54 位来算</li><li>最大：2<sup>53</sup> - 1 <ul><li>Number.MAX_SAFE_INTEGER</li><li>9007199254740991</li></ul></li><li>最小：-2<sup>53</sup> - 1 <ul><li>Number.MIN_SAFE_INTEGER</li><li>-9007199254740991</li></ul></li><li>只要超过这个范围，就会存在被舍去的精度问题</li></ul><blockquote><p>几乎所有的编程语言都采用了 IEEE-754 浮点数表示法，任何使用二进制浮点数的编程语言都会有这个问题</p><p>只不过在很多其他语言中已经封装好了方法来避免精度的问题，而 JavaScript 是一门弱类型的语言，从设计思想上就没有对浮点数有个严格的数据类型，所以精度误差的问题就显得格外突出</p></blockquote><h3 id="_6-使用第三方库解决精度问题" tabindex="-1"><a class="header-anchor" href="#_6-使用第三方库解决精度问题" aria-hidden="true">#</a> 6.使用第三方库解决精度问题</h3><ul><li>通常这种对精度要求高的计算都应该交给后端去计算和存储，因为后端有成熟的库来解决这种计算问题</li><li>前端也有几个不错的类库</li></ul><h4 id="_1-math-js" tabindex="-1"><a class="header-anchor" href="#_1-math-js" aria-hidden="true">#</a> 1）Math.js</h4><ul><li>专门为 JavaScript 和 NodeJS 提供的一个广泛的数学库</li><li>具有灵活的表达式解析器，支持符号计算，配有大量内置函数和常量，并提供集成解决方案来处理不同的数据类型 <ul><li>如：数字，大数字（超出安全数的数字），复数，分数，单位和矩阵</li></ul></li><li>功能强大，易于使用</li></ul><h4 id="_2-decimal-js" tabindex="-1"><a class="header-anchor" href="#_2-decimal-js" aria-hidden="true">#</a> 2）decimal.js</h4><ul><li>为 JavaScript 提供十进制类型的任意精度数值</li></ul><h4 id="_3-big-js" tabindex="-1"><a class="header-anchor" href="#_3-big-js" aria-hidden="true">#</a> 3）big.js</h4><ul><li>能够支持处理 Long 类型的数据</li><li>也能够准确的处理小数的运算</li></ul><h3 id="_7-真题解答-2" tabindex="-1"><a class="header-anchor" href="#_7-真题解答-2" aria-hidden="true">#</a> 7.真题解答</h3><h4 id="_1-为什么-console-log-0-2-0-1-0-3-得到的值为-false" tabindex="-1"><a class="header-anchor" href="#_1-为什么-console-log-0-2-0-1-0-3-得到的值为-false" aria-hidden="true">#</a> 1）为什么 <code>console.log(0.2+0.1==0.3)</code> 得到的值为 false？</h4><blockquote><p>因为浮点数的计算存在 round-off 问题，也就是浮点数不能够进行精确的计算</p><ul><li>不仅 JavaScript，所有遵循 IEEE 754 规范的语言都是如此</li><li>在 JavaScript 中，所有的 Number 都是以 64-bit 的双精度浮点数存储的</li><li>双精度的浮点数在这 64 位上划分为 3 段，而这 3 段也就确定了一个浮点数的值，64bit 的划分是“1-11-52”的模式，具体来说： <ul><li>就是 1 位最高位（最左边那一位）表示符号位，0 表示正，1 表示负</li><li>11 位表示指数部分</li><li>52 位表示尾数部分，也就是有效域部分</li></ul></li></ul></blockquote><h2 id="十九-严格模式" tabindex="-1"><a class="header-anchor" href="#十九-严格模式" aria-hidden="true">#</a> （十九）严格模式</h2><h3 id="_1-经典真题-18" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-18" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>use strict 是什么意思? 使用它区别是什么？</li></ul><h3 id="_2-严格模式介绍" tabindex="-1"><a class="header-anchor" href="#_2-严格模式介绍" aria-hidden="true">#</a> 2.严格模式介绍</h3><ul><li>严格模式是从 ES5 开始新增的一种方式</li><li>是采用具有限制性 JavaScript 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（sloppy）模式</li><li>在“严格模式下”，同样的代码，可能会有不一样的运行结果 <ul><li>一些在“正常模式”下可以运行的语句，在“严格模式”下将不能运行</li></ul></li></ul><h4 id="_1-设立-严格模式-的目的" tabindex="-1"><a class="header-anchor" href="#_1-设立-严格模式-的目的" aria-hidden="true">#</a> 1）设立&quot;严格模式&quot;的目的</h4><ul><li>消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，增加运行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ul><h4 id="_2-兼容性" tabindex="-1"><a class="header-anchor" href="#_2-兼容性" aria-hidden="true">#</a> 2）兼容性</h4><ul><li>“严格模式”体现了 JavaScript 更合理、更安全、更严谨的发展方向</li><li>支持严格模式的浏览器有 <ul><li>Internet Explorer 10+</li><li>Firefox 4+</li><li>Chrome 13+</li><li>Safari 5.1+</li><li>Opera 12+</li></ul></li></ul><h3 id="_3-开启严格模式" tabindex="-1"><a class="header-anchor" href="#_3-开启严格模式" aria-hidden="true">#</a> 3.开启严格模式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>老版本的浏览器会把它当作一行普通字符串，直接忽略</li></ul><h4 id="_1-调用方式-1-针对整个脚本文件" tabindex="-1"><a class="header-anchor" href="#_1-调用方式-1-针对整个脚本文件" aria-hidden="true">#</a> 1）调用方式 1：针对整个脚本文件</h4><ul><li>将 “use strict” 放在 <mark>脚本文件的第一行</mark>，则整个脚本都将以“严格模式”运行</li><li>如果不在第一行，则无效，整个脚本以“正常模式”运行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是正常模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-调用方式-2-针对单个函数" tabindex="-1"><a class="header-anchor" href="#_2-调用方式-2-针对单个函数" aria-hidden="true">#</a> 2）调用方式 2：针对单个函数</h4><ul><li>将 “use strict” 放在 <mark>函数体的第一行</mark>，则整个函数以“严格模式”运行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">notStrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;这是正常模式。&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-脚本文件的变通写法" tabindex="-1"><a class="header-anchor" href="#_3-脚本文件的变通写法" aria-hidden="true">#</a> 3）脚本文件的变通写法</h4><ul><li>因为第一种调用方法不利于文件合并</li><li>所以更好的做法是，借用第二种方法</li><li>将整个脚本文件放在一个立即执行的匿名函数之中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// some code here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-严格模式和普通模式区别" tabindex="-1"><a class="header-anchor" href="#_4-严格模式和普通模式区别" aria-hidden="true">#</a> 4.严格模式和普通模式区别</h3><h4 id="_1-不能使用未声明的变量" tabindex="-1"><a class="header-anchor" href="#_1-不能使用未声明的变量" aria-hidden="true">#</a> 1）不能使用未声明的变量</h4><ul><li>在普通模式下，我们可以使用一个未声明的变量，此时该变量会成为一个全局变量</li><li>在严格模式下会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: a is not defined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-删除变量和不存在的属性会报错" tabindex="-1"><a class="header-anchor" href="#_2-删除变量和不存在的属性会报错" aria-hidden="true">#</a> 2）删除变量和不存在的属性会报错</h4><ul><li>在普通模式下，删除变量或者不允许删除的属性虽然也会失败，但是是“静默失败” <ul><li>即：虽然失败了，但是不会给出任何提示</li><li>会产生很多隐藏问题，也给程序员的调错带来了难度</li></ul></li><li>在严格模式下则会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> i<span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Delete of an unqualified identifier in strict mode.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-函数中相同的形参名会报错" tabindex="-1"><a class="header-anchor" href="#_3-函数中相同的形参名会报错" aria-hidden="true">#</a> 3）函数中相同的形参名会报错</h4><ul><li>在普通模式下，函数中两个形参名相同也不会报错，只不过后面的形参所接收到的值会覆盖前面的同名形参</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">b<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>但是在严格模式下，相同的形参名会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// SyntaxError: Duplicate parameter name not allowed in this context</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">b<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-对象不能有重名的属性" tabindex="-1"><a class="header-anchor" href="#_4-对象不能有重名的属性" aria-hidden="true">#</a> 4）对象不能有重名的属性</h4><ul><li>正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值</li><li>严格模式下，这属于语法错误</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 语法错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-禁止八进制表示法" tabindex="-1"><a class="header-anchor" href="#_5-禁止八进制表示法" aria-hidden="true">#</a> 5）禁止八进制表示法</h4><ul><li>正常模式下，整数的第一位如果是 0，表示这是八进制数</li><li>如：010 等于十进制的 8</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>严格模式禁止这种表示法，整数第一位为 0，将报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Octal literals are not allowed in strict mode.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-函数内部-this-值为-undefined" tabindex="-1"><a class="header-anchor" href="#_6-函数内部-this-值为-undefined" aria-hidden="true">#</a> 6）函数内部 this 值为 undefined</h4><ul><li>在普通模式下，函数中的 this 在以函数的形式被调用时，指向全局对象</li><li>在严格模式中，得到的值为 undefined</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-创设-eval-作用域" tabindex="-1"><a class="header-anchor" href="#_7-创设-eval-作用域" aria-hidden="true">#</a> 7）创设 eval 作用域</h4><ul><li>正常模式下，JavaScript 语言有两种变量作用域（scope） <ul><li>全局作用域</li><li>函数作用域</li></ul></li><li>严格模式创设了第三种作用域 <ul><li>eval 作用域</li></ul></li><li>正常模式下，eval 语句的作用域取决于它处于全局作用域，还是处于函数作用域</li><li>严格模式下，eval 语句本身就是一个作用域，不再生成全局变量，它所生成的变量只能用于 eval 内部</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;var x = 5; x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-保留字" tabindex="-1"><a class="header-anchor" href="#_8-保留字" aria-hidden="true">#</a> 8）保留字</h4><ul><li>为了向将来的 JavaScript 新版本过渡，严格模式新增了一些保留字 <ul><li>implements</li><li>interface</li><li>let</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li><li>yield</li></ul></li><li>使用这些词作为变量名将会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token keyword">public</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: Unexpected strict mode reserved word</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">public</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1108),tn=n("p",null,"更多关于严格模式的内容，可以参阅：",-1),pn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"},en={href:"http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html",target:"_blank",rel:"noopener noreferrer"},on=p(`<h3 id="_5-真题解答-1" tabindex="-1"><a class="header-anchor" href="#_5-真题解答-1" aria-hidden="true">#</a> 5.真题解答</h3><h4 id="_1-use-strict-是什么意思-使用它区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-use-strict-是什么意思-使用它区别是什么" aria-hidden="true">#</a> 1）use strict 是什么意思? 使用它区别是什么？</h4><blockquote><p>use strict 代表开启严格模式，这种模式使得 JavaScript 在更严格的条件下运行，实行更严格解析和错误处理</p><p>开启“严格模式”的优点：</p><ol><li>消除 JavaScript 语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，增加运行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ol><p>回答一些具体的严格模式下和普通模式之间的区别</p></blockquote><h2 id="二十-函数防抖和节流" tabindex="-1"><a class="header-anchor" href="#二十-函数防抖和节流" aria-hidden="true">#</a> （二十）函数防抖和节流</h2><h3 id="_1-经典真题-19" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-19" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>防抖，节流是什么，如何实现 （字节）</li></ul><h3 id="_2-函数防抖和节流介绍" tabindex="-1"><a class="header-anchor" href="#_2-函数防抖和节流介绍" aria-hidden="true">#</a> 2.函数防抖和节流介绍</h3><blockquote><p>JavaScript 中的函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则一般不会遇到跟性能相关的问题</p><p>但是在一些少数情况下，函数的触发不是由用户直接控制的</p><p>在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题</p></blockquote><ul><li>解决性能问题的处理办法有 <ul><li>函数防抖</li><li>函数节流</li></ul></li><li>函数被频繁调用的常见场景</li></ul><h4 id="_1-mousemove-事件" tabindex="-1"><a class="header-anchor" href="#_1-mousemove-事件" aria-hidden="true">#</a> 1）mousemove 事件</h4><ul><li>如果要实现一个拖拽功能，需要一路监听 mousemove 事件</li><li>在回调中获取元素当前位置，然后重置 DOM 的位置来进行样式改变</li><li>如果不加以控制，每移动一定像素而触发的回调数量非常惊人</li><li>回调中又伴随着 DOM 操作，继而引发浏览器的重排与重绘，性能差的浏览器可能就会直接假死</li></ul><h4 id="_2-window-onresize-事件" tabindex="-1"><a class="header-anchor" href="#_2-window-onresize-事件" aria-hidden="true">#</a> 2）window.onresize 事件</h4><ul><li>为 window 对象绑定了 resize 事件，当浏览器窗口大小被拖动而改变的时候，这个事件触发的频率非常之高</li><li>如果在 window.onresize 事件函数里有一些跟 DOM 节点相关的操作，而跟 DOM 节点相关的操作往往是非常消耗性能的，这时候浏览器可能就会吃不消而造成卡顿现象</li></ul><h4 id="_3-射击游戏的-mousedown-keydown-事件" tabindex="-1"><a class="header-anchor" href="#_3-射击游戏的-mousedown-keydown-事件" aria-hidden="true">#</a> 3）射击游戏的 mousedown/keydown 事件</h4><ul><li>单位时间只能发射一颗子弹</li></ul><h4 id="_4-keyup-事件" tabindex="-1"><a class="header-anchor" href="#_4-keyup-事件" aria-hidden="true">#</a> 4）keyup 事件</h4><ul><li>搜索联想</li></ul><h4 id="_5-scroll-事件" tabindex="-1"><a class="header-anchor" href="#_5-scroll-事件" aria-hidden="true">#</a> 5）scroll 事件</h4><ul><li>监听滚动事件判断是否到页面底部自动加载更多</li></ul><blockquote><p>对于这些情况的解决方案就是函数防抖（debounce）或函数节流（throttle）</p><p>其核心就是 <mark>限制某一个方法的频繁触发</mark></p></blockquote><h3 id="_3-函数防抖-debounce" tabindex="-1"><a class="header-anchor" href="#_3-函数防抖-debounce" aria-hidden="true">#</a> 3.函数防抖 debounce</h3><ul><li>指防止函数在极短的时间内反复调用，造成资源的浪费</li></ul><blockquote><p>真正的搜索行为，并不是每次按键都会触发的</p><p>只有当用户停止按键一段事件后才会触发</p></blockquote><h4 id="_1-通用函数功能" tabindex="-1"><a class="header-anchor" href="#_1-通用函数功能" aria-hidden="true">#</a> 1）通用函数功能</h4><ul><li>调用该函数后，不立即做事，而是一段时间后去做事</li><li>如果在等待时间内调用了该函数，重新计时</li></ul><h4 id="_2-通用函数参数" tabindex="-1"><a class="header-anchor" href="#_2-通用函数参数" aria-hidden="true">#</a> 2）通用函数参数</h4><ul><li>一段时间后要做什么事 <ul><li>应该是一个回调函数，即：函数作为参数</li></ul></li><li>要等待多长时间 <ul><li>通常是毫秒</li></ul></li></ul><h4 id="_3-封装防抖函数" tabindex="-1"><a class="header-anchor" href="#_3-封装防抖函数" aria-hidden="true">#</a> 3）封装防抖函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数防抖
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span> 一段时间后，要调用的函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">wait</span> 等待的时间，单位毫秒
 */</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置变量，记录 setTimeout 得到的 id</span>
  <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有值，说明目前正在等待中，清除它</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重新开始计时</span>
    timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txt<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 debounce 函数来将事件处理函数变为一个防抖函数</span>
<span class="token keyword">var</span> debounceHandle <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
txt<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">debounceHandle</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt=""></p><h3 id="_4-函数节流-throttle" tabindex="-1"><a class="header-anchor" href="#_4-函数节流-throttle" aria-hidden="true">#</a> 4.函数节流 throttle</h3><ul><li>防止一个函数短时间内被频繁的触发</li><li>和函数防抖的原理不同，函数节流的核心思想是 <mark>让连续的函数执行，变为固定时间段间断地执行</mark></li></ul><blockquote><p>函数防抖，是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次</p><p>比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车</p><br><p>函数节流，指一定时间内函数只执行一次</p><p>比如人的眨眼睛，就是一定时间内眨一次</p></blockquote><ul><li>实现节流有 2 种主流方式 <ul><li>使用时间戳</li><li>设置定时器</li></ul></li></ul><h4 id="_1-使用时间戳" tabindex="-1"><a class="header-anchor" href="#_1-使用时间戳" aria-hidden="true">#</a> 1）使用时间戳</h4><ul><li>触发事件时，取出当前的时间戳，然后减去之前的时间戳（初始设为 0）</li><li>如果大于设置的时间周期，就执行函数，然后更新时间戳为当前的时间戳</li><li>如果小于，就不执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数节流（使用时间戳）
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span> 要节流的函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>timestamp<span class="token punctuation">}</span></span> <span class="token parameter">wait</span> 间隔时间
 */</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> args<span class="token punctuation">;</span> <span class="token comment">// 存储函数参数</span>
  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 一开始的默认时间</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取最新的时间戳</span>
    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment">// 获取参数</span>
    <span class="token comment">// 进行时间戳的判断，如果超出规定时间，则执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txt<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> txt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 throttle 函数来将事件处理函数变为一个节流函数</span>
<span class="token keyword">var</span> throttleHandle <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
txt<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">throttleHandle</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+C+`" alt=""></p><h4 id="_2-设置定时器" tabindex="-1"><a class="header-anchor" href="#_2-设置定时器" aria-hidden="true">#</a> 2）设置定时器</h4><ul><li>触发事件时设置一个定时器</li><li>再触发事件的时候，如果定时器存在，就不执行</li><li>直到定时器执行，然后执行函数，清空定时器，再设置下个定时器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数节流（设置定时器）
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span> 要节流的函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>timestamp<span class="token punctuation">}</span></span> <span class="token parameter">wait</span> 节流的时间间隔
 */</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// timeout 存储计时器返回值</span>
  <span class="token comment">// args 存储参数</span>
  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> args<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token comment">// 如果 timeout 有值，说明上一次的执行间隔时间还没过</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 进入此 if 说明时间间隔已经过了</span>
      <span class="token comment">// 先执行一次要执行的函数</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 然后重新设置时间间隔</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-真题解答-2" tabindex="-1"><a class="header-anchor" href="#_5-真题解答-2" aria-hidden="true">#</a> 5.真题解答</h3><h4 id="_1-防抖-节流是什么-如何实现-字节" tabindex="-1"><a class="header-anchor" href="#_1-防抖-节流是什么-如何实现-字节" aria-hidden="true">#</a> 1）防抖，节流是什么，如何实现 （字节）</h4><blockquote><p>在平时开发的时候，会有很多场景会频繁触发事件，比如说搜索框实时发请求，onmousemove、resize、onscroll 等，有些时候，并不能或者不想频繁触发事件，这时候就应该用到函数防抖和函数节流</p><ol><li>函数防抖(debounce)，指的是短时间内多次触发同一事件，只执行最后一次，或者只执行最开始的一次，中间的不执行</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置变量，记录 setTimeout 得到的 id</span>
  <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有值，说明目前正在等待中，清除它</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重新开始计时</span>
    timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>函数节流(throttle)，指连续触发事件但是在 n 秒中只执行一次函数，即： 2n 秒内执行 2 次...</li></ol><p>节流如字面意思，会稀释函数的执行频率</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> args<span class="token punctuation">;</span> <span class="token comment">// 存储函数参数</span>
  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 一开始的默认时间</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取最新的时间戳</span>
    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment">// 获取参数</span>
    <span class="token comment">// 进行时间戳的判断，如果超出规定时间，则执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="二十一-weakset-和-weakmap" tabindex="-1"><a class="header-anchor" href="#二十一-weakset-和-weakmap" aria-hidden="true">#</a> （二十一）WeakSet 和 WeakMap</h2><h3 id="_1-经典真题-20" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-20" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>是否了解 WeakMap、WeakSet（美团 2019 年）</li></ul><h3 id="_2-对象的简单使用" tabindex="-1"><a class="header-anchor" href="#_2-对象的简单使用" aria-hidden="true">#</a> 2.对象的简单使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> algorithm <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">site</span><span class="token operator">:</span> <span class="token string">&quot;leetcode&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">.</span>site<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// leetcode</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> algorithm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> algorithm<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// site leetcode</span>
<span class="token keyword">delete</span> algorithm<span class="token punctuation">.</span>site<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">.</span>site<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象的 key 和 value 是一个字符串类型的值 <ul><li>通过点（<code>.</code>）访问值</li></ul></li><li><code>for...in</code> 循环可以在对象中循环 <ul><li>通过中括号（<code>[]</code>）访问键对应的值</li></ul></li><li>不能使用 <code>for...of</code> 循环 <ul><li>因为对象是不可迭代的</li></ul></li><li>对象的属性可以用 delete 关键字删除</li></ul><h3 id="_3-map" tabindex="-1"><a class="header-anchor" href="#_3-map" aria-hidden="true">#</a> 3.Map</h3><ul><li>Map 是 JavaScript 中新的集合对象，功能类似于对象 <ul><li>但是与常规对象相比，存在一些主要差异</li></ul></li><li>通过 Map 构造函数，可以创建一个 Map 实例对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map(0) {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-添加属性" tabindex="-1"><a class="header-anchor" href="#_1-添加属性" aria-hidden="true">#</a> 1）添加属性</h4><ul><li>set 方法可以为 Map 添加属性</li><li>有两个参数 <ul><li>参数 1：键</li><li>参数 2：值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map(1) {&quot;name&quot; =&gt; &quot;john&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不允许添加 Map 现有数据</li><li>如果 Map 对象中已经存在与新数据的键对应的值，则不会添加新数据 <ul><li>会直接覆盖该键对应的值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map(2) {&quot;name&quot; =&gt; &quot;john&quot;, &quot;phone&quot; =&gt; &quot;iPhone&quot;}</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map(2) {&quot;name&quot; =&gt; &quot;john&quot;, &quot;phone&quot; =&gt; &quot;iPhone&quot;}</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Galaxy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map(2) {&quot;name&quot; =&gt; &quot;john&quot;, &quot;phone&quot; =&gt; &quot;Galaxy&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>二维数组和 Map 对象之间可以相互转换</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { 1 =&gt; 2, 3 =&gt; 4, 5 =&gt; 6 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-获取属性和长度" tabindex="-1"><a class="header-anchor" href="#_2-获取属性和长度" aria-hidden="true">#</a> 2）获取属性和长度</h4><ul><li>get 方法可以获取 Map 对象某一个属性的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// iPhone</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>has 方法查询是否具有某一个属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>size 属性获取 Map 对象的长度</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-遍历-map-对象" tabindex="-1"><a class="header-anchor" href="#_3-遍历-map-对象" aria-hidden="true">#</a> 3）遍历 Map 对象</h4><ul><li>Map 是一个可迭代的对象 <ul><li>即：可以使用 <code>for...of</code> 语句映射</li></ul></li><li>Map 以数组形式提供数据，要获取键或值则需要 <mark>解构数组</mark> 或 <mark>以索引的方式访问</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Array(2) [&quot;name&quot;, &quot;john&quot;]</span>
<span class="token comment">// Array(2) [&quot;phone&quot;, &quot;Galaxy&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>仅获取键或值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MapIterator {&quot;name&quot;, &quot;phone&quot;}</span>
map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MapIterator {&quot;john&quot;, &quot;Galaxy&quot;}</span>
map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MapIterator {&quot;name&quot; =&gt; &quot;john&quot;, &quot;phone&quot; =&gt; &quot;Galaxy&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>也可以使用 forEach 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// john</span>
<span class="token comment">// iPhone</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用展开操作符（<code>...</code>）获取 Map 的全部数据 <ul><li>因为展开操作符可以在幕后与可迭代对象一起工作</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> simpleSpreadedMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>map<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [Array(2), Array(2)]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-删除属性" tabindex="-1"><a class="header-anchor" href="#_4-删除属性" aria-hidden="true">#</a> 4）删除属性</h4><ul><li>从 Map 对象中删除数据只需要调用 delete <ul><li>返回布尔值，该布尔值指示 delete 函数是否成功删除了数据</li><li>如果是，则返回 true，否则返回 false</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;fake&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果要清空整个 Map 对象，可以使用 clear 方法</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;iPhone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(2) { &#39;name&#39; =&gt; &#39;john&#39;, &#39;phone&#39; =&gt; &#39;iPhone&#39; }</span>
map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Map(0) {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-map-和-object-的区别" tabindex="-1"><a class="header-anchor" href="#_4-map-和-object-的区别" aria-hidden="true">#</a> 4.Map 和 Object 的区别</h3><p><img src="`+I+`" alt=""></p><h3 id="_5-weakmap" tabindex="-1"><a class="header-anchor" href="#_5-weakmap" aria-hidden="true">#</a> 5.WeakMap</h3><ul><li>起源于 Map，非常相似又有明显不同</li><li>WeakMap 与它的引用链接所指向的数据对象的连接或关系没有 Map 的连接或关系那么强，所以是弱（weak）的</li></ul><h4 id="_1-差异-1-key-必须是对象" tabindex="-1"><a class="header-anchor" href="#_1-差异-1-key-必须是对象" aria-hidden="true">#</a> 1）差异 1：key 必须是对象</h4><ul><li>可以将任何值作为键传入 Map 对象</li><li>但 WeakMap 只接受一个对象作为键，否则将返回一个错误</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> John <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>John<span class="token punctuation">,</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// WeakMap {{...} =&gt; &quot;student&quot;}</span>

weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: Invalid value used as weak map key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-差异-2-并非-map-中的所有方法都支持" tabindex="-1"><a class="header-anchor" href="#_2-差异-2-并非-map-中的所有方法都支持" aria-hidden="true">#</a> 2）差异 2：并非 Map 中的所有方法都支持</h4><ul><li>WeakMap 可以使用以下方法 <ul><li>delete</li><li>get</li><li>has</li><li>set</li></ul></li><li>不支持迭代对象的方法</li></ul><h4 id="_3-差异-3-当-gc-清理引用时-数据会被删除" tabindex="-1"><a class="header-anchor" href="#_3-差异-3-当-gc-清理引用时-数据会被删除" aria-hidden="true">#</a> 3）差异 3：当 GC 清理引用时，数据会被删除</h4><ul><li>这是和 Map 相比最大的不同</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> John <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token string">&quot;math&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>John<span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>John<span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

John <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">/* John 被垃圾收集 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当 John 对象被垃圾回收时，Map 对象将保持引用链接</p><p>而 WeakMap 对象将丢失链接</p></blockquote><h3 id="_6-set" tabindex="-1"><a class="header-anchor" href="#_6-set" aria-hidden="true">#</a> 6.Set</h3><ul><li>非常类似于 Map</li><li>但是 Set 对于单个值更有用</li></ul><h4 id="_1-添加属性-1" tabindex="-1"><a class="header-anchor" href="#_1-添加属性-1" aria-hidden="true">#</a> 1）添加属性</h4><ul><li>使用 add 方法可以添加属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set(4) {1, &quot;john&quot;, 10n}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不允许添加相同的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set(1) {5}</span>

set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set(1) {5}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于原始数据类型（boolean、number、string、null、undefined） <ul><li>如果储存相同值则只保存一个</li></ul></li><li>对于引用类型 <ul><li>引用地址完全相同则只会存一个</li></ul></li></ul><blockquote><p>+0 与 -0 在存储判断唯一性的时候是恒等的，所以不可以重复</p><p>undefined 和 undefined 是恒等的，所以不可以重复</p><p>NaN 与 NaN 是不恒等的，但是在 Set 中只能存一个，不能重复</p></blockquote><h4 id="_2-遍历对象" tabindex="-1"><a class="header-anchor" href="#_2-遍历对象" aria-hidden="true">#</a> 2）遍历对象</h4><ul><li>Set 是一个可迭代的对象</li><li>可以使用 <code>for...of</code> 或 forEach 语句</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1</span>
<span class="token comment">// &#39;John&#39;</span>
<span class="token comment">// 10n</span>
<span class="token comment">// 5</span>

set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>
<span class="token comment">// &#39;John&#39;</span>
<span class="token comment">// 10n</span>
<span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除属性" tabindex="-1"><a class="header-anchor" href="#_3-删除属性" aria-hidden="true">#</a> 3）删除属性</h4><ul><li>和 Map 的删除完全一样</li><li>如果数据被成功删除，返回 true，否则返回 false</li><li>也可以使用 clear 方法清空 Set 集合</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false;</span>

set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果不想将相同的值添加到数组表单中，可以使用 Set</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* With Set */</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {1, 2, 3}</span>

<span class="token comment">// Converting to Array</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// [1, 2, 3]</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [object Array]</span>

<span class="token comment">/* Without Set */</span>
<span class="token keyword">const</span> <span class="token function-variable function">hasSameVal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ar<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>v <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasSameVal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ar<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasSameVal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ar<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasSameVal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ar<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-应用场景" aria-hidden="true">#</a> 4）应用场景</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组去重</span>
<span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 并集</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">// 交集</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>
<span class="token keyword">var</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
set1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>

<span class="token comment">// 差集</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>
<span class="token keyword">var</span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>
<span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
set1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    set2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
set2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    set1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-weakset" tabindex="-1"><a class="header-anchor" href="#_7-weakset" aria-hidden="true">#</a> 7.WeakSet</h3><h4 id="_1-weakset-和-set-的区别" tabindex="-1"><a class="header-anchor" href="#_1-weakset-和-set-的区别" aria-hidden="true">#</a> 1）WeakSet 和 Set 的区别</h4><ul><li>WeakSet 只能储存 <mark>对象引用，不能存放值</mark><ul><li>而 Set 对象都可以</li></ul></li><li>WeakSet 对象中储存的对象值都是 <mark>被弱引用</mark> 的 <ul><li>即：垃圾回收机制不考虑 WeakSet 对该对象的引用</li><li>如果没有其他的变量或者属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在与 WeakSet 中）</li><li>所以 WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致</li><li>遍历结束之后，有的成员可能取不到，被垃圾回收了</li></ul></li><li>因此 ES6 规定，WeakSet 对象是 <mark>无法被遍历</mark> 的，也没有办法拿到它包含的所有元素</li></ul><h4 id="_2-weakset-能够使用的方法" tabindex="-1"><a class="header-anchor" href="#_2-weakset-能够使用的方法" aria-hidden="true">#</a> 2）WeakSet 能够使用的方法</h4><ul><li>add(value) 方法 <ul><li>在 WeakSet 中添加一个元素</li><li>如果添加的元素已存在，则不会进行操作</li></ul></li><li>delete(value) 方法 <ul><li>删除元素 value</li></ul></li><li>has(value) 方法 <ul><li>判断 WeakSet 对象中是否包含 value</li></ul></li><li>clear() 方法 <ul><li>清空所有元素</li></ul></li></ul><h4 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景" aria-hidden="true">#</a> 3）应用场景</h4><ul><li>WeakSet 将丢失对内部数据的访问链接（如果内部数据已被垃圾收集）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> John <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">major</span><span class="token operator">:</span> <span class="token string">&quot;math&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> weakSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>John<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Set {{...}}</span>
weakSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>John<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// WeakSet {{...}}</span>

John <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">/* John 被垃圾收集 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一旦对象 John 被垃圾回收，WeakSet 就无法访问其引用 John 的数据</p><p>而且 WeakSet 不支持 <code>for...of</code> 或 forEach，因为它不可迭代</p></blockquote><h3 id="_8-比较总结" tabindex="-1"><a class="header-anchor" href="#_8-比较总结" aria-hidden="true">#</a> 8.比较总结</h3><h4 id="_1-map" tabindex="-1"><a class="header-anchor" href="#_1-map" aria-hidden="true">#</a> 1）Map</h4><ul><li>键名唯一不可重复</li><li>类似于集合，键值对的集合，任何值都可以作为一个键或者一个值</li><li>可以遍历，可以转换各种数据格式，方法 get、set、has、delete</li></ul><h4 id="_2-weakmap" tabindex="-1"><a class="header-anchor" href="#_2-weakmap" aria-hidden="true">#</a> 2）WeakMap</h4><ul><li>只接受对象为键名，不接受其他类型的值作为键名，键值可以是任意</li><li>键名是拖引用，键名所指向的对象，会被垃圾回收机制回收</li><li>不能遍历，方法 get、set、has、delete</li></ul><h4 id="_3-set" tabindex="-1"><a class="header-anchor" href="#_3-set" aria-hidden="true">#</a> 3）Set</h4><ul><li>成员唯一，无序且不会重复</li><li>类似于数组集合，键值和键名是一致的（只有键值。没有键名）</li><li>可以遍历，方法有 add、delete、has</li></ul><h4 id="_4-weakset" tabindex="-1"><a class="header-anchor" href="#_4-weakset" aria-hidden="true">#</a> 4）WeakSet</h4><ul><li>只能存储对应引用，不能存放值</li><li>成员都是弱引用，会被垃圾回收机制回收</li><li>不能遍历，方法有 add、delete、has</li></ul><h3 id="_9-真题解答-2" tabindex="-1"><a class="header-anchor" href="#_9-真题解答-2" aria-hidden="true">#</a> 9.真题解答</h3><h4 id="_1-是否了解-weakmap、weakset-美团-2019-年" tabindex="-1"><a class="header-anchor" href="#_1-是否了解-weakmap、weakset-美团-2019-年" aria-hidden="true">#</a> 1）是否了解 WeakMap、WeakSet（美团 2019 年）</h4><blockquote><p>WeakSet 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次，在 WeakSet 的集合中是唯一的</p><p>它和 Set 对象的区别有两点:</p><ol><li>与 Set 相比，WeakSet 只能是对象的集合，而不能是任何类型的任意值</li><li>WeakSet 持弱引用：集合中对象的引用为弱引用。 如果没有其他的对 WeakSet 中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着 WeakSet 中没有存储当前对象的列表，正因为这样，WeakSet 是不可枚举的</li></ol><br><p>WeakMap 对象也是键值对的集合，它的键必须是对象类型，值可以是任意类型。它的键被弱保持，也就是说，当其键所指对象没有其他地方引用的时候，它会被 GC 回收掉。WeakMap 提供的接口与 Map 相同</p><p>与 Map 对象不同的是，WeakMap 的键是不可枚举的。不提供列出其键的方法。列表是否存在取决于垃圾回收器的状态，是不可预知的</p></blockquote><h2 id="二十二-深浅拷贝" tabindex="-1"><a class="header-anchor" href="#二十二-深浅拷贝" aria-hidden="true">#</a> （二十二）深浅拷贝</h2><h3 id="_1-经典真题-21" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-21" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>深拷贝和浅拷贝的区别？如何实现</li></ul><h3 id="_2-深拷贝和浅拷贝的概念" tabindex="-1"><a class="header-anchor" href="#_2-深拷贝和浅拷贝的概念" aria-hidden="true">#</a> 2.深拷贝和浅拷贝的概念</h3><h4 id="_1-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_1-浅拷贝" aria-hidden="true">#</a> 1）浅拷贝</h4><ul><li>只拷贝基本类型的数据</li><li>拷贝引用类型的数据后也会发生引用</li><li>这种拷贝叫做浅拷贝(浅复制)</li><li>浅拷贝只复制指向某个对象的指针（引用地址），而不复制对象本身</li><li><mark>新旧对象还是共享同一块内存</mark></li></ul><h4 id="_2-深拷贝" tabindex="-1"><a class="header-anchor" href="#_2-深拷贝" aria-hidden="true">#</a> 2）深拷贝</h4><ul><li>在堆中重新分配内存，并把源对象所有属性都进行新建拷贝</li><li>以保证深拷贝的对象的引用图不包含任何原有对象或对象图上的任何对象</li><li>拷贝后的对象与原来的对象完全隔离，互不影响</li></ul><h3 id="_3-浅拷贝方法" tabindex="-1"><a class="header-anchor" href="#_3-浅拷贝方法" aria-hidden="true">#</a> 3.浅拷贝方法</h3><h4 id="_1-直接赋值-1" tabindex="-1"><a class="header-anchor" href="#_1-直接赋值-1" aria-hidden="true">#</a> 1）直接赋值</h4><ul><li>最常见的一种浅拷贝方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 直接赋值</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> stu<span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-object-assign-方法" tabindex="-1"><a class="header-anchor" href="#_2-object-assign-方法" aria-hidden="true">#</a> 2）Object.assign 方法</h4><ul><li>该方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象</li></ul><h5 id="a-基本用法" tabindex="-1"><a class="header-anchor" href="#a-基本用法" aria-hidden="true">#</a> a）基本用法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, gender: &#39;male&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-拷贝对象" tabindex="-1"><a class="header-anchor" href="#b-拷贝对象" aria-hidden="true">#</a> b）拷贝对象</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当对象的属性值对应的是一个对象时，该方法拷贝的是 <mark>对象的属性的引用</mark>，而不是对象本身</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stuInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">No</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>stuInfo<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-es6-扩展运算符" tabindex="-1"><a class="header-anchor" href="#_3-es6-扩展运算符" aria-hidden="true">#</a> 3）ES6 扩展运算符</h4><h5 id="a-基本用法-1" tabindex="-1"><a class="header-anchor" href="#a-基本用法-1" aria-hidden="true">#</a> a）基本用法</h5><ul><li>ES6 扩展运算符可以将数组表达式或者 string 在语法层面展开</li><li>还可以在构造字面量对象时，将对象表达式按 key-value 的方式展开</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 展开数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 5, 8, 1, 1, 2, 3]</span>

<span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>stu<span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 展开对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, score: 100 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-拷贝对象-1" tabindex="-1"><a class="header-anchor" href="#b-拷贝对象-1" aria-hidden="true">#</a> b）拷贝对象</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>stu <span class="token punctuation">}</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果对象中某个属性对应的值为引用类型，那么直接拷贝的是 <mark>引用地址</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stuInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">No</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>stu <span class="token punctuation">}</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>stuInfo<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数组的-slice-和-concat-方法" tabindex="-1"><a class="header-anchor" href="#_4-数组的-slice-和-concat-方法" aria-hidden="true">#</a> 4）数组的 slice 和 concat 方法</h4><ul><li>数组也是一种对象</li><li>在 Array 中的 slice 和 concat 方法，不修改原数组</li><li>只会返回一个 <mark>浅复制了原数组中的元素</mark> 的一个 <mark>新数组</mark></li></ul><h5 id="a-基本类型" tabindex="-1"><a class="header-anchor" href="#a-基本类型" aria-hidden="true">#</a> a）基本类型</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// concat 拷贝数组</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>

arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, true, &#39;Hello&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// slice 拷贝数组</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>

arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, true, &#39;Hello&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-引用类型" tabindex="-1"><a class="header-anchor" href="#b-引用类型" aria-hidden="true">#</a> b）引用类型</h5><ul><li>如果数组里的元素是引用类型，那么这两个方法是 <mark>直接拷贝的引用地址</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// concat 拷贝数组</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>

arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 19 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 19 } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// slice 拷贝数组</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>

arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 19 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 19 } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-jquery-中的-extend" tabindex="-1"><a class="header-anchor" href="#_5-jquery-中的-extend" aria-hidden="true">#</a> 5）jQuery 中的 <code>$.extend</code></h4><ul><li>在 jQuery 中，<code>$.extend(deep, target, object1, ..., objectN)</code> 方法可以进行深浅拷贝</li><li>deep <ul><li>设为 true 为深拷贝</li><li>默认 false 为浅拷贝</li></ul></li><li>target <ul><li>要拷贝的目标对象</li></ul></li><li>object1 <ul><li>待拷贝到第一个对象的对象</li></ul></li><li>objectN <ul><li>待拷贝到第 N 个对象的对象</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wade&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;james&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// deep 默认为 false 为浅拷贝</span>
  $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;rose&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+T+`" alt=""></p><h3 id="_5-深拷贝方法" tabindex="-1"><a class="header-anchor" href="#_5-深拷贝方法" aria-hidden="true">#</a> 5.深拷贝方法</h3><h4 id="_1-json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#_1-json-parse-json-stringify" aria-hidden="true">#</a> 1）JSON.parse(JSON.stringify)</h4><ul><li>用 JSON.stringify 将对象转成 JSON 字符串</li><li>再用 JSON.parse 方法把字符串解析成对象</li><li>产生了新的对象，而且对象会开辟新的栈，实现深拷贝</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stuInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">No</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>stuInfo<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 100 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>缺点：不能处理函数 <ul><li>因为 JSON.stringify 方法是将一个 JavaScript 值（对象或者数组）转换为一个 JSON 字符串</li><li>而 JSON 字符串是不能够接受函数的</li></ul></li><li>正则对象也一样，在 JSON.parse 解析时会发生错误</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stuInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">No</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token function-variable function">saySth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是一个学生&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>stuInfo<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 100, saySth: [Function: saySth] }}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;zhangsan&#39;, age: 18, stuInfo: { No: 1, score: 90 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-extend-deep-target-object1-objectn" tabindex="-1"><a class="header-anchor" href="#_2-extend-deep-target-object1-objectn" aria-hidden="true">#</a> 2）$.extend(deep,target,object1,objectN)</h4><ul><li>只需要将第一个参数设置为 true 即可</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wade&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token literal-property property">friend</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;james&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// deep 设为 true 为深拷贝</span>
  $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> cloneObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;rose&quot;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+M+`" alt=""></p><h4 id="_3-手写递归方法" tabindex="-1"><a class="header-anchor" href="#_3-手写递归方法" aria-hidden="true">#</a> 3）手写递归方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result<span class="token punctuation">;</span>
  <span class="token comment">// 判断是否是对象类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否是数组类型</span>
      <span class="token comment">// 如果是数组,创建一个空数组</span>
      result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 遍历数组的键</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 递归调用</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 再判断是否是 null</span>
      <span class="token comment">// 如果是，直接等于 null</span>
      result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否是正则对象</span>
      <span class="token comment">// 如果是,直接赋值拷贝</span>
      result <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否是日期对象</span>
      <span class="token comment">// 如果是,直接赋值拷贝</span>
      result <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 否则是对象</span>
      <span class="token comment">// 创建一个空对象</span>
      result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// 遍历该对象的每一个键</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 递归调用</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 表示不是对象类型，则是简单数据类型，直接赋值</span>
    result <span class="token operator">=</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回结果</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 1</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stuInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">No</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token function-variable function">saySth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是一个学生&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>
stu2<span class="token punctuation">.</span>stuInfo<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 100, saySth: [Function: saySth] }}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;xiejie&#39;, age: 18, stuInfo: { No: 1, score: 90, saySth: [Function: saySth] }}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试 2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiejie&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>

arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 18 } ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, true, &#39;Hello&#39;, { name: &#39;xiejie&#39;, age: 19 } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-真题解答-4" tabindex="-1"><a class="header-anchor" href="#_6-真题解答-4" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-深拷贝和浅拷贝的区别-如何实现" tabindex="-1"><a class="header-anchor" href="#_1-深拷贝和浅拷贝的区别-如何实现" aria-hidden="true">#</a> 1）深拷贝和浅拷贝的区别？如何实现</h4><blockquote><ol><li>浅拷贝：只是拷贝了基本类型的数据，而引用类型数据，复制后也是会发生引用，我们把这种拷贝叫做浅拷贝（浅复制）</li></ol><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存</p><ol start="2"><li><p>深拷贝：在堆中重新分配内存，并且把源对象所有属性都进行新建拷贝，以保证深拷贝的对象的引用图不包含任何原有对象或对象图上的任何对象，拷贝后的对象与原来的对象是完全隔离，互不影响</p></li><li><p>浅拷贝方法</p></li></ol><ul><li>直接赋值</li><li>Object.assign 方法：可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。当拷贝的 object 只有一层的时候，是深拷贝，但是当拷贝的对象属性值又是一个引用时，换句话说有多层时，就是一个浅拷贝</li><li>ES6 扩展运算符，当 object 只有一层的时候，也是深拷贝。有多层时是浅拷贝</li><li>Array.prototype.concat 方法</li><li>Array.prototype.slice 方法</li><li>jQuery 中的 .extend：在 jQuery 中，.extend(deep,target,object1,objectN) 方法可以进行深浅拷贝。deep 设为 true 为深拷贝，默认是 false 浅拷贝</li></ul><ol start="4"><li>深拷贝方法</li></ol><ul><li>$.extend(deep,target,object1,objectN)，将 deep 设置为 true</li><li>JSON.parse(JSON.stringify)：用 JSON.stringify 将对象转成 JSON 字符串，再用 JSON.parse 方法把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。这种方法虽然可以实现数组或对象深拷贝，但不能处理函数</li><li>手写递归</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">oldObj<span class="token punctuation">,</span> newobj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否是对象</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个空的对象来接收拷贝的内容</span>
        <span class="token function">deepCopy</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归调用</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否是数组</span>
      newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个空的数组来接收拷贝的内容</span>
      <span class="token function">deepCopy</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归调用</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      newobj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="二十三-函数柯里化" tabindex="-1"><a class="header-anchor" href="#二十三-函数柯里化" aria-hidden="true">#</a> （二十三）函数柯里化</h2><h3 id="_1-经典真题-22" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-22" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>什么是函数柯里化？</li></ul><h3 id="_2-函数柯里化介绍" tabindex="-1"><a class="header-anchor" href="#_2-函数柯里化介绍" aria-hidden="true">#</a> 2.函数柯里化介绍</h3><ul><li>在计算机科学中，柯里化（Currying），又译为卡瑞化或加里化</li><li>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数</li><li>并且返回接受余下的参数而且返回结果的新函数</li></ul><blockquote><p>这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的</p><p>尽管它是 Moses Schönfinkel 和戈特洛布·弗雷格发明的</p></blockquote><ul><li>在直觉上，柯里化声称如果固定某些参数，将得到接受余下参数的一个函数（返回函数） <ul><li>在调用返回函数时，将判断当前的参数和之前被柯里化函数固定的参数拼起来之后，是否达到了原本函数的参数个数</li><li>如果是，则执行原本的函数，得到结果</li><li>如果没有达到，则要继续调用柯里化函数来固定目前的参数</li></ul></li><li>在理论计算机科学中，柯里化提供了在简单的理论模型中 <ul><li>如：只接受一个单一参数的 lambda 演算中，研究带有多个参数的函数的方式</li></ul></li><li>函数柯里化的对偶是 Uncurrying <ul><li>一种使用匿名单参数函数来实现多参数函数的方法</li></ul></li></ul><h3 id="_3-柯里化快速入门" tabindex="-1"><a class="header-anchor" href="#_3-柯里化快速入门" aria-hidden="true">#</a> 3.柯里化快速入门</h3><h4 id="_1-入门示例" tabindex="-1"><a class="header-anchor" href="#_1-入门示例" aria-hidden="true">#</a> 1）入门示例</h4><ul><li>有一个求取两个数之和的函数</li><li>接收两个形参，返回两形参的和</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在调用的时候，每次都需要传递两个参数</li><li>对该函数柯里化 <ul><li>只接受一个参数</li><li>返回一个函数，也接收一个参数</li><li>利用闭包的特性，可以访问到最开始传入的 x 的值</li><li>最终返回 x 和 y 的和</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-柯里化函数的特点" tabindex="-1"><a class="header-anchor" href="#_2-柯里化函数的特点" aria-hidden="true">#</a> 2）柯里化函数的特点</h4><ul><li>一个柯里化的函数首先会接受一些参数</li><li>接受了这些参数之后，该函数并不会立即求值</li><li>而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来</li><li>待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值</li></ul><h3 id="_4-函数柯里化实际应用" tabindex="-1"><a class="header-anchor" href="#_4-函数柯里化实际应用" aria-hidden="true">#</a> 4.函数柯里化实际应用</h3><h4 id="_1-参数复用" tabindex="-1"><a class="header-anchor" href="#_1-参数复用" aria-hidden="true">#</a> 1）参数复用</h4><ul><li>将相同的参数固定下来</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正常正则验证字符串</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 函数封装后</span>
<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">reg<span class="token punctuation">,</span> txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 即使是相同的正则表达式，也需要重新传递一次</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;testtest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">// Currying后</span>
<span class="token keyword">function</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正则表达式通过闭包保存了起来</span>
<span class="token keyword">var</span> hasNumber <span class="token operator">=</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hasLetter <span class="token operator">=</span> <span class="token function">curryingCheck</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasNumber</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasNumber</span><span class="token punctuation">(</span><span class="token string">&quot;testtest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasLetter</span><span class="token punctuation">(</span><span class="token string">&quot;21212&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-提前确认" tabindex="-1"><a class="header-anchor" href="#_2-提前确认" aria-hidden="true">#</a> 2）提前确认</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 给DOM元素绑定事件
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>HTMLElement<span class="token punctuation">}</span></span> <span class="token parameter">element</span> 要绑定事件的 DOM 元素
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Event<span class="token punctuation">}</span></span> <span class="token parameter">event</span> 绑定什么事件
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">handler</span> 事件处理函数
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> event<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> event <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> event <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">on</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Currying</span>
<span class="token keyword">var</span> on <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> event<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> event <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> event<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> event <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">on</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 换种写法，上面其实是把 isSupport 这个参数先确定下来了</span>
<span class="token keyword">var</span> <span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">isSupport<span class="token punctuation">,</span> element<span class="token punctuation">,</span> event<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  isSupport <span class="token operator">=</span> isSupport <span class="token operator">||</span> document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&quot;on&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">on</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">on</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">on</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在做项目的过程中，封装一些 DOM 操作可以说再常见不过</p><p>上面第一种写法也是比较常见</p><p>但是第二种写法相对于第一种写法就是自执行然后返回一个新的函数</p><p>这样其实就是提前确定了会走哪一个方法，避免每次都进行判断</p></blockquote><h3 id="_5-封装通用柯里化函数" tabindex="-1"><a class="header-anchor" href="#_5-封装通用柯里化函数" aria-hidden="true">#</a> 5.封装通用柯里化函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取要执行的函数</span>
  <span class="token keyword">var</span> fn <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取传递的参数，构成一个参数数组</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果传递的参数已经等于执行函数所需的参数数量</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 参数不够向外界返回的函数</span>
  <span class="token keyword">function</span> <span class="token function">_curry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将新接收到的参数推入到参数数组中</span>
    args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> _curry<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> _curry<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 测试 1</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>

<span class="token keyword">var</span> addCurrying <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addCurrying</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 17</span>

<span class="token comment">// 测试 2</span>
<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">reg<span class="token punctuation">,</span> txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> hasNumber <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasNumber</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-一道经典的柯里化面试题" tabindex="-1"><a class="header-anchor" href="#_6-一道经典的柯里化面试题" aria-hidden="true">#</a> 6.一道经典的柯里化面试题</h3><ul><li>实现一个 add 方法，使计算结果能够满足如下预期</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要完成上面的需求，就可以使用柯里化函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第一次执行时，定义一个数组专门用来存储所有的参数</span>
  <span class="token keyword">var</span> _args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 在内部声明一个函数，利用闭包的特性保存 _args 并收集所有的参数值</span>
  <span class="token keyword">var</span> <span class="token function-variable function">_adder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _adder<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 这个是最后输出的时候被调用的，return 后面如果是函数体，</span>
  <span class="token comment">// 为了输出函数体字符串会自动调用 toString 方法</span>
  <span class="token comment">// 利用 toString 隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span>
  _adder<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 这个 return 是第一次调用的时候返回上面的函数体，</span>
  <span class="token comment">// 这样后面所有的括号再执行的时候就是执行 _adder 函数体</span>
  <span class="token keyword">return</span> _adder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-真题详解" tabindex="-1"><a class="header-anchor" href="#_7-真题详解" aria-hidden="true">#</a> 7.真题详解</h3><h4 id="_1-什么是函数柯里化" tabindex="-1"><a class="header-anchor" href="#_1-什么是函数柯里化" aria-hidden="true">#</a> 1）什么是函数柯里化？</h4><blockquote><p>柯里化（currying）又称部分求值。一个柯里化的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值</p><p>举个例子，就是把原本：</p><ol><li>function(arg1,arg2) 变成 function(arg1)(arg2)</li><li>function(arg1,arg2,arg3) 变成 function(arg1)(arg2)(arg3)</li><li>function(arg1,arg2,arg3,arg4) 变成 function(arg1)(arg2)(arg3)(arg4)</li></ol><p>总而言之，就是将：</p><p>function(arg1,arg2,…,argn) 变成 function(arg1)(arg2)…(argn)</p></blockquote><h2 id="二十四-node-事件循环" tabindex="-1"><a class="header-anchor" href="#二十四-node-事件循环" aria-hidden="true">#</a> （二十四）Node 事件循环</h2><h3 id="_1-经典真题-23" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-23" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>请简述一下 Node.js 中的事件循环，和浏览器环境的事件循环有何不同？</li><li>Node.js 与浏览器的事件循环有何区别？</li></ul><h3 id="_2-进程与线程" tabindex="-1"><a class="header-anchor" href="#_2-进程与线程" aria-hidden="true">#</a> 2.进程与线程</h3><ul><li>JavaScript 是一门单线程语言，指的是一个进程里只有一个主线程</li><li>进程是 CPU 资源分配的最小单位</li><li>线程是 CPU 调度的最小单位</li></ul><p><img src="`+P+'" alt=""></p><blockquote><p>进程好比图中的工厂，有单独的专属自己的工厂资源</p><p>线程好比图中的工人，多个工人在一个工厂中协作工作</p><p>工厂与工人是 1:n 的关系，工厂的空间是工人们共享的，多个工厂之间独立存在</p></blockquote><ul><li><mark>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线</mark></li><li><mark>一个进程的内存空间是共享的，每个线程都可用这些共享内存</mark></li><li><mark>多个进程间独立存在</mark></li></ul><h3 id="_3-多进程和多线程" tabindex="-1"><a class="header-anchor" href="#_3-多进程和多线程" aria-hidden="true">#</a> 3.多进程和多线程</h3><h4 id="_1-多进程" tabindex="-1"><a class="header-anchor" href="#_1-多进程" aria-hidden="true">#</a> 1）多进程</h4><ul><li>在同一个时间里，同一个计算机系统中允许两个或两个以上的进程处于运行状态</li></ul><h4 id="_2-多线程" tabindex="-1"><a class="header-anchor" href="#_2-多线程" aria-hidden="true">#</a> 2）多线程</h4><ul><li>程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务</li><li>即：允许单个程序创建多个并行执行的线程来完成各自的任务</li></ul><h4 id="_3-以-chrome-浏览器为例" tabindex="-1"><a class="header-anchor" href="#_3-以-chrome-浏览器为例" aria-hidden="true">#</a> 3）以 Chrome 浏览器为例</h4><ul><li>当打开一个 Tab 页时，其实就是创建了一个进程 <ul><li>一个进程中可以有多个线程</li><li>如：渲染线程、JS 引擎线程、HTTP 请求线程等等</li></ul></li></ul><p><img src="'+H+'" alt=""></p><ul><li>当发起一个请求时，其实就是创建了一个线程 <ul><li>当请求结束后，该线程可能就会被销毁</li></ul></li></ul><h3 id="_4-浏览器内核" tabindex="-1"><a class="header-anchor" href="#_4-浏览器内核" aria-hidden="true">#</a> 4.浏览器内核</h3><ul><li>浏览器内核通过取得页面内容、整理信息（应用 CSS）、计算和组合，最终输出可视化的图像结果 <ul><li>通常也被称为渲染引擎</li></ul></li><li>浏览器内核是 <mark>多线程</mark><ul><li>在内核控制下各线程相互配合以保持同步</li></ul></li><li>一个浏览器通常由以下常驻线程组成 <ul><li>GUI 渲染线程</li><li>JavaScript 引擎线程</li><li>定时触发器线程</li><li>事件触发线程</li><li>异步 HTTP 请求线程</li></ul></li></ul><h4 id="_1-gui-渲染线程" tabindex="-1"><a class="header-anchor" href="#_1-gui-渲染线程" aria-hidden="true">#</a> 1）GUI 渲染线程</h4><ul><li>主要负责页面的渲染，解析 HTML、CSS，构建 DOM 树，布局和绘制等</li><li>当界面需要重绘或者由于某种操作引发回流时，将执行该线程</li><li>该线程与 JS 引擎线程 <mark>互斥</mark><ul><li>当执行 JS 引擎线程时，GUI 渲染会被挂起</li><li>当任务队列空闲时，主线程才会去执行 GUI 渲染</li></ul></li></ul><h4 id="_2-javascript-引擎线程" tabindex="-1"><a class="header-anchor" href="#_2-javascript-引擎线程" aria-hidden="true">#</a> 2）JavaScript 引擎线程</h4><ul><li>主要负责处理 JavaScript 脚本，执行代码</li><li>也负责执行准备好待执行的事件 <ul><li>即定时器计数结束，或者异步请求成功并正确返回时</li><li>将依次进入任务队列，等待 JS 引擎线程的执行</li></ul></li><li>该线程与 GUI 渲染线程 <mark>互斥</mark><ul><li>当 JS 引擎线程执行 JavaScript 脚本时间过长，将导致页面渲染的阻塞</li></ul></li></ul><h4 id="_3-定时触发器线程" tabindex="-1"><a class="header-anchor" href="#_3-定时触发器线程" aria-hidden="true">#</a> 3）定时触发器线程</h4><ul><li>负责执行异步定时器一类的函数的线程 <ul><li>如：setTimeout、setInterval</li></ul></li><li>主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理 <ul><li>当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部</li><li>等待 JS 引擎线程执行</li></ul></li></ul><h4 id="_4-事件触发线程" tabindex="-1"><a class="header-anchor" href="#_4-事件触发线程" aria-hidden="true">#</a> 4）事件触发线程</h4><ul><li>主要负责将准备好的事件交给 JS 引擎线程执行</li><li>如：setTimeout 定时器计数结束，ajax 等异步请求成功并触发回调函数，或者用户触发点击事件时 <ul><li>该线程会将整装待发的事件依次加入到任务队列的队尾</li><li>等待 JS 引擎线程的执行</li></ul></li></ul><h4 id="_5-异步-http-请求线程" tabindex="-1"><a class="header-anchor" href="#_5-异步-http-请求线程" aria-hidden="true">#</a> 5）异步 HTTP 请求线程</h4><ul><li>负责执行异步请求一类的函数的线程 <ul><li>如：Promise、fetch、ajax 等</li></ul></li><li>主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理 <ul><li>当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部</li><li>等待 JS 引擎线程执行</li></ul></li></ul><h3 id="_5-浏览器中的事件循环" tabindex="-1"><a class="header-anchor" href="#_5-浏览器中的事件循环" aria-hidden="true">#</a> 5.浏览器中的事件循环</h3><h4 id="_1-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_1-宏任务和微任务" aria-hidden="true">#</a> 1）宏任务和微任务</h4><ul><li>事件循环中的异步队列有两种 <ul><li>宏任务 macro 队列</li><li>微任务 micro 队列</li></ul></li><li><mark>宏任务队列和微任务队列都只有一个</mark></li><li>常见的宏任务 <ul><li>setTimeout</li><li>setInterval</li><li>requestAnimationFrame</li><li>script 等</li></ul></li><li>常见的微任务 <ul><li>new Promise().then(回调)</li><li>MutationObserver 等</li></ul></li></ul><h4 id="_2-事件循环流程" tabindex="-1"><a class="header-anchor" href="#_2-事件循环流程" aria-hidden="true">#</a> 2）事件循环流程</h4><p><img src="'+D+'" alt=""></p><h5 id="a-一开始执行栈空" tabindex="-1"><a class="header-anchor" href="#a-一开始执行栈空" aria-hidden="true">#</a> a）一开始执行栈空</h5><ul><li>可以把执行栈认为是 <mark>一个存储函数调用的栈结构</mark>，遵循先进后出的原则</li><li>微任务队列空</li><li>宏任务队列里有且只有一个 script 脚本（整体代码）</li></ul><h5 id="b-全局上下文-script-标签-被推入执行栈-同步代码执行" tabindex="-1"><a class="header-anchor" href="#b-全局上下文-script-标签-被推入执行栈-同步代码执行" aria-hidden="true">#</a> b）全局上下文（script 标签）被推入执行栈，同步代码执行</h5><ul><li>在执行的过程中，会判断是同步任务还是异步任务</li><li>通过对一些接口的调用，可以产生新的宏任务与微任务 <ul><li>会分别被推入各自的任务队列里</li></ul></li><li>同步代码执行完了，script 脚本会被移出宏任务队列 <ul><li>这个过程本质上是队列的宏任务的执行和出队的过程</li></ul></li></ul><h5 id="c-处理微任务" tabindex="-1"><a class="header-anchor" href="#c-处理微任务" aria-hidden="true">#</a> c）处理微任务</h5><ul><li>当一个宏任务执行完毕后，会执行所有的微任务</li><li>即：将整个微任务队列清空</li></ul><h5 id="d-执行渲染操作-更新界面" tabindex="-1"><a class="header-anchor" href="#d-执行渲染操作-更新界面" aria-hidden="true">#</a> d）执行渲染操作，更新界面</h5><h5 id="e-检查是否存在-web-worker-任务" tabindex="-1"><a class="header-anchor" href="#e-检查是否存在-web-worker-任务" aria-hidden="true">#</a> e）检查是否存在 Web worker 任务</h5><ul><li>如果有，则对其进行处理</li></ul><h5 id="f-上述过程循环往复-直到两个队列都清空" tabindex="-1"><a class="header-anchor" href="#f-上述过程循环往复-直到两个队列都清空" aria-hidden="true">#</a> f）上述过程循环往复，直到两个队列都清空</h5><h5 id="g-宏任务和微任务的执行流程" tabindex="-1"><a class="header-anchor" href="#g-宏任务和微任务的执行流程" aria-hidden="true">#</a> g）宏任务和微任务的执行流程</h5><ul><li>当某个宏任务执行完后，会查看是否有微任务队列 <ul><li>如果有，先执行微任务队列中的所有任务</li><li>如果没有，会读取宏任务队列中排在最前的任务</li></ul></li><li>执行宏任务的过程中，遇到微任务，依次加入微任务队列</li><li>栈空后，再次读取微任务队列里的任务，依次类推</li></ul><p><img src="'+z+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;script end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
script start
script end
promise1
promise2
setTimeout
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>首先执行同步的任务，输出 script start 以及 script end</p><p>接下来是处理异步任务，异步任务分为宏任务队列和微任务队列，在执行宏任务队列中的每个宏任务之前先把微任务清空一遍</p><p>由于 promise 是微任务，所以会先被执行，而 setTimeout 由于是一个宏任务，会在微任务队列被清空后再执行</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
Promise1
setTimeout1
Promise2
setTimeout2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一开始执行栈的同步任务（宏任务），执行完毕会查看是否有微任务队列</p><p>然后执行微任务队列中的所有任务输出 Promise1，同时会生成一个宏任务 setTimeout2</p><p>然后去查看宏任务队列，宏任务 setTimeout1 在 setTimeout2 之前，先执行宏任务 setTimeout1，输出 setTimeout1</p><p>在执行宏任务 setTimeout1 时会生成微任务 Promise2，放入微任务队列中</p><p>接着先去清空微任务队列中的所有任务，输出 Promise2</p><p>清空完微任务队列中的所有任务后，就又会去宏任务队列取一个，这回执行的是 setTimeout2</p></blockquote><h3 id="_6-node-js-中的事件循环" tabindex="-1"><a class="header-anchor" href="#_6-node-js-中的事件循环" aria-hidden="true">#</a> 6.Node.js 中的事件循环</h3><h4 id="_1-node-js-事件循环介绍" tabindex="-1"><a class="header-anchor" href="#_1-node-js-事件循环介绍" aria-hidden="true">#</a> 1）Node.js 事件循环介绍</h4><ul><li>Node.js 采用 V8 作为 JS 的解析引擎，而 I/O 处理方面使用了自己设计的 libuv</li><li>libuv 是一个基于事件驱动的跨平台抽象层 <ul><li>封装了不同操作系统一些底层特性</li><li>对外提供统一的 API</li><li>事件循环机制也是它里面的实现</li></ul></li></ul><p><img src="`+L+'" alt=""></p><h4 id="_2-node-js-的运行机制" tabindex="-1"><a class="header-anchor" href="#_2-node-js-的运行机制" aria-hidden="true">#</a> 2）Node.js 的运行机制</h4><ul><li>V8 引擎解析 JavaScript 脚本</li><li>解析后的代码，调用 Node API</li><li>libuv 库负责 Node API 的执行 <ul><li>将不同的任务分配给不同的线程，形成一个事件循环</li><li>以异步的方式将任务的执行结果返回给 V8 引擎</li></ul></li><li>V8 引擎再将结果返回给用户</li><li>整个架构图</li></ul><p><img src="'+B+'" alt=""></p><h4 id="_3-事件循环的-6-个阶段" tabindex="-1"><a class="header-anchor" href="#_3-事件循环的-6-个阶段" aria-hidden="true">#</a> 3）事件循环的 6 个阶段</h4><ul><li>libuv 引擎中的事件循环分为 6 个阶段</li><li>按照顺序反复运行</li><li>每当进入某一个阶段的时候，都会从对应的回调队列中取出函数执行</li><li>当队列为空或者执行的回调函数数量到达系统设定的阈值时，就会进入下一阶段</li></ul><p><img src="'+W+`" alt=""></p><ul><li>外部输入数据 =&gt; 轮询阶段（poll） =&gt; 检查阶段（check） =&gt; 关闭事件回调阶段（close callback） =&gt; 定时器检测阶段（timer） =&gt; I/O 事件回调阶段（I/O callbacks） =&gt; 闲置阶段（idle、prepare） =&gt; 轮询阶段（按照该顺序反复运行）...</li></ul><table><thead><tr><th>阶段</th><th>工作</th></tr></thead><tbody><tr><td>timers 阶段</td><td>执行 timer（setTimeout、setInterval）的回调</td></tr><tr><td>I/O callbacks 阶段</td><td>处理一些上一轮循环中的少数未执行的 I/O 回调</td></tr><tr><td>idle、prepare 阶段</td><td>仅 Node.js 内部使用</td></tr><tr><td>poll 阶段</td><td>获取新的 I/O 事件, 适当的条件下 Node.js 将阻塞在这里</td></tr><tr><td>check 阶段</td><td>执行 setImmediate() 的回调</td></tr><tr><td>close callbacks 阶段</td><td>执行 socket 的 close 事件回调</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>上面六个阶段都不包括 process.nextTick()</p></div><ul><li>绝大部分异步任务都是在 timers、poll、check 这 3 个阶段处理</li></ul><h4 id="_4-timer-阶段" tabindex="-1"><a class="header-anchor" href="#_4-timer-阶段" aria-hidden="true">#</a> 4）timer 阶段</h4><ul><li>会执行 setTimeout 和 setInterval 回调</li><li>由 poll 阶段控制</li><li>==在 Node.js 中定时器指定的时间也不是准确时间，只能是尽快执行 <ul><li>取不到 0ms，最少是 1ms</li></ul></li></ul><h4 id="_5-poll-阶段" tabindex="-1"><a class="header-anchor" href="#_5-poll-阶段" aria-hidden="true">#</a> 5）poll 阶段</h4><ul><li>这一阶段中，系统会做两件事情 <ul><li>回到 timer 阶段执行回调</li><li>执行 I/O 回调</li></ul></li><li>在进入该阶段时如果没有设定 timer <ul><li>如果 poll 队列不为空 <ul><li>会遍历回调队列并同步执行</li><li>直到队列为空或者达到系统限制</li></ul></li><li>如果 poll 队列为空 <ul><li>如果有 setImmediate 回调需要执行 <ul><li>poll 阶段会停止并且进入到 check 阶段执行回调</li></ul></li><li>如果没有 setImmediate 回调需要执行 <ul><li>会等待回调被加入到队列中并立即执行回调</li><li>会有个超时时间设置，防止一直等待下去</li></ul></li></ul></li></ul></li><li>如果设定了 timer 且 poll 队列为空 <ul><li>会判断是否有 timer 超时</li><li>如果有的话会回到 timer 阶段执行回调</li></ul></li><li>如果 poll 被堵塞，即使 timer 已经到时间了也只能等着 <ul><li>所以定时器指定的时间并不是准确的时间</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout&quot;</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;readFile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 强行延时 500 毫秒</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-check-阶段" tabindex="-1"><a class="header-anchor" href="#_6-check-阶段" aria-hidden="true">#</a> 6）check 阶段</h4><ul><li>setImmediate() 的回调会被加入 check 队列中</li><li>check 阶段的执行顺序在 poll 阶段之后</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timer1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timer2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
start
end
promise3
timer1
promise1
timer2
promise2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一开始执行同步任务，依次打印出 start end，并将 2 个 timer 依次放入 timer 队列</p><p>之后会立即执行微任务队列，所以打印出 promise3</p><p>然后进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，发现有一个 promise.then 回调</p><p>将其加入到微任务队列并且立即执行，之后同样的步骤执行 timer2，打印 timer2 以及 promise2</p></blockquote><h4 id="_7-settimeout-和-setimmediate-区别" tabindex="-1"><a class="header-anchor" href="#_7-settimeout-和-setimmediate-区别" aria-hidden="true">#</a> 7）setTimeout 和 setImmediate 区别</h4><ul><li>区别主要在于 <mark>调用时机不同</mark></li><li>setImmediate 设计在 poll 阶段 <mark>完成时</mark> 执行，即 check 阶段</li><li>setTimeout 设计在 poll 阶段为 <mark>空闲时，且设定时间到达后</mark> 执行，但在 timer 阶段执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">immediate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;immediate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于以上代码来说，setTimeout 可能执行在前，也可能执行在后</p><p>首先 setTimeout(fn, 0) === setTimeout(fn, 1)，这是由源码决定的</p><p>进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 setTimeout 回调</p><p>如果准备时间花费小于 1ms，那么就是 setImmediate 回调先执行</p></blockquote><ul><li><mark>二者在异步 I/O callback 内部调用时，总是先执行 setImmediate，再执行 setTimeout</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;immediate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// immediate</span>
<span class="token comment">// timeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>setImmediate 永远先执行</p><p>因为两个代码写在 I/O 回调中，I/O 回调是在 poll 阶段执行</p><p>当回调执行完毕后队列为空，发现存在 setImmediate 回调，直接跳转到 check 阶段执行回调</p></blockquote><h4 id="_8-process-nexttick" tabindex="-1"><a class="header-anchor" href="#_8-process-nexttick" aria-hidden="true">#</a> 8）process.nextTick</h4><ul><li>这个函数其实是独立于事件循环之外的，有一个自己的队列</li><li>当每个阶段完成后，如果存在 nextTick 队列 <ul><li>会清空队列中的所有回调函数</li><li>且优先于其他 micro task 执行</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timer1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
nextTick
nextTick
nextTick
nextTick
timer1
promise1
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-promise-then" tabindex="-1"><a class="header-anchor" href="#_9-promise-then" aria-hidden="true">#</a> 9）Promise.then</h4><ul><li>独立于事件循环之外，有一个自己的队列</li><li>优先级比 process.nextTick 要低</li><li>所以当微任务中同时存在 process.nextTick 和 Promise.then 时，会优先执行 nextTick</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timer1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nextTick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;timer2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
timer1
nextTick
promise1
timer2
promise2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-node-js-与浏览器的事件队列的差异" tabindex="-1"><a class="header-anchor" href="#_7-node-js-与浏览器的事件队列的差异" aria-hidden="true">#</a> 7.Node.js 与浏览器的事件队列的差异</h3><ul><li>浏览器环境下只有两个队列，宏任务队列 + 微任务队列 <ul><li>微任务的任务队列是 <mark>每个宏任务执行完之后</mark> 执行</li></ul></li><li>在 Node.js 中， <mark>每个任务队列的每个任务执行完毕之后</mark> ，就会清空这个微任务队列</li></ul><p><img src="`+A+`" alt=""></p><h3 id="_8-真题解答-4" tabindex="-1"><a class="header-anchor" href="#_8-真题解答-4" aria-hidden="true">#</a> 8.真题解答</h3><h4 id="_1-请简述一下-node-js-中的事件循环-和浏览器环境的事件循环有何不同" tabindex="-1"><a class="header-anchor" href="#_1-请简述一下-node-js-中的事件循环-和浏览器环境的事件循环有何不同" aria-hidden="true">#</a> 1）请简述一下 Node.js 中的事件循环，和浏览器环境的事件循环有何不同？</h4><blockquote><p>Node.JS 的事件循环分为 6 个阶段：</p><ol><li>timers 阶段：这个阶段执行 timer（ setTimeout、setInterval ）的回调</li><li>I/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调</li><li>idle、prepare 阶段：仅 Node.js 内部使用</li><li>poll 阶段：获取新的 I/O 事件, 适当的条件下 Node.js 将阻塞在这里</li><li>check 阶段：执行 setImmediate( ) 的回调</li><li>close callbacks 阶段：执行 socket 的 close 事件回调</li></ol><br><p>事件循环的执行顺序为：</p><p>外部输入数据 –-&gt; 轮询阶段（ poll ）-–&gt; 检查阶段（ check ）-–&gt; 关闭事件回调阶段（ close callback ）–-&gt; 定时器检测阶段（ timer ）–-&gt; I/O 事件回调阶段（ I/O callbacks ）-–&gt;闲置阶段（ idle、prepare ）–-&gt;轮询阶段（按照该顺序反复运行）...</p><br><p>浏览器和 Node.js 环境下，微任务任务队列的执行时机不同</p><ol><li>在 Node.js 中，每个任务队列的每个任务执行完毕之后，就会清空这个微任务队列</li><li>浏览器环境下，就两个队列，一个宏任务队列，一个微任务队列。微任务的任务队列是每个宏任务执行完之后执行</li></ol></blockquote><h2 id="二十五-eval" tabindex="-1"><a class="header-anchor" href="#二十五-eval" aria-hidden="true">#</a> （二十五）eval</h2><h3 id="_1-经典真题-24" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-24" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>JavaScript 中的 eval 方法是什么？一般什么场景下使用？</li></ul><h3 id="_2-eval-的基本用法" tabindex="-1"><a class="header-anchor" href="#_2-eval-的基本用法" aria-hidden="true">#</a> 2.eval 的基本用法</h3><ul><li>eval() 函数接收一个字符串作为参数</li><li>该字符串可以是 JavaScript 表达式、语句或一系列语句</li><li>表达式可以包含变量与已存在对象的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(&quot;Hello!&quot;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span>

<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  var a = 1;
  var b = 2;
  if(a &gt; b) {
    console.log(&#39;a &gt; b&#39;);
  } else {
    console.log(&#39;a &lt; b&#39;);
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a &lt; b</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;2 + 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4（ number 类型 ）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [String: &#39;Hello&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;2 + 2&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;2 + 2&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;2 + 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>eval() 会将传入的字符串作为 JavaScript 执行</li><li>如果 eval() 的参数不是字符串，会将参数原封不动地返回</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果传入的字符串不是 JavaScript 代码，也会将此字符串原封不动的返回</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Hello <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-eval-作用域" tabindex="-1"><a class="header-anchor" href="#_3-eval-作用域" aria-hidden="true">#</a> 3.eval 作用域</h3><ul><li>eval 里面的代码在 <mark>当前词法环境</mark> 中执行</li><li>可以使用外部变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;console.log(a)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;x = 10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, value modified</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在严格模式下，eval 有自己的词法环境</li><li>在 eval 内部声明的函数和变量在外部不可见</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;let x = 5; function f() {}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined (no such variable)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-永远不要使用-eval" tabindex="-1"><a class="header-anchor" href="#_4-永远不要使用-eval" aria-hidden="true">#</a> 4.永远不要使用 eval</h3><blockquote><p>在现代编程中，eval 的使用非常谨慎。人们常说“eval is evil”</p><p>原因很简单：很久很久以前，JavaScript 是一种弱得多的语言，很多事情只能用 eval 来完成，但那段时间已经过去十年了</p><p>现在，几乎没有理由使用 eval</p><p>如果有人使用了它，那么一个更好的选择是用现代语言结构或 JavaScript 模块替换</p></blockquote><ul><li>eval 是一个危险的函数，使用与调用者相同的权限执行代码 <ul><li>如果用 eval 运行的字符串代码被恶意方修改，最终可能会在网页/扩展程序的权限下，在用户计算机上运行恶意代码 —— 不安全</li></ul></li><li>eval 通常比其他替代方法更慢，因为必须调用 JS 解释器 <ul><li>而许多其他结构则可被现代 JS 引擎进行优化</li><li>使用 eval 往往比普通 JavaScript 代码慢几个数量级 —— 性能不好</li></ul></li><li>产生混乱的代码逻辑</li></ul><h3 id="_5-真题解答-3" tabindex="-1"><a class="header-anchor" href="#_5-真题解答-3" aria-hidden="true">#</a> 5.真题解答</h3><h4 id="_1-javascript-中的-eval-方法是什么-一般什么场景下使用" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中的-eval-方法是什么-一般什么场景下使用" aria-hidden="true">#</a> 1）JavaScript 中的 eval 方法是什么？一般什么场景下使用？</h4><blockquote><p>eval 是 JavaScript 中的一个全局函数，它将指定的字符串计算为 JavaScript 代码并执行它</p><p>在现代 JavaScript 编程中，我们应该尽量避免使用 eval，之前所有使用 eval 的地方都有更好的方式来进行代替，所以在现代 JavaScript 编程中，eval 没有什么使用场景存在，也就是说，并不存在某些场景必须要使用 eval 才能实现</p></blockquote><h2 id="二十六-尺寸和位置" tabindex="-1"><a class="header-anchor" href="#二十六-尺寸和位置" aria-hidden="true">#</a> （二十六）尺寸和位置</h2><ul><li>总结使用 JavaScript 操作 DOM 时，尺寸和宽高相关的属性</li><li>DOM 对象相关尺寸和位置属性 <ul><li>只读属性 <ul><li>clientWidth 和 clientHeight 属性</li><li>offsetWidth 和 offsetHeight 属性</li><li>clientTop 和 clientLeft 属性</li><li>offsetLeft 和 offsetTop 属性</li><li>scrollHeight 和 scrollWidth 属性</li></ul></li><li>可读可写属性 <ul><li>scrollTop 和 scrollLeft 属性</li><li>domObj.style.xxx 属性</li></ul></li></ul></li><li>event 事件对象相关尺寸和位置属性 <ul><li>clientX 和 clientY 属性</li><li>screenX 和 screenY 属性</li><li>offsetX 和 offsetY 属性</li><li>pageX 和 pageY 属性</li></ul></li></ul><h3 id="_1-dom-对象相关尺寸和位置属性-——-只读属性" tabindex="-1"><a class="header-anchor" href="#_1-dom-对象相关尺寸和位置属性-——-只读属性" aria-hidden="true">#</a> 1.DOM 对象相关尺寸和位置属性 —— 只读属性</h3><ul><li>指的是 DOM 节点的固有属性</li><li>该属性只能通过 JavaScript 去获取而不能设置</li><li>且获取的值是只有数字并不带单位的（px、em 等）</li><li>常见的只读属性 <ul><li>clientWidth 和 clientHeight 属性</li><li>offsetWidth 和 offsetHeight 属性</li><li>clientTop 和 clientLeft 属性</li><li>offsetLeft 和 offsetTop 属性</li><li>scrollHeight 和 scrollWidth 属性</li></ul></li></ul><h3 id="_2-只读属性-clientwidth-和-clientheight-属性" tabindex="-1"><a class="header-anchor" href="#_2-只读属性-clientwidth-和-clientheight-属性" aria-hidden="true">#</a> 2.只读属性：clientWidth 和 clientHeight 属性</h3><ul><li>指的是元素的可视部分宽度和高度</li><li>即：padding + content</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clientWidth:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 220</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clientHeight:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 220</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-只读属性-offsetwidth-和-offsetheight-属性" tabindex="-1"><a class="header-anchor" href="#_3-只读属性-offsetwidth-和-offsetheight-属性" aria-hidden="true">#</a> 3.只读属性：offsetWidth 和 offsetHeight 属性</h3><ul><li>指的是元素的 border + padding + content 的宽度和高度</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;offsetWidth:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;offsetWidth:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-只读属性-clienttop-和-clientleft-属性" tabindex="-1"><a class="header-anchor" href="#_4-只读属性-clienttop-和-clientleft-属性" aria-hidden="true">#</a> 4.只读属性：clientTop 和 clientLeft 属性</h3><ul><li>用于读取元素的 border 的宽度和高度</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clientTop:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientTop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;clientLeft:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>clientLeft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-只读属性-offsetleft-和-offsettop-属性" tabindex="-1"><a class="header-anchor" href="#_5-只读属性-offsetleft-和-offsettop-属性" aria-hidden="true">#</a> 5.只读属性：offsetLeft 和 offsetTop 属性</h3><h4 id="_1-offsetparent-属性" tabindex="-1"><a class="header-anchor" href="#_1-offsetparent-属性" aria-hidden="true">#</a> 1）offsetParent 属性</h4><ul><li>获取当前元素的 <mark>离自己最近的并且定了位的</mark> 祖先元素 <ul><li>该祖先元素就是当前元素的 offsetParent</li></ul></li><li>如果从该元素向上寻找，找不到这样一个祖先元素 <ul><li>那么当前元素的 offsetParent 就是 body 元素</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>offsetParent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// body</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-距离属性" tabindex="-1"><a class="header-anchor" href="#_2-距离属性" aria-hidden="true">#</a> 2）距离属性</h4><ul><li>offsetLeft 和 offsetTop 指的是当前元素相对于其 offsetParent 左边距离和上边距离</li><li>即：当前元素的 border 到包含它的 offsetParent 的 border 的距离</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+F+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetParent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// container 盒子 dom 对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不对 item 子元素定位，而是使用 margin 的方式来设置子盒子的位置</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetParent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// container 盒子 dom 对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为设置的 margin 值为 50，但是其定了位的父元素还设置了 10 像素的 padding，所以加起来就是 60</p></blockquote><h3 id="_6-只读属性-scrollheight-和-scrollwidth-属性" tabindex="-1"><a class="header-anchor" href="#_6-只读属性-scrollheight-和-scrollwidth-属性" aria-hidden="true">#</a> 6.只读属性：scrollHeight 和 scrollWidth 属性</h3><ul><li>指的是当元素内部的内容超出其宽度和高度的时候，元素内部内容的实际宽度和高度</li><li>如果当前元素的内容没有超过其高度或者宽度，那么返回的就是元素的可视部分宽度和高度</li><li>即：和 clientWidth 和 clientHeight 属性值相同</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nulla repellat porro
  atque culpa rem sunt sed! Voluptates vel incidunt accusamus reiciendis aut,
  adipisci ut. Hic, impedit officia.Quis, animi beatae. Facere dolorum quasi
  laborum, rem facilis illum necessitatibus sint doloribus beatae exercitationem
  sapiente! Quod vel cupiditate quam libero, delectus natus.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollWidth:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scrollWidth: 220</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollHeight&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scrollHeight 372</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果 container 盒子不具备滚动的条件</li><li>返回的值和 clientWidth 和 clientHeight 属性值相同</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollWidth:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scrollWidth: 220</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollHeight&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// scrollHeight 220</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-dom-对象相关尺寸和位置属性-——-可读可写属性" tabindex="-1"><a class="header-anchor" href="#_7-dom-对象相关尺寸和位置属性-——-可读可写属性" aria-hidden="true">#</a> 7.DOM 对象相关尺寸和位置属性 —— 可读可写属性</h3><ul><li>指的是不仅能通过 JavaScript 获取的值，还能够通过 JavaScript 为该属性赋值</li></ul><h3 id="_8-可读可写属性-scrolltop-和-scrollleft-属性" tabindex="-1"><a class="header-anchor" href="#_8-可读可写属性-scrolltop-和-scrollleft-属性" aria-hidden="true">#</a> 8.可读可写属性：scrollTop 和 scrollLeft 属性</h3><ul><li>指的是当元素其中的内容超出其宽高的时候，元素被卷起的高度和宽度</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nulla repellat porro
  atque culpa rem sunt sed! Voluptates vel incidunt accusamus reiciendis aut,
  adipisci ut. Hic, impedit officia.Quis, animi beatae. Facere dolorum quasi
  laborum, rem facilis illum necessitatibus sint doloribus beatae exercitationem
  sapiente! Quod vel cupiditate quam libero, delectus natus.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollTop:&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;scrollLeft&quot;</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+V+`" alt=""></p><ul><li>可以通过赋值来让内容自动滚动到某个位置</li><li>如：网站右下角回到顶部的按钮，背后对应的 JavaScript 代码就是通过该属性实现</li></ul><h3 id="_9-可读可写属性-domobj-style-xxx-属性" tabindex="-1"><a class="header-anchor" href="#_9-可读可写属性-domobj-style-xxx-属性" aria-hidden="true">#</a> 9.可读可写属性：domObj.style.xxx 属性</h3><ul><li>DOM 元素的 style 属性返回的是一个对象 <ul><li>这个对象中的任意一个属性都是可读写的</li><li>如：domObj.style.top、domObj.style.wdith 等</li></ul></li><li>读取值时，返回的值常常是带有单位的（如：px）</li><li><mark>只能够获取到该元素的行内样式，而并不能获取到该元素最终计算好的样式</mark></li><li>如果想要获取计算好的样式，需要使用 <code>obj.currentstyle</code>（IE）和 <code>getComputedStyle</code>（IE 之外的浏览器）</li><li>JavaScript 控制 DOM 元素运动的原理 <ul><li>通过不断修改这些属性的值而改变其位置</li><li>==给这些属性赋值的时候需要带单位的要带上单位，否则不生效</li></ul></li></ul><h3 id="_10-event-事件对象相关尺寸和位置属性" tabindex="-1"><a class="header-anchor" href="#_10-event-事件对象相关尺寸和位置属性" aria-hidden="true">#</a> 10.event 事件对象相关尺寸和位置属性</h3><ul><li>操作元素的运动时，通常会涉及到事件的 event 对象</li><li>event 对象存在很多位置属性</li><li>由于浏览器兼容性问题会导致这些属性间相互混淆</li></ul><h3 id="_11-clientx-和-clienty-属性" tabindex="-1"><a class="header-anchor" href="#_11-clientx-和-clienty-属性" aria-hidden="true">#</a> 11.clientX 和 clientY 属性</h3><ul><li>事件发生时鼠标点击位置相对于浏览器（可视区）的坐标 <ul><li>浏览器左上角的坐标（0, 0）</li></ul></li><li>该属性以浏览器左上角坐标为原点，计算鼠标点击位置距离其左上角的位置</li><li>浏览器窗口大小的变化，不会影响点击位置的坐标</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> evt <span class="token operator">=</span> ev <span class="token operator">||</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-screenx-和-screeny-属性" tabindex="-1"><a class="header-anchor" href="#_12-screenx-和-screeny-属性" aria-hidden="true">#</a> 12.screenX 和 screenY 属性</h3><ul><li>事件发生时鼠标相对于屏幕的坐标</li><li>以设备屏幕的左上角为原点，事件发生时鼠标点击的地方即为该点的 screenX 和 screenY 值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> evt <span class="token operator">=</span> ev <span class="token operator">||</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>screenX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>screenY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-offsetx-和-offsety-属性" tabindex="-1"><a class="header-anchor" href="#_13-offsetx-和-offsety-属性" aria-hidden="true">#</a> 13.offsetX 和 offsetY 属性</h3><ul><li>事件发生时鼠标点击位置相对于该事件源的位置</li><li>即：点击该 DOM 元素，以该 DOM 元素的左上角为原点来计算鼠标点击位置的坐标</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> evt <span class="token operator">=</span> ev <span class="token operator">||</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>offsetX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-pagex-和-pagey-属性" tabindex="-1"><a class="header-anchor" href="#_14-pagex-和-pagey-属性" aria-hidden="true">#</a> 14.pageX 和 pageY 属性</h3><ul><li>事件发生时鼠标点击位置相对于页面的位置</li><li>通常浏览器窗口没有出现滚动条时，该属性和 clientX 及 clientY 是等价的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> evt <span class="token operator">=</span> ev <span class="token operator">||</span> event<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>pageX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当浏览器出现滚动条时，pageX 通常会大于 clientX</li><li>因为页面还存在被卷起来的部分的宽度和高度</li></ul><p><img src="`+U+'" alt=""></p><h2 id="二十七-更多知识-es6" tabindex="-1"><a class="header-anchor" href="#二十七-更多知识-es6" aria-hidden="true">#</a> （二十七）更多知识（ES6+）</h2><ul><li>面试有较低的机率被问到</li><li>实际编码中用得不是太多</li></ul><h3 id="_1-符号" tabindex="-1"><a class="header-anchor" href="#_1-符号" aria-hidden="true">#</a> 1.符号</h3><ul><li>消除魔法字符</li><li>避免一个复杂对象中含有多个属性时，某个属性名覆盖掉、模拟类的私有方法</li></ul><h3 id="_2-迭代器和生成器" tabindex="-1"><a class="header-anchor" href="#_2-迭代器和生成器" aria-hidden="true">#</a> 2.迭代器和生成器</h3><ul><li>实现异步的一种方式</li><li>React 中大量使用到了生成器，Koa 第一代也是大量用到了生成器</li></ul><h3 id="_3-代理与反射" tabindex="-1"><a class="header-anchor" href="#_3-代理与反射" aria-hidden="true">#</a> 3.代理与反射</h3><ul><li>属于元编程的知识，写框架的时候会用到</li></ul><h3 id="_4-增强的数组功能" tabindex="-1"><a class="header-anchor" href="#_4-增强的数组功能" aria-hidden="true">#</a> 4.增强的数组功能</h3><ul><li>JavaScript 类型化数组是一种类似数组的对象</li><li>提供了一种用于访问原始二进制数据的机制</li><li>JavaScript 引擎会做一些内部优化，以便快速操作数组</li></ul>',422);function cn(ln,un){const a=o("ExternalLinkIcon");return c(),l("div",null,[Y,n("blockquote",null,[n("p",null,[s("ES6 标准中对 let/const 声明中的解释 "),n("a",R,[s("第 13 章"),t(a)]),s("，有如下一段文字：")]),X,$,Q,Z,K,nn,sn]),an,n("blockquote",null,[tn,n("p",null,[s("MDN："),n("a",pn,[s("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode"),t(a)])]),n("p",null,[s("《JavaScript 严格模式详解 By 阮一峰》："),n("a",en,[s("http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html"),t(a)])])]),on])}const dn=e(G,[["render",cn],["__file","05.html.vue"]]);export{dn as default};
