import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-1ca76096.js";const t="/assets/原型和原型链-e799bc30.png",o={},l=e(`<h2 id="一-基本使用" tabindex="-1"><a class="header-anchor" href="#一-基本使用" aria-hidden="true">#</a> （一）基本使用</h2><h3 id="_1-vue-中使用组件的三大步骤" tabindex="-1"><a class="header-anchor" href="#_1-vue-中使用组件的三大步骤" aria-hidden="true">#</a> 1.Vue 中使用组件的三大步骤</h3><ul><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件（写组件标签）</li></ul><h3 id="_2-如何定义一个组件" tabindex="-1"><a class="header-anchor" href="#_2-如何定义一个组件" aria-hidden="true">#</a> 2.如何定义一个组件</h3><h4 id="_1-创建" tabindex="-1"><a class="header-anchor" href="#_1-创建" aria-hidden="true">#</a> 1）创建</h4><ul><li>使用 <code>Vue.extend(options)</code> 创建</li><li>其中 options 和 <code>new Vue(options)</code> 时传入的那个 options 几乎一样</li><li>使用 template 可以配置组件结构</li></ul><h4 id="_2-区别" tabindex="-1"><a class="header-anchor" href="#_2-区别" aria-hidden="true">#</a> 2）区别</h4><ul><li>el 不要写 <ul><li>最终所有的组件都要经过一个 vm 的管理，由 vm 中的 el 决定服务哪个容器</li></ul></li><li>data 必须写成函数 <ul><li>避免组件被复用时，数据存在引用关系</li></ul></li></ul><h3 id="_3-如何注册组件" tabindex="-1"><a class="header-anchor" href="#_3-如何注册组件" aria-hidden="true">#</a> 3.如何注册组件</h3><ul><li>局部注册：<code>new Vue({})</code> 时传入 components 配置项</li><li>全局注册：<code>Vue.component(&#39;组件名&#39;, 组件)</code></li></ul><h3 id="_4-编写组件标签" tabindex="-1"><a class="header-anchor" href="#_4-编写组件标签" aria-hidden="true">#</a> 4.编写组件标签</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二-几个注意点" tabindex="-1"><a class="header-anchor" href="#二-几个注意点" aria-hidden="true">#</a> （二）几个注意点</h2><h3 id="_1-关于组件名" tabindex="-1"><a class="header-anchor" href="#_1-关于组件名" aria-hidden="true">#</a> 1.关于组件名</h3><h4 id="_1-一个单词组成" tabindex="-1"><a class="header-anchor" href="#_1-一个单词组成" aria-hidden="true">#</a> 1）一个单词组成</h4><ul><li>写法一：首字母小写 <ul><li>school</li></ul></li><li>写法二：首字母大写 <ul><li>School</li></ul></li></ul><h4 id="_2-多个单词组成" tabindex="-1"><a class="header-anchor" href="#_2-多个单词组成" aria-hidden="true">#</a> 2）多个单词组成</h4><ul><li>写法一：kebab-case 命名 <ul><li>my-school</li></ul></li><li>写法二：CamelCase 命名 <ul><li>MySchool【需要 Vue 脚手架支持】</li></ul></li></ul><h4 id="_3-备注" tabindex="-1"><a class="header-anchor" href="#_3-备注" aria-hidden="true">#</a> 3）备注</h4><ul><li>组件名尽可能回避 HTML 中已有的元素名称 <ul><li>例如：h2、H2 都不行</li></ul></li><li>可以使用 name 配置项指定组件在开发者工具中呈现的名字</li></ul><h3 id="_2-关于组件标签" tabindex="-1"><a class="header-anchor" href="#_2-关于组件标签" aria-hidden="true">#</a> 2.关于组件标签</h3><ul><li>写法一：<code>&lt;school&gt;&lt;/school&gt;</code></li><li>写法二：<code>&lt;school/&gt;</code></li><li>不使用脚手架时，<code>&lt;school/&gt;</code> 会导致后续组件不能渲染，即只渲染一次</li></ul><h3 id="_3-一个简写方式" tabindex="-1"><a class="header-anchor" href="#_3-一个简写方式" aria-hidden="true">#</a> 3.一个简写方式</h3><ul><li><code>const school = Vue.extend(options)</code> 可简写为：<code>const school = options</code></li></ul><h2 id="三-vuecomponent" tabindex="-1"><a class="header-anchor" href="#三-vuecomponent" aria-hidden="true">#</a> （三）VueComponent</h2><ul><li>school 组件本质是一个 VueComponent 的构造函数，且不是程序员定义的，是 <code>Vue.extend</code> 生成的</li><li>只需要写 <code>&lt;school/&gt;</code> 或 <code>&lt;school&gt;&lt;/school&gt;</code> ，Vue 解析时会创建 school 组件的实例对象 <ul><li>即：Vue 执行了 <code>new VueComponent(options)</code></li></ul></li><li>关于 this 指向： <ul><li>组件配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数 <ul><li>this 都是 <strong>VueComponent 实例对象</strong></li></ul></li><li><code>new Vue(options)</code> 配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数 <ul><li>this 都是 <strong>Vue 实例对象</strong></li></ul></li></ul></li><li>VueComponent 的实例对象，简称 vc（也可称为组件实例对象）</li><li>Vue 的实例对象，简称 vm</li></ul><div class="hint-container danger"><p class="hint-container-title">特别注意</p><p>每次调用 <code>Vue.extend</code> 返回的都是一个全新的 VueComponent 实例对象</p></div><h2 id="四-一个重要的内置关系" tabindex="-1"><a class="header-anchor" href="#四-一个重要的内置关系" aria-hidden="true">#</a> （四）一个重要的内置关系</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">VueComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>作用：让组件实例对象（vc）可以访问到 Vue 原型上的属性、方法</li><li>实例的原型对象（<code>vm.__proto__</code>）永远指向自己缔造者的原型对象（<code>Vue.__proto__</code>）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token parameter">prototype</span>
  <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> <span class="token keyword">null</span>

<span class="token function">Vue的实例对象</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> <span class="token keyword">null</span>

<span class="token class-name">VueComponent</span><span class="token punctuation">.</span><span class="token parameter">prototype</span>
  <span class="token operator">=&gt;</span> VueComponent的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> <span class="token keyword">null</span>

<span class="token function">VueComponent的实例对象</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> VueComponent的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span>
  <span class="token operator">=&gt;</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt=""></p>',32),i=[l];function c(p,r){return n(),s("div",null,i)}const h=a(o,[["render",c],["__file","21.html.vue"]]);export{h as default};
