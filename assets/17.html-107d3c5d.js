import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as h}from"./app-76cdb462.js";const d={},l=h('<h2 id="_1-v-bind" tabindex="-1"><a class="header-anchor" href="#_1-v-bind" aria-hidden="true">#</a> 1.v-bind</h2><p>单向绑定解析表达式，可简写为：<code>:xxx</code>。</p><h2 id="_2-v-model" tabindex="-1"><a class="header-anchor" href="#_2-v-model" aria-hidden="true">#</a> 2.v-model</h2><p>双向数据绑定。</p><h2 id="_3-v-for" tabindex="-1"><a class="header-anchor" href="#_3-v-for" aria-hidden="true">#</a> 3.v-for</h2><p>遍历数组/对象/字符串。</p><h2 id="_4-v-on" tabindex="-1"><a class="header-anchor" href="#_4-v-on" aria-hidden="true">#</a> 4.v-on</h2><p>绑定事件监听，可简写为：<code>@xxx</code>。</p><h2 id="_5-v-if" tabindex="-1"><a class="header-anchor" href="#_5-v-if" aria-hidden="true">#</a> 5.v-if</h2><p>条件渲染（动态控制节点是否存在）。</p><h2 id="_6-v-else" tabindex="-1"><a class="header-anchor" href="#_6-v-else" aria-hidden="true">#</a> 6.v-else</h2><p>条件渲染（动态控制节点是否存在）。</p><h2 id="_7-v-show" tabindex="-1"><a class="header-anchor" href="#_7-v-show" aria-hidden="true">#</a> 7.v-show</h2><p>条件渲染（动态控制节点是否展示）。</p><h2 id="_8-v-text" tabindex="-1"><a class="header-anchor" href="#_8-v-text" aria-hidden="true">#</a> 8.v-text</h2><ul><li><p>作用：向其所在的节点中渲染文本内容。</p></li><li><p>与插值语法的区别：v-text 会替换掉节点中的内容，<code>{{xxx}}</code>则不会。</p></li></ul><h2 id="_9-v-html" tabindex="-1"><a class="header-anchor" href="#_9-v-html" aria-hidden="true">#</a> 9.v-html</h2><ul><li><p>作用：向指定节点中渲染包含 html 结构的内容。</p></li><li><p>与插值语法的区别：</p><ul><li><p>v-html 会替换掉节点中所有的内容，<code>{{xxx}}</code>则不会。</p></li><li><p>v-html 可以识别 html 结构。</p></li></ul></li><li><p>严重注意：v-html 有安全性问题。</p><ul><li><p>在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击。</p></li><li><p>一定要在可信的内容上使用 v-html，永远不要用在用户提交的内容上。</p></li></ul></li></ul><h2 id="_10-v-cloak-没有值" tabindex="-1"><a class="header-anchor" href="#_10-v-cloak-没有值" aria-hidden="true">#</a> 10.v-cloak（没有值）</h2><ul><li><p>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性。</p></li><li><p>使用 css 的属性选择器<code>[v-cloak]</code>可以解决网速慢时页面展示出<code>{{xxx}}</code>的问题。</p></li></ul><h2 id="_11-v-once" tabindex="-1"><a class="header-anchor" href="#_11-v-once" aria-hidden="true">#</a> 11.v-once</h2><ul><li><p>v-once 所在节点在初次动态渲染后，就视为静态内容了。</p></li><li><p>以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能。</p></li></ul><h2 id="_12-v-pre" tabindex="-1"><a class="header-anchor" href="#_12-v-pre" aria-hidden="true">#</a> 12.v-pre</h2><ul><li><p>跳过其所在节点的编译过程。</p></li><li><p>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译速度。</p></li></ul>',24),r=[l];function c(o,t){return a(),i("div",null,r)}const v=e(d,[["render",c],["__file","17.html.vue"]]);export{v as default};
