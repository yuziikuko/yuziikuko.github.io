import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as d,a as n,b as a,d as s,e}from"./app-b281a18e.js";const k="/assets/vue从入门到实战01-eb380d1f.png",v="/assets/vue从入门到实战02-e74e54f6.png",m="/assets/vue从入门到实战03-52eb3422.png",h="/assets/vue从入门到实战04-a5cd8a9b.png",b="/assets/vue从入门到实战05-247673d4.png",g="/assets/vue从入门到实战06-622fa5f8.png",_="/assets/vue从入门到实战12-4d31ebc0.png",y="/assets/vue从入门到实战07-0a18bb4f.png",f="/assets/vue从入门到实战08-7ed23ae9.png",x="/assets/vue从入门到实战09-11130610.png",q="/assets/vue从入门到实战10-9a6f88ac.png",w="/assets/vue从入门到实战13-43b544ab.png",j="/assets/vue从入门到实战11-7df7e18e.png",V="/assets/vue从入门到实战14-c026f072.png",C="/assets/vue从入门到实战15-9c10d91b.jpg",T="/assets/vue从入门到实战16-f05e3e06.png",l="/assets/vue从入门到实战17-dcd36114.png",E="/assets/vue从入门到实战18-3b199d5a.png",z="/assets/vue从入门到实战19-309e5c95.png",S="/assets/vue从入门到实战20-fea6982e.png",i="/assets/vue从入门到实战21-e26e9378.png",c="/assets/vue从入门到实战22-454622b1.png",J="/assets/vue从入门到实战23-172dc032.png",M="/assets/vue从入门到实战24-c6affec3.gif",L="/assets/vue从入门到实战25-d59ebd8e.gif",B="/assets/vue从入门到实战26-79969627.png",X="/assets/vue从入门到实战27-35a7dbc1.png",A="/assets/vue从入门到实战28-4f5dfbea.png",N="/assets/vue从入门到实战29-da1adc0f.png",P="/assets/vue从入门到实战30-3b9ecbfb.png",D="/assets/vue从入门到实战31-f31044eb.png",W="/assets/vue从入门到实战32-52dd2385.png",Q="/assets/vue从入门到实战33-253c69cb.png",R="/assets/vue从入门到实战34-0432b6ae.png",O="/assets/vue从入门到实战35-852b3327.png",$="/assets/vue从入门到实战36-329efff3.png",F="/assets/vue从入门到实战37-c2f3d979.png",Y="/assets/vue从入门到实战40-5d80ea0c.png",Z="/assets/vue从入门到实战06-622fa5f8.png",K="/assets/vue从入门到实战39-eb51aa18.png",U="/assets/vue从入门到实战41-6a865e68.png",I="/assets/vue从入门到实战42-e34e6ffd.png",H="/assets/vue从入门到实战43-b02ca563.png",G="/assets/vue从入门到实战42-e34e6ffd.png",nn="/assets/vue从入门到实战45-22b3a403.png",an="/assets/vue从入门到实战46-564ed518.png",sn="/assets/vue从入门到实战47-61dbad50.png",tn="/assets/vue从入门到实战48-d881965b.png",en="/assets/vue从入门到实战49-a5a4a360.png",pn="/assets/vue从入门到实战50-a86db4d2.png",ln="/assets/vue从入门到实战51-e3b0fb84.png",on="/assets/vue从入门到实战52-015707a4.png",cn="/assets/vue从入门到实战53-97974071.png",un="/assets/vue从入门到实战55-246ee0b9.png",rn="/assets/vue从入门到实战56-fe2da3f3.png",dn="/assets/vue从入门到实战57-6275ff9c.png",kn="/assets/vue从入门到实战58-c7687801.png",vn="/assets/vue从入门到实战59-80f51446.png",mn="/assets/vue从入门到实战60-27503995.png",hn="/assets/vue从入门到实战61-d4be58e1.png",bn="/assets/vue从入门到实战62-7b180c39.png",gn="/assets/vue从入门到实战63-e03cab33.png",_n="/assets/vue从入门到实战64-9788c422.png",yn="/assets/vue从入门到实战65-e7f8dfbf.png",fn={},xn=n("h2",{id:"一-前端框架的由来",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-前端框架的由来","aria-hidden":"true"},"#"),a(" （一）前端框架的由来")],-1),qn={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},wn=n("h3",{id:"_1-服务端渲染",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-服务端渲染","aria-hidden":"true"},"#"),a(" 1.服务端渲染")],-1),jn=n("h3",{id:"_2-前后端分离",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-前后端分离","aria-hidden":"true"},"#"),a(" 2.前后端分离")],-1),Vn=n("h3",{id:"_3-单页应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-单页应用","aria-hidden":"true"},"#"),a(" 3.单页应用")],-1),Cn=n("h3",{id:"_4-vue-框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-vue-框架","aria-hidden":"true"},"#"),a(" 4.vue 框架")],-1),Tn=e('<h2 id="二-第一个-vue-应用" tabindex="-1"><a class="header-anchor" href="#二-第一个-vue-应用" aria-hidden="true">#</a> （二）第一个 Vue 应用</h2><h2 id="三-核心概念" tabindex="-1"><a class="header-anchor" href="#三-核心概念" aria-hidden="true">#</a> （三）核心概念</h2><p><img src="'+k+'" alt=""></p><h3 id="_1-注入" tabindex="-1"><a class="header-anchor" href="#_1-注入" aria-hidden="true">#</a> 1.注入</h3><p><img src="'+v+`" alt=""></p><ul><li>vue 会将以下配置注入到 vue 实例： <ul><li>data：和界面相关的数据</li><li>computed：通过已有数据计算得来的数据</li><li>methods：方法</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>模板中可以使用 vue 实例中的成员</p></div><h3 id="_2-虚拟-dom-树" tabindex="-1"><a class="header-anchor" href="#_2-虚拟-dom-树" aria-hidden="true">#</a> 2.虚拟 DOM 树</h3><ul><li>直接操作真实的 DOM 会引发严重的效率问题</li><li>vue 使用虚拟 DOM（vnode）的方式来描述要渲染的内容</li><li>vnode 是一个 <mark>普通的</mark> JS 对象 <ul><li>用于描述界面上应该有什么</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;第一个vue应用：Hello World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 描述：有一个标签名为h1的节点，它有一个子节点，该子节点是一个文本，内容为「第一个vue应用：Hello World」</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>vue 模板并不是真实的 DOM，会被编译为虚拟 DOM</p></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>第一个vue应用：{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>作者：{{author}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面的模板会被编译为类似下面结构的虚拟 DOM</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;第一个vue应用：Hello World&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;作者：袁&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>虚拟 DOM 树会最终生成为真实的 DOM 树</li></ul><p><img src="`+m+'" alt=""></p><ul><li>当数据变化后，将引发重新渲染</li><li>vue 会比较新旧两棵 vnode tree，找出差异</li><li>然后仅把差异部分应用到真实 dom tree 中</li></ul><p><img src="'+h+'" alt=""></p><ul><li>在 vue 中，要得到最终的界面，必须要生成一个 vnode tree</li><li>vue 通过以下逻辑生成 vnode tree</li></ul><p><img src="'+b+'" alt=""></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>虚拟节点树必须是单根的</p></div><h3 id="_3-挂载" tabindex="-1"><a class="header-anchor" href="#_3-挂载" aria-hidden="true">#</a> 3.挂载</h3><ul><li>将生成的真实 DOM 树，放置到某个元素位置，称之为挂载</li><li>挂载的方式 <ul><li>通过 <code>el:&quot;css选择器&quot;</code> 进行配置</li><li>通过 <code>vue实例.$mount(&quot;css选择器&quot;)</code> 进行配置</li></ul></li></ul><h3 id="_4-完整流程" tabindex="-1"><a class="header-anchor" href="#_4-完整流程" aria-hidden="true">#</a> 4.完整流程</h3><p><img src="'+g+'" alt=""></p><h2 id="四-组件" tabindex="-1"><a class="header-anchor" href="#四-组件" aria-hidden="true">#</a> （四）组件</h2><p><img src="'+_+`" alt=""></p><h3 id="_1-意义" tabindex="-1"><a class="header-anchor" href="#_1-意义" aria-hidden="true">#</a> 1.意义</h3><ul><li>降低整体复杂度，提升代码的可读性和可维护性</li><li>提升局部代码的可复用性</li></ul><h3 id="_2-组成" tabindex="-1"><a class="header-anchor" href="#_2-组成" aria-hidden="true">#</a> 2.组成</h3><ul><li>绝大部分情况下，一个组件就是页面中某个区域</li><li>组件包含该区域的 <ul><li>功能（JS 代码）</li><li>内容（模板代码）</li><li>样式（CSS 代码）</li></ul></li><li>要在组件中包含样式，需要构建工具的支撑</li></ul><h3 id="_3-组件开发" tabindex="-1"><a class="header-anchor" href="#_3-组件开发" aria-hidden="true">#</a> 3.组件开发</h3><h4 id="_1-创建组件" tabindex="-1"><a class="header-anchor" href="#_1-创建组件" aria-hidden="true">#</a> 1）创建组件</h4><ul><li>组件是根据一个普通的配置对象创建的</li><li>要开发一个组件，只需要写一个配置对象即可</li><li>该配置对象和 vue 实例的配置是 <mark>几乎一样</mark> 的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//组件配置对象</span>
<span class="token keyword">var</span> myComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">....</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>组件配置对象和 vue 实例有以下几点差异 <ul><li>无 <code>el</code></li><li><code>data</code> 必须是一个函数，该函数返回的对象作为数据</li><li>由于没有 <code>el</code> 配置，组件的虚拟 DOM 树必须定义在 <code>template</code> 或 <code>render</code> 中</li></ul></li></ul><h4 id="_2-注册组件" tabindex="-1"><a class="header-anchor" href="#_2-注册组件" aria-hidden="true">#</a> 2）注册组件</h4><ul><li>全局注册 <ul><li>整个应用中任何地方都可以使用该组件</li></ul></li></ul><p><img src="`+y+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 该代码运行后，即可在模板中使用组件
 * 参数1：组件名称，将来在模板中使用组件时，会使用该名称
 * 参数2：组件配置对象
 */</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;my-comp&quot;</span><span class="token punctuation">,</span> myComp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 或 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-comp</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>在一些工程化的大型项目中，很多组件都不需要全局使用</li><li>比如一个登录组件，只有在登录的相关页面中使用</li><li>如果全局注册，将导致构建工具无法优化打包</li><li>因此，除非组件特别通用，否则不建议使用全局注册</li></ul></div><ul><li>局部注册 <ul><li>哪里要用到组件，就在哪里注册</li><li>在要使用组件的组件或实例中加入配置</li></ul></li></ul><p><img src="`+f+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这是另一个要使用my-comp的组件</span>
<span class="token keyword">var</span> otherComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">// 属性名为组件名称，模板中将使用该名称</span>
    <span class="token comment">// 属性值为组件配置对象</span>
    <span class="token string-property property">&quot;my-comp&quot;</span><span class="token operator">:</span> myComp
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;div&gt;
      &lt;!-- 该组件的其他内容 --&gt;
      &lt;my-comp&gt;&lt;/my-comp&gt;
    &lt;/div&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-应用组件" tabindex="-1"><a class="header-anchor" href="#_3-应用组件" aria-hidden="true">#</a> 3）应用组件</h4><ul><li>在模板中把组件名当作 HTML 元素名即可使用组件</li><li><mark>组件必须有结束</mark><ul><li>组件可以自结束</li><li>也可以用结束标记结束</li><li>错误：<code>&lt;my-comp&gt;</code></li></ul></li><li><mark>组件的命名</mark><ul><li>无论使用哪种方式注册组件，组件的命名需要遵循规范</li><li>组件可以使用 <code>kebab-case 短横线命名法</code></li><li>也可以使用<code>PascalCase 大驼峰命名法</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> otherComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;my-comp&quot;</span><span class="token operator">:</span> myComp<span class="token punctuation">,</span> <span class="token comment">// 方式1</span>
    <span class="token literal-property property">MyComp</span><span class="token operator">:</span> myComp<span class="token punctuation">,</span> <span class="token comment">// 方式2</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>使用 <code>小驼峰命名法 camelCase</code> 也是可以识别的，只不过不符合官方要求的规范</p></div><ul><li>使用 <code>PascalCase</code> 方式命名可以在模板中使用两种组件名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> otherComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">MyComp</span><span class="token operator">:</span> myComp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模板中可用</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-comp</span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 或 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComp</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">使用组件一般方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//组件配置</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> OtherComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    MyComp<span class="token punctuation">,</span> <span class="token comment">// ES6速写属性</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_4-组件树" tabindex="-1"><a class="header-anchor" href="#_4-组件树" aria-hidden="true">#</a> 4.组件树</h3><ul><li>一个组件创建好后，往往会在各种地方使用</li><li>可能多次出现在 vue 实例中，也可能出现在其他组件中</li><li>于是就形成了一个组件树</li></ul><p><img src="`+x+`" alt=""></p><h3 id="_5-向组件传递数据" tabindex="-1"><a class="header-anchor" href="#_5-向组件传递数据" aria-hidden="true">#</a> 5.向组件传递数据</h3><ul><li>大部分组件要完成自身的功能，都需要一些额外的信息</li><li>比如一个头像组件，需要头像的地址，这就需要在使用组件时向组件传递数据</li><li>传递数据的方式有很多种，最常见的一种是使用 <mark>组件属性 component props</mark></li></ul><h4 id="_1-定义组件时-声明接收的属性" tabindex="-1"><a class="header-anchor" href="#_1-定义组件时-声明接收的属性" aria-hidden="true">#</a> 1）定义组件时，声明接收的属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> MyComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;p2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;p3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 和vue实例一样，使用组件时也会创建组件的实例</span>
  <span class="token comment">// 而组件的属性会被提取到组件实例中，因此可以在模板中使用</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;div&gt;
      {{p1}}, {{p2}}, {{p3}}
    &lt;/div&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用组件时-传递相应的属性" tabindex="-1"><a class="header-anchor" href="#_2-使用组件时-传递相应的属性" aria-hidden="true">#</a> 2）使用组件时，传递相应的属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> OtherComp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    MyComp<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;my-comp :p1=&quot;a&quot; :p2=&quot;2&quot; p3=&quot;3&quot;/&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>在组件中，属性是 <mark>只读</mark> 的</li><li>绝不可以更改，这叫做单向数据流</li></ul></div><p><img src="`+q+'" alt=""></p><h2 id="五-搭建工程" tabindex="-1"><a class="header-anchor" href="#五-搭建工程" aria-hidden="true">#</a> （五）搭建工程</h2><p><img src="'+w+'" alt=""></p>',67),En={href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},zn=e(`<h3 id="_1-vue-cli" tabindex="-1"><a class="header-anchor" href="#_1-vue-cli" aria-hidden="true">#</a> 1.vue-cli</h3><ul><li><code>vue-cli</code> 是一个脚手架工具，用于搭建 <code>vue</code> 工程</li><li>内部使用了 <code>webpack</code> ，并预置了诸多插件 <code>plugin</code> 和加载器 <code>loader</code> ，以达到开箱即用的效果</li><li>除了基本的插件和加载器外，<code>vue-cli</code> 还预置了以下工具库 <ul><li>babel</li><li>webpack-dev-server</li><li>eslint</li><li>postcss</li><li>less-loader</li></ul></li></ul><h3 id="_2-sfc" tabindex="-1"><a class="header-anchor" href="#_2-sfc" aria-hidden="true">#</a> 2.SFC</h3><ul><li>单文件组件，Single File Component</li><li>一个文件就包含了一个组件所需的全部代码</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 组件模板代码 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token comment">// 组件配置</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token comment">/* 组件样式 */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-模板预编译" tabindex="-1"><a class="header-anchor" href="#_3-模板预编译" aria-hidden="true">#</a> 3.模板预编译</h3><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1）概念</h4><ul><li>当 <code>vue-cli</code> 进行 <mark>打包</mark> 时，会直接把组件中的模板转换为 <code>render</code> 函数</li></ul><h4 id="_2-好处" tabindex="-1"><a class="header-anchor" href="#_2-好处" aria-hidden="true">#</a> 2）好处</h4><ul><li>运行时不再需要编译模板，提高了运行效率</li><li>打包结果中不再需要 vue 的编译代码，减少了打包体积</li></ul><p><img src="`+j+'" alt=""></p><h2 id="六-计算属性" tabindex="-1"><a class="header-anchor" href="#六-计算属性" aria-hidden="true">#</a> （六）计算属性</h2><p><img src="'+V+`" alt=""></p><h3 id="_1-面试题-计算属性和方法有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-面试题-计算属性和方法有什么区别" aria-hidden="true">#</a> 1.面试题：计算属性和方法有什么区别？</h3><ul><li>计算属性本质上是包含 getter 和 setter 的方法</li><li>当获取计算属性时，实际上是在调用计算属性的 getter 方法 <ul><li>vue 会收集计算属性的依赖，并缓存计算属性的返回结果</li><li>只有当依赖变化后才会重新进行计算</li><li>方法没有缓存，每次调用方法都会导致重新执行</li></ul></li><li>计算属性的 getter 和 setter 参数固定，getter 没有参数，setter 只有一个参数 <ul><li>而方法的参数不限</li></ul></li><li>由于有以上的这些区别，因此计算属性通常是根据已有数据得到其他数据，并在得到数据的过程中不建议使用异步、当前时间、随机数等副作用操作</li><li>实际上，最重要的区别是含义上的区别 <ul><li>计算属性含义上也是一个数据，可以读取也可以赋值</li><li>方法含义上是一个操作，用于处理一些事情</li></ul></li></ul><h3 id="_2-完整的计算属性" tabindex="-1"><a class="header-anchor" href="#_2-完整的计算属性" aria-hidden="true">#</a> 2.完整的计算属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">propName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// getter</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// setter</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-只包含-getter-的计算属性-简写" tabindex="-1"><a class="header-anchor" href="#_3-只包含-getter-的计算属性-简写" aria-hidden="true">#</a> 3.只包含 getter 的计算属性（简写）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">propName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// getter</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-作用域样式对子组件根元素的影响" tabindex="-1"><a class="header-anchor" href="#_4-作用域样式对子组件根元素的影响" aria-hidden="true">#</a> 4.作用域样式对子组件根元素的影响</h3><p><img src="`+C+'" alt=""></p><h2 id="七-组件事件" tabindex="-1"><a class="header-anchor" href="#七-组件事件" aria-hidden="true">#</a> （七）组件事件</h2><p><img src="'+T+'" alt=""></p><h3 id="_1-pager-组件" tabindex="-1"><a class="header-anchor" href="#_1-pager-组件" aria-hidden="true">#</a> 1.pager 组件</h3><p><img src="'+l+'" alt=""></p><h4 id="_1-属性" tabindex="-1"><a class="header-anchor" href="#_1-属性" aria-hidden="true">#</a> 1）属性</h4><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>current</td><td>当前页码</td><td>Number</td><td>否</td><td>1</td></tr><tr><td>total</td><td>总数据量</td><td>Number</td><td>否</td><td>0</td></tr><tr><td>limit</td><td>页容量</td><td>Number</td><td>否</td><td>10</td></tr><tr><td>visibleNumber</td><td>可见页码数</td><td>Number</td><td>否</td><td>10</td></tr></tbody></table><h4 id="_2-事件" tabindex="-1"><a class="header-anchor" href="#_2-事件" aria-hidden="true">#</a> 2）事件</h4><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>pageChange</td><td>页码变化</td><td>新的页码</td><td>Number</td></tr></tbody></table><h3 id="_2-全局样式" tabindex="-1"><a class="header-anchor" href="#_2-全局样式" aria-hidden="true">#</a> 2.全局样式</h3><h3 id="_3-v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#_3-v-if-和-v-show" aria-hidden="true">#</a> 3.v-if 和 v-show</h3><p><img src="'+E+'" alt=""></p><p><img src="'+z+'" alt=""></p><h4 id="_1-面试题-v-if-和-v-show-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-面试题-v-if-和-v-show-有什么区别" aria-hidden="true">#</a> 1）面试题：v-if 和 v-show 有什么区别？</h4><ul><li>v-if 能够控制是否生成 vnode，也就间接控制了是否生成对应的 dom <ul><li>当 v-if 为 true 时，会生成对应的 vnode，并生成对应的 dom 元素</li><li>当其为 false 时，不会生成对应的 vnode，自然不会生成任何的 dom 元素</li></ul></li><li>v-show 始终会生成 vnode，也就间接导致了始终生成 dom <ul><li>只是控制 dom 的 display 属性，当 v-show 为 true 时，不做任何处理</li><li>当其为 false 时，生成的 dom 的 display 属性为 none</li></ul></li><li>使用 v-if 可以有效的减少树的节点和渲染量，但也会导致树的不稳定</li><li>使用 v-show 可以保持树的稳定，但不能减少树的节点和渲染量</li><li>因此，在实际开发中，显示状态变化频繁的情况下应该使用 v-show，以保持树的稳定 <ul><li>显示状态变化较少时应该使用 v-if，以减少树的节点和渲染量</li></ul></li></ul><h3 id="_4-组件事件" tabindex="-1"><a class="header-anchor" href="#_4-组件事件" aria-hidden="true">#</a> 4.组件事件</h3><p><img src="'+S+'" alt=""></p><h4 id="_1-抛出事件" tabindex="-1"><a class="header-anchor" href="#_1-抛出事件" aria-hidden="true">#</a> 1）抛出事件</h4><ul><li>子组件在某个时候发生了一件事，但自身无法处理</li><li>于是通过事件的方式通知父组件处理</li></ul><h4 id="_2-事件参数" tabindex="-1"><a class="header-anchor" href="#_2-事件参数" aria-hidden="true">#</a> 2）事件参数</h4><ul><li>子组件抛出事件时，传递给父组件的数据</li></ul><h4 id="_3-注册事件" tabindex="-1"><a class="header-anchor" href="#_3-注册事件" aria-hidden="true">#</a> 3）注册事件</h4><ul><li>父组件声明，当子组件发生某件事的时候，自身将做出一些处理</li></ul><h2 id="八-优化工程结构" tabindex="-1"><a class="header-anchor" href="#八-优化工程结构" aria-hidden="true">#</a> （八）优化工程结构</h2><h3 id="_1-如何使用组件" tabindex="-1"><a class="header-anchor" href="#_1-如何使用组件" aria-hidden="true">#</a> 1.如何使用组件</h3><ul><li>编写组件说明文档 <code>./src/components/README.md</code></li></ul><h4 id="_1-avatar" tabindex="-1"><a class="header-anchor" href="#_1-avatar" aria-hidden="true">#</a> 1）Avatar</h4><p><img src="'+i+'" alt=""></p><h5 id="_1-属性-1" tabindex="-1"><a class="header-anchor" href="#_1-属性-1" aria-hidden="true">#</a> ① 属性</h5><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>头像图片路径</td><td>String</td><td>是</td><td>无</td></tr><tr><td>size</td><td>头像尺寸，宽高相等</td><td>Number</td><td>否</td><td>150</td></tr></tbody></table><h4 id="_2-icon" tabindex="-1"><a class="header-anchor" href="#_2-icon" aria-hidden="true">#</a> 2）Icon</h4><p><img src="'+c+'" alt=""></p><ul><li>图标组件</li><li>使用的图标源来自于「阿里巴巴矢量库」</li></ul><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>图标类型</td><td>String</td><td>是</td><td>无</td></tr></tbody></table><h4 id="_3-pager" tabindex="-1"><a class="header-anchor" href="#_3-pager" aria-hidden="true">#</a> 3）pager</h4><p><img src="'+l+'" alt=""></p><h5 id="_1-属性-2" tabindex="-1"><a class="header-anchor" href="#_1-属性-2" aria-hidden="true">#</a> ① 属性</h5><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>current</td><td>当前页码</td><td>Number</td><td>否</td><td>1</td></tr><tr><td>total</td><td>总数据量</td><td>Number</td><td>否</td><td>0</td></tr><tr><td>limit</td><td>页容量</td><td>Number</td><td>否</td><td>10</td></tr><tr><td>visibleNumber</td><td>可见页码数</td><td>Number</td><td>否</td><td>10</td></tr></tbody></table><h5 id="_2-事件-1" tabindex="-1"><a class="header-anchor" href="#_2-事件-1" aria-hidden="true">#</a> ② 事件</h5><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>pageChange</td><td>页码变化</td><td>新的页码</td><td>Number</td></tr></tbody></table><h3 id="_2-如何测试组件效果" tabindex="-1"><a class="header-anchor" href="#_2-如何测试组件效果" aria-hidden="true">#</a> 2.如何测试组件效果</h3>',61),Sn={href:"https://cli.vuejs.org/zh/guide/prototyping.html",target:"_blank",rel:"noopener noreferrer"},Jn=e('<h2 id="九-组件练习" tabindex="-1"><a class="header-anchor" href="#九-组件练习" aria-hidden="true">#</a> （九）组件练习</h2><ul><li>组件说明文档 <code>./src/components/README.md</code></li></ul><h3 id="_1-avatar-1" tabindex="-1"><a class="header-anchor" href="#_1-avatar-1" aria-hidden="true">#</a> 1.Avatar</h3><p><img src="'+i+'" alt=""></p><h4 id="_1-属性-3" tabindex="-1"><a class="header-anchor" href="#_1-属性-3" aria-hidden="true">#</a> 1）属性</h4><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>头像图片路径</td><td>String</td><td>是</td><td>无</td></tr><tr><td>size</td><td>头像尺寸，宽高相等</td><td>Number</td><td>否</td><td>150</td></tr></tbody></table><h3 id="_2-icon-1" tabindex="-1"><a class="header-anchor" href="#_2-icon-1" aria-hidden="true">#</a> 2.Icon</h3><p><img src="'+c+'" alt=""></p><ul><li>图标组件</li><li>使用的图标源来自于「阿里巴巴矢量库」</li></ul><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>图标类型</td><td>String</td><td>是</td><td>无</td></tr></tbody></table><h3 id="_3-pager-1" tabindex="-1"><a class="header-anchor" href="#_3-pager-1" aria-hidden="true">#</a> 3.pager</h3><p><img src="'+l+'" alt=""></p><h4 id="_1-属性-4" tabindex="-1"><a class="header-anchor" href="#_1-属性-4" aria-hidden="true">#</a> 1）属性</h4><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>current</td><td>当前页码</td><td>Number</td><td>否</td><td>1</td></tr><tr><td>total</td><td>总数据量</td><td>Number</td><td>否</td><td>0</td></tr><tr><td>limit</td><td>页容量</td><td>Number</td><td>否</td><td>10</td></tr><tr><td>visibleNumber</td><td>可见页码数</td><td>Number</td><td>否</td><td>10</td></tr></tbody></table><h4 id="_2-事件-2" tabindex="-1"><a class="header-anchor" href="#_2-事件-2" aria-hidden="true">#</a> 2）事件</h4><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>pageChange</td><td>页码变化</td><td>新的页码</td><td>Number</td></tr></tbody></table><h3 id="_4-empty" tabindex="-1"><a class="header-anchor" href="#_4-empty" aria-hidden="true">#</a> 4.Empty</h3><p><img src="'+J+'" alt=""></p><ul><li>该组件需要在外层容器中横向垂直居中</li></ul><h4 id="_1-属性-5" tabindex="-1"><a class="header-anchor" href="#_1-属性-5" aria-hidden="true">#</a> 1）属性</h4><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>text</td><td>显示的文字</td><td>String</td><td>否</td><td>&quot;无数据&quot;</td></tr></tbody></table><h3 id="_5-imageloader" tabindex="-1"><a class="header-anchor" href="#_5-imageloader" aria-hidden="true">#</a> 5.ImageLoader</h3><p><img src="'+M+`" alt=""></p><ul><li>该组件可以实现一个渐进式图片</li></ul><h4 id="_1-属性-6" tabindex="-1"><a class="header-anchor" href="#_1-属性-6" aria-hidden="true">#</a> 1）属性</h4><table><thead><tr><th>属性名</th><th>含义</th><th>类型</th><th>必填</th><th>默认值</th></tr></thead><tbody><tr><td>src</td><td>原始图片的路径</td><td>String</td><td>是</td><td>无</td></tr><tr><td>placeholder</td><td>原始图片加载完成前的占位图片</td><td>String</td><td>是</td><td>无</td></tr><tr><td>duration</td><td>原始图片加载完成后，切换到原始图经过的毫秒数</td><td>Number</td><td>否</td><td>500</td></tr></tbody></table><h4 id="_2-事件-3" tabindex="-1"><a class="header-anchor" href="#_2-事件-3" aria-hidden="true">#</a> 2）事件</h4><table><thead><tr><th>事件名</th><th>含义</th><th>事件参数</th><th>参数类型</th></tr></thead><tbody><tr><td>load</td><td>原始图片加载完成后触发</td><td>无</td><td>无</td></tr></tbody></table><h4 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3）示例</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageLoader</span>
  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://images.pexels.com/photos/33109/fall-autumn-red-season.jpg?fit=crop&amp;crop=entropy&amp;w=3456&amp;h=2304<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://images.pexels.com/photos/33109/fall-autumn-red-season.jpg?w=100<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-contact" tabindex="-1"><a class="header-anchor" href="#_6-contact" aria-hidden="true">#</a> 6.Contact</h3><p><img src="`+L+'" alt=""></p><ul><li>该组件需要横向撑满容器，背景色透明</li></ul><h4 id="_1-如何实现点击弹出-qq-对话" tabindex="-1"><a class="header-anchor" href="#_1-如何实现点击弹出-qq-对话" aria-hidden="true">#</a> 1）如何实现点击弹出 QQ 对话？</h4><ul><li>设置超链接为：tencent://message/?Menu=yes&amp;uin=要对话的 QQ 号&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45</li></ul><h4 id="_2-如何实现点击弹出发送邮件" tabindex="-1"><a class="header-anchor" href="#_2-如何实现点击弹出发送邮件" aria-hidden="true">#</a> 2）如何实现点击弹出发送邮件？</h4><ul><li>设置超链接为：mailto:邮件地址</li></ul><h3 id="_7-menu" tabindex="-1"><a class="header-anchor" href="#_7-menu" aria-hidden="true">#</a> 7.Menu</h3><p><img src="'+B+'" alt=""></p><ul><li>该组件需要横向撑满容器，背景色透明</li><li>每个菜单的信息如下 <ul><li><strong>首页</strong><ul><li>链接地址：/</li><li>选中条件：路径等于 /</li></ul></li><li><strong>文章</strong><ul><li>链接地址：/blog</li><li>选中条件：路径以 <code>/blog</code> 开头</li></ul></li><li><strong>关于我</strong><ul><li>链接地址：/about</li><li>选中条件：路径等于 <code>/about</code></li></ul></li><li><strong>项目&amp;效果</strong><ul><li>链接地址：/project</li><li>选中条件：路径等于 <code>/project</code></li></ul></li><li><strong>留言板</strong><ul><li>链接地址：/message</li><li>选中条件：路径等于 <code>/message</code></li></ul></li></ul></li></ul><h3 id="_8-siteaside" tabindex="-1"><a class="header-anchor" href="#_8-siteaside" aria-hidden="true">#</a> 8.SiteAside</h3><p><img src="'+X+'" alt=""></p><ul><li>网站侧边栏</li><li>宽度和高度撑满外层容器</li></ul><h2 id="十-插槽" tabindex="-1"><a class="header-anchor" href="#十-插槽" aria-hidden="true">#</a> （十）插槽</h2><p><img src="'+A+`" alt=""></p><h3 id="_1-插槽的简单用法" tabindex="-1"><a class="header-anchor" href="#_1-插槽的简单用法" aria-hidden="true">#</a> 1.插槽的简单用法</h3><ul><li>在某些组件的模板中，有一部分区域需要父组件来指定</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- message组件：一个弹窗消息 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 这里是消息内容，可以是一个文本，也可能是一段html，具体是什么不知道，需要父组件指定 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时，就需要使用插槽来定制组件的功能</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- message组件：一个弹窗消息 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- slot是vue的内置组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 父组件App --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>App Message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>detail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Message</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 最终的结果 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>App Message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>detail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+N+`" alt=""></p><h3 id="_2-具名插槽" tabindex="-1"><a class="header-anchor" href="#_2-具名插槽" aria-hidden="true">#</a> 2.具名插槽</h3><ul><li>如果某个组件中需要父元素传递多个区域的内容，也就意味着需要提供多个插槽</li><li>为了避免冲突，就需要给不同的插槽赋予不同的名字</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Layout 组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layout-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 希望把页头放这里，提供插槽，名为header --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 希望把主要内容放这里，提供插槽，名为default --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 希望把页脚放这里，提供插槽，名为footer --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 父组件App --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseLayout</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here&#39;s some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BaseLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+P+'" alt=""></p><h2 id="十一-路由" tabindex="-1"><a class="header-anchor" href="#十一-路由" aria-hidden="true">#</a> （十一）路由</h2><p><img src="'+D+'" alt=""></p>',57),Mn={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},Ln=e('<p><img src="'+W+`" alt=""></p><ul><li>如何根据地址中的路径选择不同的组件</li><li>把选择的组件放到哪个位置</li><li>如何无刷新的切换组件</li></ul><h3 id="_1-路由插件" tabindex="-1"><a class="header-anchor" href="#_1-路由插件" aria-hidden="true">#</a> 1.路由插件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 为了保证和课程一致，请安装3.4.9版本</span>
<span class="token function">npm</span> i vue-router@3.4.9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-路由插件的使用" tabindex="-1"><a class="header-anchor" href="#_1-路由插件的使用" aria-hidden="true">#</a> 1）路由插件的使用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Vue.use(插件)  在Vue中安装插件</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 路由配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token punctuation">,</span>
  router
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-基本使用" aria-hidden="true">#</a> 2.基本使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 路由配置</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 路由规则</span>
    <span class="token comment">// 当匹配到路径 /foo 时，渲染 Foo 组件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 当匹配到路径 /bar 时，渲染 Bar 组件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- App.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 公共区域 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 页面区域 --&gt;</span>
    <span class="token comment">&lt;!-- vue-router 匹配到的组件会渲染到这里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterView</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-路由模式" tabindex="-1"><a class="header-anchor" href="#_3-路由模式" aria-hidden="true">#</a> 3.路由模式</h3><ul><li>路由模式决定了 <ul><li>路由从哪里获取访问路径</li><li>路由如何改变访问路径</li></ul></li><li><code>vue-router</code> 提供了三种路由模式</li></ul><h4 id="_1-hash" tabindex="-1"><a class="header-anchor" href="#_1-hash" aria-hidden="true">#</a> 1）hash</h4><ul><li>默认值</li><li>路由从浏览器地址栏中的 <code>hash</code> 部分获取路径</li><li>改变路径也是改变的 hash 部分</li><li>该模式兼容性最好</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8081/#/blog  --&gt;  /blog
http://localhost:8081/about#/blog  --&gt; /blog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-history" tabindex="-1"><a class="header-anchor" href="#_2-history" aria-hidden="true">#</a> 2）history</h4><ul><li>路由从浏览器地址栏的 <code>location.pathname</code> 中获取路径</li><li>改变路径使用的 H5 的 <code>history api</code></li><li>该模式可以让地址栏最友好</li><li>但是需要浏览器支持 <code>history api</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8081/#/blog  --&gt;  /
http://localhost:8081/about#/blog  --&gt; /about
http://localhost:8081/blog  --&gt; /blog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-abstract" tabindex="-1"><a class="header-anchor" href="#_3-abstract" aria-hidden="true">#</a> 3）abstract</h4><ul><li>路由从内存中获取路径</li><li>改变路径也只是改动内存中的值</li><li>这种模式通常应用到非浏览器环境中</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>内存： /			--&gt;   /
内存： /about	--&gt; /about
内存： /blog	  --&gt; /blog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-导航" tabindex="-1"><a class="header-anchor" href="#_4-导航" aria-hidden="true">#</a> 4.导航</h3><h4 id="_1-渲染" tabindex="-1"><a class="header-anchor" href="#_1-渲染" aria-hidden="true">#</a> 1）渲染</h4><ul><li><code>vue-router</code> 提供了全局的组件 <code>RouterLink</code></li><li>渲染结果是一个 <code>a</code> 元素</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouterLink</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- mode:hash 生成 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#/blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- mode:history 生成 --&gt;</span>
<span class="token comment">&lt;!-- 为了避免刷新页面，vue-router实际上为它添加了点击事件，并阻止了默认行为，在事件内部使用hitory api更改路径 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Q+'" alt=""></p><p><img src="'+R+`" alt=""></p><h4 id="_2-激活状态" tabindex="-1"><a class="header-anchor" href="#_2-激活状态" aria-hidden="true">#</a> 2）激活状态</h4><ul><li>默认情况下，<code>vue-router</code> 会用 <mark>当前路径</mark> 匹配 <mark>导航路径</mark><ul><li>如果当前路径是以导航路径开头，则算作匹配 <ul><li>会为导航的 a 元素添加类名 <code>router-link-active</code></li></ul></li><li>如果当前路径完全等于导航路径，则算作精确匹配 <ul><li>会为导航的 a 元素添加类名 <code>router-link-exact-active</code></li></ul></li></ul></li><li>例如，当前访问的路径是 <code>/blog</code> ，则：</li></ul><table><thead><tr><th>导航路径</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>router-link-active</td></tr><tr><td>/blog</td><td>router-link-active router-link-exact-active</td></tr><tr><td>/about</td><td>无</td></tr><tr><td>/message</td><td>无</td></tr></tbody></table><ul><li>可以为组件 <code>RouterLink</code> 添加 bool 属性 <code>exact</code></li><li>将匹配规则改为：必须要精确匹配才能添加匹配类名 <code>router-link-active</code></li><li>例如，当前访问的路径是 <code>/blog</code> ，则：</li></ul><table><thead><tr><th>导航路径</th><th>exact</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>true</td><td>无</td></tr><tr><td>/blog</td><td>false</td><td>router-link-active router-link-exact-active</td></tr><tr><td>/about</td><td>true</td><td>无</td></tr><tr><td>/message</td><td>true</td><td>无</td></tr></tbody></table><ul><li>例如，当前访问的路径是 <code>/blog/detail/123</code> ，则：</li></ul><table><thead><tr><th>导航路径</th><th>exact</th><th>类名</th></tr></thead><tbody><tr><td>/</td><td>true</td><td>无</td></tr><tr><td>/blog</td><td>false</td><td>router-link-active</td></tr><tr><td>/about</td><td>true</td><td>无</td></tr><tr><td>/message</td><td>true</td><td>无</td></tr></tbody></table><ul><li>可以通过 <code>active-class</code> 属性更改匹配的类名</li><li>通过 <code>exact-active-class</code> 更改精确匹配的类名</li></ul><h3 id="_5-命名路由" tabindex="-1"><a class="header-anchor" href="#_5-命名路由" aria-hidden="true">#</a> 5.命名路由</h3><ul><li>使用命名路由可以解除系统与路径之间的耦合</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 路由配置</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 路由规则</span>
    <span class="token comment">// 当匹配到路径 /foo 时，渲染 Foo 组件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/foo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 当匹配到路径 /bar 时，渲染 Bar 组件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/bar&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 向to属性传递路由信息对象 RouterLink会根据你传递的信息以及路由配置生成对应的路径 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RouterLink</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name:&#39;foo&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>go to foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RouterLink</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十二-弹出消息" tabindex="-1"><a class="header-anchor" href="#十二-弹出消息" aria-hidden="true">#</a> （十二）弹出消息</h2><p><img src="`+O+`" alt=""></p><h3 id="_1-使用-css-module" tabindex="-1"><a class="header-anchor" href="#_1-使用-css-module" aria-hidden="true">#</a> 1.使用 css module</h3><ul><li>需要将样式文件命名为 <code>xxx.module.ooo</code></li><li><code>xxx</code> 为文件名</li><li><code>ooo</code> 为样式文件后缀名 <ul><li>可以是 <code>css</code> 、 <code>less</code></li></ul></li></ul><h3 id="_2-得到组件渲染的-dom" tabindex="-1"><a class="header-anchor" href="#_2-得到组件渲染的-dom" aria-hidden="true">#</a> 2.得到组件渲染的 Dom</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 获取某个组件渲染的Dom根元素
 */</span>
<span class="token keyword">function</span> <span class="token function">getComponentRootDom</span><span class="token punctuation">(</span><span class="token parameter">comp<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> <span class="token punctuation">{</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-扩展-vue-实例" tabindex="-1"><a class="header-anchor" href="#_3-扩展-vue-实例" aria-hidden="true">#</a> 3.扩展 vue 实例</h3><p><img src="`+$+`" alt=""></p><h3 id="_4-ref" tabindex="-1"><a class="header-anchor" href="#_4-ref" aria-hidden="true">#</a> 4.ref</h3><ul><li>通过 <code>ref</code> 可以直接操作 <code>dom</code> 元素</li><li>甚至可能直接改动子组件</li><li>这些都不符合 <code>vue</code> 的设计理念</li><li>除非迫不得已，否则不要使用 <code>ref</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>para<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>some paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComp</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>查看所有引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> ChildComp <span class="token keyword">from</span> <span class="token string">&quot;./ChildComp&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      ChildComp<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取持有的所有引用</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        {
        	para: p元素（原生DOM）,
        	comp: ChildComp的组件实例
        }
        */</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十三-获取远程数据" tabindex="-1"><a class="header-anchor" href="#十三-获取远程数据" aria-hidden="true">#</a> （十三）获取远程数据</h2>`,50),Bn={href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},Xn=n("br",null,null,-1),An={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},Nn=n("br",null,null,-1),Pn={href:"http://mockjs.com/",target:"_blank",rel:"noopener noreferrer"},Dn=e('<h3 id="_1-远程获取数据的意义" tabindex="-1"><a class="header-anchor" href="#_1-远程获取数据的意义" aria-hidden="true">#</a> 1.远程获取数据的意义</h3><p><img src="'+F+'" alt=""></p><h3 id="_2-开发环境有跨域问题" tabindex="-1"><a class="header-anchor" href="#_2-开发环境有跨域问题" aria-hidden="true">#</a> 2.开发环境有跨域问题</h3>',3),Wn=n("h3",{id:"_3-生产环境没有跨域问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-生产环境没有跨域问题","aria-hidden":"true"},"#"),a(" 3.生产环境没有跨域问题")],-1),Qn=n("h3",{id:"_4-解决开发环境的跨域问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-解决开发环境的跨域问题","aria-hidden":"true"},"#"),a(" 4.解决开发环境的跨域问题")],-1),Rn=n("h3",{id:"_5-为什么要-mock-数据",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-为什么要-mock-数据","aria-hidden":"true"},"#"),a(" 5.为什么要 Mock 数据")],-1),On=e('<h2 id="十四-组件生命周期" tabindex="-1"><a class="header-anchor" href="#十四-组件生命周期" aria-hidden="true">#</a> （十四）组件生命周期</h2><p><img src="'+Y+'" alt=""></p><p><img src="'+Z+'" alt=""></p><p><img src="'+K+`" alt=""></p><h3 id="_1-加载远程数据" tabindex="-1"><a class="header-anchor" href="#_1-加载远程数据" aria-hidden="true">#</a> 1.加载远程数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">news</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>news <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-直接操作-dom" tabindex="-1"><a class="header-anchor" href="#_2-直接操作-dom" aria-hidden="true">#</a> 2.直接操作 DOM</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">containerWidth</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">containerHeight</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>containerWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>container<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>containerHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>container<span class="token punctuation">.</span>containerHeight<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启动和清除计时器" tabindex="-1"><a class="header-anchor" href="#_3-启动和清除计时器" aria-hidden="true">#</a> 3.启动和清除计时器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">timer</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
     <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十五-完成首页-part1" tabindex="-1"><a class="header-anchor" href="#十五-完成首页-part1" aria-hidden="true">#</a> （十五）完成首页 - Part1</h2><h3 id="_1-home-组件" tabindex="-1"><a class="header-anchor" href="#_1-home-组件" aria-hidden="true">#</a> 1.<code>Home</code> 组件</h3><ul><li>负责呈现整体效果 <ul><li>整体布局</li><li>监听鼠标滚轮事件，切换轮播图</li><li>提供上下按钮，切换轮播图</li><li>提供指示器，切换轮播图</li></ul></li></ul><h3 id="_2-carouselitem-组件" tabindex="-1"><a class="header-anchor" href="#_2-carouselitem-组件" aria-hidden="true">#</a> 2.<code>CarouselItem</code> 组件</h3><ul><li>负责呈现单张轮播图的全部事务</li></ul><p><img src="`+U+'" alt=""></p><h2 id="十六-完成首页-part2" tabindex="-1"><a class="header-anchor" href="#十六-完成首页-part2" aria-hidden="true">#</a> （十六）完成首页 - Part2</h2><h2 id="十七-完成首页-part3" tabindex="-1"><a class="header-anchor" href="#十七-完成首页-part3" aria-hidden="true">#</a> （十七）完成首页 - Part3</h2><h2 id="十八-自定义指令" tabindex="-1"><a class="header-anchor" href="#十八-自定义指令" aria-hidden="true">#</a> （十八）自定义指令</h2><p><img src="'+I+`" alt=""></p><h3 id="_1-定义指令" tabindex="-1"><a class="header-anchor" href="#_1-定义指令" aria-hidden="true">#</a> 1.定义指令</h3><h4 id="_1-全局定义" tabindex="-1"><a class="header-anchor" href="#_1-全局定义" aria-hidden="true">#</a> 1）全局定义</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指令名称为：mydirec1</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;mydirec1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指令配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指令名称为：mydirec2</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&quot;mydirec2&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 指令配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>所有的组件均可以使用 <code>mydirec1</code> 和 <code>mydirec2</code> 指令</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 某个组件代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComp</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-mydirec2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-局部定义" tabindex="-1"><a class="header-anchor" href="#_2-局部定义" aria-hidden="true">#</a> 2）局部定义</h4><ul><li>局部定义是指在某个组件中定义指令，和局部注册组件类似</li><li>定义的指令仅在该组件中有效</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 某个组件代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComp</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-mydirec2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义指令</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 指令名称：mydirec1</span>
      <span class="token literal-property property">mydirec1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 指令配置</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 指令名称：mydirec2</span>
      <span class="token literal-property property">mydirec2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 指令配置</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和局部注册组件一样，为了让指令更加通用</li><li>通常我们会把指令的配置提取到其他模块</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 某个组件代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComp</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-mydirec2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-mydirec1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js表达式<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 导入当前组件需要用到的指令配置对象</span>
  <span class="token keyword">import</span> mydirec1 <span class="token keyword">from</span> <span class="token string">&quot;@/directives/mydirec1&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">import</span> mydirec2 <span class="token keyword">from</span> <span class="token string">&quot;@/directives/mydirec2&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义指令</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      mydirec1<span class="token punctuation">,</span>
      mydirec2<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-指令配置对象" tabindex="-1"><a class="header-anchor" href="#_2-指令配置对象" aria-hidden="true">#</a> 2.指令配置对象</h3><ul><li>没有配置的指令，就像没有配置的组件一样，毫无意义</li><li><code>vue</code> 支持在指令中配置一些 <mark>钩子函数</mark></li><li>在适当的时机，<code>vue</code> 会调用这些钩子函数并传入适当的参数</li></ul><h4 id="_1-常用的钩子函数" tabindex="-1"><a class="header-anchor" href="#_1-常用的钩子函数" aria-hidden="true">#</a> 1）常用的钩子函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指令配置对象</span>
<span class="token punctuation">{</span>
  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 被绑定元素插入父节点时调用。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 所在组件的 VNode 更新时调用</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),$n={href:"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},Fn=e(`<h4 id="_2-钩子参数" tabindex="-1"><a class="header-anchor" href="#_2-钩子参数" aria-hidden="true">#</a> 2）钩子参数</h4><ul><li>每个钩子函数在调用时，<code>vue</code> 都会向其传递一些参数</li><li>其中最重要的是 <mark>前两个参数</mark></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指令配置对象</span>
<span class="token punctuation">{</span>
  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// el 是被绑定元素对应的真实DOM</span>
    <span class="token comment">// binding 是一个对象，描述了指令中提供的信息</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-binding-对象" tabindex="-1"><a class="header-anchor" href="#_3-binding-对象" aria-hidden="true">#</a> 3）binding 对象</h4><p><img src="`+H+'" alt=""></p>',5),Yn={href:"https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},Zn=e(`<h3 id="_3-配置简化" tabindex="-1"><a class="header-anchor" href="#_3-配置简化" aria-hidden="true">#</a> 3.配置简化</h3><ul><li>在配置自定义指令时，都会配置两个钩子函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样在元素绑定和更新时，都能运行到钩子函数</li><li>如果这两个钩子函数实现的功能相同，可以直接把指令配置简化为一个单独的函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 该函数会被同时设置到bind和update中</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Kn={href:"https://cn.vuejs.org/v2/guide/custom-directive.html",target:"_blank",rel:"noopener noreferrer"},Un=e('<h2 id="十九-组件混入" tabindex="-1"><a class="header-anchor" href="#十九-组件混入" aria-hidden="true">#</a> （十九）组件混入</h2><p><img src="'+G+'" alt=""></p><ul><li>有的时候，许多组件有着类似的功能</li><li>这些功能代码分散在组件不同的配置中</li></ul><p><img src="'+nn+'" alt=""></p><ul><li>可以把这些配置代码抽离出来</li><li>利用 <mark>混入</mark> 融合到组件中</li></ul><p><img src="'+an+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 抽离的公共代码</span>
<span class="token keyword">const</span> common <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;common created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 使用comp1，将会得到：
 * common created
 * comp1 created 1 2 3
 */</span>
<span class="token keyword">const</span> comp1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>common<span class="token punctuation">]</span> <span class="token comment">// 之所以是数组，是因为可以混入多个配置代码</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;comp1 created&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),In={href:"https://cn.vuejs.org/v2/guide/mixins.html",target:"_blank",rel:"noopener noreferrer"},Hn=e('<h2 id="二十-组件递归" tabindex="-1"><a class="header-anchor" href="#二十-组件递归" aria-hidden="true">#</a> （二十）组件递归</h2><h2 id="二十一-开发文章列表页-part1" tabindex="-1"><a class="header-anchor" href="#二十一-开发文章列表页-part1" aria-hidden="true">#</a> （二十一）开发文章列表页 - Part1</h2><h2 id="二十二-开发文章列表页-part2" tabindex="-1"><a class="header-anchor" href="#二十二-开发文章列表页-part2" aria-hidden="true">#</a> （二十二）开发文章列表页 - Part2</h2><p><img src="'+sn+'" alt=""></p><h3 id="_1-路由跳转逻辑" tabindex="-1"><a class="header-anchor" href="#_1-路由跳转逻辑" aria-hidden="true">#</a> 1.路由跳转逻辑</h3><p><img src="'+tn+'" alt=""></p><h3 id="_2-组件逻辑" tabindex="-1"><a class="header-anchor" href="#_2-组件逻辑" aria-hidden="true">#</a> 2.组件逻辑</h3><p><img src="'+en+'" alt=""></p><h4 id="_1-bloglist" tabindex="-1"><a class="header-anchor" href="#_1-bloglist" aria-hidden="true">#</a> 1）BlogList</h4><p><img src="'+pn+'" alt=""></p><h4 id="_2-blogcategory" tabindex="-1"><a class="header-anchor" href="#_2-blogcategory" aria-hidden="true">#</a> 2）BlogCategory</h4><p><img src="'+ln+`" alt=""></p><h3 id="_3-动态路由" tabindex="-1"><a class="header-anchor" href="#_3-动态路由" aria-hidden="true">#</a> 3.动态路由</h3><h4 id="_1-情境引入" tabindex="-1"><a class="header-anchor" href="#_1-情境引入" aria-hidden="true">#</a> 1）情境引入</h4><ul><li>希望下面的地址都能够匹配到 <code>Blog</code> 组件 <ul><li><code>/article</code>，显示全部文章</li><li><code>/article/cate/1</code>，显示分类 <code>id</code> 为 <code>1</code> 的文章</li><li><code>/article/cate/3</code>，显示分类 <code>id</code> 为 <code>3</code> 的文章</li><li>...</li></ul></li><li>第一种情况很简单，只需要将一个固定的地址匹配到 <code>Blog</code> 组件即可</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/article&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Blog&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">component</span><span class="token operator">:</span> Blog
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>但后面的情况则不同</li><li>匹配到 <code>Blog</code> 组件的地址中，有一部分是动态变化的</li><li>需要使用一种特殊的表达方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/article/cate/:categoryId&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;CategoryBlog&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">component</span><span class="token operator">:</span> Blog
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-路由参数" tabindex="-1"><a class="header-anchor" href="#_2-路由参数" aria-hidden="true">#</a> 2）路由参数</h4><ul><li>在地址中使用 <code>:xxx</code> 来表达这一部分的内容是变化的</li><li>在 <code>vue-router</code> 中，将变化的这一部分称之为 <code>params</code></li><li>可以在 <code>vue</code> 组件中通过 <code>this.$route.params</code> 来获取</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 访问 /article/cate/3</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">;</span> <span class="token comment">// { categoryId: &quot;3&quot; }</span>

<span class="token comment">// 访问 /article/cate/1</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">;</span> <span class="token comment">// { categoryId: &quot;1&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-动态路由的导航" tabindex="-1"><a class="header-anchor" href="#_3-动态路由的导航" aria-hidden="true">#</a> 3）动态路由的导航</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/article/cate/3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>to article of category 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>
  <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{
   name: &#39;CategoryBlog&#39;,
   params: {
      categoryId: 3           
   }                    
}<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  to article of category 3
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-编程式导航" tabindex="-1"><a class="header-anchor" href="#_4-编程式导航" aria-hidden="true">#</a> 4.编程式导航</h3><ul><li>除了使用 <code>&lt;RouterLink&gt;</code> 超链接导航外</li><li><code>vue-router</code> 还允许在代码中跳转页面</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 普通跳转</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;跳转地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 命名路由跳转</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Blog&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 回退，类似于 history.go</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-watch" tabindex="-1"><a class="header-anchor" href="#_5-watch" aria-hidden="true">#</a> 5.watch</h3><ul><li>利用 <code>watch</code> 配置，可以直接观察某个数据的变化，变化时可以做一些处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 其他配置</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 观察 this.$route 的变化，变化后，会调用该函数</span>
    <span class="token function">$route</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// newVal：this.$route 新的值，等同 this.$route</span>
      <span class="token comment">// oldVal：this.$route 旧的值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 完整写法</span>
    <span class="token literal-property property">$route</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否监听该数据内部属性的变化，默认 false</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否立即执行一次 handler，默认 false</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 观察 this.$route.params 的变化，变化后，会调用该函数</span>
    <span class="token punctuation">[</span><span class="token string">&quot;$route.params&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// newVal：this.$route.params 新的值，等同 this.$route.params</span>
      <span class="token comment">// oldVal：this.$route.params 旧的值</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  	<span class="token comment">// 完整写法</span>
    <span class="token punctuation">[</span><span class="token string">&quot;$route.params&quot;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否监听该数据内部属性的变化，默认 false</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否立即执行一次 handler，默认 false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二十三-开发文章详情页-part1" tabindex="-1"><a class="header-anchor" href="#二十三-开发文章详情页-part1" aria-hidden="true">#</a> （二十三）开发文章详情页 - Part1</h2><h2 id="二十四-开发文章详情页-part2" tabindex="-1"><a class="header-anchor" href="#二十四-开发文章详情页-part2" aria-hidden="true">#</a> （二十四）开发文章详情页 - Part2</h2><p><img src="`+on+'" alt=""></p><h3 id="_1-文章数据逻辑" tabindex="-1"><a class="header-anchor" href="#_1-文章数据逻辑" aria-hidden="true">#</a> 1.文章数据逻辑</h3><p><img src="'+cn+'" alt=""></p><h3 id="_2-组件逻辑-1" tabindex="-1"><a class="header-anchor" href="#_2-组件逻辑-1" aria-hidden="true">#</a> 2.组件逻辑</h3><h4 id="_1-blogdetail" tabindex="-1"><a class="header-anchor" href="#_1-blogdetail" aria-hidden="true">#</a> 1）BlogDetail</h4>',36),Gn=e("<li>根据「属性 - 文章对象」显示出文章信息即可</li><li>由于文章的内容属于 <mark>原始 html</mark><ul><li>因此需要使用 <code>v-html</code> 指令来设置</li></ul></li><li>文章的内容是不带样式的 <ul><li>因此需要选择一款 <code>markdown</code> 的 <code>css</code> 样式（见附件 <code>markdown.css</code>）</li></ul></li>",3),na={href:"https://highlightjs.org/",target:"_blank",rel:"noopener noreferrer"},aa=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;highlight.js/styles/github.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二十五-listeners-和-v-model" tabindex="-1"><a class="header-anchor" href="#二十五-listeners-和-v-model" aria-hidden="true">#</a> （二十五）$listeners 和 v-model</h2><p><img src="`+un+'" alt=""></p><h3 id="_1-事件修饰符" tabindex="-1"><a class="header-anchor" href="#_1-事件修饰符" aria-hidden="true">#</a> 1.事件修饰符</h3>',4),sa=n("li",null,[n("mark",null,[a("针对 "),n("code",null,"dom"),a(" 节点的原生事件")])],-1),ta=n("li",null,[n("code",null,"vue"),a(" 支持多种修饰符以简化代码")],-1),ea={href:"https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},pa=e(`<h3 id="_2-listeners" tabindex="-1"><a class="header-anchor" href="#_2-listeners" aria-hidden="true">#</a> 2.$listeners</h3><ul><li><code>$listeners</code> 是 <code>vue</code> 的一个实例属性</li><li>用于获取父组件传过来的所有事件函数</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@event1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleEvent1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@event2</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleEvent2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">;</span> <span class="token comment">// { event1: handleEvent1, event2: handleEvent2 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-emit-和-listeners-通信的异同" tabindex="-1"><a class="header-anchor" href="#_3-emit-和-listeners-通信的异同" aria-hidden="true">#</a> 3.<code>$emit</code> 和 <code>$listeners</code> 通信的异同</h3><h4 id="_1-相同点" tabindex="-1"><a class="header-anchor" href="#_1-相同点" aria-hidden="true">#</a> 1）相同点</h4><ul><li>均可实现子组件向父组件传递消息</li></ul><h4 id="_2-差异点" tabindex="-1"><a class="header-anchor" href="#_2-差异点" aria-hidden="true">#</a> 2）差异点</h4><ul><li><code>$emit</code> 更加符合单向数据流，子组件仅发出通知，由父组件监听做出改变 <ul><li>而 <code>$listeners</code> 则是在子组件中直接使用了父组件的方法</li></ul></li><li>调试工具可以监听到子组件 <code>$emit</code> 的事件 <ul><li>但无法监听到 <code>$listeners</code> 中的方法调用</li></ul></li><li>由于 <code>$listeners</code> 中可以获得传递过来的方法，因此调用方法可以得到其返回值 <ul><li>但 <code>$emit</code> 仅仅是向父组件发出通知，无法知晓父组件处理的结果</li><li>可以在 <code>$emit</code> 中传递回调函数来解决</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      Child<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到子组件事件中的数据</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一段时间后，调用子组件传递的回调函数</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// data为父组件处理完成后得到的数据</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-v-model" tabindex="-1"><a class="header-anchor" href="#_4-v-model" aria-hidden="true">#</a> 4.v-model</h3>`,12),la=n("li",null,[n("code",null,"v-model"),a(" 指令实质是一个语法糖")],-1),oa=n("li",null,[a("是 "),n("code",null,"value"),a(" 属性和 "),n("code",null,"input"),a(" 事件的结合体")],-1),ia={href:"https://cn.vuejs.org/v2/guide/forms.html",target:"_blank",rel:"noopener noreferrer"},ca=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data=$event.target.value<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 等同于 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>data<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二十六-开发文章详情页-part3" tabindex="-1"><a class="header-anchor" href="#二十六-开发文章详情页-part3" aria-hidden="true">#</a> （二十六）开发文章详情页 - Part3</h2><h2 id="二十七-事件总线" tabindex="-1"><a class="header-anchor" href="#二十七-事件总线" aria-hidden="true">#</a> （二十七）事件总线</h2><p><img src="`+rn+'" alt=""></p><h2 id="二十八-开发文章详情页-part4" tabindex="-1"><a class="header-anchor" href="#二十八-开发文章详情页-part4" aria-hidden="true">#</a> （二十八）开发文章详情页 - Part4</h2><h2 id="二十九-开发文章详情页-part5" tabindex="-1"><a class="header-anchor" href="#二十九-开发文章详情页-part5" aria-hidden="true">#</a> （二十九）开发文章详情页 - Part5</h2><h2 id="三十-代码优化" tabindex="-1"><a class="header-anchor" href="#三十-代码优化" aria-hidden="true">#</a> （三十）代码优化</h2><h2 id="三十一-图片懒加载" tabindex="-1"><a class="header-anchor" href="#三十一-图片懒加载" aria-hidden="true">#</a> （三十一）图片懒加载</h2><h2 id="三十二-数据共享" tabindex="-1"><a class="header-anchor" href="#三十二-数据共享" aria-hidden="true">#</a> （三十二）数据共享</h2><p><img src="'+dn+'" alt=""></p><h3 id="_1-问题" tabindex="-1"><a class="header-anchor" href="#_1-问题" aria-hidden="true">#</a> 1.问题</h3><p><img src="'+kn+'" alt=""></p><ul><li>在 vue 中遇到 <mark>共享数据</mark>，会带来多个问题</li></ul><h4 id="_1-如何保证数据的唯一性" tabindex="-1"><a class="header-anchor" href="#_1-如何保证数据的唯一性" aria-hidden="true">#</a> 1）如何保证数据的唯一性</h4><ul><li>如果数据不唯一，则会浪费大量的内存资源，降低运行效率</li><li>如果数据不唯一，就可能出现不统一的数据，难以维护</li></ul><h4 id="_2-某个组件改动数据后-如何让其他用到该数据的组件知道数据变化了" tabindex="-1"><a class="header-anchor" href="#_2-某个组件改动数据后-如何让其他用到该数据的组件知道数据变化了" aria-hidden="true">#</a> 2）某个组件改动数据后，如何让其他用到该数据的组件知道数据变化了</h4><ul><li>事件总线貌似可以解决该问题，但需要在组件中手动的维护监听，极其不方便</li><li>而且事件总线的目的在于「通知」，而不是「共享数据」</li></ul><h3 id="_2-数据提升至根组件" tabindex="-1"><a class="header-anchor" href="#_2-数据提升至根组件" aria-hidden="true">#</a> 2.数据提升至根组件</h3><ul><li>把所有的共享数据全部提升到根组件，然后通过属性不断下发</li><li>当某个组件需要修改数据时，又不断向上抛出事件，直到根组件完成对数据的修改</li></ul><p><img src="'+vn+'" alt=""></p><ul><li>这种方案的缺陷也非常明显 <ul><li>需要编写大量的代码层层下发数据，很多组件被迫拥有了自己根本不需要的数据</li><li>需要编写大量的代码层层上抛事件，很多组件被迫注册了自己根本处理不了的事件</li></ul></li></ul><h3 id="_3-数据仓库" tabindex="-1"><a class="header-anchor" href="#_3-数据仓库" aria-hidden="true">#</a> 3.数据仓库</h3><ul><li>可以简单的设置一个 <strong>独立的数据仓库</strong></li></ul><p><img src="'+mn+`" alt=""></p><ul><li>组件需要什么共享数据，可以自由的从仓库中获取，需要什么拿什么</li><li>组件可以自由的改变仓库中的数据，仓库的数据变化后，会自动通知用到对应数据的组件更新</li><li>要实现这一切，可以选择 vuex</li></ul><h3 id="_4-创建仓库" tabindex="-1"><a class="header-anchor" href="#_4-创建仓库" aria-hidden="true">#</a> 4.创建仓库</h3><ul><li>先安装 vuex</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 为了保证和课程一致，请安装3.6.2版本</span>
<span class="token function">npm</span> i vuex@3.6.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装 vuex 后，可以通过下面的代码创建一个数据仓库</li><li>在大部分情况下，一个工程仅需创建一个数据仓库</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应用vuex插件</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 仓库的配置</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 仓库的初始状态（数据）</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-访问数据" tabindex="-1"><a class="header-anchor" href="#_5-访问数据" aria-hidden="true">#</a> 5.访问数据</h3><ul><li>仓库创建好后，可以使用 <code>store.state</code> 来访问仓库中的数据</li><li>如果希望在 vue 中方便的使用仓库数据，需要将 vuex 作为插件安装</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store.js</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 安装Vuex插件</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 仓库的配置</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 仓库的初始状态（数据）</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./store.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  store<span class="token punctuation">,</span> <span class="token comment">// 向vue中注入仓库</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 vue 组件中，可以通过实例的 <code>$store</code> 属性访问到仓库</li><li>Vuex 会自动将配置的状态数据设置为响应式数据</li><li>当数据变化时，依赖该数据的组件会自动渲染</li></ul><h3 id="_6-数据的变更" tabindex="-1"><a class="header-anchor" href="#_6-数据的变更" aria-hidden="true">#</a> 6.数据的变更</h3><ul><li>尽管可以利用数据响应式的特点直接变更数据，但这样的做法在大型项目中会遇到问题</li><li>如果发现某个共享数据是错误的，而有一百多个组件都有可能变更过这块数据，无法知道是哪一步数据变更出现了问题</li><li>为了能够更好的跟踪数据的变化， vuex 强烈建议使用 <code>mutation</code> 来更改数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 仓库的配置</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 仓库的初始状态（数据）</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 每个mutation是一个方法，它描述了数据在某种场景下的变化
     * increase mutation描述了数据在增加时应该发生的变化
     * 参数state为当前的仓库数据
     */</span>
    <span class="token function">increase</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 求n次幂
     * 该mutation需要一个额外的参数来提供指数
     * 我们把让数据产生变化时的附加信息称之为负荷（负载） payload
     * payload可以是任何类型，数字、字符串、对象均可
     * 在该mutation中，我们约定payload为一个数字，表示指数
     */</span>
    <span class="token function">power</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count <span class="token operator">**=</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有了 mutation 后，就不应该直接去改动仓库的数据了</li><li>而是通过 <code>store.commit</code> 方法提交一个 mutation</li><li>可以通过 <code>vue devtools</code> 观测到数据的变化</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;mutation的名字&quot;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-mutation-中不得出现异步操作" tabindex="-1"><a class="header-anchor" href="#_1-mutation-中不得出现异步操作" aria-hidden="true">#</a> 1）<code>mutation</code> 中不得出现异步操作</h4><ul><li>在实际开发的规范中，甚至要求不得有副作用操作</li><li>副作用操作 <ul><li>异步</li><li>更改或读取外部环境的信息 <ul><li>例如 <code>localStorage</code> 、 <code>location</code> 、 <code>DOM</code> 等</li></ul></li></ul></li></ul><h4 id="_2-提交-mutation-是数据改变的-唯一原因" tabindex="-1"><a class="header-anchor" href="#_2-提交-mutation-是数据改变的-唯一原因" aria-hidden="true">#</a> 2）提交 <code>mutation</code> 是数据改变的 <strong>唯一原因</strong></h4><p><img src="`+hn+`" alt=""></p><h3 id="_7-异步处理" tabindex="-1"><a class="header-anchor" href="#_7-异步处理" aria-hidden="true">#</a> 7.异步处理</h3><ul><li>在 vuex 中要进行异步操作，需要使用 <code>action</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increase</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">power</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count <span class="token operator">**=</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * ctx: 类似于store的对象
     * payload: 本次异步操作的额外信息
     */</span>
    <span class="token function">asyncPower</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;power&quot;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+bn+'" alt=""></p><h2 id="三十三-vuex-经典案例" tabindex="-1"><a class="header-anchor" href="#三十三-vuex-经典案例" aria-hidden="true">#</a> （三十三）vuex 经典案例</h2><h3 id="_1-用户模块逻辑示意图" tabindex="-1"><a class="header-anchor" href="#_1-用户模块逻辑示意图" aria-hidden="true">#</a> 1.用户模块逻辑示意图</h3><h4 id="_1-路由总体示意图" tabindex="-1"><a class="header-anchor" href="#_1-路由总体示意图" aria-hidden="true">#</a> 1）路由总体示意图</h4><p><img src="'+gn+'" alt=""></p><h4 id="_2-鉴权守卫逻辑示意图" tabindex="-1"><a class="header-anchor" href="#_2-鉴权守卫逻辑示意图" aria-hidden="true">#</a> 2）鉴权守卫逻辑示意图</h4><p><img src="'+_n+'" alt=""></p><h3 id="_2-参考资料" tabindex="-1"><a class="header-anchor" href="#_2-参考资料" aria-hidden="true">#</a> 2.参考资料</h3><h4 id="_1-vue" tabindex="-1"><a class="header-anchor" href="#_1-vue" aria-hidden="true">#</a> 1）vue</h4>',56),ua={href:"https://cn.vuejs.org/v2/api/#watch",target:"_blank",rel:"noopener noreferrer"},ra={href:"https://cn.vuejs.org/v2/api/#vm-watch",target:"_blank",rel:"noopener noreferrer"},da=n("h4",{id:"_2-vuex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-vuex","aria-hidden":"true"},"#"),a(" 2）vuex")],-1),ka={href:"https://vuex.vuejs.org/zh/guide/state.html#mapstate-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},va={href:"https://vuex.vuejs.org/zh/guide/getters.html",target:"_blank",rel:"noopener noreferrer"},ma={href:"https://vuex.vuejs.org/zh/guide/getters.html#mapgetters-%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},ha={href:"https://vuex.vuejs.org/zh/guide/modules.html",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://vuex.vuejs.org/zh/api/#watch",target:"_blank",rel:"noopener noreferrer"},ga=n("h4",{id:"_3-router",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-router","aria-hidden":"true"},"#"),a(" 3）router")],-1),_a={href:"https://router.vuejs.org/api/#exact-path",target:"_blank",rel:"noopener noreferrer"},ya={href:"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"},fa=e(`<h2 id="三十四-在项目中应用-vuex" tabindex="-1"><a class="header-anchor" href="#三十四-在项目中应用-vuex" aria-hidden="true">#</a> （三十四）在项目中应用 vuex</h2><h2 id="三十五-页面标题的统一处理" tabindex="-1"><a class="header-anchor" href="#三十五-页面标题的统一处理" aria-hidden="true">#</a> （三十五）页面标题的统一处理</h2><h2 id="三十六-完成「关于我」页面" tabindex="-1"><a class="header-anchor" href="#三十六-完成「关于我」页面" aria-hidden="true">#</a> （三十六）完成「关于我」页面</h2><h2 id="三十七-完成「项目-效果」页面" tabindex="-1"><a class="header-anchor" href="#三十七-完成「项目-效果」页面" aria-hidden="true">#</a> （三十七）完成「项目&amp;效果」页面</h2><h2 id="三十八-完成「留言板」页面" tabindex="-1"><a class="header-anchor" href="#三十八-完成「留言板」页面" aria-hidden="true">#</a> （三十八）完成「留言板」页面</h2><h2 id="三十九-打包结果分析" tabindex="-1"><a class="header-anchor" href="#三十九-打包结果分析" aria-hidden="true">#</a> （三十九）打包结果分析</h2><h3 id="_1-分析打包结果" tabindex="-1"><a class="header-anchor" href="#_1-分析打包结果" aria-hidden="true">#</a> 1.分析打包结果</h3><ul><li>由于 vue-cli 是利用 webpack 进行打包</li><li>仅需加入一个 webpack 插件 <code>webpack-bundle-analyzer</code> 即可分析打包结果</li><li>为了避免在开发环境中启动 <code>webpack-bundle-analyzer</code>，仅需使用以下代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-bundle-analyzer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin<span class="token punctuation">;</span>
<span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过 configureWebpack 选项，可对 webpack 进行额外的配置</span>
  <span class="token comment">// 该配置最终会和 vue-cli 的默认配置进行合并（webpack-merge）</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-优化公共库打包体积" tabindex="-1"><a class="header-anchor" href="#_2-优化公共库打包体积" aria-hidden="true">#</a> 2.优化公共库打包体积</h3><h4 id="_1-使用-cdn" tabindex="-1"><a class="header-anchor" href="#_1-使用-cdn" aria-hidden="true">#</a> 1）使用 CDN</h4><ul><li>CDN 全称为 Content Delivery Network，称之为内容分发网络</li><li>基本原理是：架设多台服务器，这些服务器定期从源站拿取资源保存本地，到让不同地域的用户能够通过访问最近的服务器获得资源</li><li>可以把项目中的所有静态资源都放到 CDN 上（收费），也可以利用现成免费的 CDN 获取公共库的资源</li></ul><p><img src="`+yn+`" alt=""></p><ul><li>需要告诉 webpack 不要对公共库进行打包</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">vue</span><span class="token operator">:</span> <span class="token string">&quot;Vue&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">vuex</span><span class="token operator">:</span> <span class="token string">&quot;Vuex&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;vue-router&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VueRouter&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),xa=n("li",null,"在页面中手动加入 cdn 链接",-1),qa={href:"https://www.bootcdn.cn/",target:"_blank",rel:"noopener noreferrer"},wa=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/vue/2.6.12/vue.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/vuex/3.5.1/vuex.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/vue-router/3.4.7/vue-router.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- built files will be auto injected --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于 vuex 和 vue-router ，使用这种传统的方式引入的话会自动成为 Vue 的插件</li><li>因此需要去掉 <code>Vue.use(xxx)</code></li><li>可以使用下面的代码来进行兼容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>Vuex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 没有使用传统的方式引入Vuex</span>
  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// router.js</span>
<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>VueRouter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 没有使用传统的方式引入VueRouter</span>
  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启用现代模式" tabindex="-1"><a class="header-anchor" href="#_3-启用现代模式" aria-hidden="true">#</a> 3.启用现代模式</h3><ul><li>为了兼容各种浏览器， vue-cli 在内部使用了 <code>@babel/present-env</code> 对代码进行降级</li><li>可以通过 <code>.browserlistrc</code> 配置来设置需要兼容的目标浏览器</li><li>这是一种比较偷懒的办法，因为对于那些使用现代浏览器的用户，也被迫使用了降级之后的代码</li><li>而降低的代码中包含了大量的 <code>polyfill</code>，从而提升了包的体积</li><li>因此，希望提供两种打包结果 <ul><li>降级后的包（大），提供给旧浏览器用户使用</li><li>未降级的包（小），提供给现代浏览器用户使用</li></ul></li><li>除了应用 webpack 进行多次打包外，还可以利用 vue-cli 提供的命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vue-cli-service build <span class="token parameter variable">--modern</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-优化项目包体积-——-页面分包" tabindex="-1"><a class="header-anchor" href="#_4-优化项目包体积-——-页面分包" aria-hidden="true">#</a> 4.优化项目包体积 —— 页面分包</h3><ul><li>项目包是指 src 目录中的打包结果</li><li>默认情况下，vue-cli 会利用 webpack 将 src 目录中的所有代码打包成一个 <code>bundle</code></li><li>导致访问一个页面时，需要加载所有页面的 js 代码</li><li>可以利用 webpack 对 动态 import 的支持，从而把不同页面的代码打包到不同文件中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Home&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;home&quot; */</span> <span class="token string">&quot;@/views/Home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;About&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="token string">&quot;@/views/About&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-优化首屏响应" tabindex="-1"><a class="header-anchor" href="#_5-优化首屏响应" aria-hidden="true">#</a> 5.优化首屏响应</h3><ul><li>首页白屏受很多因素的影响</li><li>vue 页面需要通过 js 构建</li><li>因此在 js 下载到本地之前，页面上什么也没有</li><li>一个非常简单有效的办法，即在页面中先渲染一个小的加载中效果 <ul><li>等到 js 下载到本地并运行后，即会自动替换</li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading.gif<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四十-异步组件" tabindex="-1"><a class="header-anchor" href="#四十-异步组件" aria-hidden="true">#</a> （四十）异步组件</h2><ul><li>在代码层面，vue 组件本质上是一个配置对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>有的时候，要得到某个组件配置对象需要一个异步的加载过程 <ul><li>需要使用 ajax 获得某个数据之后才能加载该组件</li><li>为了合理的分包，组件配置对象需要通过 <code>import(xxx)</code> 动态加载</li></ul></li></ul><h3 id="_1-本质" tabindex="-1"><a class="header-anchor" href="#_1-本质" aria-hidden="true">#</a> 1.本质</h3><ul><li>如果一个组件 <mark>需要通过异步的方式得到组件配置对象</mark> ，该组件可以做成一个异步组件</li><li>异步组件本质上是一个函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 该函数调用后返回一个Promise
 * Promise成功的结果是一个组件配置对象
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">AsyncComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./MyComp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 可以把该函数当做一个组件使用（异步组件）
     * Vue会调用该函数，并等待Promise完成，完成之前该组件位置什么也不渲染
     */</span>
    AsyncComponent<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),ja={class:"hint-container tip"},Va=n("p",{class:"hint-container-title"},"提示",-1),Ca=n("li",null,"异步组件的函数不仅可以返回一个 Promise，还支持返回一个对象",-1),Ta={href:"https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%A4%84%E7%90%86%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81",target:"_blank",rel:"noopener noreferrer"},Ea=n("h3",{id:"_2-应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-应用","aria-hidden":"true"},"#"),a(" 2.应用")],-1),za=n("li",null,[a("异步组件通常应用在 "),n("mark",null,"路由懒加载"),a(" 中，以达到更好的分包")],-1),Sa=n("li",null,"为了提高用户体验，可以在组件配置对象加载完成之前给用户显示一些提示信息",-1),Ja={href:"https://github.com/rstacruz/nprogress",target:"_blank",rel:"noopener noreferrer"},Ma=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;组件开始加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> HomeComp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./Views/Home.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;组件加载完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> HomeComp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四十一-补充-无数据的显示" tabindex="-1"><a class="header-anchor" href="#四十一-补充-无数据的显示" aria-hidden="true">#</a> （四十一）补充：无数据的显示</h2><h2 id="四十二-补充-404-页面" tabindex="-1"><a class="header-anchor" href="#四十二-补充-404-页面" aria-hidden="true">#</a> （四十二）补充：404 页面</h2>`,3);function La(Ba,Xa){const t=o("ExternalLinkIcon"),p=o("Mermaid");return r(),d("div",null,[xn,n("blockquote",null,[n("p",null,[a("Vue 官网："),n("a",qn,[a("https://cn.vuejs.org/"),s(t)])])]),wn,s(p,{id:"mermaid-11",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2Wk/m9P7tGshkGOlkFFSUmClr59SWpmpl5yfq5+XWl7M5ZdfkqpQlJmeUaKQn6aApPr57pYXi1tfLtz6cu4iDYj489Xrn+3Y9Gz+ZE0uuEKgHbpwC60Unq7reTZ1C0QXFwCvGVFM"}),jn,s(p,{id:"mermaid-15",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T2b0/u0ayGQbaWQUVJSYKWvn1JamamXnJ+rn5daXswFlwephemzUng2fcHTttan63Y+n9WSUZKbw5WYXJJZlliSqgBXhGQNqj2JWYkVSOaiGvx0Qsvz5b1PdswCyj6buuFZ7zouv3ygsTmpaSUK+WkI460UXuyf8GJhT1bx+z09TztmP92962lr8/MtC4DcZzs2PZs/+eXCrS/nLuJKScXiNgCMDJfe"}),Vn,s(p,{id:"mermaid-19",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T2b0/u0ayGQbaWQUVJSYKWvn1JamamXnJ+rn5daXswFlwephemzUng2fcHTttan63Y+n9WSUZKbw5WYXJJZlliSqgBXxOWXD+TmpKaVKOSnIYStFF7sn/BiYU9W8fs9PU87Zj/dvetpa/PzLQuA3Gc7Nj2bP/nlwq0v5y5CciWqMxOzEiuQnIXqrqcTWp4v732yYxZQ9tnUDc961+F2xvbNL/auoZNlXsEv23ufTdvwbF4L0MMQSyHe5kpJxRJ2ALm88zc="}),Cn,s(p,{id:"mermaid-23",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T2b0/u0ayGQbaWQUVJSYKWvn1JamamXnJ+rn5daXswFlwephemzUng2fcHTttan63Y+n9WSUZKbw5WYXJJZlliSqgBXxOWXD+TmpKaVKOSnIYStFF7sn/BiYc/TntanE1aXlaYCTcgqfr+n58ne/c+nrHi2sO3ZvG3Pdmx6Nn/yy4VbX85dhORcVPcmZiVWILkP1YFPJ7Q8X977ZMcsoOyzqRue9a7D6R6IxUCX6Bbll5akFr3YvvnF3jVQy1NSsfgMAPkYuj4="}),Tn,n("blockquote",null,[n("p",null,[a("vue-cli: "),n("a",En,[a("https://cli.vuejs.org/zh/"),s(t)])])]),zn,n("ul",null,[n("li",null,[n("a",Sn,[a("https://cli.vuejs.org/zh/guide/prototyping.html"),s(t)])])]),Jn,n("blockquote",null,[n("p",null,[a("vue-router 官网："),n("a",Mn,[a("https://router.vuejs.org/zh/"),s(t)])])]),Ln,n("blockquote",null,[n("p",null,[a("vue cli: "),n("a",Bn,[a("https://cli.vuejs.org/zh/"),s(t)])]),Xn,n("p",null,[a("axios: "),n("a",An,[a("https://github.com/axios/axios"),s(t)])]),Nn,n("p",null,[a("mockjs："),n("a",Pn,[a("http://mockjs.com/"),s(t)])])]),Dn,s(p,{id:"mermaid-2428",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T3t7H2+ev3TPQ1P+yc+m9P7tGshUNxKIaOkpMBKXz8nPzkxJyO/uMTKwsDCQJ8Lq2qgKXATrRReLtz6cu4iVDsm9AF1Pdva/WL9VCQ7ErMSKxRebF/xdP7893tmQW0sSS0u0U1JLEm0MjYwMNBPLMjUz0stL+bCagaqzV7B/n7Ppm541ruOqyg1uUShKD1Jw8jIRMcchDS5/PJLUhWKMtMzShTy0xSQ9MGZL2fsfrZ2EcSI58t3P9m1hCs1L4ULABQzqKY="}),Wn,s(p,{id:"mermaid-2432",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T2b0/u0ayGQbaWQUVJSYKWvX15erpdbqVucWZKql5yfq88FVwJSDtNqpfBy4daXcxfhMiwxK7Hi/Z5ZOMxMLMjUz0stL8Zltlewv9+zqRue9a7jAgDYoV6X"}),s(p,{id:"mermaid-2433",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2b2cO/NZQ+OLrS3Pdk14Nqf3addCoLiVQkZJSYGVvn55eblebqVucWZJql5yfq4+F1blQGPgRlopvFy49eXcRSiWPJu64VnvOiTjE7MSKxRebF/xdP7893tmQS1LLMhEsQzI189LLS/mQtOOal3009bGF+t2oLk01ivY3w+ijwsAQVmG9Q=="}),Qn,s(p,{id:"mermaid-2437",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T3t7H2+ev3TPQ1P+yc+m9P7tGshUNxKIaOkpMBKXz8nPzkxJyO/uMTKwsDCQJ8Lq2qgKXATrRReLtz6cu4iYuxIzEqseL9nFnarEgsy9fNSy4txWvl0Qh9Q/NnW7hfrpyIZ+mT34ucT2l6s3/5sYxPC8JLU4hLdlMSSRCtjAwNkw7EZgtvFXsH+fs+mbnjWu46YkEBSDQDJStX1"}),Rn,s(p,{id:"mermaid-2441",code:"eJwrTi0sTc1LTnXJTEwvSszlera1/8XyjqczV+ja2T3t7H2+ev3TPQ1P+yc+m9P7tGshUNxKIaOkpMBKXz8nPzkxJyO/uMTKwsDCQJ8Lq2qgKXATrRReLtz6cu4iYuxIzEqseL9nFnarEgsy9fNSy4txWvl0Qh9Q/NnW7hfrpyIZ+mT34ucT2l6s3/5sYxPC8JLU4hLdlMSSRCtjAwNkw7EZgtvFJgYmCu/3dEB1rV38dM4KiJonO9a+39NJTPAAjeACACZX37I="}),s(p,{id:"mermaid-2442",code:"eJwrTi0sTc1LTnXJTEwvSszlKkgsKslMzixIzCtReLa1/8XyjqczV6CI+uYnZ3sFowg97ex9vnr90z0NT/snPpvT+7RrIUhTYnJJZlliSSpMh18+kJ2TmlaikJ8GFbNSeLpu1pOdnYlZiRXPupc961j1YnnL046ZXCmp6LrhjtG1s8Nqn5VCRklJgZW+fk5+cmJORn5xiZWFgYWBPhdW1UBT4CZaKbxcuPXl3EUodsAcCHLa+z2zsJudWJCpn5daXswFUY1q6LMVC591z38+q8Ur2N/v2dQNz3rXcQEAGJiyVg=="}),On,n("blockquote",null,[n("p",null,[n("a",$n,[a("查看更多的钩子函数"),s(t)])])]),Fn,n("blockquote",null,[n("p",null,[n("a",Yn,[a("查看更多 binding 对象的属性"),s(t)])])]),Zn,n("blockquote",null,[n("p",null,[a("更多的自定义指令用法见 "),n("a",Kn,[a("官网"),s(t)])])]),Un,n("blockquote",null,[n("p",null,[a("更多细节参见 "),n("a",In,[a("官网"),s(t)])])]),Hn,n("ul",null,[Gn,n("li",null,[a("对于文章中脚本部分的样式 "),n("ul",null,[n("li",null,[a("可以使用第三方库 "),n("a",na,[a("highlight.js"),s(t)]),a(" 中提供的样式")])])])]),aa,n("ul",null,[sa,ta,n("li",null,[a("详见："),n("a",ea,[a("事件修饰符、按键修饰符、系统修饰符"),s(t)])])]),pa,n("ul",null,[la,oa,n("li",null,[a("详见："),n("a",ia,[a("表单输入绑定"),s(t)])])]),ca,n("ul",null,[n("li",null,[n("a",ua,[a("watch 配置"),s(t)])]),n("li",null,[n("a",ra,[a("Vue.prototype.$watch"),s(t)])])]),da,n("ul",null,[n("li",null,[n("a",ka,[a("mapState"),s(t)])]),n("li",null,[n("a",va,[a("getters"),s(t)])]),n("li",null,[n("a",ma,[a("mapGetters"),s(t)])]),n("li",null,[n("a",ha,[a("modules"),s(t)])]),n("li",null,[n("a",ba,[a("watch"),s(t)])])]),ga,n("ul",null,[n("li",null,[n("a",_a,[a("exact-path"),s(t)])]),n("li",null,[n("a",ya,[a("导航守卫"),s(t)])])]),fa,n("ul",null,[xa,n("li",null,[a("如："),n("a",qa,[a("bootcdn"),s(t)])])]),wa,n("div",ja,[Va,n("ul",null,[Ca,n("li",null,[a("详见："),n("a",Ta,[a("返回对象格式的异步组件"),s(t)])])])]),Ea,n("ul",null,[za,Sa,n("li",null,[a("推荐使用 "),n("a",Ja,[a("NProgress"),s(t)]),a(" 展现一个进度条")])]),Ma])}const Pa=u(fn,[["render",La],["__file","02.html.vue"]]);export{Pa as default};
