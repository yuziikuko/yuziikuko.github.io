import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as d}from"./app-1240ea23.js";const l={},r=d('<h2 id="一-虚拟-dom-中-key-的作用" tabindex="-1"><a class="header-anchor" href="#一-虚拟-dom-中-key-的作用" aria-hidden="true">#</a> （一）虚拟 DOM 中 key 的作用</h2><ul><li>key 是虚拟 DOM 对象的标识</li><li>当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】</li><li>随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较</li></ul><h2 id="二-对比规则" tabindex="-1"><a class="header-anchor" href="#二-对比规则" aria-hidden="true">#</a> （二）对比规则</h2><h3 id="_1-旧虚拟-dom-中找到了与新虚拟-dom-相同的-key" tabindex="-1"><a class="header-anchor" href="#_1-旧虚拟-dom-中找到了与新虚拟-dom-相同的-key" aria-hidden="true">#</a> 1.旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key</h3><ul><li>若虚拟 DOM 中内容没变，直接使用之前的真实 DOM</li><li>若虚拟 DOM 中内容改变，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM</li></ul><h3 id="_2-旧虚拟-dom-中未找到与新虚拟-dom-相同的-key" tabindex="-1"><a class="header-anchor" href="#_2-旧虚拟-dom-中未找到与新虚拟-dom-相同的-key" aria-hidden="true">#</a> 2.旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key</h3><ul><li>创建新的真实 DOM，随后渲染到页面中</li></ul><h2 id="三-用-index-作为-key-可能会引发的问题" tabindex="-1"><a class="header-anchor" href="#三-用-index-作为-key-可能会引发的问题" aria-hidden="true">#</a> （三）用 index 作为 key 可能会引发的问题</h2><h3 id="_1-若对数据进行逆序添加、逆序删除等破坏顺序的操作" tabindex="-1"><a class="header-anchor" href="#_1-若对数据进行逆序添加、逆序删除等破坏顺序的操作" aria-hidden="true">#</a> 1.若对数据进行逆序添加、逆序删除等破坏顺序的操作</h3><ul><li>会产生没有必要的真实 DOM 更新</li><li>页面效果没问题，但效率低</li></ul><h3 id="_2-如果结构中还包含输入类的-dom" tabindex="-1"><a class="header-anchor" href="#_2-如果结构中还包含输入类的-dom" aria-hidden="true">#</a> 2.如果结构中还包含输入类的 DOM</h3><ul><li>会产生错误的真实 DOM 更新</li><li>页面效果有问题</li></ul><h2 id="四-开发中如何选择-key" tabindex="-1"><a class="header-anchor" href="#四-开发中如何选择-key" aria-hidden="true">#</a> （四）开发中如何选择 key</h2><ul><li>最好使用每条数据的唯一标识作为 key <ul><li>比如 id、手机号、身份证号、学号等唯一值</li></ul></li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作 <ul><li>仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的</li></ul></li></ul>',14),h=[r];function n(o,t){return a(),i("div",null,h)}const s=e(l,[["render",n],["__file","13.html.vue"]]);export{s as default};
