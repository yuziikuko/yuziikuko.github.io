import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e}from"./app-c2ac5f7e.js";const t="/assets/原型和原型链-e799bc30.png",o={},p=e(`<h2 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1.基本使用</h2><h3 id="_1-vue-中使用组件的三大步骤" tabindex="-1"><a class="header-anchor" href="#_1-vue-中使用组件的三大步骤" aria-hidden="true">#</a> 1）Vue 中使用组件的三大步骤</h3><ul><li><p>定义组件（创建组件）。</p></li><li><p>注册组件。</p></li><li><p>使用组件（写组件标签）。</p></li></ul><h3 id="_2-如何定义一个组件" tabindex="-1"><a class="header-anchor" href="#_2-如何定义一个组件" aria-hidden="true">#</a> 2）如何定义一个组件</h3><p>使用<code>Vue.extend(options)</code>创建，其中 options 和<code>new Vue(options)</code>时传入的那个 options 几乎一样，但也有点区别：</p><ul><li><p>el 不要写。</p><ul><li>最终所有的组件都要经过一个 vm 的管理，由 vm 中的 el 决定服务哪个容器。</li></ul></li><li><p>data 必须写成函数。</p><ul><li>避免组件被复用时，数据存在引用关系。</li></ul></li></ul><p>使用 template 可以配置组件结构。</p><h3 id="_3-如何注册组件" tabindex="-1"><a class="header-anchor" href="#_3-如何注册组件" aria-hidden="true">#</a> 3）如何注册组件</h3><ul><li><p>局部注册：<code>new Vue({})</code>时传入 components 配置项。</p></li><li><p>全局注册：<code>Vue.component(&#39;组件名&#39;, 组件)</code></p></li></ul><h3 id="_4-编写组件标签" tabindex="-1"><a class="header-anchor" href="#_4-编写组件标签" aria-hidden="true">#</a> 4）编写组件标签</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-几个注意点" tabindex="-1"><a class="header-anchor" href="#_2-几个注意点" aria-hidden="true">#</a> 2.几个注意点</h2><h3 id="_1-关于组件名" tabindex="-1"><a class="header-anchor" href="#_1-关于组件名" aria-hidden="true">#</a> 1）关于组件名</h3><ul><li><p>一个单词组成：</p><ul><li><p>写法一：首字母小写——school</p></li><li><p>写法二：首字母大写——School</p></li></ul></li><li><p>多个单词组成：</p><ul><li><p>写法一：kebab-case 命名——my-school</p></li><li><p>写法二：CamelCase 命名——MySchool【需要 Vue 脚手架支持】</p></li></ul></li><li><p>备注：</p><ul><li><p>组件名尽可能回避 HTML 中已有的元素名称，例如：h2、H2 都不行。</p></li><li><p>可以使用 name 配置项指定组件在开发者工具中呈现的名字。</p></li></ul></li></ul><h3 id="_2-关于组件标签" tabindex="-1"><a class="header-anchor" href="#_2-关于组件标签" aria-hidden="true">#</a> 2）关于组件标签</h3><ul><li><p>写法一：<code>&lt;school&gt;&lt;/school&gt;</code></p></li><li><p>写法二：<code>&lt;school/&gt;</code></p></li><li><p>备注：不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染，即只渲染一次。</p></li></ul><h3 id="_3-一个简写方式" tabindex="-1"><a class="header-anchor" href="#_3-一个简写方式" aria-hidden="true">#</a> 3）一个简写方式</h3><p><code>const school = Vue.extent(options)</code> 可简写为：<code>const school = options</code>。</p><h2 id="_3-vuecomponent" tabindex="-1"><a class="header-anchor" href="#_3-vuecomponent" aria-hidden="true">#</a> 3.VueComponent</h2><ul><li><p>school 组件本质是一个 VueComponent 的构造函数，且不是程序员定义的，是<code>Vue.extend</code>生成的。</p></li><li><p>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue 解析时会帮我们创建 school 组件的实例对象，即：Vue 帮我们执行了——<code>new VueComponent(options)</code>。</p></li></ul><div class="hint-container danger"><p class="hint-container-title">特别注意</p><p>每次调用<code>Vue.extend</code>，返回的都是一个全新的 VueComponent！！！</p></div><ul><li><p>关于 this 指向：</p><ul><li><p>组件配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数，他们的 this 都是【<strong>VueComponent 实例对象</strong>】</p></li><li><p><code>new Vue(options)</code>配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数，他们的 this 都是【<strong>Vue 实例对象</strong>】。</p></li></ul></li><li><p>VueComponent 的实例对象，简称 vc（也可称为组件实例对象）</p></li><li><p>Vue 的实例对象，简称 vm。</p></li></ul><h2 id="_4-一个重要的内置关系" tabindex="-1"><a class="header-anchor" href="#_4-一个重要的内置关系" aria-hidden="true">#</a> 4.一个重要的内置关系</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">VueComponent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作用：让组件实例对象（vc）可以访问到 Vue 原型上的属性、方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>实例的原型对象（vm<span class="token punctuation">.</span>__proto__）永远指向自己缔造者的原型对象（Vue<span class="token punctuation">.</span>__proto__）。
<span class="token number">1.</span><span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token parameter">prototype</span> <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> <span class="token keyword">null</span>
<span class="token number">2.</span><span class="token function">Vue的实例对象</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> <span class="token keyword">null</span>
<span class="token number">3.</span><span class="token class-name">VueComponent</span><span class="token punctuation">.</span><span class="token parameter">prototype</span> <span class="token operator">=&gt;</span> VueComponent的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> <span class="token keyword">null</span>
<span class="token number">4.</span><span class="token function">VueComponent的实例对象</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> VueComponent的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Vue的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> Object的原型对象<span class="token punctuation">.</span><span class="token parameter">__proto__</span> <span class="token operator">=&gt;</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt=""></p>',27),l=[p];function c(i,r){return n(),s("div",null,l)}const h=a(o,[["render",c],["__file","21.html.vue"]]);export{h as default};
