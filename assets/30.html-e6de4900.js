import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as t}from"./app-ec5d5d22.js";const x={},i=t('<h2 id="_1-存储大小" tabindex="-1"><a class="header-anchor" href="#_1-存储大小" aria-hidden="true">#</a> 1.存储大小</h2><p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）。</p><h2 id="_2-实现机制" tabindex="-1"><a class="header-anchor" href="#_2-实现机制" aria-hidden="true">#</a> 2.实现机制</h2><p>浏览器端通过<code>Window.sessionStorage</code>和<code>Window.localStorage</code>属性来实现本地存储机制。</p><h2 id="_3-相关-api" tabindex="-1"><a class="header-anchor" href="#_3-相关-api" aria-hidden="true">#</a> 3.相关 API</h2><h3 id="_1-xxxxstorage-setitem-key-value" tabindex="-1"><a class="header-anchor" href="#_1-xxxxstorage-setitem-key-value" aria-hidden="true">#</a> 1）xxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</h3><p>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p><h3 id="_2-xxxxstorage-getitem-person" tabindex="-1"><a class="header-anchor" href="#_2-xxxxstorage-getitem-person" aria-hidden="true">#</a> 2）xxxxStorage.getItem(&#39;person&#39;);</h3><p>该方法接受一个键名作为参数，返回键名对应的值。</p><h3 id="_3-xxxxstorage-removeitem-key" tabindex="-1"><a class="header-anchor" href="#_3-xxxxstorage-removeitem-key" aria-hidden="true">#</a> 3）xxxxStorage.removeItem(&#39;key&#39;);</h3><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p><h3 id="_4-xxxxstorage-clear" tabindex="-1"><a class="header-anchor" href="#_4-xxxxstorage-clear" aria-hidden="true">#</a> 4）xxxxStorage.clear();</h3><p>该方法会清空存储中的所有数据。</p><h2 id="_4-备注" tabindex="-1"><a class="header-anchor" href="#_4-备注" aria-hidden="true">#</a> 4.备注</h2><ul><li><p>SessionStorage 存储的内容，会随着浏览器窗口关闭而消失。</p></li><li><p>LocalStorage 存储的内容，需要手动清除才会消失。</p></li><li><p>xxxxStorage.getItem(&#39;xxx&#39;)：如果对应的 value 获取不到，那么 getItem 的返回值是 null。</p></li><li><p>JSON.parse(null)的结果依然是 null。</p></li></ul>',15),o=[i];function d(h,s){return a(),r("div",null,o)}const c=e(x,[["render",d],["__file","30.html.vue"]]);export{c as default};
