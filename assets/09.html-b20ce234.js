import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as n,b as s,d as i,e as l}from"./app-8f2176dc.js";const c="/assets/JS收官01-b8aa97b3.png",u="/assets/JS收官02-92434066.png",r="/assets/JS收官03-2204e256.png",d="/assets/JS收官04-dedb44ba.png",k="/assets/JS收官05-378d5ea8.png",v="/assets/JS收官06-ce10482d.png",m={},b=n("h2",{id:"一-环境搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-环境搭建","aria-hidden":"true"},"#"),s(" （一）环境搭建")],-1),h=n("h3",{id:"_1-安装-node",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-安装-node","aria-hidden":"true"},"#"),s(" 1.安装 node")],-1),g={href:"https://nodejs.org/zh-cn",target:"_blank",rel:"noopener noreferrer"},y=l(`<h3 id="_2-测试安装" tabindex="-1"><a class="header-anchor" href="#_2-测试安装" aria-hidden="true">#</a> 2.测试安装</h3><ul><li>命令终端中输入</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-运行-js-代码" tabindex="-1"><a class="header-anchor" href="#_3-运行-js-代码" aria-hidden="true">#</a> 3.运行 JS 代码</h3><ul><li>命令终端中进入 js 文件所在目录</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token punctuation">[</span>js文件名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-使用-code-runner-插件" tabindex="-1"><a class="header-anchor" href="#_4-使用-code-runner-插件" aria-hidden="true">#</a> 4.使用 code runner 插件</h3><ul><li>VS Code 安装 code runner 插件</li></ul><h2 id="二-知识回顾" tabindex="-1"><a class="header-anchor" href="#二-知识回顾" aria-hidden="true">#</a> （二）知识回顾</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>声明式语言：HTML、CSS、SQL</p><p>命令式语言：C、C++、C#、PHP、Python、Java、JavaScript</p></div><h3 id="_1-数据的表达" tabindex="-1"><a class="header-anchor" href="#_1-数据的表达" aria-hidden="true">#</a> 1.数据的表达</h3><ul><li>JS 本质是在 <strong>处理数据</strong></li><li>提供了三种方式来表达一个数据 <ul><li>变量</li><li>字面量</li><li>表达式</li></ul></li><li><strong>程序中任何需要数据的地方，都可以使用上面任意一种数据表达</strong></li></ul><h4 id="_1-标识符" tabindex="-1"><a class="header-anchor" href="#_1-标识符" aria-hidden="true">#</a> 1）标识符</h4><ul><li>程序中可以自行命名的地方，称为标识符</li><li>常见的标识符： <ul><li>变量名</li><li>函数名</li><li>参数名</li></ul></li><li>必须符合以下规则： <ul><li>允许数字、字母、下划线、$符号</li><li>不得以数字开头</li><li>不能和关键字冲突</li><li>建议使用驼峰命名法</li></ul></li><li>一个完整的程序中，会涉及成百上千的标识符，好的名称不仅可以减少名称冲突，更有利于程序的阅读和维护。 <ul><li>名称要做到 <strong>望文知意</strong></li></ul></li></ul><h4 id="_2-转义符" tabindex="-1"><a class="header-anchor" href="#_2-转义符" aria-hidden="true">#</a> 2）转义符</h4><table><thead><tr><th>转义符</th><th>含义</th></tr></thead><tbody><tr><td><code>\\&#39;</code></td><td>普通英文单引号</td></tr><tr><td><code>\\&quot;</code></td><td>普通英文双引号</td></tr><tr><td><code>\\r</code></td><td>回车</td></tr><tr><td><code>\\n</code></td><td>换行</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">小技巧</p><p>常用 <code>\\r\\n</code> 表示换行</p></div><h4 id="_3-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据类型" aria-hidden="true">#</a> 3）数据类型</h4><ul><li>原始类型 <ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li></ul></li><li>引用类型 <ul><li>对象（包含普通对象、数组、函数）</li></ul></li></ul><h4 id="_4-对象的原始写法" tabindex="-1"><a class="header-anchor" href="#_4-对象的原始写法" aria-hidden="true">#</a> 4）对象的原始写法</h4><ul><li>对象的所有属性名都是 <strong>字符串</strong></li><li>使用单引号 <code>&#39;&#39;</code> 或 双引号 <code>&quot;&quot;</code> 包裹起来</li><li>当对象的属性名是 <strong>纯数字</strong> 或 <strong>符合标识符规范</strong> 时，可以省略引号 <ul><li>自动转换为字符串</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;邓哥&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;graduate date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2007-7-1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;home address&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;黑龙江&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;city&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">小贴士</p><p>书写代码时无须关注这些规则，直接按照简写方式书写属性</p><p>若编辑器出现报错，则使用 <code>&#39;&#39;</code>、<code>&quot;&quot;</code> 包裹属性名即可</p></div><ul><li>读取对象属性时，使用 <code>[]</code> ，把要读取的属性名传递到中括号中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 读取obj的name属性</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;home address&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 读取obj的home address属性</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;home address&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;province&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 读取obj的home address属性（对象）的province属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若属性符合标识符规范，可以使用 <code>.</code> 连接属性名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 读取obj的name属性</span>
obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// 读取obj的age属性</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;home address&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>province<span class="token punctuation">;</span> <span class="token comment">// 读取obj的home address属性（对象）的province属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-数组" tabindex="-1"><a class="header-anchor" href="#_5-数组" aria-hidden="true">#</a> 5）数组</h4><ul><li>用于表达多个同种类的数据</li><li>本质就是一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组的对象结构</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&#39;0&#39;</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;1&#39;</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;2&#39;</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>
  <span class="token string-property property">&#39;length&#39;</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据的运算" tabindex="-1"><a class="header-anchor" href="#_2-数据的运算" aria-hidden="true">#</a> 2.数据的运算</h3><h4 id="_1-运算符" tabindex="-1"><a class="header-anchor" href="#_1-运算符" aria-hidden="true">#</a> 1）运算符</h4><ul><li>算术（数学）运算 <ul><li>支持：加(+)、减(-)、乘(*)、除(/)、求余(%)</li><li><code>+</code> 和 <code>-</code> 可以放到单个数据的前面，表示正负</li><li>算术运算的表达式一定返回数字，可以利用其特点做类型转换</li></ul></li><li>字符串拼接 <ul><li>当 <code>+</code> 的两端有一个是字符串时，不再进行算术运算，而变为字符串拼接</li><li>表达式一定返回 string，可以利用其特点做类型转换</li></ul></li><li>赋值运算 <ul><li>涉及的运算符：<code>=</code> <code>+=</code> <code>*=</code> <code>/=</code> <code>-=</code> <code>%=</code>。</li><li><code>a += xxx</code> 等效于 <code>a = a + (xxx)</code> ，其他类似</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">小贴士</p><p>赋值表达式始终返回赋值结果，可以利用该特点完成连续赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将 3 同时赋值给 a、b</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>计算表达式的阶乘可以使用 <code>**</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li>比较运算 <ul><li>涉及的运算符：<code>==</code> <code>===</code> <code>!=</code> <code>!==</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">小贴士</p><p>在实际开发中，没有任何理由使用 <code>==</code> 和 <code>!=</code> ，可以当做这两个运算符并不存在</p><p>应该始终使用 <code>===</code> 和 <code>!==</code> 来比较相等和不相等</p><p>比较运算始终返回 boolean，可以利用这一点来完成某些赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 啰嗦的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">===</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简洁优雅的代码</span>
user<span class="token punctuation">.</span>isMale <span class="token operator">=</span> sex <span class="token operator">===</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><ul><li>逻辑运算 <ul><li>逻辑运算会涉及到布尔判定</li><li>运算符：<code>!</code><ul><li>对后面的数据取反，表达式一定返回 boolean</li><li>可以利用其特点做类型转换</li></ul></li><li>运算符：<code>&amp;&amp;</code><ul><li>并且，真真为真，其他为假，具有短路规则</li><li>表达式返回 <strong>最后一个判定的数据</strong></li></ul></li><li>运算符：<code>||</code><ul><li>或者，假假为假，其他为真，具有短路规则</li><li>表达式返回 <strong>最后一个判定的数据</strong></li></ul></li><li>运算符：<code>? :</code><ul><li>格式 <code>a ? b : c</code></li><li>三目运算，判定 a，为真时表达式返回 b，否则返回 c</li></ul></li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">小贴士</p><p>在实际的开发中，可以利用短路规则简化代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实现功能，如果exp有值（判定为真），就输出ok</span>

<span class="token comment">// 啰嗦的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简洁的代码</span>
exp <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实现功能，如果exp有值，就把它的值赋值给n，如果没有值，就给n赋值为默认值 1</span>

<span class="token comment">// 啰嗦的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> exp<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 简洁的代码</span>
n <span class="token operator">=</span> exp <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三目运算通常用于替代一些简单的 if 结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果exp为真，则把1赋值给n，否则，把2赋值给n</span>
<span class="token comment">// 啰嗦的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更简洁的代码</span>
n <span class="token operator">=</span> exp <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_2-布尔判定" tabindex="-1"><a class="header-anchor" href="#_2-布尔判定" aria-hidden="true">#</a> 2）布尔判定</h4><p>所有需要判断真假的地方都会使用下面的规则</p><table><thead><tr><th>数据</th><th>判定</th></tr></thead><tbody><tr><td><code>false</code></td><td>false</td></tr><tr><td><code>null</code></td><td>false</td></tr><tr><td><code>undefined</code></td><td>false</td></tr><tr><td><code>0</code></td><td>false</td></tr><tr><td><code>NaN</code></td><td>false</td></tr><tr><td><code>&#39;&#39;</code></td><td>false</td></tr><tr><td>剩余所有数据</td><td>true</td></tr></tbody></table><h4 id="_3-类型的隐式转换" tabindex="-1"><a class="header-anchor" href="#_3-类型的隐式转换" aria-hidden="true">#</a> 3）类型的隐式转换</h4><ul><li>每个运算符都有自己期望的数据 <ul><li>比如 <code>*</code> 期望两端都是数字</li></ul></li><li>一旦数据不符合运算符的期望，js 就会悄悄的对数据进行类型转换，把它转换成期望的值后进行运算</li><li>这种转换是 <em>临时</em> 的，并不会对原数据造成影响</li></ul><div class="hint-container tip"><p class="hint-container-title">小贴士</p><p>在实际的开发中，可以利用类型的隐式转换完成以下功能：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token operator">+</span>a<span class="token punctuation">;</span> <span class="token comment">// 不管a是啥，都会被转换成数字，保存到n中</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不管a是啥，都会被转换成字符串，保存到s中</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">;</span> <span class="token comment">// 不管a是啥，都会被转换成boolean，保存到b中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_3-数据的流程" tabindex="-1"><a class="header-anchor" href="#_3-数据的流程" aria-hidden="true">#</a> 3.数据的流程</h3><h4 id="_1-for-in" tabindex="-1"><a class="header-anchor" href="#_1-for-in" aria-hidden="true">#</a> 1）for...in</h4><ul><li>遍历键值对的键</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-for-of" tabindex="-1"><a class="header-anchor" href="#_2-for-of" aria-hidden="true">#</a> 2）for...of</h4><ul><li>遍历键值对的值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-流程的切割" tabindex="-1"><a class="header-anchor" href="#_4-流程的切割" aria-hidden="true">#</a> 4.流程的切割</h3><h4 id="_1-函数的作用" tabindex="-1"><a class="header-anchor" href="#_1-函数的作用" aria-hidden="true">#</a> 1）函数的作用</h4><ul><li>使用函数切割流程 <ul><li>可以减少重复代码</li><li>可以有效的降低整体复杂度</li></ul></li></ul><p><img src="`+c+'" alt=""></p><h4 id="_2-如何理解函数的参数、返回值、函数体" tabindex="-1"><a class="header-anchor" href="#_2-如何理解函数的参数、返回值、函数体" aria-hidden="true">#</a> 2）如何理解函数的参数、返回值、函数体？</h4><ul><li>参数：表示完成流程所需的 <strong>必要信息</strong></li><li>返回值：表示完成流程后 <strong>产生的结果</strong></li><li>函数体：表示具体的流程</li></ul><p><img src="'+u+`" alt=""></p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>函数的参数、返回值只取决于 <strong>函数的作用</strong> ，与函数体无关</p></div><h4 id="_3-为什么我觉得有了函数之后-程序反而变得更复杂了" tabindex="-1"><a class="header-anchor" href="#_3-为什么我觉得有了函数之后-程序反而变得更复杂了" aria-hidden="true">#</a> 3）为什么我觉得有了函数之后，程序反而变得更复杂了？</h4><ul><li>函数的核心作用，是为了让某一段复杂的流程变得简单 <ul><li>如果在函数的帮助下，反而觉得流程变得复杂了，极有可能的原因是开发思想没有做相应的切割，导致思想负担过重</li></ul></li><li>函数具有三要素 <ul><li>函数名</li><li>参数</li><li>返回值</li></ul></li><li>只要具备三要素，就能书写函数体、完成函数调用</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>始终记住以下两点：</p><ol><li><p>定义函数时，只需要考虑这个函数如何实现即可，完全不需要考虑其他无关的东西</p></li><li><p>调用函数时，只需要考虑向其传递什么参数，如何使用它的返回结果，完全无需考虑函数的具体实现</p></li></ol></div><h4 id="_4-学习函数时不知道该如何切割流程怎么办" tabindex="-1"><a class="header-anchor" href="#_4-学习函数时不知道该如何切割流程怎么办" aria-hidden="true">#</a> 4）学习函数时不知道该如何切割流程怎么办？</h4><ul><li>要完成一个函数声明，分为两步： <ul><li>设计函数 <ul><li>设计函数就是如何切割流程，具体来说就是设计出函数的三要素</li></ul></li><li>书写函数体 <ul><li>根据设计的三要素完成函数体</li></ul></li></ul></li></ul><h2 id="三-核心概念" tabindex="-1"><a class="header-anchor" href="#三-核心概念" aria-hidden="true">#</a> （三）核心概念</h2><h3 id="_1-数据的存储和传递" tabindex="-1"><a class="header-anchor" href="#_1-数据的存储和传递" aria-hidden="true">#</a> 1.数据的存储和传递</h3><ul><li>原始值 <ul><li>存储的是值</li><li>存储在栈内存中</li></ul></li><li>引用值 <ul><li>存储的是地址</li><li>存储在堆内存中</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Lucy&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">province</span><span class="token operator">:</span> <span class="token string">&quot;Guangdong&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;Shenzhen&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;看番&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;听歌&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><ul><li>给形参赋值，对函数外部的实参无任何影响</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
  a <span class="token operator">=</span> b<span class="token punctuation">;</span>
  b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入的两个参数不变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> keys</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  obj <span class="token operator">=</span> newObj<span class="token punctuation">;</span> <span class="token comment">// 原 obj 实参不变</span>
  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 原 obj 实参改变</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token function">swap</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入的 obj 不变</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据的作用域" tabindex="-1"><a class="header-anchor" href="#_2-数据的作用域" aria-hidden="true">#</a> 2.数据的作用域</h3><ul><li>JS 有两种作用域 <ul><li>全局作用域</li><li>函数作用域</li></ul></li><li>内部的作用域能访问外部，反之不行 <ul><li>访问时 <strong>从内向外</strong> 依次查找</li><li>如果在内部的作用域中访问了外部，则会产生闭包</li><li>内部作用域能访问的外部，取决于函数定义的位置，和调用的位置无关</li></ul></li><li>作用域内定义的变量、函数声明会提升到 <strong>作用域</strong> 顶部</li></ul><h3 id="_3-全局对象" tabindex="-1"><a class="header-anchor" href="#_3-全局对象" aria-hidden="true">#</a> 3.全局对象</h3><h4 id="_1-无论是浏览器环境-还是-node-环境-都会提供一个全局对象" tabindex="-1"><a class="header-anchor" href="#_1-无论是浏览器环境-还是-node-环境-都会提供一个全局对象" aria-hidden="true">#</a> 1）无论是浏览器环境，还是 node 环境，都会提供一个全局对象</h4><ul><li>浏览器环境：window</li><li>node 环境：global</li></ul><h4 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2）特点</h4><ul><li>全局对象的属性可以被直接访问</li><li>给未声明的变量赋值，实际就是给全局对象的属性赋值</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>历史遗留问题</p><p>永远别这么干</p></div><ul><li>所有的全局变量、全局函数都会附加到全局对象</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这称之为全局污染，又称之为全局暴露，或简称污染、暴露</p><p>如果要避免污染，需要使用 <strong>立即执行函数</strong> 改变其作用域</p><p>立即执行函数又称之为 <code>IIFE</code> ，它的全称是 Immediately Invoked Function Expression</p><p><strong>IIFE 通常用于强行改变作用域</strong></p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.js</span>
<span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 避免污染</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 避免污染</span>
  <span class="token comment">// 暴露为：sayHi</span>
  <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 暴露为：count</span>
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sayHi</span><span class="token operator">:</span> hello<span class="token punctuation">,</span>
    count<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 避免污染</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 避免污染</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 1.js 暴露的函数和变量</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
one<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-构造函数" tabindex="-1"><a class="header-anchor" href="#_4-构造函数" aria-hidden="true">#</a> 4.构造函数</h3><div class="hint-container danger"><p class="hint-container-title">重要</p><p>JS 所有的对象，都是通过构造函数产生的</p></div><h4 id="_1-对象" tabindex="-1"><a class="header-anchor" href="#_1-对象" aria-hidden="true">#</a> 1）对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 语法糖</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空对象</span>
obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数组" tabindex="-1"><a class="header-anchor" href="#_2-数组" aria-hidden="true">#</a> 2）数组</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 语法糖</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-函数" tabindex="-1"><a class="header-anchor" href="#_3-函数" aria-hidden="true">#</a> 3）函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 语法糖</span>
<span class="token keyword">function</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> sum2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;return a+b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个函数</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-原型" tabindex="-1"><a class="header-anchor" href="#_5-原型" aria-hidden="true">#</a> 5.原型</h3><h4 id="_1-原型要解决的问题" tabindex="-1"><a class="header-anchor" href="#_1-原型要解决的问题" aria-hidden="true">#</a> 1）原型要解决的问题</h4><p><img src="`+d+'" alt=""></p><ul><li>上图中，通过构造函数可以创建一个用户对象</li><li>这种做法有一个严重的缺陷 <ul><li>每个用户对象中都拥有一个 <code>sayHi</code> 方法</li><li>对于每个用户而言，<code>sayHi</code> 方法是完全一样的</li><li>没必要为每个用户单独生成一个</li></ul></li><li>要解决这个问题，必须使用原型</li></ul><h4 id="_2-原型是如何解决的" tabindex="-1"><a class="header-anchor" href="#_2-原型是如何解决的" aria-hidden="true">#</a> 2）原型是如何解决的</h4><p><img src="'+k+'" alt=""></p><ul><li>原型 <ul><li>每个函数都会自动附带一个属性 <code>prototype</code></li><li>这个属性的值是一个普通对象，称之为原型对象</li></ul></li><li>实例 <ul><li>instance，通过 <code>new</code> 产生的对象称之为实例</li><li>JS 中所有对象都是通过 <code>new</code> 产生的 <ul><li>严格来说，JS 中所有对象都称之为实例</li></ul></li></ul></li><li>隐式原型 <ul><li>每个实例都拥有一个特殊的属性 <code>__proto__</code></li><li>称之为隐式原型，它指向构造函数的原型</li></ul></li></ul><h4 id="_3-这一切有何意义" tabindex="-1"><a class="header-anchor" href="#_3-这一切有何意义" aria-hidden="true">#</a> 3）这一切有何意义</h4><ul><li>当访问实例成员时，先找自身，如果不存在，会自动从隐式原型中寻找</li><li>这样一来，我们可以把那些公共成员，放到函数的原型中，即可被所有实例共享</li></ul><p><img src="'+v+'" alt=""></p><h3 id="_6-this" tabindex="-1"><a class="header-anchor" href="#_6-this" aria-hidden="true">#</a> 6.this</h3><ul><li>不同的场景，<strong>这</strong> 指代的含义不同，JS 中的 <strong>this</strong> 关键字也是如此</li><li>在全局代码中使用 <code>this</code> ，指代全局对象</li><li>在真实的开发中，很少在全局代码使用 this</li><li>在函数中使用 this，它的指向完全取决于函数是如何被调用的</li></ul><table><thead><tr><th>调用方式</th><th>示例</th><th>函数中的 this 指向</th></tr></thead><tbody><tr><td>通过 <code>new</code> 调用</td><td><code>new method()</code></td><td>新对象</td></tr><tr><td>直接调用</td><td><code>method()</code></td><td>全局对象</td></tr><tr><td>通过对象调用</td><td><code>obj.method()</code></td><td>前面的对象</td></tr><tr><td><code>call</code></td><td><code>method.call(ctx)</code></td><td>call 的第一个参数</td></tr><tr><td><code>apply</code></td><td><code>method.apply(ctx)</code></td><td>apply 的第一个参数</td></tr></tbody></table>',104);function _(f,j){const a=t("ExternalLinkIcon");return p(),o("div",null,[b,h,n("p",null,[n("a",g,[s("中文官网"),i(a)])]),y])}const q=e(m,[["render",_],["__file","09.html.vue"]]);export{q as default};
