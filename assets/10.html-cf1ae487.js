const l=JSON.parse('{"key":"v-d12d9774","path":"/notes/ECMAScript6-11/10.html","title":"十、Symbol数据类型","lang":"zh-CN","frontmatter":{"title":"十、Symbol数据类型","copyright":false,"date":"2023-01-01T00:00:00.000Z","category":["笔记","ECMAScript"],"tag":["尚硅谷","李强"]},"headers":[{"level":2,"title":"（一）Symbol 简介","slug":"一-symbol-简介","link":"#一-symbol-简介","children":[{"level":3,"title":"1.创建 Symbol","slug":"_1-创建-symbol","link":"#_1-创建-symbol","children":[]},{"level":3,"title":"2.Symbol 不能与其他数据进行运算","slug":"_2-symbol-不能与其他数据进行运算","link":"#_2-symbol-不能与其他数据进行运算","children":[]}]},{"level":2,"title":"（二）Symbol 创建对象属性","slug":"二-symbol-创建对象属性","link":"#二-symbol-创建对象属性","children":[{"level":3,"title":"1.方式一：声明一个对象","slug":"_1-方式一-声明一个对象","link":"#_1-方式一-声明一个对象","children":[]},{"level":3,"title":"2.方式二：使用 Symbol","slug":"_2-方式二-使用-symbol","link":"#_2-方式二-使用-symbol","children":[]}]},{"level":2,"title":"（三）Symbol 内置值","slug":"三-symbol-内置值","link":"#三-symbol-内置值","children":[{"level":3,"title":"1.Symbol.hasInstance","slug":"_1-symbol-hasinstance","link":"#_1-symbol-hasinstance","children":[]},{"level":3,"title":"2.Symbol.isConcatSpreadable","slug":"_2-symbol-isconcatspreadable","link":"#_2-symbol-isconcatspreadable","children":[]}]}],"git":{"createdTime":1672650149000,"updatedTime":1689308920000,"contributors":[{"name":"郁子IKUKO","email":"1147998314@qq.com","commits":2}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"notes/ECMAScript6-11/10.md","localizedDate":"2023年1月1日","excerpt":"<h2> （一）Symbol 简介</h2>\\n<ul>\\n<li>JS 的第七种数据类型，表示独一无二的值\\n<ul>\\n<li><code>Symbol</code> 值唯一，用于解决命名冲突的问题</li>\\n<li><code>Symbol</code> 值不能与其他数据进行运算【四则运算、字符串拼接、大小比较等】</li>\\n<li><code>Symbol</code> 定义的对象属性不能使用 <code>for...in</code> 循环遍历，但是可以使用 <code>Reflect.ownKeys</code> 来获取对象的所有键名</li>\\n</ul>\\n</li>\\n<li>JS 所有数据类型：USONB =&gt; you are so nubility\\n<ul>\\n<li>U： <code>undefined</code></li>\\n<li>S： <code>string</code> 、 <code>symbol</code></li>\\n<li>O： <code>object</code></li>\\n<li>N： <code>null</code> 、 <code>number</code></li>\\n<li>B： <code>boolean</code></li>\\n</ul>\\n</li>\\n</ul>"}');export{l as data};
