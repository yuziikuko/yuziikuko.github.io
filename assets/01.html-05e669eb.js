import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as o,a as n,b as s,d as e,e as t}from"./app-1240ea23.js";const c="/assets/工程化01-16ea89e2.png",r="/assets/工程化02-c687f29c.png",u="/assets/工程化03-01b38854.png",d="/assets/工程化04-a0b56dd7.png",k="/assets/工程化05-af54194f.png",m="/assets/工程化06-0b2406eb.png",v="/assets/工程化07-0d5a2f12.png",b="/assets/工程化08-c4ba0e36.png",h="/assets/工程化09-40c4946a.png",g="/assets/工程化10-e779a668.png",f="/assets/工程化11-8e6544c1.png",_="/assets/工程化12-81d3ae77.png",x="/assets/工程化13-dc26cab5.png",y="/assets/工程化14-e86f601d.png",q="/assets/工程化15-ee9fb63e.png",j="/assets/工程化16-8f2bc1fc.png",w="/assets/工程化17-b67b1112.png",C="/assets/工程化18-e96ec18c.png",S="/assets/工程化19-2c5b4961.png",E={},M=t('<h2 id="一-模块化" tabindex="-1"><a class="header-anchor" href="#一-模块化" aria-hidden="true">#</a> （一）模块化</h2><h3 id="_1-为什么需要模块化" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要模块化" aria-hidden="true">#</a> 1.为什么需要模块化</h3><ul><li>当前端工程到达一定规模后，就会出现以下问题 <ul><li>全局变量污染</li><li>依赖混乱</li><li>共同导致了 <mark>代码文件难以细分</mark></li></ul></li><li>模块化就是为了解决上面两个问题出现的</li><li>可以把臃肿的代码细分到各个小文件中 <ul><li>便于后期维护管理</li></ul></li></ul><h3 id="_2-前端模块化标准" tabindex="-1"><a class="header-anchor" href="#_2-前端模块化标准" aria-hidden="true">#</a> 2.前端模块化标准</h3><h4 id="_1-commonjs" tabindex="-1"><a class="header-anchor" href="#_1-commonjs" aria-hidden="true">#</a> 1）CommonJS</h4><ul><li>简称 CMJ</li><li>是一个 <mark>社区</mark> 规范</li><li>出现时间较早，目前仅 node 环境支持</li></ul><h4 id="_2-es-module" tabindex="-1"><a class="header-anchor" href="#_2-es-module" aria-hidden="true">#</a> 2）ES Module</h4><ul><li>简称 ESM</li><li>随着 ES6 发布的 <mark>官方</mark> 模块化标准</li><li>目前浏览器和新版本 node 环境（&gt;12.0）均支持</li></ul><h4 id="_3-node-环境" tabindex="-1"><a class="header-anchor" href="#_3-node-环境" aria-hidden="true">#</a> 3）node 环境</h4>',9),P={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},V=t('<p><img src="'+c+`" alt=""></p><h2 id="二-commonjs" tabindex="-1"><a class="header-anchor" href="#二-commonjs" aria-hidden="true">#</a> （二）CommonJS</h2><blockquote><p>标准类型：社区规范</p><br><p>支持环境：node</p><br><p>依赖类型：动态依赖</p></blockquote><h3 id="_1-commonjs-如何实现模块化" tabindex="-1"><a class="header-anchor" href="#_1-commonjs-如何实现模块化" aria-hidden="true">#</a> 1.CommonJS 如何实现模块化</h3><ul><li>node 天生支持 CommonJS 模块化标准</li><li><code>const xxx = require(&#39;xxxx&#39;);</code></li></ul><h4 id="_1-cmj-规范-node-规定" tabindex="-1"><a class="header-anchor" href="#_1-cmj-规范-node-规定" aria-hidden="true">#</a> 1）CMJ 规范（Node 规定）</h4><ul><li>node 中的每个 js 文件都是一个 CMJ 模块 <ul><li>通过 node 命令运行的模块，叫做入口模块</li></ul></li><li>模块中的所有全局定义的变量、函数，都不会污染到其他模块</li><li>模块可以暴露（导出）一些内容给其他模块使用 <ul><li>需要暴露什么内容，就在模块中给 <code>module.exports</code> 赋值</li></ul></li><li>一个模块可以导入其他模块 <ul><li>使用函数 <code>require(&quot;要导入的模块路径&quot;)</code> 即可完成 <ul><li>该函数返回目标模块的导出结果</li></ul></li><li>导入模块时，可以省略 <code>.js</code></li><li>导入模块时，必须以 <code>./</code> 或 <code>../</code> 开头</li></ul></li><li>一个模块在被导入时会运行一次，然后它的导出结果会被 node 缓存起来 <ul><li>后续对该模块导入时，不会重新运行，直接使用缓存结果</li></ul></li></ul><h3 id="_2-导出" tabindex="-1"><a class="header-anchor" href="#_2-导出" aria-hidden="true">#</a> 2.导出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> 导出的值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-导入" tabindex="-1"><a class="header-anchor" href="#_3-导入" aria-hidden="true">#</a> 3.导入</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数返回模块导出的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三-es-module" tabindex="-1"><a class="header-anchor" href="#三-es-module" aria-hidden="true">#</a> （三）ES Module</h2><blockquote><p>标准类型：官方标准</p><br><p>支持环境：node，浏览器</p><br><p>依赖类型：静态依赖，动态依赖</p></blockquote><ul><li>静态依赖：代码执行前就先分析模块间的依赖关系</li><li>动态依赖：代码执行时遇到 import 再去分析模块间的依赖关系</li></ul><h3 id="_1-导出" tabindex="-1"><a class="header-anchor" href="#_1-导出" aria-hidden="true">#</a> 1.导出</h3><ul><li>ES Module 分为两种导出方式： <ul><li>具名导出（普通导出），可以导出多个</li><li>默认导出，只能导出一个</li></ul></li><li>一个模块可以同时存在两种导出方式</li><li>最终会合并为一个 <mark>对象</mark> 导出 <ul><li>具名导出的变量作为该对象的属性</li><li>默认导出的值只能赋给 <code>default</code> 这个属性</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">default</span><span class="token operator">:</span> xxx<span class="token punctuation">;</span> <span class="token comment">// 默认导出</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 具名导出</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 具名导出</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-具名导出" tabindex="-1"><a class="header-anchor" href="#_1-具名导出" aria-hidden="true">#</a> 1）具名导出</h4><ul><li>export 后要跟定义语句</li><li>不能是表达式，如：<code>export a</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> d <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> k <span class="token keyword">as</span> temp <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
  g <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
  h <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 基本 + 默认</span>

<span class="token comment">// 以上代码将导出下面的对象</span>
<span class="token comment">/*
{
	a: 1,
	b: fn,
	c: fn,
	d: 2,
	temp: 10,
	f: 4,
	g: 5,
	default: 6
}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-默认导出" tabindex="-1"><a class="header-anchor" href="#_2-默认导出" aria-hidden="true">#</a> 2）默认导出</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">3</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> e <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">6</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span> <span class="token comment">// 基本 + 默认</span>

<span class="token comment">// 以上代码将导出下面的对象</span>
<span class="token comment">/*
{
	a: 1,
	b: fn,
	c: fn,
	d: 2,
	temp: 10,
	f: 4,
	g: 5,
	default: 6
}
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>导出代码必须为顶级代码，即不可放到代码块中</li><li>尽量不要直接导出变量 <ul><li><code>export let str = &#39;js&#39;;</code> 不推荐</li></ul></li><li>应该导出常量，或者导出的变量放在函数中 <ul><li><code>export const str = &#39;js&#39;;</code> 推荐</li><li><code>export const getStr = () =&gt; str;</code> 推荐</li></ul></li></ul></div><h3 id="_2-导入" tabindex="-1"><a class="header-anchor" href="#_2-导入" aria-hidden="true">#</a> 2.导入</h3><ul><li>针对具名导出和默认导出，有不同的导入语法</li><li>导入模块时， <mark>不可以</mark> 省略 <code>.js</code></li></ul><h4 id="_1-静态导入" tabindex="-1"><a class="header-anchor" href="#_1-静态导入" aria-hidden="true">#</a> 1）静态导入</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 常用
 */</span>
<span class="token comment">// 仅运行一次该模块，不导入任何内容</span>
<span class="token keyword">import</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入属性 a、b，放到变量a、b中。a-&gt;a, b-&gt;b</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入属性 default，放入变量c中。default-&gt;c</span>
<span class="token keyword">import</span> c <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// default-&gt;c，a-&gt;a, b-&gt;b</span>
<span class="token keyword">import</span> c<span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 将模块对象放入到变量obj中</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 不常用
 */</span>
<span class="token comment">// 导入属性a、b，放到变量temp1、temp2 中</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token keyword">as</span> temp1<span class="token punctuation">,</span> b <span class="token keyword">as</span> temp2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入属性default，放入变量a中，default是关键字，不能作为变量名，必须定义别名</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//导入属性default、b，放入变量a、b中</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li>静态导入的代码必须为在代码顶端，不可放入代码块中</li><li>静态导入的代码绑定的符号是常量，不可更改</li></ul></div><h4 id="_2-动态导入" tabindex="-1"><a class="header-anchor" href="#_2-动态导入" aria-hidden="true">#</a> 2）动态导入</h4><ul><li>返回一个 Promise，完成时的数据为模块对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./math.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> math <span class="token operator">=</span> m<span class="token punctuation">.</span>default<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>Webpack 在 config.js 中使用 ESM 的 import 语法报错时 <ul><li>可以将文件名修改为 <code>config.mjs</code> 会识别 ESM 语法</li><li>也可以在 package.json 文件中配置 <code>type: &quot;module&quot;</code></li></ul></li><li>如果配置了 <code>type: &quot;module&quot;</code> 又使用了 <code>require</code> 等 commonjs 的语法，文件名需使用 <code>.cjs</code></li><li>某些使用 CommonJS 语法导出的第三方库，没有 default 默认导出 <ul><li><code>import react from &#39;react&#39;</code> 这种 bare import 语法会报错 <ul><li>不报错是因为脚手架处理了</li></ul></li><li>如果没有使用脚手架，又需要将 CommonJS 写的库默认导出 <ul><li>需要使用 <code>import * as react from &#39;react&#39;</code></li></ul></li><li><code>from &#39;react&#39;</code> 的写法本身在 esm 中也是不支持的，必须写完整路径 <ul><li>不报错是因为脚手架处理了路径</li></ul></li></ul></li></ul></div><h2 id="四-包管理器" tabindex="-1"><a class="header-anchor" href="#四-包管理器" aria-hidden="true">#</a> （四）包管理器</h2>`,33),B={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},I=n("br",null,null,-1),L={href:"https://docs.npmjs.com/cli/v7/commands",target:"_blank",rel:"noopener noreferrer"},R=t(`<h3 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1.概念</h3><h4 id="_1-包" tabindex="-1"><a class="header-anchor" href="#_1-包" aria-hidden="true">#</a> 1）包</h4><ul><li>包（package）是一个或多个 js 模块的集合 <ul><li>共同完成某一类功能</li></ul></li><li>可以简单的认为每一个工程就是一个包 <ul><li>有些包是为了给别人用的</li><li>也叫第三方库</li></ul></li></ul><h4 id="_2-包管理器" tabindex="-1"><a class="header-anchor" href="#_2-包管理器" aria-hidden="true">#</a> 2）包管理器</h4><ul><li>包管理器是一个管理包的工具 <ul><li>前端常见的包管理器有 npm、yarn、cnpm、 <mark>pnpm</mark> 等</li></ul></li><li>包管理器具备以下能力： <ul><li>让开发者可以轻松的下载包</li><li>让开发者可以轻松的升级和卸载包</li><li>能够自动管理包的依赖</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">peerdependency 对等依赖</p><ul><li>npm 安装某些第三方库时会报错，终止安装</li><li>原因：第三方库将某些库的版本锁死，本地库的版本不兼容</li><li>推荐直接忽略报错，改成 pnpm 安装，只会警告不会报错</li><li>或者使用 <code>npm i --force--legacy-dep</code> 强制安装</li></ul></div><h4 id="_3-cli" tabindex="-1"><a class="header-anchor" href="#_3-cli" aria-hidden="true">#</a> 3）CLI</h4><ul><li>CLI 是一个命令行工具</li><li>提供一个终端命令，通过该命令可以完成一些功能</li></ul><h4 id="_4-构建工具" tabindex="-1"><a class="header-anchor" href="#_4-构建工具" aria-hidden="true">#</a> 4）构建工具</h4><ul><li><mark>Webpack</mark></li><li><mark>Vite</mark></li><li>ESBuild</li><li>Rollup</li><li>SnowPack</li><li>Parcel</li><li>TSup</li></ul><h3 id="_2-node-查找包的顺序" tabindex="-1"><a class="header-anchor" href="#_2-node-查找包的顺序" aria-hidden="true">#</a> 2.node 查找包的顺序</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查找是否有内置模块 a</li><li>查找当前目录的 node_modules 中是否有 a</li><li>依次查找上级目录的 node_modules 中是否有 a，直到根目录</li></ul><h3 id="_3-配置源" tabindex="-1"><a class="header-anchor" href="#_3-配置源" aria-hidden="true">#</a> 3.配置源</h3><h4 id="_1-查看源" tabindex="-1"><a class="header-anchor" href="#_1-查看源" aria-hidden="true">#</a> 1）查看源</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config get registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-配置淘宝镜像源" tabindex="-1"><a class="header-anchor" href="#_2-配置淘宝镜像源" aria-hidden="true">#</a> 2）配置淘宝镜像源</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-配置官方源" tabindex="-1"><a class="header-anchor" href="#_3-配置官方源" aria-hidden="true">#</a> 3）配置官方源</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-初始化" tabindex="-1"><a class="header-anchor" href="#_4-初始化" aria-hidden="true">#</a> 4.初始化</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化工程，帮助生成 package.json 文件</span>
<span class="token function">npm</span> init

<span class="token comment"># 初始化工程，全部使用默认配置生成 package.json 文件</span>
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-package-json" tabindex="-1"><a class="header-anchor" href="#_5-package-json" aria-hidden="true">#</a> 5.package.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 本地普通依赖</span>
    <span class="token property">&quot;qrcode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.4.4&quot;</span> <span class="token comment">// 依赖包qrcode，版本1.4.4，主版本号不变，此版本号和补丁版本可增</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDenpendencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开发依赖</span>
    <span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-安装" tabindex="-1"><a class="header-anchor" href="#_6-安装" aria-hidden="true">#</a> 6.安装</h3><h4 id="_1-本地安装" tabindex="-1"><a class="header-anchor" href="#_1-本地安装" aria-hidden="true">#</a> 1）本地安装</h4><ul><li>会将包下载到当前命令行所在目录的 node_modules 中</li><li>绝大部分安装都使用本地安装</li><li>install 可以替换为 i</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> 包名
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> 包名
<span class="token function">npm</span> <span class="token function">install</span> 包名@版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若仅作为开发依赖，则添加参数 <code>-D</code></li><li><code>npm i -D @types/node</code> node 语法提示插件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> 包名
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> 包名@版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若要还原安装</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>

<span class="token comment"># 仅还原dependencies中的依赖</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--production</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-全局安装" tabindex="-1"><a class="header-anchor" href="#_2-全局安装" aria-hidden="true">#</a> 2）全局安装</h4><ul><li>会将包下载到一个全局的位置</li><li>只有需要使用某个全局命令时，才需要进行全局安装</li><li>install 可以替换为 i</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> 包名
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> 包名@版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-卸载" tabindex="-1"><a class="header-anchor" href="#_7-卸载" aria-hidden="true">#</a> 7.卸载</h3><h4 id="_1-本地卸载" tabindex="-1"><a class="header-anchor" href="#_1-本地卸载" aria-hidden="true">#</a> 1）本地卸载</h4><ul><li>卸载本地的安装包</li><li>uninstall 均可替换为 un</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> uninstall 包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-全局卸载" tabindex="-1"><a class="header-anchor" href="#_2-全局卸载" aria-hidden="true">#</a> 2）全局卸载</h4><ul><li>卸载全局的安装包</li><li>uninstall 均可替换为 un</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> 包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-查看包信息" tabindex="-1"><a class="header-anchor" href="#_8-查看包信息" aria-hidden="true">#</a> 8.查看包信息</h3><h4 id="_1-查看包所有的版本" tabindex="-1"><a class="header-anchor" href="#_1-查看包所有的版本" aria-hidden="true">#</a> 1）查看包所有的版本</h4><ul><li>view 可以替换为 v</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> view 包名 versions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五-less" tabindex="-1"><a class="header-anchor" href="#五-less" aria-hidden="true">#</a> （五）Less</h2><p><img src="`+r+'" alt=""></p><h3 id="_1-概念-1" tabindex="-1"><a class="header-anchor" href="#_1-概念-1" aria-hidden="true">#</a> 1.概念</h3><ul><li>Less 是一种更加简洁的样式代码</li><li>非常像 CSS，但又不太一样，让编写样式变得更容易</li><li>下面是 css 代码和 Less 代码的对比，都表达了一样的含义</li></ul><p><img src="'+u+'" alt=""></p><ul><li>Less 代码虽好，但无法被浏览器识别 <ul><li>因此需要一个工具将其转换为血统纯正的 css 代码</li></ul></li><li><mark>node 环境具有读写文件的能力</mark><ul><li>所以在 node 环境中可以轻松的完成文件的转换</li></ul></li><li><code>npm</code> 上有一个包叫做 <code>less</code><ul><li>运行在 node 环境中</li><li>可以完成对 Less 代码的转换</li></ul></li></ul><p><img src="'+d+`" alt=""></p><ul><li>node 环境在前端工程化中，充当了一个辅助的角色</li><li>并不直接运行前端代码，而是让编写的前端代码更加舒适便利</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>转换代码，称之为编译(compile)</li><li>转换代码的工具，称之为编译器(compiler)</li></ul></div><h3 id="_2-体验-less" tabindex="-1"><a class="header-anchor" href="#_2-体验-less" aria-hidden="true">#</a> 2.体验 Less</h3><h4 id="_1-新建-index-less-文件" tabindex="-1"><a class="header-anchor" href="#_1-新建-index-less-文件" aria-hidden="true">#</a> 1）新建 <code>index.less</code> 文件</h4><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token variable">@green<span class="token punctuation">:</span></span> #008c8c<span class="token punctuation">;</span>
<span class="token selector">.list</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@green</span><span class="token punctuation">;</span>
  <span class="token selector">li</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">@green</span><span class="token punctuation">;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用-npm-下载-less" tabindex="-1"><a class="header-anchor" href="#_2-使用-npm-下载-less" aria-hidden="true">#</a> 2）使用 <code>npm</code> 下载 <code>less</code></h4><ul><li><p><code>less</code> 包提供了一个 CLI 工具 <code>lessc</code></p></li><li><p>方案一：全局安装 less</p><ul><li>可以在任何终端目录使用 <code>lessc</code> 命令</li><li>不利于版本控制</li></ul></li><li><p>方案二：本地安装 less</p><ul><li>会把 <code>less</code> 安装到工程目录的 <code>node_modules</code> 中</li><li>无法全局使用 <code>lessc</code> 命令</li><li>可以在当前工程目录中使用 <code>npx lessc</code> 运行该命令</li><li>如果配置了 <code>package.json</code> 脚本，无须使用 <code>npx</code></li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;practice1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lessc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lessc index.less index.css&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;less&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.1.3&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run lessc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>npx 是 npm 提供的一个小工具 <ul><li>可以运行当前项目中安装到 node_modules 的 cli 命令</li></ul></li><li>应该尽量使用本地安装，而非全局安装</li></ul></div><h4 id="_3-使用-lessc-命令" tabindex="-1"><a class="header-anchor" href="#_3-使用-lessc-命令" aria-hidden="true">#</a> 3）使用 <code>lessc</code> 命令</h4><ul><li>对编写的 <code>less</code> 文件进行编译</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 index.less 编译成为 index.css</span>
lessc index.less index.css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-新建一个页面-引用编译结果-index-css" tabindex="-1"><a class="header-anchor" href="#_4-新建一个页面-引用编译结果-index-css" aria-hidden="true">#</a> 4）新建一个页面，引用编译结果 <code>index.css</code></h4><ul><li>每次编写后，都需要运行命令进行编译</li></ul><h3 id="_3-less-的核心语法" tabindex="-1"><a class="header-anchor" href="#_3-less-的核心语法" aria-hidden="true">#</a> 3.Less 的核心语法</h3>`,69),F={href:"https://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),J={href:"https://less.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://less.bootcss.com/#%E5%8F%98%E9%87%8F%EF%BC%88variables%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},T={href:"https://less.bootcss.com/#%E5%B5%8C%E5%A5%97%EF%BC%88nesting%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},O={href:"https://less.bootcss.com/#%E6%B7%B7%E5%90%88%EF%BC%88mixins%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},z={href:"https://less.bootcss.com/#%E6%B3%A8%E9%87%8A%EF%BC%88comments%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},H=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>Less 是一种 CSS 预编译器</li><li>类似的工具还有：less、sass、stylus</li></ul></div><h2 id="六-使用-nvm-切换-node-版本" tabindex="-1"><a class="header-anchor" href="#六-使用-nvm-切换-node-版本" aria-hidden="true">#</a> （六）使用 nvm 切换 node 版本</h2><ul><li>nvm 全称为 node version manger</li><li>管理 node 版本的一个工具</li><li>可以在一台计算机上安装多个版本的 node，并且随时进行无缝的切换</li></ul><h3 id="_1-mac-系统下安装-nvm" tabindex="-1"><a class="header-anchor" href="#_1-mac-系统下安装-nvm" aria-hidden="true">#</a> 1.Mac 系统下安装 nvm</h3><h4 id="_1-卸载原本的-node-js-重要" tabindex="-1"><a class="header-anchor" href="#_1-卸载原本的-node-js-重要" aria-hidden="true">#</a> 1）卸载原本的 node.js（重要）</h4>',5),$={href:"https://blog.csdn.net/huangpb123/article/details/120248002",target:"_blank",rel:"noopener noreferrer"},U=n("h4",{id:"_2-下载安装-nvm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-下载安装-nvm","aria-hidden":"true"},"#"),s(" 2）下载安装 nvm")],-1),W={href:"https://github.com/nvm-sh/nvm",target:"_blank",rel:"noopener noreferrer"},G=t(`<ul><li>可以直接下载压缩包，解压后将整个文件夹命名为 <code>.nvm</code><ul><li>在 Mac 要查看隐藏文件，可以通过 <code>Shift + Command + .</code></li></ul></li><li>放入根目录（$HOME）下</li><li>终端工具是 zsh <ul><li>输入 <code>vi ~/.zshrc</code></li><li>打开 zsh 终端的配置文件</li><li>添加如下的代码对 nvm 进行配置 <blockquote><p>输入 <code>vi ~/.zshrc</code> 命令之后，会打开 zsh 终端的配置文件</p><br><p>输入 <code>i</code> 进入 insert 编辑模式，可以进行编辑操作</p><br><p>编辑完成之后先按 ESC 退出编辑模式，然后输入 <code>:wq</code> 保存刚才的编辑并退出</p></blockquote></li><li>这里的配置主要包含两个方面，一个是 nvm 路径的配置，另一个是镜像的配置</li></ul></li><li>终端工具是 bash <ul><li>执行 <code>vi ~/.bashrc</code></li><li>打开 bash 终端的配置文件</li><li>添加如下的配置代码</li></ul></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.nvm&quot;</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="token comment"># This loads nvm</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="token comment"># This loads nvm bash_completion</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_NODEJS_ORG_MIRROR</span><span class="token operator">=</span>http://npm.taobao.org/mirrors/node <span class="token comment"># 修改镜像</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_IOJS_ORG_MIRROR</span><span class="token operator">=</span>http://npm.taobao.org/mirrors/iojs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置完成后，通过命令 <code>source ~/.zshrc</code> 或者 <code>source ~/.bashrc</code> 使配置文件生效</li></ul><h4 id="_3-nvm-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-nvm-常用命令" aria-hidden="true">#</a> 3）nvm 常用命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前安装和使用的 node 版本</span>
nvm list

<span class="token comment"># 安装某个 node 版本</span>
nvm <span class="token function">install</span> 版本号

<span class="token comment"># 切换 node 版本</span>
nvm use 版本号

<span class="token comment"># 设置默认版本</span>
nvm <span class="token builtin class-name">alias</span> default v12.22.12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置-npm-源" tabindex="-1"><a class="header-anchor" href="#_4-配置-npm-源" aria-hidden="true">#</a> 4）配置 npm 源</h4><ul><li>安装 node 之后，一般对应的 npm 也会被安装好</li><li>默认 npm 的源是指向 npm 官网的，导致在下载包的时候会很慢</li><li>需要修改 npm 的源</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config get registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-windows-系统下安装-nvm" tabindex="-1"><a class="header-anchor" href="#_2-windows-系统下安装-nvm" aria-hidden="true">#</a> 2.Windows 系统下安装 nvm</h3><h4 id="_1-卸载原本的-node-js-重要-1" tabindex="-1"><a class="header-anchor" href="#_1-卸载原本的-node-js-重要-1" aria-hidden="true">#</a> 1）卸载原本的 node.js（重要）</h4><h4 id="_2-下载安装-nvm-1" tabindex="-1"><a class="header-anchor" href="#_2-下载安装-nvm-1" aria-hidden="true">#</a> 2）下载安装 nvm</h4>`,12),Q={href:"https://pan.baidu.com/s/1uoxlk8CVNHV2KTCwIGbQMQ?pwd=yi5m",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),K=n("p",null,"提取码：yi5m",-1),Y=t(`<h4 id="_3-修改-nvm-源" tabindex="-1"><a class="header-anchor" href="#_3-修改-nvm-源" aria-hidden="true">#</a> 3）修改 nvm 源</h4><ul><li>直接用 nvm 命令下载 node，因为源在国外，所以会导致下载失败，最好修改 nvm 的源</li><li>打开 nvm 的下载路径 <ul><li>如果是一路 next 的，那么一般就在：<code>C:\\Users\\你现在用的用户名\\AppData\\Roaming\\nvm</code></li></ul></li><li>打开 <code>setting.txt</code> 文件，在末尾写入：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_mirror: https://npm.taobao.org/mirrors/node/
npm_mirror: https://npm.taobao.org/mirrors/npm/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-nvm-常用命令" tabindex="-1"><a class="header-anchor" href="#_4-nvm-常用命令" aria-hidden="true">#</a> 4）nvm 常用命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前安装和使用的 node 版本</span>
nvm list

<span class="token comment"># 安装某个 node 版本</span>
nvm <span class="token function">install</span> 版本号

<span class="token comment"># 切换 node 版本</span>
nvm use 版本号

<span class="token comment"># 设置默认版本</span>
nvm <span class="token builtin class-name">alias</span> v12.22.12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-配置-npm-源" tabindex="-1"><a class="header-anchor" href="#_5-配置-npm-源" aria-hidden="true">#</a> 5）配置 npm 源</h4><ul><li>安装 node 之后，一般对应的 npm 也会被安装好</li><li>默认 npm 的源是指向 npm 官网的，导致在下载包的时候会很慢</li><li>需要修改 npm 的源</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config get registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="七-构建工具的使用" tabindex="-1"><a class="header-anchor" href="#七-构建工具的使用" aria-hidden="true">#</a> （七）构建工具的使用</h2><ul><li>工程化，为复杂应用而生</li></ul><p><img src="`+k+'" alt=""></p><h3 id="_1-核心" tabindex="-1"><a class="header-anchor" href="#_1-核心" aria-hidden="true">#</a> 1.核心</h3><ul><li><mark>webpack 是用来搭建前端工程的</mark></li><li>运行在 node 环境中</li><li>所做的事情，简单来说，就是 <mark>打包</mark></li><li>具体来说，就是以某个模块作为入口，根据入口分析出所有模块的依赖关系 <ul><li>然后对各种模块进行合并、压缩，形成最终的打包结果</li></ul></li></ul><p><img src="'+m+'" alt=""></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 webpack 的世界中，一切皆是模块</p></div><h3 id="_2-体验" tabindex="-1"><a class="header-anchor" href="#_2-体验" aria-hidden="true">#</a> 2.体验</h3><ul><li>工程以 <code>src/main.js</code> 作为入口文件</li><li>按照习惯，所有的模块均放置在 <code>src</code> 目录中</li></ul><h4 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖" aria-hidden="true">#</a> 1）安装依赖</h4><h4 id="_2-编写多个模块" tabindex="-1"><a class="header-anchor" href="#_2-编写多个模块" aria-hidden="true">#</a> 2）编写多个模块</h4><ul><li>随意编写一些模块，可以是 js、图片、音视频</li><li>以入口模块为起点，形成依赖关系</li></ul><h4 id="_3-运行-npm-run-build-命令进行打包" tabindex="-1"><a class="header-anchor" href="#_3-运行-npm-run-build-命令进行打包" aria-hidden="true">#</a> 3）运行 <code>npm run build</code> 命令进行打包</h4><h4 id="_4-查看打包结果" tabindex="-1"><a class="header-anchor" href="#_4-查看打包结果" aria-hidden="true">#</a> 4）查看打包结果</h4><ul><li>打包结果放置在 <code>dist</code> 目录中</li></ul><h4 id="_5-好处" tabindex="-1"><a class="header-anchor" href="#_5-好处" aria-hidden="true">#</a> 5）好处</h4><ul><li>可以大胆的使用任意模块化标准 <ul><li>无须担心兼容性问题</li><li>因为 webpack 完成打包后，已经没有了任何模块化语句</li></ul></li><li>可以将一些非 JS 代码也视为模块 <ul><li>可以对 css、图片等资源进行更加细粒度的划分</li></ul></li><li>在前端开发中，也可以使用 npm <ul><li>webpack 不会运行源代码</li><li>无论是自己写的模块，还是通过 npm 安装的模块 <ul><li>webpack 一视同仁，统统视为依赖，最终合并到打包结果中</li></ul></li></ul></li><li>非常适合开发单页应用 <ul><li>单页应用是前端用户体验最好的 web 应用</li><li>所谓单页应用，是指只有一个 html 页面，页面中没有任何内容，所有的内容均靠 js 生成</li><li>要优雅的实现单页应用，最好依托于前端框架，比如 vue、react</li></ul></li></ul><h3 id="_3-页面模板" tabindex="-1"><a class="header-anchor" href="#_3-页面模板" aria-hidden="true">#</a> 3.页面模板</h3><ul><li>对于单页应用而言，只有一个空白的页面，所有内容都靠 JS 代码创建</li><li>webpack 会自动生成一个页面，并且在页面中会自动加入对 js 和 css 的引用</li><li>生成页面时，参考的是 <code>public/index.html</code>，称之为页面模板</li></ul><h3 id="_4-public-目录" tabindex="-1"><a class="header-anchor" href="#_4-public-目录" aria-hidden="true">#</a> 4.public 目录</h3><ul><li>webpack 会非常暴力的将 public 目录中的所有文件（除页面模板外），复制到打包结果中</li></ul><h3 id="_5-开发服务器" tabindex="-1"><a class="header-anchor" href="#_5-开发服务器" aria-hidden="true">#</a> 5.开发服务器</h3><ul><li>如果每次修改完代码，都要经过 <code>打包 -&gt; 运行</code>，未免太过麻烦</li><li>在开发阶段，我们可以运行 <code>npm run serve</code> 命令获得更好的打包体验</li><li>该命令会让 <code>webpack</code> 启动一个 <mark>开发服务器</mark></li><li>在这个阶段，webpack 并不会形成打包结果文件 <ul><li>而是把打包的内容放到内存中</li><li>当请求服务器时，服务器从内存中给予打包结果</li></ul></li><li>与此同时，当源码发生变动时，webpack 会自动重新打包，同时刷新页面以访问到最新的打包结果</li></ul><p><img src="'+v+'" alt=""></p><h3 id="_6-文件缓存" tabindex="-1"><a class="header-anchor" href="#_6-文件缓存" aria-hidden="true">#</a> 6.文件缓存</h3><ul><li>除了页面外，其他的资源在打包完成后，文件名多了一些字符</li><li>例如：<code>js/app-9ea93.js</code></li><li><code>9ea93</code> 这样的字符称为 <code>hash</code><ul><li>会随着模块内容的变化而变化</li></ul></li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><ul><li>源码内容不变，hash 不变</li><li>源码内容变化，hash 变化</li></ul></div><ul><li>之所以这样做，是因为生产环境中，浏览器会对除页面外的静态资源进行缓存</li><li>如果不设置 hash 值，一旦代码更新，浏览器还会使用之前缓存的结果，无法使用最新的代码</li></ul><p><img src="'+b+'" alt=""></p><ul><li>有了 hash 值之后，即可解决此问题</li><li>webpack 会在打包时自动处理 hash 值</li></ul><p><img src="'+h+`" alt=""></p><h3 id="_7-资源路径" tabindex="-1"><a class="header-anchor" href="#_7-资源路径" aria-hidden="true">#</a> 7.资源路径</h3><ul><li>除代码和样式模块外，其他模块被视为 <mark>资源模块</mark></li><li>资源模块在源代码中的路径和打包后的路径是 <mark>不一样</mark> 的 <ul><li>这就导致在编写代码的时候，根本无法知晓最终的路径</li></ul></li><li>最常见的例子，就是在 css 中使用背景图片</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 背景图使用了源码中的路径 */</span>
  <span class="token property">backgroud</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;../assets/1.png&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>能正常工作</li><li>因为 webpack 非常智能的发现了这一点，对于 css 中的路径，webpack 在打包时，会将其自动转换为打包结果的路径</li><li>比如，上面的代码在打包完成后，可能被转换为下面的格式</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token comment">/* css中的资源路径会被自动替换，无须关心 */</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/img/1492ea.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果要通过 js 动态的使用路径，webpack 是无法识别的</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打包前</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;./assets/1.png&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 该路径无法被转换</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>

<span class="token comment">// 打包后</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;./assets/1.png&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ❌</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正确的做法是，通过模块化的方式导入资源，并获取资源路径</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打包前</span>
<span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">&quot;./assets/1.png&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 打包后，url得到的将是真实的路径</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>

<span class="token comment">// 打包后</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&quot;/img/1492ea.png&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-缺省的文件和后缀名" tabindex="-1"><a class="header-anchor" href="#_8-缺省的文件和后缀名" aria-hidden="true">#</a> 8.缺省的文件和后缀名</h3><ul><li>导入模块时，所有 js 模块均可省略 <code>.js</code></li><li>若导入的模块文件名为 <code>index.js</code>，可省略文件名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./home&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 若存在home.js，可省略js</span>
<span class="token keyword">import</span> <span class="token string">&quot;./movie&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 若movie是一个目录，此次导入的是 ./movie/index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-路径别名" tabindex="-1"><a class="header-anchor" href="#_9-路径别名" aria-hidden="true">#</a> 9.路径别名</h3><ul><li>随着体量的增长，不可避免的，会形成层级极深的目录</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root
	|-- src
		|-- a
      |-- a1
        |-- a2
          |-- index.js
		|-- b
      |-- b1
        |-- index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果需要在 <code>./src/a/a1/a2/index.js</code> 中导入 <code>./src/b/b1/index.js</code>，则可能产生下面特别恶心的代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;../../../b/b1/index.js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>webpack 提供了别名供我们快速定位到 <code>./src</code> 目录</li><li>通常，该别名为 <code>@</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;@/b/b1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// @表示src目录，同时省略了index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-js-兼容性" tabindex="-1"><a class="header-anchor" href="#_10-js-兼容性" aria-hidden="true">#</a> 10.js 兼容性</h3><ul><li>当 webpack 读取到 js 代码时，会自动对其进行兼容性处理</li><li>具体的处理方案涉及到两个配置文件</li></ul><h4 id="_1-babel-config-js" tabindex="-1"><a class="header-anchor" href="#_1-babel-config-js" aria-hidden="true">#</a> 1）<code>babel.config.js</code></h4><ul><li>通过配置该文件，可以设置对哪些 js 代码进行降级处理</li></ul><h4 id="_2-browserslistrc" tabindex="-1"><a class="header-anchor" href="#_2-browserslistrc" aria-hidden="true">#</a> 2）<code>.browserslistrc</code></h4><ul><li>通过配置该文件，可以设置在降级时，要兼容哪些浏览器</li><li>兼容的范围越广，降级产生的代码就越多，打包后的体积就越大</li></ul><h3 id="_11-打包压缩" tabindex="-1"><a class="header-anchor" href="#_11-打包压缩" aria-hidden="true">#</a> 11.打包压缩</h3><ul><li>webpack 在打包时，会对所有 js 和 css 代码进行压缩</li><li>对于 js，除了压缩之外，还会对其中的各种名称进行混淆</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">.</span>webpackChunkmovie_list<span class="token operator">=</span>self<span class="token punctuation">.</span>webpackChunkmovie_list<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">587</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3587</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">5666</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1539</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8674</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1249</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">9755</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&#39;&lt;li&gt;\\n  &lt;a href=&quot;&#39;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;&quot; target=&quot;_blank&quot;&gt;\\n    &lt;img src=&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cover<span class="token punctuation">,</span><span class="token string">&#39;&quot; title=&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">&#39;&quot;&gt;\\n  &lt;/a&gt;\\n  &lt;a href=&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token string">&#39;&quot; target=&quot;_blank&quot; class=&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;qmUYQv1xlJhGMQKz-kfAp&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;&quot;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token string">&#39;&lt;/a&gt;\\n  &lt;p class=&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;_3yV5wC-URYTUP0sPvaE0ZR&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;&quot;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>rate<span class="token punctuation">,</span><span class="token string">&quot;&lt;/p&gt;\\n  &lt;/li&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>o<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;ul&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">&quot;_1fsrc5VinfYHBXCF1s58qS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8138</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> u<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>混淆的作用 <ul><li>为了进一步压缩包体积</li><li>为了让代码更难被其他人理解利用</li></ul></li></ul><h3 id="_12-源码地图-source-map" tabindex="-1"><a class="header-anchor" href="#_12-源码地图-source-map" aria-hidden="true">#</a> 12.源码地图 source map</h3><ul><li>运行的是 webpack 打包后的结果，而打包后的结果是很难阅读的</li><li>但这样一来会带来新的问题，如果代码报错，就难以知道到底是哪一行代码有问题</li><li>js 代码打包后都会跟上一个同名的、后缀为 <code>.map</code> 的文件 <ul><li>该文件就保存了原始代码的内容</li><li>这个内容人类是看不懂的，但浏览器可以看懂</li></ul></li><li>当代码报错时，浏览器会定位到源码地图中的对应代码，而不是展示真实报错的代码</li></ul><h3 id="_13-css-工程化" tabindex="-1"><a class="header-anchor" href="#_13-css-工程化" aria-hidden="true">#</a> 13.css 工程化</h3><ul><li>webpack 能够识别 <mark>所有</mark> 的样式代码</li><li>包括 <code>css</code> 、 <code>less</code> 、 <code>sass</code> 、 <code>stylus</code></li><li>在打包时，会转换成纯正的 <code>css</code></li></ul><h4 id="_1-自动厂商前缀" tabindex="-1"><a class="header-anchor" href="#_1-自动厂商前缀" aria-hidden="true">#</a> 1）自动厂商前缀</h4><ul><li>css 有很多兼容性问题，解决这些兼容性问题的最常见办法，就是加上厂商前缀</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 兼容性不好的代码 */</span>
<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 兼容性好的代码 */</span>
<span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>webpack 会根据 <code>.browserlistrc</code> 中指定的浏览器范围</li><li><mark>按需、自动</mark> 加上厂商前缀</li></ul><h4 id="_2-css-module" tabindex="-1"><a class="header-anchor" href="#_2-css-module" aria-hidden="true">#</a> 2）css module</h4><ul><li>无需担心样式名冲突的问题</li><li>当样式文件以 <code>xxx.mdoule.xxx</code> 的方式命名时</li><li>webpack 会将该文件当成一个开启了 <code>css module</code> 的文件</li><li>比如：<code>index.module.less</code> 、 <code>movie.module.css</code>，都是开启了 <code>css module</code> 的文件</li><li><mark>文件中的所有类名都会被 hash 化</mark></li></ul><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token comment">// 源码</span>
<span class="token selector">.container</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token selector">.list</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// 打包结果，绝无可能重名</span>
<span class="token selector">._2GFVidHvoHtfgtrdifua24</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token selector">._1fsrc5VinfYHBXCF1s58qS</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token selector">.urPUKUukdS_UTSuWRI5-5</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用类名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&quot;./index.module.less&quot;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ 属性container中记录的就是container转换后的类名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-真正的-webpack-没有那么神奇" tabindex="-1"><a class="header-anchor" href="#_14-真正的-webpack-没有那么神奇" aria-hidden="true">#</a> 14.真正的 webpack 没有那么神奇</h3><ul><li>实际上，webpack 没有做这么多事，不能把功劳（怨念）全归结于它</li><li>只是站在巨人（其他流氓）肩膀上而已</li></ul><p><img src="`+g+`" alt=""></p><ul><li>webpack 通过插件（plugin）和加载器（loader）将这些技术整合在一起</li></ul><table><thead><tr><th>配置文件</th><th>说明</th></tr></thead><tbody><tr><td><code>.browserslistrc</code></td><td>表达适配的浏览器范围，会被工程化中的其他技术所使用</td></tr><tr><td><code>babel.config.js</code></td><td><code>babel</code> 的配置文件，做 js 降级处理</td></tr><tr><td><code>postcss.config.js</code></td><td><code>postcss</code> 的配置文件，做 css 代码转换</td></tr><tr><td><code>webpack.config.js</code></td><td><code>webpack</code> 的配置文件，整合其他工程化技术，以及配置打包细节、开发服务器、路径别名等等</td></tr></tbody></table><h4 id="_1-browserslistrc" tabindex="-1"><a class="header-anchor" href="#_1-browserslistrc" aria-hidden="true">#</a> 1）.browserslistrc</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; 1%
last 3 versions
not dead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-babel-config-js" tabindex="-1"><a class="header-anchor" href="#_2-babel-config-js" aria-hidden="true">#</a> 2）babel.config.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">&quot;usage&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-postcss-config-js" tabindex="-1"><a class="header-anchor" href="#_3-postcss-config-js" aria-hidden="true">#</a> 3）postcss.config.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cssnano&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;autoprefixer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-webpack-config-js" tabindex="-1"><a class="header-anchor" href="#_4-webpack-config-js" aria-hidden="true">#</a> 4）webpack.config.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;clean-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;copy-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;js/app-[contenthash:5].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">&quot;assets/[hash:5][ext]&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;js/chunk-[contenthash:5].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;web&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;@&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">stats</span><span class="token operator">:</span> <span class="token string">&quot;errors-only&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(css|less)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(mp3|mp4)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(gif|png|webp|svg|jpg|jpeg|bmp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;css/[name]-[contenthash:5].css&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 应用 复制文件 插件</span>
      <span class="token literal-property property">patterns</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">from</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">globOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.html&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-对开发的影响" tabindex="-1"><a class="header-anchor" href="#_15-对开发的影响" aria-hidden="true">#</a> 15.对开发的影响</h3><h4 id="_1-学会访问开发服务器查看效果" tabindex="-1"><a class="header-anchor" href="#_1-学会访问开发服务器查看效果" aria-hidden="true">#</a> 1）学会访问开发服务器查看效果</h4><h4 id="_2-学会动态获取资源文件路径" tabindex="-1"><a class="header-anchor" href="#_2-学会动态获取资源文件路径" aria-hidden="true">#</a> 2）学会动态获取资源文件路径</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">&quot;./assets/1.png&quot;</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-学会省略文件和后缀名" tabindex="-1"><a class="header-anchor" href="#_3-学会省略文件和后缀名" aria-hidden="true">#</a> 3）学会省略文件和后缀名</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./home&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 若存在home.js，可省略js</span>
<span class="token keyword">import</span> <span class="token string">&quot;./movie&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 若movie是一个目录，此次导入的是 ./movie/index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-学会使用别名简化导入代码" tabindex="-1"><a class="header-anchor" href="#_4-学会使用别名简化导入代码" aria-hidden="true">#</a> 4）学会使用别名简化导入代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;@/b/b1&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 实际导入： src/b/b1/index.js  (若b1是目录)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-学会使用-css-module" tabindex="-1"><a class="header-anchor" href="#_5-学会使用-css-module" aria-hidden="true">#</a> 5）学会使用 css module</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// styles 是一个对象，里面映射了源码类名和打包类名的关系</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">&quot;./index.module.less&quot;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八-案例实操-分页电影列表" tabindex="-1"><a class="header-anchor" href="#八-案例实操-分页电影列表" aria-hidden="true">#</a> （八）案例实操：分页电影列表</h2>`,106),X={href:"https://study.duyiedu.com/movie",target:"_blank",rel:"noopener noreferrer"},Z=n("br",null,null,-1),nn={href:"https://app.apifox.com/link/project/2429576/apis/api-67925177",target:"_blank",rel:"noopener noreferrer"},sn=t('<h3 id="_1-功能模块划分" tabindex="-1"><a class="header-anchor" href="#_1-功能模块划分" aria-hidden="true">#</a> 1.功能模块划分</h3><p><img src="'+f+'" alt=""></p><h3 id="_2-分包" tabindex="-1"><a class="header-anchor" href="#_2-分包" aria-hidden="true">#</a> 2.分包</h3><ul><li>如果站点中的所有依赖都打包到一个 js 文件中，势必会导致打包结果过大</li></ul><p><img src="'+_+`" alt=""></p><ul><li>实际上，在页面初始的时候，不需要那么多代码参与运行</li><li>比如在这个项目中，一开始必须要运行的只有封面模块 <ul><li>因为是用户一开始就必须要能够看见的</li><li>而电影模块可以慢慢加载</li></ul></li><li>可以使用动态导入的方式加载电影模块</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>

<span class="token comment">// 静态导入，表示初始就必须要依赖 cover 模块</span>
<span class="token keyword">import</span> <span class="token string">&quot;./cover&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 动态导入，表示运行到此代码时才会去远程加载 movie 模块</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./movie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>webpack 能够识别动态导入的代码</li><li>当发现某个模块是使用动态导入时，该模块会单独形成打包结果</li></ul><p><img src="`+x+'" alt=""></p><ul><li>在浏览器运行时，会首先加载初始的打包结果</li><li>然后在后续的运行过程中，动态加载其他模块</li><li>这样可以尽量提升初始加载效率，又不影响后续模块的加载</li></ul><p><img src="'+y+'" alt=""></p><h3 id="_3-跨域代理" tabindex="-1"><a class="header-anchor" href="#_3-跨域代理" aria-hidden="true">#</a> 3.跨域代理</h3><ul><li>大部分时候，为了安全，服务器都是不允许跨域访问的</li><li>所以，将来部署应用的时候，通常会使用下面的方式进行部署 <ul><li>最终部署之后，不存在跨域问题</li></ul></li></ul><p><img src="'+q+'" alt=""></p><ul><li>跨域问题在开发阶段是存在的</li><li>要消除开发阶段的跨域问题，便于在开发阶段查看效果</li></ul><p><img src="'+j+`" alt=""></p><h4 id="_1-在-webpack-config-js-中设置代理" tabindex="-1"><a class="header-anchor" href="#_1-在-webpack-config-js-中设置代理" aria-hidden="true">#</a> 1）在 <code>webpack.config.js</code> 中设置代理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 当请求地址以 api 开头时，代理到另一个地址</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://study.duyiedu.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 代理的目标地址</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 更改请求头中的host，无须深究，为避免出问题，最好写上</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-在-ajax-请求时加上请求路径" tabindex="-1"><a class="header-anchor" href="#_2-在-ajax-请求时加上请求路径" aria-hidden="true">#</a> 2）在 <code>ajax</code> 请求时加上请求路径</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://study.duyiedu.com/api/movies&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ 无须指定源</span>

axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api/movies&#39;</span><span class="token punctuation">)</span>； <span class="token comment">// ✅</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+w+'" alt=""></p><ul><li>这样一来，在跨域问题上，就做到了开发环境和生产环境的统一</li></ul><p><img src="'+C+'" alt=""></p><h3 id="_4-模块" tabindex="-1"><a class="header-anchor" href="#_4-模块" aria-hidden="true">#</a> 4.模块</h3><p><img src="'+S+`" alt=""></p><h4 id="_1-list-模块" tabindex="-1"><a class="header-anchor" href="#_1-list-模块" aria-hidden="true">#</a> 1）list 模块</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 初始化函数，负责创建容器
 */</span>
<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据传入的电影数组，创建元素，填充到容器中
 * <span class="token keyword">@params</span> movies 电影数组
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createMovieTags</span><span class="token punctuation">(</span><span class="token parameter">movies</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-pager-模块" tabindex="-1"><a class="header-anchor" href="#_2-pager-模块" aria-hidden="true">#</a> 2）pager 模块</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 初始化函数，负责创建容器
 */</span>
<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据传入的页码、页容量、总记录数，创建分页区域的标签
 * <span class="token keyword">@params</span> page 页码
 * <span class="token keyword">@params</span> limit 页容量
 * <span class="token keyword">@params</span> total 总页数
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPagers</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> total</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-createpagers" tabindex="-1"><a class="header-anchor" href="#_3-createpagers" aria-hidden="true">#</a> 3）createPagers</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 根据传入的页码、页容量、总记录数，创建分页区域的标签
 * <span class="token keyword">@params</span> page 页码
 * <span class="token keyword">@params</span> limit 页容量
 * <span class="token keyword">@params</span> total 总页数
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPagers</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> total</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 辅助函数，负责帮忙创建一个页码标签
   * <span class="token keyword">@params</span> text 标签的文本
   * <span class="token keyword">@params</span> status 标签的状态，空字符串-普通状态，disabled-禁用状态，active-选中状态
   */</span>
  <span class="token keyword">function</span> <span class="token function">createTag</span><span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> status<span class="token punctuation">,</span> targetPage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">//1. 创建首页标签</span>
  <span class="token comment">//2. 创建上一页标签</span>
  <span class="token comment">//3. 创建数字页码标签</span>
  <span class="token comment">//4. 创建下一页标签</span>
  <span class="token comment">//5. 创建尾页标签</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function an(en,tn){const a=i("ExternalLinkIcon");return l(),o("div",null,[M,n("blockquote",null,[n("p",null,[s("下载地址："),n("a",P,[s("https://nodejs.org/zh-cn/"),e(a)])])]),V,n("blockquote",null,[n("p",null,[s("npm 官网："),n("a",B,[s("https://www.npmjs.com/"),e(a)])]),I,n("p",null,[s("npm 全命令："),n("a",L,[s("https://docs.npmjs.com/cli/v7/commands"),e(a)])])]),R,n("blockquote",null,[n("p",null,[s("Less 官网："),n("a",F,[s("https://lesscss.org/"),e(a)])]),N,n("p",null,[s("Less 民间中文网："),n("a",J,[s("https://less.bootcss.com/"),e(a)])])]),n("ul",null,[n("li",null,[n("a",D,[s("变量"),e(a)])]),n("li",null,[n("a",T,[s("嵌套"),e(a)])]),n("li",null,[n("a",O,[s("混合"),e(a)])]),n("li",null,[n("a",z,[s("Less 的特殊注释"),e(a)])])]),H,n("ul",null,[n("li",null,[n("a",$,[s("https://blog.csdn.net/huangpb123/article/details/120248002"),e(a)])])]),U,n("blockquote",null,[n("p",null,[s("nvm github 地址："),n("a",W,[s("https://github.com/nvm-sh/nvm"),e(a)])])]),G,n("blockquote",null,[n("p",null,[s("链接："),n("a",Q,[s("https://pan.baidu.com/s/1uoxlk8CVNHV2KTCwIGbQMQ?pwd=yi5m"),e(a)])]),A,K]),Y,n("blockquote",null,[n("p",null,[s("效果展示地址："),n("a",X,[s("https://study.duyiedu.com/movie"),e(a)])]),Z,n("p",null,[s("接口地址："),n("a",nn,[s("https://app.apifox.com/link/project/2429576/apis/api-67925177"),e(a)])])]),sn])}const on=p(E,[["render",an],["__file","01.html.vue"]]);export{on as default};
