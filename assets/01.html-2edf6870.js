import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as s,c as n,a as e,b as l,d as t,e as i}from"./app-9327f924.js";const o="/assets/HTML相关面试题01-7a8a5a76.png",h="/assets/HTML相关面试题02-32c66d74.png",c="/assets/HTML相关面试题03-b2c5b2c0.png",u="/assets/HTML相关面试题04-2b6222f5.png",p="/assets/HTML相关面试题05-d0ae0ad3.png",_="/assets/HTML相关面试题06-13b548be.png",b="/assets/HTML相关面试题07-097cd29a.png",m="/assets/HTML相关面试题08-eb761e7f.png",T={},k=i('<p><img src="'+o+`" alt=""></p><h2 id="一-文档声明" tabindex="-1"><a class="header-anchor" href="#一-文档声明" aria-hidden="true">#</a> （一）文档声明</h2><h3 id="_1-经典真题" tabindex="-1"><a class="header-anchor" href="#_1-经典真题" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>什么是 <code>&lt;!DOCTYPE&gt;</code> ？是否需要在 HTML5 中使用？</li><li>什么是严格模式与混杂模式？</li><li>列举几条怪异模式中的怪癖行为</li></ul><h3 id="_2-文档声明概念" tabindex="-1"><a class="header-anchor" href="#_2-文档声明概念" aria-hidden="true">#</a> 2.文档声明概念</h3><ul><li>HTML 文档通常以文档声明开始</li><li>作用是帮助浏览器确定其尝试解析和显示的 HTML 文档类型</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>必须是 HTML 文档的 <mark>第一行</mark>，且 <mark>顶格显示</mark>， <mark>对大小写不敏感</mark><ul><li>因为任何放在 DOCTYPE 前面的东西，比如批注或 XML 声明，会令 IE9 或更早期的浏览器触发怪异模式</li></ul></li><li>文档声明并非一个 HTML 标签，是一条“信息”，告知浏览器期望的文档类型</li></ul><h3 id="_3-文档声明的版本" tabindex="-1"><a class="header-anchor" href="#_3-文档声明的版本" aria-hidden="true">#</a> 3.文档声明的版本</h3><p><img src="`+h+'" alt=""></p><p><img src="'+c+'" alt=""></p><ul><li>HTML 版本从最开始诞生到最新的 HTML5，中间经历了很多版本</li><li>最显著的区别就是支持的 HTML 元素不同</li></ul><p><img src="'+u+'" alt=""></p>',13),M={href:"https://www.w3school.com.cn/tags/html_ref_dtd.asp",target:"_blank",rel:"noopener noreferrer"},g=i(`<ul><li>必须要书写文档声明</li><li>因为不同版本所支持的 HTML 元素类型是不同的</li><li>需要告诉浏览器以哪一种文档类型方式来解析当前的这个 HTML 文件</li></ul><h3 id="_4-旧版本的文档声明" tabindex="-1"><a class="header-anchor" href="#_4-旧版本的文档声明" aria-hidden="true">#</a> 4.旧版本的文档声明</h3><h4 id="_1-html-4-01-strict" tabindex="-1"><a class="header-anchor" href="#_1-html-4-01-strict" aria-hidden="true">#</a> 1）HTML 4.01 Strict</h4><ul><li>该 DTD 包含所有 HTML 元素和属性</li><li>但不包括展示性的和弃用的元素（比如 font）</li><li>不允许框架集 Framesets</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-html-4-01-transitional" tabindex="-1"><a class="header-anchor" href="#_2-html-4-01-transitional" aria-hidden="true">#</a> 2）HTML 4.01 Transitional</h4><ul><li>该 DTD 包含所有 HTML 元素和属性</li><li>包括展示性的和弃用的元素（比如 font）</li><li>不允许框架集 Framesets</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),L={href:"https://www.w3school.com.cn/tags/tag_doctype.asp",target:"_blank",rel:"noopener noreferrer"},f=i('<div class="hint-container info"><p class="hint-container-title">为什么格式这么长</p><ul><li>HTML5 不需要引入 DTD 文件</li><li>其他类型的文档声明需要引入 DTD 文件</li></ul></div><h3 id="_5-html-的发展历史" tabindex="-1"><a class="header-anchor" href="#_5-html-的发展历史" aria-hidden="true">#</a> 5.HTML 的发展历史</h3><ul><li>早期的 HTML 版本，如：HTML 4.01 是基于 SGML</li><li>DTD 规定的是标记语言的规则，这样浏览器才能正确地呈现内容</li><li>但是最新的 HTML5 不基于 SGML，所以不需要引用 DTD</li></ul><h4 id="_1-ml" tabindex="-1"><a class="header-anchor" href="#_1-ml" aria-hidden="true">#</a> 1）ML</h4><ul><li>ML，Markup Language，置标语言</li><li>用标准的标记来解释纯文本文档的内容，从而提供关于文档结构或文档该如何渲染的信息</li></ul><p><img src="'+p+'" alt=""></p><h4 id="_2-gml" tabindex="-1"><a class="header-anchor" href="#_2-gml" aria-hidden="true">#</a> 2）GML</h4><ul><li>第一代置标语言，使文档能明确将标示和内容分开</li><li>所有文件使用同样的标示方法</li></ul><h4 id="_3-sgml" tabindex="-1"><a class="header-anchor" href="#_3-sgml" aria-hidden="true">#</a> 3）SGML</h4><ul><li>在 GML 的基础上进行整理，形成一套非常严谨的文件描述方法</li><li>包括语法定义、DTD、文件实例</li></ul><blockquote><p>由于 SGML 太严谨，规范达 500 多页，并且不易学、不易用、难以实现，所以在它的基础上又发展出了其他的更易用的置标语言</p></blockquote><h4 id="_4-html" tabindex="-1"><a class="header-anchor" href="#_4-html" aria-hidden="true">#</a> 4）HTML</h4><ul><li>抛弃了 SGML 复杂庞大的缺点，继承了 SGML 的很多优点</li><li>最大的特点是简单性和跨平台性</li><li>只使用了 SGML 中很少的一部分标记 <ul><li>如：HTML 4.0 中只定义了 70 余种标记</li></ul></li><li>为了便于在计算机上实现，HTML 规定的标记是固定的 <ul><li>即 HTML 语法是不可扩展的</li></ul></li></ul><h4 id="_5-xhtml" tabindex="-1"><a class="header-anchor" href="#_5-xhtml" aria-hidden="true">#</a> 5）XHTML</h4><blockquote><p>随着 Web 应用的不断发展，HTML 的局限性也越来越明显地显现了出来，如：无法描述数据、可读性差、搜索时间长等</p><br><p>人们又把目光转向 SGML，再次改造使之适应现在的网络需求</p><br><p>1998 年 2 月 10 日，W3C（World Wide Web Consortium，万维网联盟）公布 XML 1.0 标准，很长一段时间 XML 都作为网络传输的标准数据格式</p><br><p>当时的 HTML 语法要求比较松散，对网页编写者来说比较方便，但是对机器来说，语言的语法越松散，处理起来就越困难</p></blockquote><ul><li>传统的计算机还有能力兼容松散语法，但对于许多其他设备，比如手机，难度就比较大</li><li>因此产生了由 DTD 定义规则，语法要求更加严格的 XHTML</li></ul>',16),H={href:"https://www.w3school.com.cn/dtd/index.asp",target:"_blank",rel:"noopener noreferrer"},D=i('<h4 id="_6-html" tabindex="-1"><a class="header-anchor" href="#_6-html" aria-hidden="true">#</a> 6）HTML</h4><ul><li>HTML5 是 HTML 的第五个修订版 <ul><li>该版本不再基于 SGML，也就不用再引入 DTD 声明</li></ul></li><li>主要的目标是将互联网语义化，以便更好地被人类和机器阅读，同时更好地支持各种媒体的嵌入</li></ul><blockquote><p>现在国内通常所说的 H5 开发，实际上是 HTML5 与 CSS3 及 ES6 的一个组合</p></blockquote><h3 id="_6-渲染模式" tabindex="-1"><a class="header-anchor" href="#_6-渲染模式" aria-hidden="true">#</a> 6.渲染模式</h3><ul><li>浏览器渲染模式分为 3 种 <ul><li>怪癖模式/混杂模式，Quirks mode</li><li>严格模式/标准模式，Standards mode</li><li>几乎标准模式，Almost standards mode</li></ul></li></ul><h4 id="_1-成因" tabindex="-1"><a class="header-anchor" href="#_1-成因" aria-hidden="true">#</a> 1）成因</h4><blockquote><p>之所以出现不同的渲染模式，是由于历史原因</p><br><p>当年 Netscape4（网景公司早期的浏览器）和 IE4（微软公司早期的浏览器）在实现 CSS 机制时，没有遵循 W3C 提出的标准。Netscape4 提供了糟糕的支持，而 IE4 虽然接近标准，但依旧未能完全正确的支持标准。</p><br><p>所以，在 W3C 标准推出以前，浏览器在对页面的渲染上没有统一规范，产生了差异（Quirks mode 或者称为 Compatibility Mode）</p><br><p>为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用 CSS，因此大部分网站的 CSS 实现并不符合 W3C 规范的标准</p><br><p>W3C 标准推出后，浏览器渲染页面有了统一的标准（Strict mode 也叫做 Standards mode）浏览器都开始采纳新标准，但存在一个问题就是如何保证旧的网页还能继续浏览，在标准出来以前，很多页面都是根据旧的渲染方法编写的，如果用的标准来渲染，将导致页面显示异常</p><br><p>为保持浏览器渲染的兼容性，使以前的页面能够正常浏览，浏览器都保留了旧的渲染方法（如：微软的 IE）。这样浏览器渲染上就产生了 Quirks mode 和 Standards mode，两种渲染方法共存在一个浏览器上</p><br><p>混杂模式服务于旧式规则，而严格模式服务于标准规则</p></blockquote><ul><li>浏览器使用文档开头的 DOCTYPE 来 <mark>决定用怪异模式还是标准模式处理</mark></li><li>如果文档中没有 DOCTYPE 将触发文档的怪异模式 <ul><li>怪异模式最明显的影响是会 <mark>触发怪异盒模型</mark></li></ul></li><li>在 DOCTYPE 声明中，没有使用 DTD 声明或者使用 HTML4 以下的 DTD 声明时 <ul><li>基本所有的浏览器都是使用 Quirks mode 呈现</li><li>其他的则使用 Standards mode 解析</li></ul></li></ul><h4 id="_2-严格模式和怪异模式的部分渲染区别" tabindex="-1"><a class="header-anchor" href="#_2-严格模式和怪异模式的部分渲染区别" aria-hidden="true">#</a> 2）严格模式和怪异模式的部分渲染区别</h4><ul><li>盒模型的宽高包含内边距 padding 和边框 border <ul><li>在 W3C 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度</li><li>而在 IE5.5 及以下的浏览器及其他版本的 Quirks 模式下，IE 的宽度和高度还包含了 padding 和 border</li></ul></li></ul><p><img src="'+_+'" alt=""></p><ul><li>可以设置行内元素的高宽 <ul><li>在 Standards 模式下，给 span 等行内元素设置 width 和 height 都不会生效</li><li>而在 Quirks 模式下，则会生效</li></ul></li><li>可以设置百分比的高度 <ul><li>在 Standards 模式下，一个元素的高度是由其包含的内容来决定的</li><li>如果父元素没有设置高度，子元素设置一个百分比的高度是无效的</li></ul></li><li>用 <code>margin: 0 auto</code> 设置水平居中在 IE 下会失效 <ul><li>在 Standards 模式下可以使元素水平居中，但在 Quirks 模式下却会失效</li><li>Quirks 模式下可以用 <code>text-align</code> 属性解决</li></ul></li><li>Quirks 模式下设置图片的 padding 会失效</li><li>Quirks 模式下 Table 中的字体属性不能继承上层的设置</li><li>Quirks 模式下 <code>white-space: pre</code> 会失效</li></ul>',12),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode",target:"_blank",rel:"noopener noreferrer"},q=e("br",null,null,-1),C={href:"https://hsivonen.fi/doctype/",target:"_blank",rel:"noopener noreferrer"},v=i('<h3 id="_7-真题解答" tabindex="-1"><a class="header-anchor" href="#_7-真题解答" aria-hidden="true">#</a> 7.真题解答</h3><h4 id="_1-什么是-doctype-是否需要在-html5-中使用" tabindex="-1"><a class="header-anchor" href="#_1-什么是-doctype-是否需要在-html5-中使用" aria-hidden="true">#</a> 1）什么是 <code>&lt;!DOCTYPE&gt;</code> ？是否需要在 HTML5 中使用？</h4><blockquote><p>是 HTML 的文档声明，通过它告诉浏览器使用哪一个 HTML 版本标准解析文档</p><br><p>在浏览器发展的历史中，HTML 出现过很多个版本，不同版本在元素、属性等书写格式上略有差异，如果不预先告诉浏览器，浏览器就不知道我们的文档标准是什么，在这种情况下，大部分浏览器将开启最大兼容模式来解析网页，我们称之为怪异模式。这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的 bug，所以文档声明是必须的</p><br><p>而文档声明有多种书写格式，对应不同的 HTML 版本，<code>&lt;!DOCTYPE&gt;</code> 这种书写格式是告诉浏览器，整个文档使用 HTML5 的标准进行解析</p></blockquote><h4 id="_2-什么是严格模式与混杂模式" tabindex="-1"><a class="header-anchor" href="#_2-什么是严格模式与混杂模式" aria-hidden="true">#</a> 2）什么是严格模式与混杂模式？</h4><blockquote><p><strong>严格模式</strong>：又称标准模式，是指浏览器按照 W3C 标准解析代码</p><br><p><strong>混杂模式</strong>：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码</p><br><p><strong>如何区分</strong>：浏览器解析时到底使用严格模式还是混杂模式，与网页中的 DTD 直接相关</p><ol><li>如果文档包含严格的 DOCTYPE ，那么一般以严格模式呈现，<mark>严格 DTD —— 严格模式</mark></li><li>包含过渡 DTD 和 URI 的 DOCTYPE ，也以严格模式呈现，<mark>有 URI 的过渡 DTD —— 严格模式</mark></li><li>有过渡 DTD 而没有 URI （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现，<mark>没有 URI 的过渡 DTD —— 混杂模式</mark></li><li>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现，<mark>DTD 不存在或者格式不正确 —— 混杂模式</mark></li><li>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容，<mark>HTML5 没有严格和混杂之分</mark></li></ol><br><p><strong>意义</strong>：严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式</p></blockquote><h4 id="_3-列举几条怪异模式中的怪癖行为" tabindex="-1"><a class="header-anchor" href="#_3-列举几条怪异模式中的怪癖行为" aria-hidden="true">#</a> 3）列举几条怪异模式中的怪癖行为</h4><blockquote><ol><li>宽高的算法与 W3C 盒模型不同</li><li>在表格中的字体样式不会继承</li><li>怪异模式下可以设置行内元素宽高</li><li>怪异模式下 <code>white-space: pre</code> 会失效</li></ol></blockquote><h2 id="二-语义化" tabindex="-1"><a class="header-anchor" href="#二-语义化" aria-hidden="true">#</a> （二）语义化</h2><h3 id="_1-经典真题-1" tabindex="-1"><a class="header-anchor" href="#_1-经典真题-1" aria-hidden="true">#</a> 1.经典真题</h3><ul><li>说说对 html 语义化的理解</li></ul><h3 id="_2-语义元素" tabindex="-1"><a class="header-anchor" href="#_2-语义元素" aria-hidden="true">#</a> 2.语义元素</h3><ul><li>语义是指对一个词或者句子含义的正确解释</li><li>很多 HTML 标签具有语义的意义，即元素本身传达了关于标签所包含内容类型的一些信息</li><li>如：当浏览器解析到 <code>&lt;h1&gt;&lt;/h1&gt;</code> 标签时 <ul><li>将该标签解释为包含这一块内容的最重要的标题</li><li>h1 标签的语义就是用它来标识特定网页或部分最重要的标题</li></ul></li></ul><h3 id="_3-语义化" tabindex="-1"><a class="header-anchor" href="#_3-语义化" aria-hidden="true">#</a> 3.语义化</h3><h4 id="_1-展示良好的代码结构" tabindex="-1"><a class="header-anchor" href="#_1-展示良好的代码结构" aria-hidden="true">#</a> 1）展示良好的代码结构</h4><ul><li>使页面没有 css 的情况下，也能够呈现出很好的内容结构</li></ul><h4 id="_2-有利于-seo" tabindex="-1"><a class="header-anchor" href="#_2-有利于-seo" aria-hidden="true">#</a> 2）有利于 SEO</h4><ul><li>爬虫依赖标签来确定关键字的权重</li><li>可以和搜索引擎建立良好的沟通，帮助爬虫抓取更多的有效信息</li></ul><h4 id="_3-提升用户体验" tabindex="-1"><a class="header-anchor" href="#_3-提升用户体验" aria-hidden="true">#</a> 3）提升用户体验</h4><ul><li>title、alt 可以用于解释名称或者解释图片信息</li><li>灵活运用 label 标签</li></ul><h4 id="_4-便于团队开发和维护" tabindex="-1"><a class="header-anchor" href="#_4-便于团队开发和维护" aria-hidden="true">#</a> 4）便于团队开发和维护</h4><ul><li>语义化使得代码更具有可读性</li><li>让其他开发人员更加理解你的 html 结构，减少差异化</li></ul><h4 id="_5-方便其他设备解析" tabindex="-1"><a class="header-anchor" href="#_5-方便其他设备解析" aria-hidden="true">#</a> 5）方便其他设备解析</h4><ul><li>屏幕阅读器、盲人阅读器、移动设备等</li><li>以有意义的方式来渲染网页【无障碍】</li></ul><h3 id="_4-html5-常用的语义元素" tabindex="-1"><a class="header-anchor" href="#_4-html5-常用的语义元素" aria-hidden="true">#</a> 4.HTML5 常用的语义元素</h3><ul><li>HTML5 提供了新的语义元素来定义网页的不同部分，被称为“切片元素”</li></ul><p><img src="'+b+'" alt=""></p><table><thead><tr><th>标签</th><th>语义</th></tr></thead><tbody><tr><td>header</td><td>用于定义页面的头部区域<br>通常包括网站 logo、主导航、全站链接以及搜索框</td></tr><tr><td>nav</td><td>定义页面的导航链接部分区域</td></tr><tr><td>main</td><td>定义文档的主要内容<br>该内容在文档中应当是独一无二的</td></tr><tr><td>article</td><td>定义页面独立的内容<br>可以有自己的 header、footer、sections 等<br>专注于单个主题的博客文章，报纸文章或网页文章</td></tr><tr><td>section</td><td>表示文档中的一个区域（或节）<br>如：内容中的一个专题组</td></tr><tr><td>aside</td><td>表示一个和其余页面内容几乎无关的部分<br>被认为是独立于该内容的一部分且可以被单独的拆分出来而不会影响整体<br>通常表现为侧边栏或嵌入内容</td></tr><tr><td>footer</td><td>定义最近一个章节内容或者根节点元素的页脚<br>一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息</td></tr></tbody></table><ul><li>大约有 100 多个 HTML 语义元素可供选择</li></ul><p><img src="'+m+'" alt=""></p>',29),S={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element",target:"_blank",rel:"noopener noreferrer"},w=i('<h3 id="_5-无障碍网页" tabindex="-1"><a class="header-anchor" href="#_5-无障碍网页" aria-hidden="true">#</a> 5.无障碍网页</h3><ul><li>HTML5 在无障碍方面进行了加强，加入了无障碍属性</li></ul><h4 id="_1-无障碍" tabindex="-1"><a class="header-anchor" href="#_1-无障碍" aria-hidden="true">#</a> 1）无障碍</h4><blockquote><p>W3C 在 1997 年发起了一项 WAI（Web Accessibility Initiative）的计划</p><br><p>该计划的目标是提升网站的易用性（accessibility），而其中有一个很重要的指标，那就是能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站</p><br><p>无障碍属性主要针对的是视觉缺陷、失聪、行动不便的残疾人以及假装残疾的测试人员</p><br><p>尤其像盲人，眼睛看不到，其浏览网页则需要借助辅助设备，如：屏幕阅读器，屏幕阅读机可以大声朗读或者输出盲文</p></blockquote><ul><li>HTML5 无障碍属性可以让屏幕阅读器准确识别网页中的内容、变化、状态的技术规范</li><li>让盲人这类用户也能无障碍阅读</li></ul>',5),W={href:"https://developer.mozilla.org/zh-CN/docs/Web/Accessibility",target:"_blank",rel:"noopener noreferrer"},E=i('<h4 id="_2-常见的无障碍属性" tabindex="-1"><a class="header-anchor" href="#_2-常见的无障碍属性" aria-hidden="true">#</a> 2）常见的无障碍属性</h4><ul><li>WAI-ARIA 是 W3C 编写的规范，定义了一组可用于其他元素的 HTML 特性</li><li>用于提供额外的语义化以及改善缺乏的可访问性</li></ul><table><thead><tr><th>特性</th><th>含义</th></tr></thead><tbody><tr><td>角色</td><td>定义了元素是干什么的<br>许多标志性的角色其实重复了 HTML5 的结构元素的语义价值<br>如：<code>role=&quot;navigation&quot;</code> (nav) 或者 <code>role=&quot;complementary&quot;</code> (aside)</td></tr><tr><td>属性</td><td>通过定义一些属性给元素，让他们具备更多的语义<br>如：<code>aria-required=&quot;true&quot;</code> 意味着元素在表单上是必填的，<code>aria-labelledby=&quot;label&quot;</code> 允许在元素上设置一个 ID，用于 labelledby 引用作为屏幕阅读器指定的 label 内容，多个也可以</td></tr><tr><td>状态</td><td>用于表达元素当前的条件的特殊属性<br>如：<code>aria-disabled=&quot;true&quot;</code>，屏幕阅读器就会禁止输入这个表单</td></tr></tbody></table><ul><li>属性在应用的生命周期中不会改变，而状态可以 <ul><li>通常我们用编程的方法改变它，如：JavaScript</li></ul></li><li>关于 WAI-ARIA 属性重要的一点是它不会对 Web 页面有任何影响 <ul><li>除了让更多的信息从浏览器暴露给 accessibility APIs (无障碍 API) <ul><li>这也是屏幕阅读器这一类软件的信息源</li></ul></li></ul></li><li>WAI-ARIA 不会影响网页的结构，以及 DOM 等等</li><li>这些属性可用于作为 CSS 选择器</li></ul>',4),I={href:"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics",target:"_blank",rel:"noopener noreferrer"},y=i('<h3 id="_6-真题解答" tabindex="-1"><a class="header-anchor" href="#_6-真题解答" aria-hidden="true">#</a> 6.真题解答</h3><h4 id="_1-说说对-html-语义化的理解" tabindex="-1"><a class="header-anchor" href="#_1-说说对-html-语义化的理解" aria-hidden="true">#</a> 1）说说对 html 语义化的理解</h4><blockquote><p>语义化的目的主要有以下几点</p><ol><li>去掉或者丢失样式的时候能够让页面呈现出清晰的结构</li><li>有利于 SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息，爬虫依赖于标签来确定上下文和各个关键字的权重</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以有意义的方式来渲染网页</li><li>便于团队开发和维护，语义化更具可读性，是下一步网页的重要动向，遵循 W3C 标准的团队都遵循这个标准，可以减少差异化。HTML5 中新增加的很多标签，例如：article、nav、header 和 footer 等，就是基于语义化设计原则</li></ol></blockquote><h2 id="三" tabindex="-1"><a class="header-anchor" href="#三" aria-hidden="true">#</a> （三）</h2>',4);function A(N,P){const a=d("ExternalLinkIcon");return s(),n("div",null,[k,e("blockquote",null,[e("p",null,[l("更多各版本所支持的不同 HTML 元素可以参阅："),e("a",M,[l("https://www.w3school.com.cn/tags/html_ref_dtd.asp"),t(a)])])]),g,e("blockquote",null,[e("p",null,[l("更多不同文档类型的声明写法可以参阅："),e("a",L,[l("https://www.w3school.com.cn/tags/tag_doctype.asp"),t(a)])])]),f,e("blockquote",null,[e("p",null,[l("DTD 教程可以参阅："),e("a",H,[l("https://www.w3school.com.cn/dtd/index.asp"),t(a)])])]),D,e("blockquote",null,[e("p",null,[l("更多可以参阅 MDN 上对怪异模式和标准模式的解释："),e("a",x,[l("https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode"),t(a)])]),q,e("p",null,[l("MDN 上还给出了不同模式在不同浏览器下的渲染区别（英文）："),e("a",C,[l("https://hsivonen.fi/doctype/"),t(a)])])]),v,e("blockquote",null,[e("p",null,[l("更多的语义化标签可以参阅："),e("a",S,[l("https://developer.mozilla.org/en-US/docs/Web/HTML/Element"),t(a)])])]),w,e("blockquote",null,[e("p",null,[l("关于无障碍的更多说明，可以参阅 MDN："),e("a",W,[l("https://developer.mozilla.org/zh-CN/docs/Web/Accessibility"),t(a)])])]),E,e("blockquote",null,[e("p",null,[l("更多无障碍属性可以参阅："),e("a",I,[l("https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics"),t(a)])])]),y])}const Q=r(T,[["render",A],["__file","01.html.vue"]]);export{Q as default};
