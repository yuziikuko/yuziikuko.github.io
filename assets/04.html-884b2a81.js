import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,a as n,b as a,d as t,e}from"./app-7ca9cce5.js";const c={},u=n("h2",{id:"一-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-简介","aria-hidden":"true"},"#"),a(" （一）简介")],-1),r={href:"https://www.runoob.com/design-pattern/design-pattern-intro.html",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),k=n("p",null,"推荐书籍：《JS 设计模式》、《JS 模式》",-1),v=e('<ul><li>Design Pattern，设计模式</li><li>是一套被反复使用、多数人知晓的、经过分类的代码设计经验的总结</li></ul><h3 id="_1-模式" tabindex="-1"><a class="header-anchor" href="#_1-模式" aria-hidden="true">#</a> 1.模式</h3><ul><li>指从生产经验和生活经验中经过抽象和升华提炼出来的核心知识体系</li><li>即解决某一类问题的方法论</li></ul><h3 id="_2-目的" tabindex="-1"><a class="header-anchor" href="#_2-目的" aria-hidden="true">#</a> 2.目的</h3><ul><li>为了提高代码可重用性，让代码更容易被理解，保证代码可靠性</li><li>使代码编写真正实现工程化</li><li>是软件工程的基石脉络，类似大厦的结构</li><li>经典例子：高斯求和</li></ul><h2 id="二-类型" tabindex="-1"><a class="header-anchor" href="#二-类型" aria-hidden="true">#</a> （二）类型</h2><h3 id="_1-创建型" tabindex="-1"><a class="header-anchor" href="#_1-创建型" aria-hidden="true">#</a> 1.创建型</h3><ul><li>研究高效地创建对象</li></ul><table><thead><tr><th>名称</th><th>英文</th></tr></thead><tbody><tr><td>单例模式</td><td>Singleton Pattern</td></tr><tr><td>抽象工厂模式</td><td>Abstract Factory Pattern</td></tr><tr><td>建造者模式</td><td>Builder Pattern</td></tr><tr><td>工厂模式</td><td>Factory Pattern</td></tr><tr><td>原型模式</td><td>Prototype Pattern</td></tr></tbody></table><h3 id="_2-结构型" tabindex="-1"><a class="header-anchor" href="#_2-结构型" aria-hidden="true">#</a> 2.结构型</h3><ul><li>设计对象的结构和关系</li></ul><table><thead><tr><th>名称</th><th>英文</th></tr></thead><tbody><tr><td>适配器模式</td><td>Adapter Pattern</td></tr><tr><td>桥接模式</td><td>Bridge Pattern</td></tr><tr><td>装饰模式</td><td>Filter、Criteria Pattern</td></tr><tr><td>组合模式</td><td>Composite Pattern</td></tr><tr><td>外观模式</td><td>Facade Pattern</td></tr><tr><td>享元模式</td><td>Flyweight Pattern</td></tr><tr><td>代理模式</td><td>Proxy Pattern</td></tr></tbody></table><h3 id="_3-行为型" tabindex="-1"><a class="header-anchor" href="#_3-行为型" aria-hidden="true">#</a> 3.行为型</h3><ul><li>设计对象的行为</li></ul><table><thead><tr><th>名称</th><th>英文</th></tr></thead><tbody><tr><td>模板方法模式</td><td>Template Pattern</td></tr><tr><td>命令模式</td><td>Command Pattern</td></tr><tr><td>迭代器模式</td><td>Iterator Pattern</td></tr><tr><td>观察者模式</td><td>Observer Pattern</td></tr><tr><td>中介者模式</td><td>Mediator Pattern</td></tr><tr><td>备忘录模式</td><td>Memento Pattern</td></tr><tr><td>解释器模式</td><td>Interpreter Pattern</td></tr><tr><td>状态模式</td><td>State Pattern</td></tr><tr><td>策略模式</td><td>Strategy Pattern</td></tr><tr><td>职责链模式</td><td>Chain of Responsibility Pattern</td></tr><tr><td>访问者模式</td><td>Visitor Pattern</td></tr></tbody></table><h2 id="三-六大原则" tabindex="-1"><a class="header-anchor" href="#三-六大原则" aria-hidden="true">#</a> （三）六大原则</h2><ul><li>减少耦合，增强复用性，降低代码的开发、维护、扩展成本</li></ul><h3 id="_1-耦合关系" tabindex="-1"><a class="header-anchor" href="#_1-耦合关系" aria-hidden="true">#</a> 1.耦合关系</h3><ul><li>指某两个事物之间一种相互作用、相互影响的关系</li></ul><h4 id="_1-复杂度高" tabindex="-1"><a class="header-anchor" href="#_1-复杂度高" aria-hidden="true">#</a> 1）复杂度高</h4><ul><li>代码质量不高</li><li>可维护性差</li><li>复用性差</li><li>不易扩展</li></ul><h4 id="_2-耦合度" tabindex="-1"><a class="header-anchor" href="#_2-耦合度" aria-hidden="true">#</a> 2）耦合度</h4><ul><li>不可能没有耦合度</li><li>最合理为低耦合度</li><li>耦合度过高不易维护 <ul><li>但依旧有良好的复用性和扩展性</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">开发流程</p><ul><li>优先降低复杂度，尽量降低耦合度</li></ul><ol><li>利用单一职责原则、开闭原则、里氏代换原则降低复杂度</li><li>利用迪米特法则减少耦合度</li><li>利用依赖倒置原则消除可以没有的耦合</li></ol></div><h3 id="_2-单一职责原则-srp" tabindex="-1"><a class="header-anchor" href="#_2-单一职责原则-srp" aria-hidden="true">#</a> 2.单一职责原则 SRP</h3><ul><li>Single Responsibility Principle</li><li>一个方法只做一件事情</li><li>如：请求数据的函数不应该渲染函数</li></ul><h3 id="_3-开闭原则-ocp" tabindex="-1"><a class="header-anchor" href="#_3-开闭原则-ocp" aria-hidden="true">#</a> 3.开闭原则 OCP</h3><ul><li>Open Closed Principle</li><li>一个软件实体（类、模块、函数）应该面向扩展开放，面向修改关闭，同时增强代码复用性</li><li>如：JQuery Extend</li></ul><h3 id="_4-里氏代换原则-lsp" tabindex="-1"><a class="header-anchor" href="#_4-里氏代换原则-lsp" aria-hidden="true">#</a> 4.里氏代换原则 LSP</h3><ul><li>Liskov Substitution Principle</li><li>任何基类可以出现的地方，子类一定可以出现 <ul><li>即：子类可以扩展父类的功能，但不能改变父类原有的功能</li></ul></li><li>一个父类可以访问的接口，当父类忙于处理其他逻辑时，可以由子类访问</li></ul><h3 id="_5-迪米特法则-lod-最少知识原则-lkp" tabindex="-1"><a class="header-anchor" href="#_5-迪米特法则-lod-最少知识原则-lkp" aria-hidden="true">#</a> 5.迪米特法则 LOD / 最少知识原则 LKP</h3><ul><li>Law of Demeter / Least Knowledge Principle</li><li>一个接口和一个方法，传入的参数越少越好 <ul><li>形成的关联越少越好，依赖最少</li></ul></li><li>降低耦合度，同时也降低复杂度</li></ul><h3 id="_6-依赖倒置原则-dip" tabindex="-1"><a class="header-anchor" href="#_6-依赖倒置原则-dip" aria-hidden="true">#</a> 6.依赖倒置原则 DIP</h3><ul><li>Dependency Inversion Principle</li><li>依赖接口，不依赖方法 <ul><li>不关注底层，只需要知道表现</li><li>最常用的原则</li></ul></li><li>降低耦合度</li><li>前端应用中可以理解为多者之间依赖状态，而不依赖彼此 <ul><li>如：定义全局变量</li><li>JS 中没有接口的概念</li></ul></li></ul><h3 id="_7-接口分离原则-isp" tabindex="-1"><a class="header-anchor" href="#_7-接口分离原则-isp" aria-hidden="true">#</a> 7.接口分离原则 ISP</h3><ul><li>Interface Segregation Principle</li><li>将大接口拆分为小接口 <ul><li>不能一个接口全部实现增删改查</li></ul></li><li>降低耦合度</li></ul><h3 id="_8-合成-聚合复用原则-carp【扩展】" tabindex="-1"><a class="header-anchor" href="#_8-合成-聚合复用原则-carp【扩展】" aria-hidden="true">#</a> 8.合成/聚合复用原则 CARP【扩展】</h3>',37),h={href:"https://cloud.tencent.com/developer/article/1650116",target:"_blank",rel:"noopener noreferrer"},m=e(`<ul><li>也叫合成复用原则，Composite Reuse Principle, CRP</li><li>尽量使用合成/聚合，而不是通过继承达到复用的目的</li><li>在一个新的对象里使用一些已有的对象，使之成为新对象的一部分 <ul><li>新的对象通过向内部持有的这些对象的委派达到复用已有功能的目的</li><li>而不是通过继承来获得已有的功能</li></ul></li><li>聚合 <ul><li>表示一种弱的&quot;拥有&quot;关系，一般表现为松散的整体和部分的关系</li><li>所谓整体和部分也可以是完全不相关的</li><li>如：A 对象持有 B 对象，B 对象并不是 A 对象的一部分 <ul><li>也就是 B 对象的生命周期是 B 对象自身管理，和 A 对象不相关</li></ul></li></ul></li><li>合成 <ul><li>表示一种强的&quot;拥有&quot;关系，一般表现为严格的整体和部分的关系</li><li>部分和整体的生命周期是一样的</li></ul></li></ul><h3 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9.总结</h3><table><thead><tr><th>标记</th><th>原则</th><th>简单定义</th></tr></thead><tbody><tr><td>SRP</td><td>单一职责原则</td><td>一个类只负责一个功能领域中的相应职责</td></tr><tr><td>OCP</td><td>开闭原则</td><td>对扩展开放，对修改关闭</td></tr><tr><td>LSP</td><td>里氏代换原则</td><td>所有引用基类的地方必须能透明地使用其子类的对象</td></tr><tr><td>LOD</td><td>迪米特法则</td><td>一个软件实体应当尽可能少的与其他实体发生相互作用</td></tr><tr><td>DIP</td><td>依赖倒置原则</td><td>依赖于抽象，不能依赖于具体实现</td></tr><tr><td>ISP</td><td>接口分离原则</td><td>类之间的依赖关系应该建立在最小的接口上</td></tr><tr><td>CARP</td><td>合成/聚合复用原则</td><td>尽量使用合成/聚合，而不是通过继承达到复用的目的</td></tr></tbody></table><blockquote><p>代码是一团乱麻，先靠 <strong>单一</strong>、<strong>开闭</strong>、<strong>里氏</strong> 分成多块，通过 <strong>最小知道</strong> 弱化关系，最后需要 <strong>依赖倒置</strong> 把消除没必要的耦合</p></blockquote><div class="hint-container danger"><p class="hint-container-title">先原则，再模式</p><ul><li><mark>原则是理论，模式是在理论上的具体方式</mark></li><li>代码质量的高低是素质，学会权衡才是高价值的开发经验</li></ul><blockquote><p>我希望并建议你考试 100 分，但都是理论，具体还需要落在实际方式方法上</p><p>但不可以只追求理论，其中有时间成本问题，用更多时间去玩还能保证不低的分数也是可以的</p></blockquote></div><h2 id="四-uml" tabindex="-1"><a class="header-anchor" href="#四-uml" aria-hidden="true">#</a> （四）UML</h2><h3 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1.简介</h3><ul><li>Unified Modeling Language，标准建模语言</li><li>用于对软件密集系统进行可视化建模的语言</li><li>在开发阶段，说明、可视化、构建和书写一个面向对象软件密集系统的制品的开放方法</li></ul><blockquote><p>开发软件系统如建筑，代码是砖头，用于实现功能，但也需要设计图纸</p><br><p>UML 是写设计图纸的语言，专业人士可以通过图纸沟通理解</p></blockquote><h3 id="_2-应用" tabindex="-1"><a class="header-anchor" href="#_2-应用" aria-hidden="true">#</a> 2.应用</h3><h4 id="_1-场景" tabindex="-1"><a class="header-anchor" href="#_1-场景" aria-hidden="true">#</a> 1）场景</h4><ul><li>系统前期设计时，会用于进行专业性的方案讨论</li><li>日常开发中设计系统功能时，可以通过 UML 描述 <ul><li>有几个接口，涉及几个类，关联性、状态如何，顺序流程等等</li></ul></li></ul><h4 id="_2-步骤" tabindex="-1"><a class="header-anchor" href="#_2-步骤" aria-hidden="true">#</a> 2）步骤</h4><ul><li>确定系统边界 <ul><li>功能</li></ul></li><li>确定使用者 <ul><li>用户</li></ul></li><li>画用例图</li><li>画活动图 <ul><li>强调流程</li></ul></li><li>画时序图 <ul><li>强调时间和层次</li><li>用于复杂项目中</li></ul></li><li>画状态图 <ul><li>体现重要实例在事件触发时状态的切换</li></ul></li><li>画类图 <ul><li>精细化部分重要类</li></ul></li></ul><h4 id="_3-三大流派" tabindex="-1"><a class="header-anchor" href="#_3-三大流派" aria-hidden="true">#</a> 3）三大流派</h4><ul><li>Booch 画法、James Rumbaugh、Jacobson 雅各布森</li><li>James Rumbaugh 最后同意了 UML 过程</li><li>UML 建模过程叫 UP</li><li>RUP 优化了 UML 统一建模语言</li></ul><h3 id="_3-用例图" tabindex="-1"><a class="header-anchor" href="#_3-用例图" aria-hidden="true">#</a> 3.用例图</h3><ul><li>用例 <ul><li>用户对系统可以做的事、产生的行为</li></ul></li><li>目的在于需求捕获、测试依据</li></ul><h3 id="_4-状态图" tabindex="-1"><a class="header-anchor" href="#_4-状态图" aria-hidden="true">#</a> 4.状态图</h3><ul><li>描述实体对象不同状态的转化 <ul><li>A 状态-&gt;B 状态需要触发什么事件</li></ul></li><li>目的在于梳理触发事件</li><li>图中的每一个方块都是名词，代表状态</li></ul><h3 id="_5-活动图" tabindex="-1"><a class="header-anchor" href="#_5-活动图" aria-hidden="true">#</a> 5.活动图</h3><ul><li>描述一个具体的流程 <ul><li>本质就是流程图</li></ul></li><li>图中的每一个方块都是动词，代表动作</li></ul><h3 id="_6-时序图" tabindex="-1"><a class="header-anchor" href="#_6-时序图" aria-hidden="true">#</a> 6.时序图</h3><ul><li>描述对象之间发送消息的时间顺序</li><li>目的在于显示多个对象之间的层次和动态协作</li></ul><h3 id="_7-类图" tabindex="-1"><a class="header-anchor" href="#_7-类图" aria-hidden="true">#</a> 7.类图</h3><table><thead><tr><th>关系</th><th>图示</th></tr></thead><tbody><tr><td>继承关系</td><td>实线空三角</td></tr><tr><td>实现关系</td><td>虚线空三角</td></tr><tr><td>关联关系</td><td>一条实线 或 三线箭头</td></tr><tr><td>聚合关系</td><td>以三线箭头开始，以空心菱形结束</td></tr><tr><td>组合关系</td><td>以三线箭头开始，以实心菱形结束</td></tr><tr><td>依赖关系</td><td>虚线三线箭头</td></tr></tbody></table><h2 id="五-设计模式详解" tabindex="-1"><a class="header-anchor" href="#五-设计模式详解" aria-hidden="true">#</a> （五）设计模式详解</h2><div class="hint-container warning"><p class="hint-container-title">适用场景</p><ul><li>业务复杂达到一定程度才选用设计模式去解决复杂的问题</li><li>扩展性和复用性要求低、冗余度小的情况下没必要使用</li></ul></div><h3 id="_1-单例模式" tabindex="-1"><a class="header-anchor" href="#_1-单例模式" aria-hidden="true">#</a> 1.单例模式</h3><h4 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1）定义</h4><ul><li>保证一个类中仅有一个实例，并提供一个访问它的全局访问点 <ul><li>在数学和逻辑学中，Singleton 表示 <mark>有且仅有一个元素的集合</mark></li><li>核心结构中只包含一个特殊类（单例）</li></ul></li><li>通过单例模式，可以保证系统中每一个应用该模式的类只有一个实例 <ul><li>即：<mark>一个类只有一个对象实例</mark></li></ul></li><li>如：页面中只有一个弹框，只控制其显示隐藏、替换文本即可</li><li>通过闭包实现 <ul><li>一个函数内部的一个函数称为闭包</li></ul></li></ul><h4 id="_2-代码实现一-返回构造函数的属性" tabindex="-1"><a class="header-anchor" href="#_2-代码实现一-返回构造函数的属性" aria-hidden="true">#</a> 2）代码实现一：返回构造函数的属性</h4><ul><li>违背了开闭原则</li><li>可以随意更改该属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// var this = Object.create(Test.prototype);</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Test<span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不是首次创建</span>
    <span class="token keyword">return</span> Test<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token comment">// 将首次创建的Test实例永久保存</span>
  Test<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token comment">// return this;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以随意更改，不符合开闭原则</span>
Test<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-代码实现二-使用闭包函数" tabindex="-1"><a class="header-anchor" href="#_3-代码实现二-使用闭包函数" aria-hidden="true">#</a> 3）代码实现二：使用闭包函数</h4><ul><li>丢失了原型链</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Test在GO中</span>
<span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 首次调用Test创建的实例</span>
  <span class="token comment">// AO =&gt; instance === this</span>
  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>

  <span class="token comment">// 由于Test本身在GO中，所以该方法将闭包保存到了全局</span>
  <span class="token comment">// 首次创建后全局的Test函数直接返回instance</span>
  <span class="token function-variable function">Test</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">,</span> b <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true true</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 构造函数都是一开始GO中的Test，添加的lastName也是在一开始这个Test的原型链上，首次调用后执行的闭包Test没有lastName属性</span>
<span class="token class-name">Test</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> b<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-代码实现三-使用闭包函数【完美】" tabindex="-1"><a class="header-anchor" href="#_4-代码实现三-使用闭包函数【完美】" aria-hidden="true">#</a> 4）代码实现三：使用闭包函数【完美】</h4><ul><li>使用闭包函数，每次仅返回同一个函数</li></ul><div class="hint-container info"><p class="hint-container-title">圣杯模式</p><ul><li>圣杯：希望得到永生的对象</li><li>JS 中可以永生的对象：全局变量、闭包</li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Test <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> instance<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Test</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">,</span> a<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> b<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true &#39;A&#39; &#39;A&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-代码实现四-转换为单例模式【高级】" tabindex="-1"><a class="header-anchor" href="#_5-代码实现四-转换为单例模式【高级】" aria-hidden="true">#</a> 5）代码实现四：转换为单例模式【高级】</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>oBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="a-非单例模式" tabindex="-1"><a class="header-anchor" href="#a-非单例模式" aria-hidden="true">#</a> a）非单例模式</h5><ul><li>频繁创建、移除 DOM 元素</li><li>影响重排重绘</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">createAlert</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text<span class="token punctuation">;</span>
  oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> oDiv<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> oButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;oBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oButton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> thisDiv <span class="token operator">=</span> <span class="token function">createAlert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Duyi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  thisDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="b-单例模式一" tabindex="-1"><a class="header-anchor" href="#b-单例模式一" aria-hidden="true">#</a> b）单例模式一</h5><ul><li>只返回同一个 DOM 元素</li><li>全局只可以用一次</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> singleAlert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> oDiv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> oDiv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text<span class="token punctuation">;</span>
    oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> oDiv<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> oButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;oBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oButton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> thisDiv <span class="token operator">=</span> <span class="token function">singleAlert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Duyi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  thisDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c-单例模式二" tabindex="-1"><a class="header-anchor" href="#c-单例模式二" aria-hidden="true">#</a> c）<mark>单例模式二</mark></h5><ul><li>全局可以用多次</li><li>将不是单例模式的函数转换为单例模式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//  多个非单例模式的函数</span>
<span class="token keyword">var</span> <span class="token function-variable function">createAlert</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  oDiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text<span class="token punctuation">;</span>
  oDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> oDiv<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// var createIframe = function () {}</span>
<span class="token comment">// ....</span>

<span class="token comment">// 转换为单例模式的函数</span>
<span class="token keyword">var</span> <span class="token function-variable function">getSingleFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> singleAlert <span class="token operator">=</span> <span class="token function">getSingleFunc</span><span class="token punctuation">(</span>createAlert<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// var singleFrame = getSingleFunc(createFrame);</span>

<span class="token keyword">var</span> oButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;oBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oButton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> thisDiv <span class="token operator">=</span> <span class="token function">singleAlert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Duyi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  thisDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getSingle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="_2-代理模式" tabindex="-1"><a class="header-anchor" href="#_2-代理模式" aria-hidden="true">#</a> 2.代理模式</h3><h4 id="_1-定义-1" tabindex="-1"><a class="header-anchor" href="#_1-定义-1" aria-hidden="true">#</a> 1）定义</h4><ul><li>为一个对象提供一种代理，用于控制对这个对象的访问 <ul><li>代理对象起到类似中介的作用</li></ul></li><li>会增加一些功能 <ul><li>如：校验、合并等等</li></ul></li><li>会去掉一些原有对象的功能</li></ul><h4 id="_2-虚拟代理" tabindex="-1"><a class="header-anchor" href="#_2-虚拟代理" aria-hidden="true">#</a> 2）虚拟代理</h4><ul><li>将一些开销很大的对象，延迟到真正需要它的时候再创建执行</li><li>应用 <ul><li>图片懒加载</li><li>文件上传</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mrDeng <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">sendFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> flower <span class="token operator">=</span> <span class="token string">&quot;sunflower&quot;</span><span class="token punctuation">;</span>
    target<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 代理人 利用原有对象的功能 加上 自己额外的部分 去和 要访问的对象 互动</span>
<span class="token keyword">var</span> cheng <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">proxyFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listenMood</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mrDeng<span class="token punctuation">.</span><span class="token function">sendFlower</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">listenMood</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>mood<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> goddess <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mood</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mood <span class="token operator">?</span> <span class="token string">&quot;ok&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;get out&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">changeMood</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mood <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.8</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">createMood</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      self<span class="token punctuation">.</span><span class="token function">changeMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
goddess<span class="token punctuation">.</span><span class="token function">createMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// // 不保准，可能成功可能失败</span>
<span class="token comment">// mrDeng.sendFlower(goddess);</span>

<span class="token comment">// 只有女神心情好的时候才送花</span>
cheng<span class="token punctuation">.</span><span class="token function">proxyFlower</span><span class="token punctuation">(</span>goddess<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-安全代理-保护代理" tabindex="-1"><a class="header-anchor" href="#_3-安全代理-保护代理" aria-hidden="true">#</a> 3）安全代理/保护代理</h4><ul><li>控制真实对象的访问权限，起到保护作用</li><li>应用 <ul><li>登录后才能查看所有功能</li><li>前端校验</li></ul></li></ul><h4 id="_4-远程代理" tabindex="-1"><a class="header-anchor" href="#_4-远程代理" aria-hidden="true">#</a> 4）远程代理</h4><ul><li>一个对象将不同空间的对象进行局部代理</li><li>应用 <ul><li>监控多个对象的状态</li><li>总机监控分店</li></ul></li></ul><h4 id="_5-智能代理" tabindex="-1"><a class="header-anchor" href="#_5-智能代理" aria-hidden="true">#</a> 5）智能代理</h4><ul><li>调用对象代理处理另外一些事情，提供额外的服务</li><li>应用 <ul><li>垃圾回收机制</li><li>火车站代售处</li></ul></li></ul><h4 id="_6-反模式" tabindex="-1"><a class="header-anchor" href="#_6-反模式" aria-hidden="true">#</a> 6）反模式</h4><ul><li>不能滥用模式，有时候仅仅是给代码增加了复杂度</li></ul><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_3-策略模式" tabindex="-1"><a class="header-anchor" href="#_3-策略模式" aria-hidden="true">#</a> 3.策略模式</h3><h4 id="_1-定义-2" tabindex="-1"><a class="header-anchor" href="#_1-定义-2" aria-hidden="true">#</a> 1）定义</h4><ul><li>指对一系列的算法定义，并将每一个算法封装起来，使其可以相互替换</li><li>让算法独立于它的使用者，并且能独立变化</li></ul><h4 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2）特点</h4><ul><li>提供了管理相关算法族的办法 <ul><li>支持在运行时选择算法</li></ul></li><li>提供了可以替换继承关系的办法</li><li>可以避免使用多重条件转移语句</li></ul><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_4-工厂模式" tabindex="-1"><a class="header-anchor" href="#_4-工厂模式" aria-hidden="true">#</a> 4.工厂模式</h3><h4 id="_1-定义-3" tabindex="-1"><a class="header-anchor" href="#_1-定义-3" aria-hidden="true">#</a> 1）定义</h4><ul><li>定义创建对象的接口，由子类实例化</li><li>即：将类的实例化延迟到子类</li></ul><h4 id="_2-特点-1" tabindex="-1"><a class="header-anchor" href="#_2-特点-1" aria-hidden="true">#</a> 2）特点</h4><ul><li>工厂类集中了所有对象的创建，便于对象创建的统一管理</li><li>对象的使用者仅仅是使用产品，实现了单一职责</li><li>便于扩展，如果新增业务 <ul><li>只需要增加相关业务对象类和工厂类中的生产业务对象的方法</li><li>不需要修改其他地方</li></ul></li><li>确实违背了开闭原则</li></ul><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_5-工厂方法模式" tabindex="-1"><a class="header-anchor" href="#_5-工厂方法模式" aria-hidden="true">#</a> 5.工厂方法模式</h3><h4 id="_1-定义-4" tabindex="-1"><a class="header-anchor" href="#_1-定义-4" aria-hidden="true">#</a> 1）定义</h4><ul><li>创建产品时不再使用唯一的工厂类，而是将不同的产品交给对应的工厂子类实现</li><li>每个产品由负责生产的子工厂创造</li><li>如果添加新产品，只需要添加新的子工厂类和产品类 <ul><li>不需要修改其他工厂</li><li>更加符合面向对象的开放封闭原则</li></ul></li></ul><table><thead><tr><th>组成</th><th>作用</th></tr></thead><tbody><tr><td>抽象工厂类</td><td>负责定义创建产品的公共接口</td></tr><tr><td>产品子工厂</td><td>继承抽象工厂类，实现抽象工厂类定义的接口</td></tr><tr><td>每一种产品各自的产品类</td><td></td></tr></tbody></table><h4 id="_2-特点-2" tabindex="-1"><a class="header-anchor" href="#_2-特点-2" aria-hidden="true">#</a> 2）特点</h4><ul><li>代码比简单工厂模式复杂，引入抽象层和子工厂，增加代码复杂度和理解难度</li><li>相比简单工厂模式，提高了代码的维护性和扩展性</li></ul><h4 id="_3-实现" tabindex="-1"><a class="header-anchor" href="#_3-实现" aria-hidden="true">#</a> 3）实现</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">CarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

CarFactory<span class="token punctuation">.</span><span class="token function-variable function">baoma</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;宝马&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
CarFactory<span class="token punctuation">.</span><span class="token function-variable function">benchi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;奔驰&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
CarFactory<span class="token punctuation">.</span><span class="token function-variable function">aodi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;奥迪&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">CarFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

CarFactory<span class="token punctuation">.</span><span class="token function-variable function">factory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">che</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> CarFactory<span class="token punctuation">[</span>che<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">&quot;没有这个车&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> CarFactory<span class="token punctuation">[</span>che<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>drive <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CarFactory<span class="token punctuation">[</span>che<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> newCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarFactory</span><span class="token punctuation">[</span>che<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> newCar<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> iCar <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">&quot;baoma&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iCar2 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">&quot;aodi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iCar<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iCar2<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_6-装饰者模式" tabindex="-1"><a class="header-anchor" href="#_6-装饰者模式" aria-hidden="true">#</a> 6.装饰者模式</h3><h4 id="_1-定义-5" tabindex="-1"><a class="header-anchor" href="#_1-定义-5" aria-hidden="true">#</a> 1）定义</h4><ul><li>在不改变原对象的基础上，对其进行包装拓展 <ul><li>即：添加属性和方法</li></ul></li></ul><h4 id="_2-特点-3" tabindex="-1"><a class="header-anchor" href="#_2-特点-3" aria-hidden="true">#</a> 2）特点</h4><ul><li>能够在不改变对象自身的基础上，在程序运行期间为对象动态添加职责</li><li>继承模式在脚本运行时增加子类行为，会影响原有类所有的实例 <ul><li>而装饰者能给不同对象各自添加新行为</li></ul></li></ul><h4 id="_3-实现-1" tabindex="-1"><a class="header-anchor" href="#_3-实现-1" aria-hidden="true">#</a> 3）实现</h4><ul><li>构造函数需要一个装饰资源池 <ul><li>提供相应的装饰方法</li><li>提供添加装饰方法的方法</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_7-观察者模式" tabindex="-1"><a class="header-anchor" href="#_7-观察者模式" aria-hidden="true">#</a> 7.观察者模式</h3><h4 id="_1-定义-6" tabindex="-1"><a class="header-anchor" href="#_1-定义-6" aria-hidden="true">#</a> 1）定义</h4><ul><li>定义对象间的一种 <mark>一对多</mark> 的依赖关系</li><li>当一个对象的状态发生改变时，所有依赖于它的对象都将收到通知</li><li>如：为 DOM 元素绑定事件函数（事件机制）</li></ul><h4 id="_2-特点-4" tabindex="-1"><a class="header-anchor" href="#_2-特点-4" aria-hidden="true">#</a> 2）特点</h4><ul><li>观察者订阅了一些消息</li><li>被观察者在有消息时通知观察者，并且传递消息</li><li>该模式存在的意义就是 <mark>解耦</mark><ul><li>被观察者无需关心观察者如何处理该消息</li></ul></li></ul><h4 id="_3-实现-2" tabindex="-1"><a class="header-anchor" href="#_3-实现-2" aria-hidden="true">#</a> 3）实现</h4><ul><li>实现一个 Event 模块 <ul><li>发布消息</li><li>订阅消息</li><li>退订消息</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">适用场景</p><p>当一个对象的改变，需要同时改变其他对象，且不知道待改变的对象数量时</p></div><div class="hint-container tip"><p class="hint-container-title">最终实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsUtils <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_8-场景-——-表单验证" tabindex="-1"><a class="header-anchor" href="#_8-场景-——-表单验证" aria-hidden="true">#</a> 8.场景 —— 表单验证</h3><h4 id="_1-使用保护代理模式" tabindex="-1"><a class="header-anchor" href="#_1-使用保护代理模式" aria-hidden="true">#</a> 1）使用保护代理模式</h4><ul><li>过滤不必要的请求 <ul><li>如：验证用户名是否唯一</li></ul></li><li>分析 <ul><li>绑定的函数比较庞大，包含许多 if-else，需要覆盖所有的校验规则</li><li>绑定的函数缺乏弹性，如果校验规则有变化还需要进一步判断</li><li>绑定的函数的内部实现违背了开放封闭原则</li><li>绑定的函数复用性差，如果另一个表单也需要类似的校验，还需要复制后修改</li></ul></li></ul><h4 id="_2-使用策略模式" tabindex="-1"><a class="header-anchor" href="#_2-使用策略模式" aria-hidden="true">#</a> 2）使用策略模式</h4><ul><li>用一个类对象实例来管理规则的校验</li><li>该对象需要主动添加对规则的相应处理办法</li><li>校验数据时可以返回相关信息</li></ul><h2 id="六-案例实操-贪吃蛇" tabindex="-1"><a class="header-anchor" href="#六-案例实操-贪吃蛇" aria-hidden="true">#</a> （六）案例实操：贪吃蛇</h2>`,112);function b(f,y){const s=i("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[a("菜鸟教程"),t(s)])]),d,k]),v,n("blockquote",null,[n("p",null,[n("a",h,[a("设计模式七大原则"),t(s)])])]),m])}const _=p(c,[["render",b],["__file","04.html.vue"]]);export{_ as default};
