import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e as s}from"./app-8f2176dc.js";const t={},c=s(`<h2 id="_1-作用" tabindex="-1"><a class="header-anchor" href="#_1-作用" aria-hidden="true">#</a> 1.作用</h2><p>定义一个响应式的数据。</p><h2 id="_2-语法" tabindex="-1"><a class="header-anchor" href="#_2-语法" aria-hidden="true">#</a> 2.语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> xxx <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>创建一个包含响应式数据的 <strong>引用实现的实例对象</strong> ，简称 <strong>引用对象/reference 对象/ref 对象</strong> 。</p></li><li><p>JS 中操作数据：<code>xxx.value</code>。</p></li><li><p>模板中读取数据，不需要<code>.value</code>，直接<code>&lt;div&gt;{{xxx}}&lt;/div&gt;</code>。</p></li></ul><h2 id="_3-备注" tabindex="-1"><a class="header-anchor" href="#_3-备注" aria-hidden="true">#</a> 3.备注</h2><ul><li><p>接收的数据可以是：基本类型，也可以是对象类型。</p></li><li><p>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</p></li><li><p>对象类型的数据：内部“求助”了 Vue3.0 中的一个新函数——<code>reactive</code>函数。</p></li></ul>`,7),o=[c];function i(d,r){return a(),n("div",null,o)}const u=e(t,[["render",i],["__file","03.html.vue"]]);export{u as default};
