import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as l,e as o}from"./app-18d03323.js";const a={},t=o('<h2 id="_1-v-if" tabindex="-1"><a class="header-anchor" href="#_1-v-if" aria-hidden="true">#</a> 1.v-if</h2><ul><li><p>写法：</p><ul><li><p><code>v-if=&quot;表达式&quot;</code></p></li><li><p><code>v-else-if=&quot;表达式&quot;</code></p></li><li><p><code>v-else=&quot;表达式&quot;</code></p></li></ul></li><li><p>适用于：DOM 元素是否显示的切换频率较低的场景。</p></li><li><p>特点：不展示的 DOM 元素直接被移除。</p></li><li><p>注意：v-if 可以和：v-else-if、v-else 一起使用，但要求结构不能被其他元素“打断”。</p></li></ul><h2 id="_2-v-show" tabindex="-1"><a class="header-anchor" href="#_2-v-show" aria-hidden="true">#</a> 2.v-show</h2><ul><li><p>写法：<code>v-show=&quot;表达式&quot;</code></p></li><li><p>适用于：DOM 元素是否显示的切换频率较高的场景。</p></li><li><p>特点：不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉。</p></li></ul><h2 id="_3-备注" tabindex="-1"><a class="header-anchor" href="#_3-备注" aria-hidden="true">#</a> 3.备注</h2><p>使用 v-if 时，元素可能无法获取到，而使用 v-show 一定可以获取到。</p>',6),c=[t];function d(r,s){return i(),l("div",null,c)}const _=e(a,[["render",d],["__file","12.html.vue"]]);export{_ as default};
