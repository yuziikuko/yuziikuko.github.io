import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a,b as n,d as i,e as s}from"./app-1ca76096.js";const d="/assets/CSS301-8b89455f.png",p="/assets/CSS302-4acaba41.png",r="/assets/CSS303-b3b2f06f.png",u="/assets/CSS304-210aa4d9.png",h="/assets/CSS305-c0902bd7.png",k="/assets/CSS306-e79cbcb1.png",v="/assets/CSS307-7777c4ef.jpg",m="/assets/CSS308-090e2704.jpg",b="/assets/CSS309-9ed5a95b.png",x="/assets/CSS310-6b7aa117.png",g={},f=s('<h2 id="一-introduction" tabindex="-1"><a class="header-anchor" href="#一-introduction" aria-hidden="true">#</a> （一）Introduction</h2><h3 id="_1-预处理器-pre-processor" tabindex="-1"><a class="header-anchor" href="#_1-预处理器-pre-processor" aria-hidden="true">#</a> 1.预处理器(pre-processor)</h3><ul><li>按照特定的规则编写样式，预处理器会将该样式文件编译成正常规则编写的 CSS 文件</li><li>如：less/sass、cssNext 插件 <ul><li>cssNext 插件是用来实现一些未来标准的样式，暂未完全在各大浏览器中实现</li></ul></li></ul><h3 id="_2-后处理器-post-processor" tabindex="-1"><a class="header-anchor" href="#_2-后处理器-post-processor" aria-hidden="true">#</a> 2.后处理器(post-processor)</h3>',4),_={href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},y=a("ul",null,[a("li",null,[a("code",null,"-webkit-"),n("、"),a("code",null,"-moz-"),n("、"),a("code",null,"-o-"),n("、"),a("code",null,"-ms-")])],-1),w=a("li",null,"如：autoprefixer 插件",-1),S=s(`<h3 id="_3-postcss-工具" tabindex="-1"><a class="header-anchor" href="#_3-postcss-工具" aria-hidden="true">#</a> 3.postCss 工具</h3><ul><li>一种用 JS 实现的 CSS 的抽象语法树(AST, Abstract Syntax Tree)</li><li>功能：postCss + 插件（充分体现扩展性）</li><li>cssNext 插件和 autoprefixer 插件都是基于 postCss 的 AST 开发的</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>假若兼容性不再是问题时，后处理器比预处理器的可维护性更好</p></div><h2 id="二-selectors" tabindex="-1"><a class="header-anchor" href="#二-selectors" aria-hidden="true">#</a> （二）Selectors</h2><h3 id="_1-关系模式" tabindex="-1"><a class="header-anchor" href="#_1-关系模式" aria-hidden="true">#</a> 1.关系模式</h3><ul><li><code>E + F</code> ：下一个满足条件的兄弟元素节点</li><li><code>E ~ F</code> ：满足条件的所有兄弟（同级）元素节点</li></ul><h3 id="_2-属性选择器" tabindex="-1"><a class="header-anchor" href="#_2-属性选择器" aria-hidden="true">#</a> 2.属性选择器</h3><ul><li><code>E[attr~=&#39;val&#39;]</code> ：元素 E 有属性 attr 且该属性仅有独立属性值 val 的元素节点（将 attr 类比 class 属性理解） <ul><li>&#39;val&#39;、&#39;val val1&#39;</li></ul></li><li><code>E[attr|=&#39;val&#39;]</code> ：元素 E 有属性 attr 且该属性包含属性值以 val 开头或 val-开头 <ul><li>&#39;val&#39;、&#39;val-test&#39;</li></ul></li><li><code>E[attr^=&#39;val&#39;]</code> ：元素 E 有属性 attr 且该属性包含属性值以 val 开头 <ul><li>&#39;val&#39;、&#39;valtest&#39;、&#39;val-test&#39;</li></ul></li><li><code>E[attr$=&#39;val&#39;]</code> ：元素 E 有属性 attr 且该属性包含属性值以 val 结尾 <ul><li>&#39;testval&#39;</li></ul></li><li><code>E[attr*=&#39;val&#39;]</code> ：元素 E 有属性 attr 且该属性包含属性值含有 val 字符串（无论数量和位置） <ul><li>&#39;testvaltest&#39;、&#39;val&#39;、&#39;valtest&#39;、&#39;testval&#39;、&#39;valvaltest&#39;</li></ul></li></ul><h3 id="_3-伪元素选择器" tabindex="-1"><a class="header-anchor" href="#_3-伪元素选择器" aria-hidden="true">#</a> 3.伪元素选择器</h3><ul><li><code>E::placeholder</code> ：只能改变 input 框占位文本的颜色</li><li><code>E::selection</code> ：改变文本选中后的文字颜色、背景颜色、文字阴影</li></ul><h3 id="_4-伪类选择器" tabindex="-1"><a class="header-anchor" href="#_4-伪类选择器" aria-hidden="true">#</a> 4.伪类选择器</h3><p>被选中的元素的一种状态</p><ul><li><code>E:not(s)</code> ：选中不符合条件的所有元素节点 <ul><li>列表项除了最后一个元素都加上底边框：<code>li:not(:last-of-type)</code></li></ul></li><li><code>:root</code> ：选中根标签，在 html 文件中等同于 <code>html</code> 选择器 <ul><li>在 xml 等其他文件就不一定是 <code>html</code></li></ul></li><li><code>E:target</code> ：选中 a 标签绑定的锚点值 <ul><li>选中 id 值等同于 <code>location.hash</code> 值的元素节点</li></ul></li><li><code>E:first-child</code> ：选中第一个元素 E，计数时考虑其他同级元素</li><li><code>E:last-child</code> ：选中最后一个元素 E，计数时考虑其他同级元素</li><li><code>E:only-child</code> ：选中独生子元素 E，计数时考虑其他同级元素</li><li><code>E:nth-child(n)</code> ：选中第 n(n&gt;=1) 个子元素 E，计数时考虑其他同级元素</li><li><code>E:nth-last-child(n)</code> ：选中第 n(n&gt;=1) 个且是最后一个的子元素 E，计数时考虑其他同级元素</li><li><code>E:first-of-type</code> ：选中第一个和元素 E 同类型的子元素，计数时不考虑其他同级元素</li><li><code>E:last-of-type</code> ：选中最后一个和元素 E 同类型的子元素，计数时不考虑其他同级元素</li><li><code>E:only-of-type</code> ：选中仅有一个和元素 E 同类型的子元素，计数时不考虑其他同级元素 <ul><li>可以有其他类型的，但是元素 E 同类型的只能有一个</li></ul></li><li><code>E:nth-of-type(n)</code> ：选中第 n(n&gt;=1) 个和元素 E 同类型的子元素，计数时不考虑其他同级元素</li><li><code>E:nth-of-last-type(n)</code> ：选中第 n(n&gt;=1) 个且是最后一个的和元素 E 同类型的子元素，计数时不考虑其他同级元素</li><li><code>E:empty</code> ：选中 <mark>没有内容</mark> 或 <mark>只有注释</mark> 的元素 E</li><li><code>E:checked</code> ：选中处于勾选状态的表单元素 E</li><li><code>E:enabled</code> ：选中非禁用的元素 E</li><li><code>E:disabled</code> ：选中禁用状态的元素 E</li><li><code>E:read-only</code> ：选中只读状态的元素 E</li><li><code>E:read-write</code> ：选中非只读状态的元素 E</li></ul><h2 id="三-border-background" tabindex="-1"><a class="header-anchor" href="#三-border-background" aria-hidden="true">#</a> （三）Border &amp; Background</h2><h3 id="_1-边框圆角-border-radius" tabindex="-1"><a class="header-anchor" href="#_1-边框圆角-border-radius" aria-hidden="true">#</a> 1.边框圆角 <code>border-radius</code></h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>50% - 50px<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token comment">/* 简写1:四个角等幅度 */</span>

  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span> <span class="token comment">/* 左上右下 右上左下 */</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 20px 30px<span class="token punctuation">;</span> <span class="token comment">/* 左上 右上左下 右下 */</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 20px 30px 40px<span class="token punctuation">;</span> <span class="token comment">/* 左上 右上 右下 左下 */</span>

  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token comment">/* 左上 */</span>
  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token comment">/* 右上 */</span>
  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span> <span class="token comment">/* 右下 */</span>
  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span> <span class="token comment">/* 左下 */</span>

  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 10px 10px<span class="token punctuation">;</span> <span class="token comment">/* 左上（椭圆长半径/水平方向 椭圆短半径/垂直方向） */</span>
  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 20px 20px<span class="token punctuation">;</span> <span class="token comment">/* 右上（椭圆长半径/水平方向 椭圆短半径/垂直方向） */</span>
  <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 30px 30px<span class="token punctuation">;</span> <span class="token comment">/* 右下（椭圆长半径/水平方向 椭圆短半径/垂直方向） */</span>
  <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 40px 40px<span class="token punctuation">;</span> <span class="token comment">/* 左下（椭圆长半径/水平方向 椭圆短半径/垂直方向） */</span>

  <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 20px 30px 40px / 10px 20px 30px 40px<span class="token punctuation">;</span> <span class="token comment">/* 水平/垂直 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-边框阴影-box-shadow" tabindex="-1"><a class="header-anchor" href="#_2-边框阴影-box-shadow" aria-hidden="true">#</a> 2.边框阴影 <code>box-shadow</code></h3><ul><li>外阴影：<code>box-shadow: 水平偏移量 垂直偏移量 边框模糊度 边框扩散度 阴影颜色值;</code><ul><li>边框模糊度：基于边框线往其两侧模糊</li></ul></li><li>内阴影：<code>box-shadow: inset 水平偏移量 垂直偏移量 边框模糊度 边框扩散度 阴影颜色值;</code></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 多阴影 */</span>
<span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 10px #fff<span class="token punctuation">,</span> 3px 0px 10px #f0f<span class="token punctuation">,</span> 0px -3px 10px #0ff<span class="token punctuation">,</span> -3px
    0px 10px #00f<span class="token punctuation">,</span> 0px 3px 10px #ff0<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-边框图片-border-image" tabindex="-1"><a class="header-anchor" href="#_3-边框图片-border-image" aria-hidden="true">#</a> 3.边框图片 <code>border-image</code></h3><ul><li>支持图片填充和渐变填充</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>red<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token property">border-image-slice</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>
<span class="token property">border-image-repeat</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span>
<span class="token property">border-image-outset</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token property">border-image-width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-border-image-slice-截取" tabindex="-1"><a class="header-anchor" href="#_1-border-image-slice-截取" aria-hidden="true">#</a> 1）<code>border-image-slice</code> 截取</h4><ul><li>属性值为数字或百分比 <code>border-image-slice: 100</code></li><li>四个值对应 top、right、bottom、left 分割线</li><li>将边框分割为九宫格，图片/渐变将平均分配到 1-8 格，中心第 9 格不填充</li><li>默认值为 <code>100%</code>【病态填充】 <ul><li>此时 top 在边框底部，right 在边框左侧，bottom 在边框顶部，left 在边框右侧</li><li>即边框右上角对应 top、right 的夹角，此时变为全图，以此类推</li><li>所以 5、6、7、8 四个格子没有对应的填充区域，自动填充空白，仅有四个角有边框填充</li></ul></li><li>属性值加上 <code>fill</code> 表示将内容区也填充 <code>border-image-slice: 100 100 fill;</code><ul><li>一般不设置，效果和直接设置背景图片是一样的</li></ul></li></ul><p><img src="`+d+`" alt=""></p><h4 id="_2-border-image-outset-延伸" tabindex="-1"><a class="header-anchor" href="#_2-border-image-outset-延伸" aria-hidden="true">#</a> 2）<code>border-image-outset</code> 延伸</h4><ul><li>不能填负值</li><li>表示填充区域自边框线往外延伸的值</li></ul><h4 id="_3-border-image-width-填充宽度" tabindex="-1"><a class="header-anchor" href="#_3-border-image-width-填充宽度" aria-hidden="true">#</a> 3）<code>border-image-width</code> 填充宽度</h4><ul><li>表示图片/渐变占边框区域的宽度</li><li>默认值 <code>1</code>，占填充区域的 1 倍宽 =&gt; <code>1 * 100px（宽度）</code></li><li>值为 <code>auto</code> 时，取 slice 属性值再加上 px</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-image-slice</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>
<span class="token property">border-image-width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>

=&gt; <span class="token property">border-image-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-border-image-repeat-重复" tabindex="-1"><a class="header-anchor" href="#_4-border-image-repeat-重复" aria-hidden="true">#</a> 4）<code>border-image-repeat</code> 重复</h4><ul><li>设置的是 5、6、7、8 四个格子如何填充 <ul><li><code>stretch</code> ：默认值，填充内容不够时拉伸</li><li><code>repeat</code> ：填充内容不够时重复平铺，平铺的内容平均填充在格子的 <mark>左右两边</mark></li><li><code>round</code> ：填充内容不够时重复平铺，当格子宽度不足平铺填充元素的宽度时 <mark>内容拉伸</mark> ，格子宽度成平铺填充元素倍数时内容平铺</li><li><code>space</code> ：填充内容不够时重复平铺，当格子宽度不足平铺填充元素的宽度时用 <mark>间隙填充</mark> ，格子宽度成平铺填充元素倍数时内容平铺</li></ul></li><li>可以填两个属性值，表示水平和垂直方向上的重复状态 <code>border-image-repeat: round stretch;</code></li></ul><h3 id="_4-背景图片-background-image" tabindex="-1"><a class="header-anchor" href="#_4-背景图片-background-image" aria-hidden="true">#</a> 4.背景图片 <code>background-image</code></h3><ul><li>可以引入多张背景图片 <ul><li><code>background-image: url(), url();</code></li><li>一般用于第一个 url 较大的图片（请求）未加载出来时，显示第二个 url 较小的图片（本地）</li></ul></li><li>可以填充渐变 <ul><li><code>background-image: linear-gradient(red, yellow);</code></li><li><code>background-image: radial-gradient(red, yellow);</code></li></ul></li></ul><h3 id="_5-背景起始填充位置-background-origin" tabindex="-1"><a class="header-anchor" href="#_5-背景起始填充位置-background-origin" aria-hidden="true">#</a> 5.背景起始填充位置 <code>background-origin</code></h3><ul><li><code>border-box</code> ：从 border 左上角开始向内往右下角填充</li><li><code>padding-box</code> ：从 padding 左上角开始向内往右下角填充（默认值）</li><li><code>content-box</code> ：从 content 左上角开始向内往右下角填充</li></ul><h3 id="_6-背景填充区域-background-position" tabindex="-1"><a class="header-anchor" href="#_6-背景填充区域-background-position" aria-hidden="true">#</a> 6.背景填充区域 <code>background-position</code></h3><ul><li>相对 origin</li><li>origin 左上角即 position 的原点 (0, 0)</li></ul><h3 id="_7-背景填充剪切-background-clip" tabindex="-1"><a class="header-anchor" href="#_7-背景填充剪切-background-clip" aria-hidden="true">#</a> 7.背景填充剪切 <code>background-clip</code></h3><ul><li>设置背景填充区域到哪里截止</li><li><code>border-box</code> ：填充到 border 右下角（默认值）</li><li><code>padding-box</code> ：填充到 padding 右下角</li><li><code>content-box</code> ：填充到 content 右下角</li><li><code>text</code> ：用文字区域反切背景图片 <ul><li>webkit 特有属性，需加前缀 <code>-webkit-background-clip: text;</code></li><li>搭配 <code>-webkit-text-fill-color: transparent;</code> 使用</li></ul></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>
  <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>
  <span class="token property">text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
  <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-背景填充重复-background-repeat" tabindex="-1"><a class="header-anchor" href="#_8-背景填充重复-background-repeat" aria-hidden="true">#</a> 8.背景填充重复 <code>background-repeat</code></h3><ul><li><code>repeat</code> ：填充内容不够时重复平铺</li><li><code>no-repeat</code> ：填充内容不够时留白</li><li><code>repeat-x</code> ：横向填充内容不够时重复平铺，纵向留白（相当于纵向 no-repeat）</li><li><code>repeat-y</code> ：纵向填充内容不够时重复平铺，横向留白（相当于横向 no-repeat）</li><li><code>round</code> ：填充内容不够时重复平铺，当容器宽度不足平铺填充元素的宽度时 <mark>内容拉伸</mark> ，容器宽度成平铺填充元素倍数时内容平铺</li><li><code>space</code> ：填充内容不够时重复平铺，当容器宽度不足平铺填充元素的宽度时用 <mark>间隙填充</mark> ，容器宽度成平铺填充元素倍数时内容平铺</li><li>可以填两个属性值，表示水平和垂直方向上的重复状态 <code>background-repeat: round space;</code><ul><li>只能在 round 和 space 两个值之间组合</li></ul></li></ul><h3 id="_9-背景填充定位-background-attachment" tabindex="-1"><a class="header-anchor" href="#_9-背景填充定位-background-attachment" aria-hidden="true">#</a> 9.背景填充定位 <code>background-attachment</code></h3><ul><li>设置当内容溢出容器形成滚动时背景图片相对什么元素定位</li><li><code>scroll</code> ：默认值，相对容器定位，即内容滚动时，背景图片不动；容器滚动时，背景图片随之滚动</li><li><code>local</code> ：相对内容定位，即内容滚动时，背景图片随之滚动</li><li><code>fixed</code> ：相对视口定位，可视区域始终不动，背景图片也不动，但当前容器离开视口时，背景图片超出部分隐藏</li></ul><h3 id="_10-背景填充尺寸-background-size" tabindex="-1"><a class="header-anchor" href="#_10-背景填充尺寸-background-size" aria-hidden="true">#</a> 10.背景填充尺寸 <code>background-size</code></h3><ul><li><code>cover</code> ：仅用一个元素填充背景，保持填充元素比例，放大以充满背景，溢出部分隐藏</li><li><code>contain</code> ：仅用一个元素填充背景，保持填充元素比例，放大使元素最长边充满背景，未充满区域有可能出现平铺或留白</li></ul><h3 id="_11-渐变" tabindex="-1"><a class="header-anchor" href="#_11-渐变" aria-hidden="true">#</a> 11.渐变</h3>`,48),q={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient",target:"_blank",rel:"noopener noreferrer"},E=s(`<ul><li><code>linear-gradient([方向], 颜色值1 [边界1], 颜色值2 [边界2], 颜色值3 [边界3], ...)</code> ：线性渐变 <ul><li>方向，可缺省，默认 <code>to bottom</code>，也可以设置为角度 <code>0deg</code></li><li>如有设置边界 1，则从开始到边界 1 填充颜色值 1，剩余区域填充颜色值 2，以此类推</li><li>如有设置边界 2，则从开始到边界 1 填充颜色值 1，到边界 2 填充颜色值 2，以此类推</li></ul></li><li><code>radial-gradient([方向], 颜色值1 [边界1], 颜色值2 [边界2], 颜色值3 [边界3], ...)</code> ：径向渐变/放射性渐变 <ul><li>方向，可缺省，设置径向开始的圆心，默认 <code>circle at center</code>，也可以设置为椭圆 <code>ellipse at 200px 10px</code><ul><li><code>[ellipse] closet-side at 50px 50px</code> ：放射到最短边截止</li><li><code>[ellipse] closet-corner at 50px 50px</code> ：放射到最短边的边角截止</li><li><code>[ellipse] farthest-side at 50px 50px</code> ：放射到最长边截止</li><li><code>[ellipse] farthest-corner at 50px 50px</code> ：放射到最长边的边角截止</li></ul></li><li>如有设置边界 1，则从开始到边界 1 填充颜色值 1，剩余区域填充颜色值 2，以此类推</li><li>如有设置边界 2，则从开始到边界 1 填充颜色值 1，到边界 2 填充颜色值 2，以此类推</li><li>边界值可以是百分比</li></ul></li></ul><h2 id="四-text" tabindex="-1"><a class="header-anchor" href="#四-text" aria-hidden="true">#</a> （四）Text</h2><h3 id="_1-文字阴影-text-shadow" tabindex="-1"><a class="header-anchor" href="#_1-文字阴影-text-shadow" aria-hidden="true">#</a> 1.文字阴影 <code>text-shadow</code></h3><h4 id="_1-效果" tabindex="-1"><a class="header-anchor" href="#_1-效果" aria-hidden="true">#</a> 1）效果</h4><ul><li>浮雕效果：右下黑色阴影，左上白色阴影</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 1px 1px #000<span class="token punctuation">,</span> -1px -1px #fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>镂刻效果：右下白色阴影，左上黑色阴影（也可以去掉白色阴影）</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
  <span class="token property">text-shadow</span><span class="token punctuation">:</span> -1px -1px #000<span class="token punctuation">,</span> 1px 1px #fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>霓虹灯效果：多层模糊阴影叠加</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0px 0px 10px #0f0<span class="token punctuation">,</span> 0px 0px 20px #0f0<span class="token punctuation">,</span> 0px 0px 30px #0f0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-搭配" tabindex="-1"><a class="header-anchor" href="#_2-搭配" aria-hidden="true">#</a> 2）搭配</h4><ul><li>如果配合 <code>background-clip: text;</code> 使用，文字会变成背景的一部分，此时文字阴影在文字的上方 <ul><li>给文字阴影添加 alpha 通道</li></ul></li><li>如果配合 <code>-webkit-text-stroke: 1px red;</code> 使用，可以给文字加一圈描边，仅限于 webkit 内核的浏览器 <ul><li>也可用 canvas 的 stoke 属性实现</li></ul></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> simsun<span class="token punctuation">;</span>
  <span class="token property">-webkit-text-stroke</span><span class="token punctuation">:</span> 1px red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自定义字体-font-face" tabindex="-1"><a class="header-anchor" href="#_2-自定义字体-font-face" aria-hidden="true">#</a> 2.自定义字体 <code>@font-face</code></h3><ul><li>浏览器按照 MIME 协议中定义的映射，根据文件扩展名自动调用映射后的应用程序打开解析相应格式的字体文件</li></ul><table><thead><tr><th>字体格式</th><th>使用系统</th><th>文件扩展名</th></tr></thead><tbody><tr><td>TrueType</td><td>微软、苹果</td><td>.ttf（默认）</td></tr><tr><td>OpenType</td><td>微软、Adobe</td><td>.opt</td></tr><tr><td>Woff</td><td></td><td>.woff（未来趋势）</td></tr><tr><td></td><td>IE</td><td>.eot</td></tr><tr><td></td><td>HTML5</td><td>.svg</td></tr></tbody></table><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;diyfont&quot;</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;diyfont.eot&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token comment">/* IE9+ */</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;diyfont.eot?#iefix&quot;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;embedded-opentype&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* IE6-IE8 */</span>
      <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;diyfont.woff&quot;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;woff&quot;</span><span class="token punctuation">)</span> <span class="token comment">/* chrome、firefox */</span><span class="token punctuation">,</span>
    <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;diyfont.ttf&quot;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;truetype&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span>
      <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;diyfont.svg#fontname&quot;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;svg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* iOS 4.1- */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-部分文本属性" tabindex="-1"><a class="header-anchor" href="#_3-部分文本属性" aria-hidden="true">#</a> 3.部分文本属性</h3><ul><li><code>tab-size</code> ：定义文本内容中制表符的长度</li><li><code>word-break</code> ：定义换行规则 <ul><li><code>normal</code> ：允许换行</li><li><code>keep-all</code> ：CJK 文本不允许在字符内换行，非 CJK 文本同 normal</li><li><code>break-all</code> ：非 CJK 文本允许在任意字符内换行（使连续英文字符断行）</li><li><code>break-word</code> ：同 break-all，没有断行破发点的词必须保持为一个整体（单词不断行）</li></ul></li><li><code>word-wrap/overflow-wrap</code> ：定义内容超出边界时的换行规则 <ul><li><code>normal</code> ：允许撑开或溢出边界</li><li><code>break-word</code> ：同 <code>word-break: break-word;</code>， 内容将在边界内换行，没有断行破发点的词必须保持为一个整体（单词不断行）</li></ul></li><li><code>text-align</code> ： <ul><li><code>justify</code> ：内容两端对齐，对于强制打断的行及最后一行不做处理</li><li><code>start</code> ：内容对齐开始边界</li><li><code>end</code> ：内容对齐结束边界</li><li><code>match-parent</code> ：同 inherit，只是该值继承的 start 或 end 关键字是针对父母的 direction 值并计算的，计算值可以是 left 和 right</li><li><code>justify-all</code> ：同 justify，最后一行也会两端对齐</li></ul></li><li><code>text-align-last</code> ：定义块内文本内容被强制打断的行和最后一行的对齐方式 <ul><li><code>auto</code> ：无特殊对齐方式</li><li><code>left</code> ：内容左对齐</li><li><code>center</code> ：内容居中对齐</li><li><code>right</code> ：内容右对齐</li><li><code>justify</code> ：内容两端对齐</li><li><code>start</code> ：内容对齐开始边界</li><li><code>end</code> ：内容对齐结束边界</li></ul></li><li><code>word-spacing</code> ：定义单词之间的额外间隙</li><li><code>letter-spacing</code> ：定义字符之间的额外间隙</li><li><code>text-indent</code> ：定义块内文本内容的缩进 <ul><li><code>&lt;length&gt;</code> ：用长度值指定文本的缩进（可以为负值）</li><li><code>&lt;percentage&gt;</code> ：用百分比指定文本的缩进（可以为负值）</li><li><code>each-line</code> ：定义缩进作用在块容器的第一行或者内部的每个强制换行的首行，软换行不受影响</li><li><code>hanging</code> ：反向所有被缩进作用的行</li></ul></li><li><code>text-size-adjust</code> ：定义移动端页面中元素文本的大小如何调整 <ul><li><code>auto</code> ：文本大小根据设备尺寸进行调整</li><li><code>none</code> ：文本大小不会根据设备尺寸进行调整</li><li><code>&lt;percentage&gt;</code> ：用百分比来指定文本大小在设备尺寸不同的情况下如何调整</li></ul></li></ul><h3 id="_4-多列" tabindex="-1"><a class="header-anchor" href="#_4-多列" aria-hidden="true">#</a> 4.多列</h3><ul><li><code>columns</code> ：设置或检索对象的列数和每列的宽度（复合属性）</li><li><code>column-width</code> ：设置或检索对象每列的宽度 <ul><li>最好不要设置</li><li>一般用于某一列定宽，且父元素宽度不变</li></ul></li><li><code>column-count</code> ：设置或检索对象的列数 <ul><li>多元素排列时，会确保元素最高的列数最大，剩余元素再排在新的一列</li></ul></li><li><code>column-gap</code> ：设置或检索对象的列与列之间的间隙</li><li><code>column-rule</code> ：设置或检索对象的列与列之间的边框（复合属性）</li><li><code>column-rule-width</code> ：设置或检索对象的列与列之间的边框厚度</li><li><code>column-rule-style</code> ：设置或检索对象的列与列之间的边框样式</li><li><code>column-rule-color</code> ：设置或检索对象的列与列之间的边框颜色</li><li><code>column-span</code> ：设置或检索对象元素是否横跨所有列</li><li><code>column-fill</code> ：设置或检索对象所有列的高度是否统一</li><li><code>column-break-before</code> ：设置或检索对象之前是否断行</li><li><code>column-break-after</code> ：设置或检索对象之后是否断行</li><li><code>column-break-inside</code> ：设置或检索对象内部是否断行</li></ul><h2 id="五-box" tabindex="-1"><a class="header-anchor" href="#五-box" aria-hidden="true">#</a> （五）Box</h2><h3 id="_1-ie6-混杂模式盒模型" tabindex="-1"><a class="header-anchor" href="#_1-ie6-混杂模式盒模型" aria-hidden="true">#</a> 1.IE6 混杂模式盒模型</h3><h4 id="_1-计算方式" tabindex="-1"><a class="header-anchor" href="#_1-计算方式" aria-hidden="true">#</a> 1）计算方式</h4><ul><li>原（W3C 标准盒模型）： <ul><li><code>boxWidth = width + border * 2 + padding * 2;</code></li></ul></li><li>现（怪异盒模型）： <ul><li><code>boxWidth = width;</code></li><li><code>contentWidth = width - border * 2 - padding * 2;</code></li></ul></li></ul><h4 id="_2-触发方式" tabindex="-1"><a class="header-anchor" href="#_2-触发方式" aria-hidden="true">#</a> 2）触发方式</h4><ul><li><code>box-sizing: border-box;</code></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*,
*::before,
*::after</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-适用场景" tabindex="-1"><a class="header-anchor" href="#_3-适用场景" aria-hidden="true">#</a> 3）适用场景</h4><ul><li>宽度不固定（百分比），但是内边距固定</li><li>宽度 100% 的输入框，因自带 border 会超出容器宽度</li><li>宽度为用户自定义</li><li>宽度根据后端传的参数确定</li></ul><h3 id="_2-其他属性" tabindex="-1"><a class="header-anchor" href="#_2-其他属性" aria-hidden="true">#</a> 2.其他属性</h3><ul><li><code>overflow</code> ：定义横纵向溢出规则 <ul><li>复合属性（<code>overflow-x</code>、 <code>overflow-y</code>） <ul><li>只要其中一个定义为非 <code>visible</code>，另一个将从 <code>visible</code> 自动设置为 <code>auto</code></li></ul></li><li><code>clip</code> ：溢出隐藏，且不出现滚动条</li></ul></li><li><code>resize</code> ：定义区域是否允许用户缩放或自定义调整大小（触发重排重绘，少用） <ul><li>必须配合 <code>overflow: scroll;</code> 使用</li><li><code>both</code> ：横纵轴都可调整</li><li><code>vertical</code> ：纵轴可调整</li><li><code>horizontal</code> ：横轴可调整</li></ul></li></ul><h3 id="_3-flex-布局" tabindex="-1"><a class="header-anchor" href="#_3-flex-布局" aria-hidden="true">#</a> 3.flex 布局</h3><ul><li><code>flex/inline-flex</code> 区别同 <code>block/inline-block</code></li><li>主轴自左向右时，交叉轴对齐方式： <ul><li>单行元素：<code>align-items</code></li><li>多行元素：<code>align-content</code></li></ul></li><li>优先级：<code>align-content</code> &gt; <code>align-self</code> &gt; <code>align-items</code></li></ul><h4 id="_1-伸-flex-grow" tabindex="-1"><a class="header-anchor" href="#_1-伸-flex-grow" aria-hidden="true">#</a> 1）伸 <code>flex-grow</code></h4><p>当主轴方向还有剩余空间时，盒子会按照该属性的比例瓜分空间分配给子元素</p><ul><li><code>flex-grow: 0;</code>：默认值，不参与分配</li><li><code>flex-grow: 1;</code>：按 1:1:1 分配剩余空间</li></ul><h4 id="_2-缩-flex-shrink" tabindex="-1"><a class="header-anchor" href="#_2-缩-flex-shrink" aria-hidden="true">#</a> 2）缩 <code>flex-shrink</code></h4><ul><li>元素不换行时启动压缩</li><li><code>flex-shrink: 0;</code>：不参与压缩</li><li><code>flex-shrink: 1;</code>：默认值，按 1:1:1 压缩子元素</li><li>子元素宽度不相等时的计算公式（无边框线时） <ul><li>计算溢出宽度：<code>所有子元素宽度和 - 容器宽度 = overflowWidth</code></li><li>计算子元素宽度及占比加权值：<code>（各子元素宽度 * 各子元素所占压缩比例）之和</code></li><li>按照压缩比例分配 overflowWidth：<code>（子元素宽度 * 子元素所占压缩比例） / 加权值 * 溢出宽度</code></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content:nth-of-child(3)</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
1.容器宽度：600px 子元素宽度和：200+200+400=800px 溢出宽度：200px
2.按照压缩比例1:1:3计算加权值：200px * 1 + 200px * 1 + 400px * 3 = 1600px
3.分配溢出宽度：
  200px * 1 / 1600px * 200px = 25px =&gt; 元素1压缩25px =&gt; 压缩后宽度 200px - 25px = 175px
  200px * 1 / 1600px * 200px = 25px =&gt; 元素2压缩25px =&gt; 压缩后宽度 200px - 25px = 175px
  400px * 3 / 1600px * 200px = 150px =&gt; 元素3压缩150px =&gt; 压缩后宽度 200px - 150px = 50px
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子元素宽度不相等时的计算公式（有边框线时） <ul><li>计算溢出宽度：<code>所有子元素宽度和 - 容器宽度 = overflowWidth</code></li><li>计算子元素宽度及占比加权值：<code>（各子元素内容区的宽度 * 各子元素所占压缩比例）之和</code></li><li>按照压缩比例分配 overflowWidth：<code>（子元素内容区的宽度 * 子元素所占压缩比例） / 加权值 * 溢出宽度</code></li></ul></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
  <span class="token comment">/* border: 1px solid #f00; */</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0 100px<span class="token punctuation">;</span> <span class="token comment">/* 测试没有内容区 */</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #f0f<span class="token punctuation">;</span>
  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content:nth-of-child(2)</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content:nth-of-child(3)</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #0ff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
1.容器宽度：600px 子元素宽度和：200+200+400=800px 溢出宽度：200px
2.按照压缩比例1:1:3计算加权值：0px * 1 + 0px * 1 + 400px * 3 = 1200px
3.分配溢出宽度：
  0px * 1 / 1200px * 200px = 0px =&gt; 元素1不压缩 =&gt; 压缩后宽度 200px
  0px * 1 / 1200px * 200px = 0px =&gt; 元素2不压缩 =&gt; 压缩后宽度 200px
  400px * 3 / 1200px * 200px = 200px =&gt; 元素3压缩200px =&gt; 压缩后宽度 200px - 200px = 0px（内容区域，只剩padding）
*/</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">总结</p><p>不管是 W3C 标准盒模型还是 IE 怪异盒模型</p><p>不管有 border 还是无 border</p><p>加权值计算公式都是 <code>（各子元素内容区的宽度 * 各子元素所占压缩比例）之和</code></p></div><h4 id="_3-flex-basis" tabindex="-1"><a class="header-anchor" href="#_3-flex-basis" aria-hidden="true">#</a> 3）<code>flex-basis</code></h4><ul><li>权重高于 <code>width</code><ul><li>默认值 <code>auto</code>，数值按 <code>width</code> 计算</li></ul></li><li>当 <mark>设置 <code>width</code> 且值小于 <code>flex-basis</code></mark> 或者 <mark>只设置 <code>flex-basis</code></mark> 时 <ul><li><code>flex-basis</code> 设置的其实是元素的最小宽度</li></ul></li><li>当 <mark>设置 <code>width</code> 且 值大于 <code>flex-basis</code></mark> 时 <ul><li><code>flex-basis</code> 设置的是元素的最小宽度， <code>width</code> 设置的是元素的最大宽度</li></ul></li><li>basis &lt; realWidth &lt; width</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>被不换行内容撑开的容器（长英文单词），不参与压缩</p><p>设置 <code>word-break: break-word;</code> 打破换行规则，则该元素可以参与压缩</p></div><h2 id="六-transition-animation" tabindex="-1"><a class="header-anchor" href="#六-transition-animation" aria-hidden="true">#</a> （六）Transition &amp; Animation</h2><h3 id="_1-过渡-transition" tabindex="-1"><a class="header-anchor" href="#_1-过渡-transition" aria-hidden="true">#</a> 1.过渡 <code>transition</code></h3><ul><li><code>transition-property</code> ：过渡的属性，必须是数值类属性 或 <code>all</code></li><li><code>transition-duration</code> ：过渡的时间，多少时间内完成过渡效果</li><li><code>transition-timing-function</code> ：过渡的时间函数，表示运动状态的曲线</li><li><code>transition-delay</code> ：过渡的延迟，过多长时间再进行过渡</li></ul><h3 id="_2-三次-贝塞尔曲线-cubic-bezier" tabindex="-1"><a class="header-anchor" href="#_2-三次-贝塞尔曲线-cubic-bezier" aria-hidden="true">#</a> 2.三次-贝塞尔曲线 <code>cubic-bezier</code></h3><h4 id="_1-运动状态曲线-s-t-曲线" tabindex="-1"><a class="header-anchor" href="#_1-运动状态曲线-s-t-曲线" aria-hidden="true">#</a> 1）运动状态曲线 s-t 曲线</h4><ul><li>曲线上某个点的斜率即运动的速度：<code>v = s / t</code></li><li>计算曲线上某个点 P(x, y) 的斜率： <ul><li>取其一左一右极限相邻的两个点 <code>P₁(x1, y1)</code>, <code>P₂(x2, y2)</code></li><li>求斜率：<code>ΔP = (y2 - y1) / (x2 - x1)</code></li></ul></li><li>斜率为正，速度为正，运动方向相同</li><li>斜率为负，速度为负，运动方向相反</li></ul><h4 id="_2-贝塞尔曲线" tabindex="-1"><a class="header-anchor" href="#_2-贝塞尔曲线" aria-hidden="true">#</a> 2）贝塞尔曲线</h4><ul><li>二次贝塞尔曲线：<code>起点 + 终点 + 控制点 * 1</code></li><li>三次贝塞尔曲线：<code>起点 + 终点 + 控制点 * 2</code></li><li>n 次贝塞尔曲线：<code>起点 + 终点 + 控制点 * (n - 1)</code></li><li>起点 <code>P₀(0, 0)</code>，终点 <code>P₃(1, 1)</code></li><li><code>B(t) = P₀(1 - t)³ + 3P₁t(1 - t)² + 3P₂t²(1 - t) + P₃t³ ,t ∈ [0,1]</code></li><li><code>cubic-bezier(x1, y1, x2, y2)</code> ：0 &lt; x1,x2 &lt; 1</li></ul><h3 id="_3-动画-animation" tabindex="-1"><a class="header-anchor" href="#_3-动画-animation" aria-hidden="true">#</a> 3.动画 <code>animation</code></h3><ul><li><code>0%</code> =&gt; <code>from</code>, <code>100%</code> =&gt; <code>to</code></li><li>多个关键帧会并行执行</li></ul><h4 id="_1-animation-iteration-count" tabindex="-1"><a class="header-anchor" href="#_1-animation-iteration-count" aria-hidden="true">#</a> 1）<code>animation-iteration-count</code></h4><ul><li>设置动画的循环次数 <ul><li>默认值 <code>1</code></li><li>可以设为 <code>infinite</code> 无限循环</li><li>动画开始后无论视觉效果是否循环都算作 1 次动画，delay 只在动画开始前执行</li></ul></li></ul><h4 id="_2-animation-play-state-paused" tabindex="-1"><a class="header-anchor" href="#_2-animation-play-state-paused" aria-hidden="true">#</a> 2）<code>animation-play-state: paused;</code></h4><ul><li>控制动画暂停，不推荐使用</li></ul><h4 id="_3-animation-fill-mode" tabindex="-1"><a class="header-anchor" href="#_3-animation-fill-mode" aria-hidden="true">#</a> 3）<code>animation-fill-mode</code></h4><ul><li>设置对象动画时间之后的状态 <ul><li><code>none</code> ：不设置状态</li><li><code>forwards</code> ：设置对象状态为动画结束时的状态（最后一帧），不设置动画开始前的状态</li><li><code>backwards</code> ：设置对象状态为动画开始时的状态（第一帧），不设置动画结束后的状态</li><li><code>both</code> ：设置对象状态为动画结束或开始时的状态</li></ul></li></ul><h4 id="_4-animation-timing-function" tabindex="-1"><a class="header-anchor" href="#_4-animation-timing-function" aria-hidden="true">#</a> 4）<code>animation-timing-function</code></h4><ul><li>定义 CSS 动画在每一动画周期中执行的节奏</li><li><code>steps(动画完成步数, 步数开始位置)</code><ul><li><code>end</code> ：保留当前帧状态，直到这段动画时间结束 <ul><li>最后一帧执行时，刚好在保留倒数第一帧的状态，所以此时看不到最后一帧的效果</li><li>需要 <mark>在步数后面加上 forwards(非 infinite)</mark> 或者 <mark>动画本身是 infinite</mark> 才能看到最后一帧效果</li></ul></li><li><code>start</code> ：保留下一帧状态，直到这段动画时间结束 <ul><li>第一帧执行时，刚好在保留第二帧的状态，所以此时看不到第一帧的效果</li><li>不好弥补，所以该属性不常用</li></ul></li><li>特殊值： <ul><li><code>steps(1, start)</code> === <code>step-start</code></li><li><code>steps(1, end)</code> === <code>step-end</code></li></ul></li></ul></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> change-color 4s <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> end<span class="token punctuation">)</span> forwards<span class="token punctuation">;</span>
  <span class="token property">animation</span><span class="token punctuation">:</span> change-color 4s <span class="token function">steps</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-变换-transform" tabindex="-1"><a class="header-anchor" href="#_4-变换-transform" aria-hidden="true">#</a> 4.变换 <code>transform</code></h3><p><img src="`+p+`" alt=""></p><h4 id="_1-rotate" tabindex="-1"><a class="header-anchor" href="#_1-rotate" aria-hidden="true">#</a> 1）rotate</h4><ul><li><code>90deg</code> = <code>0.25turn</code></li><li>元素坐标轴基于自身，当元素旋转时，旋转坐标轴也变化 <ul><li>旋转顺序不同，即使旋转过程一样，结果也不一样</li></ul></li></ul><h4 id="_2-rotate3d" tabindex="-1"><a class="header-anchor" href="#_2-rotate3d" aria-hidden="true">#</a> 2）rotate3d</h4><ul><li>矢量：有方向的度量长度的量</li><li>向量：无方向的度量长度的量</li><li><code>transform: rotate3d(x, y, z, angle)</code><ul><li>x、y、z 具体值不重要，三者比值（矢量方向）重要，根据这三个值在空间坐标系中绘制出一个矢量</li><li>以该矢量为轴旋转 angle 个角度</li></ul></li></ul><h4 id="_3-scale" tabindex="-1"><a class="header-anchor" href="#_3-scale" aria-hidden="true">#</a> 3）scale</h4><ul><li>0 &lt; 值 &lt; 1 压缩，1 &lt; 值延伸</li><li><code>scale(x, y)</code> ：x、y 轴均伸缩</li><li><code>scaleX()</code> ：只伸缩 x 轴</li><li><code>scaleY()</code> ：只伸缩 y 轴</li><li><code>scaleZ()</code> ：只伸缩 z 轴</li><li><code>scale3d</code> ：类似 <code>rotate3d</code></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>伸缩的不是元素本身，而是参照的坐标轴刻度，元素大小不变</p><p>scale 可以叠加操作：<code>transform: scale(0.5, 0.5) scale(3, 3);</code>，相当于 <code>transform: scale(1.5, 1.5);</code></p><p>伸缩后旋转，坐标轴会跟着旋转，但旋转前原先伸缩的影响会继续保留</p></div><h4 id="_4-skew" tabindex="-1"><a class="header-anchor" href="#_4-skew" aria-hidden="true">#</a> 4）skew</h4><ul><li><code>skew(x deg, y deg)</code> ：沿 x、y 轴倾斜</li><li><code>skewX()</code> ：沿 x 轴倾斜</li><li><code>skewY()</code> ：沿 y 轴倾斜</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>skew 倾斜的是坐标轴，对后续变换有影响</p><p>skew 倾斜时坐标轴刻度也伸缩了</p></div><h3 id="_5-平移-translate" tabindex="-1"><a class="header-anchor" href="#_5-平移-translate" aria-hidden="true">#</a> 5.平移 <code>translate</code></h3><ul><li>平移距离相对于元素本身，可利用此完成自身宽高不确定的元素居中定位</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-景深-perspective" tabindex="-1"><a class="header-anchor" href="#_6-景深-perspective" aria-hidden="true">#</a> 6.景深 <code>perspective</code></h3><p><img src="`+r+`" alt=""></p><ul><li>默认值 <code>none</code> ，取值范围：<code>[1, +∞)</code>（px）</li><li>设置人眼距离屏幕的空间纵深（有立体感）</li><li>当 z 轴移动距离超过景深设置的距离（浏览器有几像素误差）时，元素将看不到（消失） <ul><li>离眼睛越近元素越大</li></ul></li><li>视线看到的元素都是元素在屏幕上的投影</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>景深要设置到父元素上，子元素才能起作用</p><p>通常设置到 body 上（800px）</p></div><h4 id="_1-景深与-translatez" tabindex="-1"><a class="header-anchor" href="#_1-景深与-translatez" aria-hidden="true">#</a> 1）景深与 translateZ</h4><ul><li>当景深不变，元素往 z 轴正方向（靠近眼睛）移动时，眼睛看到的元素在屏幕上的投影越大，所以元素变大</li><li>当景深不变，元素往 z 轴负方向（远离眼睛）移动时，眼睛看到的元素在屏幕上的投影越小，所以元素变小</li><li>当景深变小（眼睛靠近屏幕），元素往 z 轴负方形（远离眼睛）移动时，眼睛看到的元素在屏幕上的投影越小，所以元素变小</li><li>当元素就在屏幕上（没有 z 轴移动）时，无论景深变大变小，看到的元素在屏幕上的投影都是元素本身，所以元素不变化</li></ul><h4 id="_2-perspective-origin" tabindex="-1"><a class="header-anchor" href="#_2-perspective-origin" aria-hidden="true">#</a> 2）<code>perspective-origin</code></h4><ul><li>默认值： <code>center center</code></li><li>配合 <code>perspective</code> 和 <code>rotate</code> 以及 <code>onmousemove</code> 事件，可以实现鼠标移动元素跟着旋转的效果</li><li>空间变换中心 <code>perspective-origin： 100px 100px 100px;</code> ，只关注三轴比例</li></ul><h4 id="_3-transform-perspective-功能函数" tabindex="-1"><a class="header-anchor" href="#_3-transform-perspective-功能函数" aria-hidden="true">#</a> 3）<code>transform: perspective()</code>功能函数</h4><ul><li>需要加到元素自身，且应在所有 transform 功能函数的最前方，否则有些浏览器不识别</li><li>相当于多只眼睛单独看多个元素</li><li>此时无法设置 <code>perspective-origin</code></li><li>可以与父级设置的景深叠加</li></ul><h4 id="_4-transform-style" tabindex="-1"><a class="header-anchor" href="#_4-transform-style" aria-hidden="true">#</a> 4）<code>transform-style</code></h4><ul><li><code>flat</code> ：指定子元素位于此元素所在平面内</li><li><code>preserve-3d</code> ：指定子元素定位在三维空间内，将创建局部堆叠上下文</li></ul><div class="hint-container danger"><p class="hint-container-title">警告</p><p>要添加到需要 3d 变换的元素的 <mark>直接父级</mark> 上</p></div><h4 id="_5-3d-变换三件套" tabindex="-1"><a class="header-anchor" href="#_5-3d-变换三件套" aria-hidden="true">#</a> 5）3d 变换三件套</h4><p>设置 <code>perspective</code> 或 <code>transform-style</code> 之后，body 会变成定位元素的参照物元素，所以需要确保 body 从:root 继承了高度</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root,body</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">perspective</span><span class="token punctuation">:</span> 800px
  <span class="token property">perspective-origin</span><span class="token punctuation">:</span> 300px 300px<span class="token punctuation">;</span>
  <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-3d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-backface-visibility" tabindex="-1"><a class="header-anchor" href="#_6-backface-visibility" aria-hidden="true">#</a> 6）<code>backface-visibility</code></h4><ul><li>是否允许元素背面显示在视野中</li><li>默认值：<code>visible</code></li></ul><h3 id="_7-矩阵-matrix" tabindex="-1"><a class="header-anchor" href="#_7-矩阵-matrix" aria-hidden="true">#</a> 7.矩阵 <code>matrix</code></h3><ul><li>矩阵是 transform 选中的 <mark>计算规则</mark> ，最适合得出图形变换规律</li><li>根据传入的不同数值，得出不同的变换规律</li></ul><h4 id="_1-笛卡尔积计算公式" tabindex="-1"><a class="header-anchor" href="#_1-笛卡尔积计算公式" aria-hidden="true">#</a> 1）笛卡尔积计算公式</h4><ul><li>矩阵 2 有多少列，结果就有多少列</li><li>矩阵 1 的每一行按位和矩阵 2 每一列按位相乘后相加，作为结果集的一列</li><li>只关注矩阵前两行 <ul><li><code>x</code>、<code>y</code> 是图像上被操作的点</li><li><code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>e</code>、<code>f</code>是填入的参数，经过计算后图像上的点能变换到新的位置</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| a c e |   | x |   | ax + cy + e |
| b d f | * | y | = | bx + dy + f |
| 0 0 1 |   | 1 |   | 0  + 0  + 1 |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-平面变换-translate2d" tabindex="-1"><a class="header-anchor" href="#_2-平面变换-translate2d" aria-hidden="true">#</a> 2）平面变换 translate2d</h4><ul><li>matrix(1, 0, 0, 1, e, f); === translate(x, y);</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| 1 0 e |   | x |   | x + e |
| 0 1 f | * | y | = | y + f |
| 0 0 1 |   | 1 |   | 1     |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>matrix(a, 0, 0, d, 0, 0); === scale(x, y);</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| a 0 0 |   | x |   | ax |
| 0 d 0 | * | y | = | dy |
| 0 0 1 |   | 1 |   | 1  |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>matrix(cos(θ), sin(θ), -sin(θ), cos(θ), 0, 0); === rotate(θ);</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| cos(θ) -sin(θ) 0 |   | x |   | cos(θ)x - sin(θ)y |
| sin(θ) cos(θ)  0 | * | y | = | sin(θ)x + cos(θ)y |
| 0      0       1 |   | 1 |   | 1                 |
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-立体变换-translate3d" tabindex="-1"><a class="header-anchor" href="#_3-立体变换-translate3d" aria-hidden="true">#</a> 3）立体变换 translate3d</h4><ul><li>4*4 矩阵</li><li>缩放：matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1); === scale3d(x, y, z);</li><li>平移：matrix(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1); === translate3d(x, y, z);</li></ul><h2 id="七-显示器的成像原理" tabindex="-1"><a class="header-anchor" href="#七-显示器的成像原理" aria-hidden="true">#</a> （七）显示器的成像原理</h2><h3 id="_1-屏幕-screen" tabindex="-1"><a class="header-anchor" href="#_1-屏幕-screen" aria-hidden="true">#</a> 1.屏幕 <code>screen</code></h3><h4 id="_1-空间混色法" tabindex="-1"><a class="header-anchor" href="#_1-空间混色法" aria-hidden="true">#</a> 1）空间混色法</h4><p>三个成色材料在一个像素点中 <mark>接近并排排列</mark> ，不是叠加，利用视觉无法识别颜色值细微差别的特点，形成颜色</p><h4 id="_2-像素" tabindex="-1"><a class="header-anchor" href="#_2-像素" aria-hidden="true">#</a> 2）像素</h4><ul><li>像素是屏幕成像的基本单位，像素的基本单位是像点</li><li>红、绿、蓝三个像点（色点）经过空间混色法形成一个像素点</li><li>像素是一个相对单位</li></ul><h4 id="_3-像素排列" tabindex="-1"><a class="header-anchor" href="#_3-像素排列" aria-hidden="true">#</a> 3）像素排列</h4><ul><li>不同公司出品的设备像素排列方式可能不同 <ul><li>类型 1：类似“品”字形（初代）</li><li>类型 2：柱状并排排列，栅格形（索尼、松下）</li></ul></li><li>点距：像素 1 中的红色像点到相邻的像素 2 中的红色像点的距离 <ul><li>用于描述像素大小（像素呈现的细腻程度）：小 =&gt; 细腻</li></ul></li></ul><p><img src="`+u+'" alt=""></p><ul><li>CRT 显示屏 <ul><li>虽已过时，但其求点距的方法的是几乎所有屏幕都通用的</li><li>电子束（符合波粒二象性，会散射）打在荫罩层（校正光束的轨迹）上的荧光粉上，荧光粉本身不亮，接收到电子束的照射后才亮，照射一下就亮一下</li><li>电子束照射时间越长，荧光粉越亮，荧光粉的排列方式即像点的排列方式</li><li>多个像素点在屏幕上成像</li></ul></li></ul><p><img src="'+h+'" alt=""></p><ul><li>LCD 液晶屏 <ul><li>利用液晶材料经高温或磁场可成固态也可成液态的特点制成，可控制光的偏折</li><li>部分光穿过玻璃板投射到有滤光片的平面上，滤出的光经空间混色法在屏幕上成像</li><li>LED 是特殊的液晶屏</li></ul></li></ul><h3 id="_2-像素-px" tabindex="-1"><a class="header-anchor" href="#_2-像素-px" aria-hidden="true">#</a> 2.像素 <code>px</code></h3><h4 id="_1-物理像素" tabindex="-1"><a class="header-anchor" href="#_1-物理像素" aria-hidden="true">#</a> 1）物理像素</h4><ul><li>设备出厂时的像素大小</li><li><code>dpi</code> ：一英寸所能容纳的像素点数 <ul><li><code>1 inch = 2.54cm</code><ul><li>一般的清晰屏幕：96dpi</li><li>更清晰的屏幕：200-400dpi</li><li>ios ratino 有 360dpi</li></ul></li><li>最早用于表示打印机设备的像素大小 <ul><li>像素点即打印机的墨点，有时能达到 600dpi</li><li>表示打印机在一英寸的屏幕里面可以打印多少个墨点</li></ul></li></ul></li><li><code>ppi</code> ：一英寸所能容纳的像素点数（点距数） <ul><li>可与 <code>dpi</code> 通用</li></ul></li></ul><h4 id="_2-参照像素" tabindex="-1"><a class="header-anchor" href="#_2-参照像素" aria-hidden="true">#</a> 2）参照像素</h4><ul><li>背景：不同设备 dpi 不同，同样的 CSS 代码呈现的样式不同，需要一个统一的单位</li><li>制定标杆：对于 96dpi 的屏幕，以一臂之遥的视角去看，显示出的具体大小 <ul><li>约等于 <code>1 / 96 * 英寸</code></li><li>各设备向其靠拢（保持宽高比）</li></ul></li><li>也称 CSS 像素，即编程像素/逻辑像素</li><li>CSS 编程的逻辑像素方式，也被称为逻辑屏 <ul><li>CSS 中的 px 是虚拟值</li><li>根据不同设备的 dpr 转换为物理像素</li></ul></li></ul><h4 id="_3-设备像素比" tabindex="-1"><a class="header-anchor" href="#_3-设备像素比" aria-hidden="true">#</a> 3）设备像素比</h4><ul><li><code>dpr = 物理像素 / CSS像素</code></li><li>设计稿.psd 一般按照 iPhone6（ratino 屏）的物理像素作为标准提供图片尺寸 <ul><li>iPhone6 的 dpr 为 2，所以 CSS 设定时应 <code>/2</code></li></ul></li></ul><p><img src="'+k+'" alt=""></p><h4 id="_4-分辨率" tabindex="-1"><a class="header-anchor" href="#_4-分辨率" aria-hidden="true">#</a> 4）分辨率</h4><ul><li>多为 <code>1920 * 1080</code></li><li>固定宽高下展示的像素点数，不易直观看出好坏，10 寸不如 2 寸清晰 <ul><li>所以清晰度不看分辨率，看 dpi</li></ul></li></ul><h3 id="_3-显卡-gpu" tabindex="-1"><a class="header-anchor" href="#_3-显卡-gpu" aria-hidden="true">#</a> 3.显卡 <code>GPU</code></h3><h4 id="_1-cpu" tabindex="-1"><a class="header-anchor" href="#_1-cpu" aria-hidden="true">#</a> 1）<code>CPU</code></h4><ul><li>适合处理基于逻辑的数学运算（与或非）</li></ul><h4 id="_2-gpu" tabindex="-1"><a class="header-anchor" href="#_2-gpu" aria-hidden="true">#</a> 2）<code>GPU</code></h4><ul><li>适合处理高精度的浮点数运算</li><li>家用类 <ul><li>用于显卡图像绘制</li><li>基础绘制单位是多边形</li></ul></li><li>专业类 <ul><li>专业绘图领域显卡</li><li>基础绘制单位是点</li></ul></li></ul><h3 id="_4-布局-layout" tabindex="-1"><a class="header-anchor" href="#_4-布局-layout" aria-hidden="true">#</a> 4.布局 <code>Layout</code></h3><h4 id="_1-浏览器渲染顺序" tabindex="-1"><a class="header-anchor" href="#_1-浏览器渲染顺序" aria-hidden="true">#</a> 1）浏览器渲染顺序</h4><p><img src="'+v+`" alt=""></p><h4 id="_2-触发重排的操作-reflow" tabindex="-1"><a class="header-anchor" href="#_2-触发重排的操作-reflow" aria-hidden="true">#</a> 2）触发重排的操作 <code>reflow</code></h4><ul><li>改变窗口大小</li><li>改变文字大小</li><li>改变内容、输入框输入文字</li><li>激活伪类，如 <code>:hover</code></li><li>操作 <code>class</code> 属性</li><li>脚本操作 <code>DOM</code>（增删改查）</li><li>计算 <code>offsetWidth</code> 和 <code>offsetHeight</code></li><li>设置 <code>style</code> 属性</li></ul><h4 id="_3-触发重绘的操作-repaint" tabindex="-1"><a class="header-anchor" href="#_3-触发重绘的操作-repaint" aria-hidden="true">#</a> 3）触发重绘的操作 <code>repaint</code></h4><p>只改变某个元素的背景色、文字颜色、边框颜色等不影响其周围或内部布局的属性</p><h4 id="_4-性能优化" tabindex="-1"><a class="header-anchor" href="#_4-性能优化" aria-hidden="true">#</a> 4）性能优化</h4><ul><li><code>repaint</code> 速度快于 <code>reflow</code>，尽量不触发重排</li><li>操作 CSS 时不要 <code>.style.XXX</code>，加 class 一次重构更好</li><li><code>transform</code> 最好交给 GPU 来处理 <ul><li>改变 <code>opacity</code>、<code>transform: translate3d();</code>、<code>transform: translateZ()</code>都可以触发 GPU 新开一个层</li></ul></li><li>GPU 加速方法 <ul><li>hack 写法（不标准）： <ul><li><code>transform: xxxx（需要使用的变换属性） translate3d(0, 0, 0);</code></li><li><code>transform: xxxx（需要使用的变换属性） translateZ(0);</code></li></ul></li><li>标准写法： <ul><li>兼容性较好的浏览器可以使用 <code>will-change: transform;</code> 提前告诉浏览器新开一个层渲染</li><li>最好在 <mark>动作触发前</mark> 再定义 <code>will-change</code>，通常在点击事件触发前，给元素的 <code>hover</code> 绑定该属性</li></ul></li></ul></li><li>浏览器刷新页面的频率为 1s60 次（16.7 毫秒/次） <ul><li>GPU 可以在一帧里渲染好页面，那么当你改动页面的元素或者实现动画的时候，将会非常流畅</li></ul></li></ul><h2 id="八-响应式布局" tabindex="-1"><a class="header-anchor" href="#八-响应式布局" aria-hidden="true">#</a> （八）响应式布局</h2><h3 id="_1-响应式设计" tabindex="-1"><a class="header-anchor" href="#_1-响应式设计" aria-hidden="true">#</a> 1.响应式设计</h3><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1）背景</h4><ul><li>PC 端：电脑</li><li>移动端：手机、平板</li><li>大小和分辨率不同，像素点密集程度不同（移动端更密集）</li><li>需求：用一套代码解决几乎所有设备的页面展示问题</li></ul><h4 id="_2-响应式网页设计" tabindex="-1"><a class="header-anchor" href="#_2-响应式网页设计" aria-hidden="true">#</a> 2）响应式网页设计</h4><ul><li>也称自适应网页设计 / 回应式网页设计 / 对应式网页设计</li><li>是一种网页设计的技术做法，该设计可使网站在不同的设备（从桌面计算机显示器到移动电话或其他移动产品设备）上浏览时对应不同分辨率皆有合适的呈现</li><li>减少用户进行缩放，平移和滚动等操作行为</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>真正的响应式设计方法不仅仅是 <mark>根据可视区域大小而改变网页布局</mark></p><p>而是要 <mark>从整体上颠覆当前网页的设计方法</mark></p><p>是针对任意设备的网页内容进行完美布局的一种显示机制</p></div><h3 id="_2-设置视口" tabindex="-1"><a class="header-anchor" href="#_2-设置视口" aria-hidden="true">#</a> 2.设置视口</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 将页面大小根据分辨率不同进行相应的调节，以展示给用户感觉上差不多的大小 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两者都是设置视口宽度为设备宽度，但目的不同 <ul><li><code>width = device-width</code> : 解决 iPhone/iPad 上（横竖屏的宽度 = 竖屏时候的宽度）不能自适应的问题</li><li><code>initial-scale=1.0</code> : 解决 Windows 系统手机上的 IE 浏览器（横竖屏的宽度 = 竖屏时候的宽度）不能自适应的问题</li></ul></li><li>不设置 <code>meta</code> 标签则使用默认视口，一般为 980px、1024px（按设备）</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于适配各种不同分辨率的设备 <ul><li><code>width</code> ：可视区宽度</li><li><code>device-width</code> : 设备宽度</li><li><code>minimum-scale</code> ：最小缩放比</li><li><code>maximum-scale</code> ：最大缩放比</li><li><code>user-scalable </code>：是否允许用户缩放</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>CSS 像素根据设备像素进行计算，默认 <code>1 CSS像素 === 1 设备像素</code></p><p>设置视口可调节 CSS 像素和设备像素间的关系，会根据设备的分辨率和 dpi 值来计算 CSS 像素真正展现的大小</p></div><h3 id="_3-响应式网页开发方法" tabindex="-1"><a class="header-anchor" href="#_3-响应式网页开发方法" aria-hidden="true">#</a> 3.响应式网页开发方法</h3><ul><li>流体网格：可伸缩的网格 <ul><li>大小宽高都是可伸缩（flex、百分比、float）</li><li>布局上面的元素大小不固定可伸缩</li></ul></li><li>弹性图片：图片宽高不固定 <ul><li>可设置 <code>min-width: 100%;</code></li></ul></li><li>媒体查询：让网页在不同的终端上面展示效果相同 <ul><li>用户体验相同 =&gt; 让用户用着更爽</li><li>在不同的设备（大小、分辨率不同）上均展示合适的页面</li></ul></li><li>主要断点： 设备宽度的临界点 <ul><li>设备大小的区别 =&gt; 宽度不同 =&gt; 展示不同的样式</li></ul></li></ul><p><img src="`+m+'" alt=""></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>响应式网页开发主要是在 CSS 样式上面进行操作</p></div><h3 id="_4-媒体查询" tabindex="-1"><a class="header-anchor" href="#_4-媒体查询" aria-hidden="true">#</a> 4.媒体查询</h3><p>媒体查询是向不同设备提供不同样式的一种方式，它为每种类型的用户提供了最佳的体验</p><h4 id="_1-css2-媒体类型-media-type" tabindex="-1"><a class="header-anchor" href="#_1-css2-媒体类型-media-type" aria-hidden="true">#</a> 1）CSS2 媒体类型 <code>Media Type</code></h4><ul><li>是 CSS2 中的一个非常有用的属性</li><li>可以对不同的设备指定特定的样式，从而实现更丰富的界面</li></ul><p><img src="'+b+'" alt=""></p><h4 id="_2-css3-媒体查询-media-query" tabindex="-1"><a class="header-anchor" href="#_2-css3-媒体查询-media-query" aria-hidden="true">#</a> 2）CSS3 媒体查询 <code>Media Query</code></h4><ul><li>是 CSS3 对 Media Type 的增强</li><li>可以将 Media Query 看成：<code>Media Type（判断条件） + CSS属性（符合条件的样式规则） = Media Features（媒体特性）</code></li><li>媒体特性书写时必须加括号 <code>()</code></li></ul><p><img src="'+x+`" alt=""></p><h4 id="_3-引用媒体查询的方法" tabindex="-1"><a class="header-anchor" href="#_3-引用媒体查询的方法" aria-hidden="true">#</a> 3）引用媒体查询的方法</h4><ul><li>link 标签</li><li><code>@import url(example.css) screen and (width:800px);</code></li><li>CSS3 新增的 <code>@media</code></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>&lt;link rel=<span class="token string">&quot;stylesheet&quot;</span> media=<span class="token string">&quot;screen and (max-width: 800px)&quot;</span> href=<span class="token string">&quot;index.css&quot;</span> /&gt;
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">&#39;index.css&#39;</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>媒体查询不占用权重，通常放最后</p></div><h3 id="_5-逻辑操作符" tabindex="-1"><a class="header-anchor" href="#_5-逻辑操作符" aria-hidden="true">#</a> 5.逻辑操作符</h3><h4 id="_1-合并多个媒体属性-and" tabindex="-1"><a class="header-anchor" href="#_1-合并多个媒体属性-and" aria-hidden="true">#</a> 1）合并多个媒体属性 <code>and</code></h4><ul><li><code>@media screen and (min-width: 600px) and (max-width:100px);</code></li><li>合并多个媒体属性或合并媒体属性与媒体类型, 一个基本的媒体查询，即一个媒体属性与默认指定的 screen 媒体类型。</li></ul><h4 id="_2-指定备用功能" tabindex="-1"><a class="header-anchor" href="#_2-指定备用功能" aria-hidden="true">#</a> 2）指定备用功能 <code>,</code></h4><ul><li><code>@media screen and (min-width: 769px), print and (min-width: 6in);</code><ul><li>将样式应用到宽度超过 769 像素的屏幕或使用至少 6 英寸宽的纸张的打印设备</li></ul></li><li>没有 <code>or</code> 关键词可用于指定备用的媒体功能</li><li>可以将备用功能以 <mark>逗号分割列表</mark> 的形式列出</li></ul><h4 id="_3-指定否定条件-not" tabindex="-1"><a class="header-anchor" href="#_3-指定否定条件-not" aria-hidden="true">#</a> 3）指定否定条件 <code>not</code></h4><ul><li><code>@media not screen and (monochrome);</code><ul><li>用于除单色屏幕外的所有设备。</li></ul></li><li>不能在单个条件前使用 <code>not</code></li><li>该关键字必须位于声明的开头，且会否定整个声明</li></ul><h4 id="_4-向早期浏览器隐藏媒体查询-only" tabindex="-1"><a class="header-anchor" href="#_4-向早期浏览器隐藏媒体查询-only" aria-hidden="true">#</a> 4）向早期浏览器隐藏媒体查询 <code>only</code></h4><ul><li>该关键字必须位于声明的开头，指定某种特定的媒体类型，为了兼容不支持媒体查询的浏览器</li><li>无法识别媒体查询的浏览器要求获得逗号分割的媒体类型列表，规范要求，它们应该在第一个不是连字符的非数字字母字符之前截断每个值</li><li><code>media=&quot;only screen and (min-width: 401px) and (max-width: 600px)&quot;</code><ul><li>早期浏览器应该解释为 <code>media=&quot;only&quot;</code></li><li>因为没有 <code>only</code> 这样的媒体类型，所以样式表被忽略</li></ul></li><li><code>media=&quot;screen and (min-width: 401px) and (max-width: 600px)&quot;</code><ul><li>早期浏览器应该解释为 <code>media=&quot;screen&quot;</code></li><li>将样式规则应用于所有屏幕设备，即使不知道媒体查询的含义</li></ul></li></ul><h3 id="_6-易混淆的宽度" tabindex="-1"><a class="header-anchor" href="#_6-易混淆的宽度" aria-hidden="true">#</a> 6.易混淆的宽度</h3><ul><li>device-width/device-height\` ：设备的宽度/高度 <ul><li>如电脑、手机的宽度，不是浏览器的宽度</li></ul></li><li><code>width/height</code> ：渲染宽度/高度（视口宽度/高度） <ul><li>使用 <code>documentElement.clientWidth/clientHeight</code> ，即 <code>viewport</code> 的值</li></ul></li></ul><h3 id="_7-单位" tabindex="-1"><a class="header-anchor" href="#_7-单位" aria-hidden="true">#</a> 7.单位</h3><ul><li><code>rem</code><ul><li>CSS3 新增的一个相对单位 root em（根 em）</li><li>相对的只是 HTML 根元素的 <code>font-size</code> 大小</li></ul></li><li><code>em</code><ul><li>是相对长度单位</li><li>相对于当前对象内文本的 <code>font-size</code> 大小</li><li>如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li></ul></li><li><code>px</code><ul><li>像素（Pixel）是相对长度单位</li><li>是相对于显示器屏幕分辨率而言</li></ul></li><li><code>vw</code><ul><li>相对于视口的宽度</li><li>视口被均分为 100 单位的 vw</li></ul></li><li><code>vh</code><ul><li>相对于视口的高度</li><li>视口被均分为 100 单位的 vh</li></ul></li><li><code>vmax</code><ul><li>相对于视口的宽度或高度中较大的那个</li><li>其中最大的那个被均分为 100 单位的 vmax</li></ul></li><li><code>vmin</code><ul><li>相对于视口的宽度或高度中较小的那个</li><li>其中最小的那个被均分为 100 单位的 vmin</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>font-size 属性是可以继承的</p></div><h3 id="_8-关于响应式" tabindex="-1"><a class="header-anchor" href="#_8-关于响应式" aria-hidden="true">#</a> 8.关于响应式</h3><ul><li>不是最佳选择，项目的预算、目标用户以及产品定位等决定了其实现方式</li><li>渐进增强 <ul><li>先以 iPhone6 为初始原型开发，再兼容其他设备</li></ul></li><li>优雅降级 <ul><li>开发通用版本，再向下兼容至老版本</li></ul></li><li>先开发移动端，后开发 PC 端</li></ul>`,195);function C(z,P){const e=t("ExternalLinkIcon");return o(),c("div",null,[f,a("ul",null,[a("li",null,[n("按照正常规则编写 CSS 文件，后处理器会将该样式文件按照"),a("a",_,[n("caniuse"),i(e)]),n("网站的浏览器兼容情况，自动补齐相应的带前缀样式 "),y]),w]),S,a("blockquote",null,[a("p",null,[a("a",q,[n("MDN 详细文档"),i(e)])])]),E])}const M=l(g,[["render",C],["__file","001.html.vue"]]);export{M as default};
