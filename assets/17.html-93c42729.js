import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as l}from"./app-1ca76096.js";const h={},d=l('<h2 id="一-v-bind" tabindex="-1"><a class="header-anchor" href="#一-v-bind" aria-hidden="true">#</a> （一）v-bind</h2><ul><li>单向绑定解析表达式</li><li>可简写为：<code>:xxx</code></li></ul><h2 id="二-v-model" tabindex="-1"><a class="header-anchor" href="#二-v-model" aria-hidden="true">#</a> （二）v-model</h2><ul><li>双向数据绑定</li></ul><h2 id="三-v-for" tabindex="-1"><a class="header-anchor" href="#三-v-for" aria-hidden="true">#</a> （三）v-for</h2><ul><li>遍历数组/对象/字符串</li></ul><h2 id="四-v-on" tabindex="-1"><a class="header-anchor" href="#四-v-on" aria-hidden="true">#</a> （四）v-on</h2><ul><li>绑定事件监听</li><li>可简写为：<code>@xxx</code></li></ul><h2 id="五-v-if" tabindex="-1"><a class="header-anchor" href="#五-v-if" aria-hidden="true">#</a> （五）v-if</h2><ul><li>条件渲染</li><li>动态控制节点是否存在</li></ul><h2 id="六-v-else" tabindex="-1"><a class="header-anchor" href="#六-v-else" aria-hidden="true">#</a> （六）v-else</h2><ul><li>条件渲染</li><li>动态控制节点是否存在</li></ul><h2 id="七-v-show" tabindex="-1"><a class="header-anchor" href="#七-v-show" aria-hidden="true">#</a> （七）v-show</h2><ul><li>条件渲染</li><li>动态控制节点是否展示</li></ul><h2 id="八-v-text" tabindex="-1"><a class="header-anchor" href="#八-v-text" aria-hidden="true">#</a> （八）v-text</h2><h3 id="_1-作用" tabindex="-1"><a class="header-anchor" href="#_1-作用" aria-hidden="true">#</a> 1.作用</h3><ul><li>向其所在的节点中渲染文本内容</li></ul><h3 id="_2-与插值语法的区别" tabindex="-1"><a class="header-anchor" href="#_2-与插值语法的区别" aria-hidden="true">#</a> 2.与插值语法的区别</h3><ul><li>v-text 会替换掉节点中的内容</li><li><code>{{xxx}}</code>则不会</li></ul><h2 id="九-v-html" tabindex="-1"><a class="header-anchor" href="#九-v-html" aria-hidden="true">#</a> （九）v-html</h2><h3 id="_1-作用-1" tabindex="-1"><a class="header-anchor" href="#_1-作用-1" aria-hidden="true">#</a> 1.作用</h3><ul><li>向指定节点中渲染包含 html 结构的内容</li></ul><h3 id="_2-与插值语法的区别-1" tabindex="-1"><a class="header-anchor" href="#_2-与插值语法的区别-1" aria-hidden="true">#</a> 2.与插值语法的区别</h3><ul><li>v-html 会替换掉节点中所有的内容，<code>{{xxx}}</code>则不会</li><li>v-html 可以识别 html 结构</li></ul><div class="hint-container danger"><p class="hint-container-title">v-html 有安全性问题</p><ul><li>在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击</li><li>一定要在可信的内容上使用 v-html，永远不要用在用户提交的内容上</li></ul></div><h2 id="十-v-cloak-没有值" tabindex="-1"><a class="header-anchor" href="#十-v-cloak-没有值" aria-hidden="true">#</a> （十）v-cloak（没有值）</h2><ul><li>本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性</li><li>使用 css 的属性选择器 <code>[v-cloak]</code><ul><li>可以解决网速慢时页面展示出 <code>{{xxx}}</code> 的问题</li></ul></li></ul><h2 id="十一-v-once" tabindex="-1"><a class="header-anchor" href="#十一-v-once" aria-hidden="true">#</a> （十一）v-once</h2><ul><li>v-once 所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能</li></ul><h2 id="十二-v-pre" tabindex="-1"><a class="header-anchor" href="#十二-v-pre" aria-hidden="true">#</a> （十二）v-pre</h2><ul><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译速度</li></ul>',31),r=[d];function n(c,t){return a(),i("div",null,r)}const u=e(h,[["render",n],["__file","17.html.vue"]]);export{u as default};
