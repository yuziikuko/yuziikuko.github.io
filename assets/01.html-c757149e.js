import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as p}from"./app-1240ea23.js";const t={},e=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>位运算是计算速度最快的</p></div><h2 id="一-移位" tabindex="-1"><a class="header-anchor" href="#一-移位" aria-hidden="true">#</a> （一）移位</h2><h3 id="_1-右移" tabindex="-1"><a class="header-anchor" href="#_1-右移" aria-hidden="true">#</a> 1.<code>&gt;&gt;</code> 右移</h3><ul><li>相当于 <code>/2</code></li></ul><h3 id="_2-左移" tabindex="-1"><a class="header-anchor" href="#_2-左移" aria-hidden="true">#</a> 2.<code>&lt;&lt;</code> 左移</h3><ul><li>相当于 <code>*2</code></li></ul><h2 id="二-异或运算" tabindex="-1"><a class="header-anchor" href="#二-异或运算" aria-hidden="true">#</a> （二）异或运算</h2><h3 id="_1-性质" tabindex="-1"><a class="header-anchor" href="#_1-性质" aria-hidden="true">#</a> 1.性质</h3><ul><li><code>0 ^ N = N</code></li><li><code>N ^ N = 0</code></li><li>满足交换律：<code>a ^ b = b ^ a</code></li><li>满足结合律：<code>a ^ b ^ c = a ^ (b ^ c)</code></li></ul><h3 id="_2-不使用额外空间交换两个变量的值" tabindex="-1"><a class="header-anchor" href="#_2-不使用额外空间交换两个变量的值" aria-hidden="true">#</a> 2.不使用额外空间交换两个变量的值</h3><ul><li>只适用于整形类型的数组</li><li>a 和 b 相等时会报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a: a ^ b; b: b</span>
  arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a: a ^ b; b: a ^ b ^ b =&gt; a</span>
  arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a: a ^ b ^ a =&gt; b; b: a</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-找出数组中仅出现一次的数字" tabindex="-1"><a class="header-anchor" href="#_3-找出数组中仅出现一次的数字" aria-hidden="true">#</a> 3.找出数组中仅出现一次的数字</h3><ul><li>利用异或运算满足交换律和结合律的性质</li><li>初始变量 eor 值为 0，异或遍历数组</li><li>数组中出现偶数次的数，异或遍历后都为 0</li><li>最后 eor 保存的值就是仅出现一次的数字</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> eor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  eor <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-找出数组中仅出现一次的两个不同的数字" tabindex="-1"><a class="header-anchor" href="#_4-找出数组中仅出现一次的两个不同的数字" aria-hidden="true">#</a> 4.找出数组中仅出现一次的两个不同的数字</h3><ul><li>异或遍历数组，得到两个不同的数字的异或结果，保存到 eor 中</li><li>eor 的二进制形式，如果某一位为 1，说明 a 和 b 在该位置上不相等</li><li>只要找到 1 的某一个位置，异或遍历数组后必定能将整个数组分为两部分 <ul><li>一部分在该位置上是 0</li><li>一部分在该位置上是 1</li><li>a 和 b 必定不在同一部分</li><li>每个部分除了 a、b 外的数都是出现偶数次的数字</li></ul></li><li>任一部分异或遍历后就能将偶数次的数字化为 0，剩下 a（b）</li><li>最后利用 eor 和得到的数字异或，就能得到 b（a）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> eor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  eor <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 已知 eor = a ^ b 且 eor !== 0
 * 则eor必然有一个位置上是1
 * 使用以下方式提取出最右侧的1
 */</span>
<span class="token keyword">let</span> rightOne <span class="token operator">=</span> eor <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>eor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> onlyOne <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// eor</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cur <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;</span> rightOne<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onlyOne <span class="token operator">^=</span> cur<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>onlyOne<span class="token punctuation">,</span> eor <span class="token operator">^</span> onlyOne<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","01.html.vue"]]);export{k as default};
