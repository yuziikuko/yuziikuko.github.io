import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c,a,b as e,d as s,e as t}from"./app-76cdb462.js";const l="/assets/H5C301-7986b4f8.png",d="/assets/H5C302-f3793585.png",p="/assets/H5C303-be5f4951.png",u="/assets/H5C304-b385de4d.png",h="/assets/H5C305-14165b7e.png",m="/assets/H5C306-6e74fd44.png",_="/assets/H5C307-a8770087.png",g="/assets/H5C308-7b2f3951.png",b="/assets/H5C309-568d782a.png",f="/assets/H5C310-66e95772.png",k="/assets/H5C311-798389f5.png",v="/assets/H5C312-7d732c6b.png",x="/assets/H5C313-14755a37.png",C="/assets/H5C314-a6d1b0a8.png",y="/assets/H5C315-8a46fe21.png",S="/assets/H5C316-cec31e8c.png",w="/assets/H5C317-0a48268b.png",z="/assets/H5C318-c346d71a.png",N="/assets/H5C319-ac6dec97.png",H="/assets/H5C320-60303eea.png",M="/assets/H5C321-7b85d18a.png",q="/assets/H5C322-e22347ed.png",D={},W=t('<h2 id="一-布局" tabindex="-1"><a class="header-anchor" href="#一-布局" aria-hidden="true">#</a> （一）布局</h2><p><img src="'+l+'" alt=""></p><ul><li>浮动：做文字环绕效果</li><li>弹性盒：单行或单列布局</li><li>网格：多行多列布局</li></ul><h3 id="_1-弹性盒" tabindex="-1"><a class="header-anchor" href="#_1-弹性盒" aria-hidden="true">#</a> 1.弹性盒</h3>',4),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout",target:"_blank",rel:"noopener noreferrer"},L={href:"https://flexboxfroggy.com/",target:"_blank",rel:"noopener noreferrer"},B=t('<h4 id="_1-生成弹性容器和弹性项目" tabindex="-1"><a class="header-anchor" href="#_1-生成弹性容器和弹性项目" aria-hidden="true">#</a> 1）生成弹性容器和弹性项目</h4><p>默认情况下，弹性项目沿着主轴依次排列，侧轴拉伸</p><p><img src="'+d+'" alt=""></p><h4 id="_2-更改方向" tabindex="-1"><a class="header-anchor" href="#_2-更改方向" aria-hidden="true">#</a> 2）更改方向</h4><p>通过 <code>flex-direction</code> 可更改主轴方向</p><p><img src="'+p+'" alt=""></p><h4 id="_3-主轴排列" tabindex="-1"><a class="header-anchor" href="#_3-主轴排列" aria-hidden="true">#</a> 3）主轴排列</h4><p>通过 <code>justify-content</code> 属性，可以影响主轴的排列方式</p><p><img src="'+u+'" alt=""></p><h4 id="_4-侧轴排列" tabindex="-1"><a class="header-anchor" href="#_4-侧轴排列" aria-hidden="true">#</a> 4）侧轴排列</h4><p>通过 <code>align-items</code> 属性，可以影响侧轴的排列方式</p><p><img src="'+h+'" alt=""></p><h4 id="_5-弹性项目伸缩" tabindex="-1"><a class="header-anchor" href="#_5-弹性项目伸缩" aria-hidden="true">#</a> 5）弹性项目伸缩</h4><ul><li>伸缩，指在<strong>主轴方向</strong>上，当<strong>弹性容器</strong>有<strong>额外空间</strong>时，是否需要拉伸，当<strong>空间不足</strong>时，是否需要<strong>压缩</strong></li><li>在<strong>弹性项目</strong>上使用 <code>flex</code> 属性，可设置拉伸和压缩比例： <code>flex: 拉伸比例 压缩比例 初始尺寸</code></li><li>默认： <code>flex: 0 1 auto</code></li></ul><p>拉伸示例：</p><p><img src="'+m+'" alt=""></p><p>压缩示例：</p><p><img src="'+_+'" alt=""></p><h4 id="_6-主轴换行" tabindex="-1"><a class="header-anchor" href="#_6-主轴换行" aria-hidden="true">#</a> 6）主轴换行</h4><ul><li>默认情况，当主轴剩余空间不足时，按照压缩比例进行压缩</li><li>如果设置了主轴换行，则不会压缩，直接换行显示</li><li>给<strong>弹性容器</strong>设置 <code>flex-wrap: wrap</code> 即可实现主轴换行</li></ul><p><img src="'+g+'" alt=""></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>尽管如此，多行多列仍然推荐使用网格布局，网格布局是多行多列布局的终极解决方案</p></div><h3 id="_2-网格" tabindex="-1"><a class="header-anchor" href="#_2-网格" aria-hidden="true">#</a> 2.网格</h3>',23),V={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout",target:"_blank",rel:"noopener noreferrer"},E={href:"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://cssgridgarden.com/",target:"_blank",rel:"noopener noreferrer"},J=t('<h4 id="_1-生成网格布局" tabindex="-1"><a class="header-anchor" href="#_1-生成网格布局" aria-hidden="true">#</a> 1）生成网格布局</h4><p>容器生成网格布局后，其所有子元素为<strong>网格项目</strong></p><p><img src="'+b+'" alt=""></p><h4 id="_2-定义行和列" tabindex="-1"><a class="header-anchor" href="#_2-定义行和列" aria-hidden="true">#</a> 2）定义行和列</h4><ul><li><code>grid-template-rows</code>：定义行</li><li><code>grid-template-columns</code>：定义列</li><li>二者语法相同</li></ul><p><img src="'+f+'" alt=""></p><h4 id="_3-改变排列方向" tabindex="-1"><a class="header-anchor" href="#_3-改变排列方向" aria-hidden="true">#</a> 3）改变排列方向</h4><p>使用属性 <code>grid-auto-flow: column</code> 可使子元素按列排放</p><p><img src="'+k+`" alt=""></p><h4 id="_4-单元格之间的间隙" tabindex="-1"><a class="header-anchor" href="#_4-单元格之间的间隙" aria-hidden="true">#</a> 4）单元格之间的间隙</h4><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">row-gap</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token comment">/* 行间隙为10px */</span>
<span class="token property">column-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token comment">/* 列间隙为20px */</span>
<span class="token property">gap</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span> <span class="token comment">/* 行间隙为10px，列间隙为20px */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><h4 id="_5-单元格内部的对齐" tabindex="-1"><a class="header-anchor" href="#_5-单元格内部的对齐" aria-hidden="true">#</a> 5）单元格内部的对齐</h4><ul><li>默认情况下，网格项目在单元格内部水平和垂直拉伸，以撑满单元格</li><li>可以使用属性 <code>justify-items</code> 设置<strong>水平方向</strong>的排列方式</li><li>可以使用属性 <code>align-items</code> 设置<strong>垂直方向</strong>的排列方式</li><li>二者可取值相同</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">justify-items</span><span class="token punctuation">:</span> start 左 | end 右 | center 中 | stretch 拉伸<span class="token punctuation">;</span>
<span class="token property">align-items</span><span class="token punctuation">:</span> start 上 | end 下 | center 中 | stretch 拉伸<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+`" alt=""></p><p>可以使用速写属性 <code>place-items: 垂直对齐方式 水平对齐方式</code> 同时设置这两个值</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">place-items</span><span class="token punctuation">:</span> start center<span class="token punctuation">;</span> <span class="token comment">/* 垂直靠上，水平居中 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-网格项目定位" tabindex="-1"><a class="header-anchor" href="#_6-网格项目定位" aria-hidden="true">#</a> 6）网格项目定位</h4><ul><li>默认情况下，网格项目依次排列到单元格中，每个网格占据一个单元格</li><li>可以对网格项目设置 <code>grid-area</code> 属性来改变这一行为</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">grid-area</span><span class="token punctuation">:</span> 起始行线编号/起始列线编号/结束行线编号/结束列线编号<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+C+'" alt=""></p><h2 id="二-视觉" tabindex="-1"><a class="header-anchor" href="#二-视觉" aria-hidden="true">#</a> （二）视觉</h2><p>视觉类样式，是指不影响盒子位置、尺寸的样式，例如文字颜色、背景颜色、背景图片等</p><h3 id="_1-阴影" tabindex="-1"><a class="header-anchor" href="#_1-阴影" aria-hidden="true">#</a> 1.阴影</h3><h4 id="_1-盒子阴影-box-shadow" tabindex="-1"><a class="header-anchor" href="#_1-盒子阴影-box-shadow" aria-hidden="true">#</a> 1）盒子阴影 <code>box-shadow</code></h4>',26),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow",target:"_blank",rel:"noopener noreferrer"},A=a("iframe",{src:"http://mdrs.yuanjin.tech/html/css-manual/box-shadow.html?v=2",style:{width:"100%",height:"900px"}},null,-1),F=a("h4",{id:"_2-文字阴影-text-shadow",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-文字阴影-text-shadow","aria-hidden":"true"},"#"),e(" 2）文字阴影 "),a("code",null,"text-shadow")],-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow",target:"_blank",rel:"noopener noreferrer"},K=a("iframe",{src:"http://mdrs.yuanjin.tech/html/css-manual/text-shadow.html?v=3",style:{width:"100%",height:"500px"}},null,-1),O=a("h3",{id:"_2-圆角-border-radius",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-圆角-border-radius","aria-hidden":"true"},"#"),e(" 2.圆角 "),a("code",null,"border-radius")],-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius",target:"_blank",rel:"noopener noreferrer"},Q=t('<p><img src="'+y+`" alt=""></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token comment">/* 同时设置4个角的圆角，半径为10px */</span>
<span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span> <span class="token comment">/* 同时设置4个角的圆角，圆的横向半径为宽度一半，纵向半径为高度一半 */</span>
<span class="token property">border-radius</span><span class="token punctuation">:</span> 10px 20px 30px 40px<span class="token punctuation">;</span> <span class="token comment">/* 分别设置左上、右上、右下、左下的圆角 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe src="http://mdrs.yuanjin.tech/html/css-manual/border-raduis.html?v=5" style="width:100%;height:600px;"></iframe><h3 id="_3-背景渐变-linear-gradient" tabindex="-1"><a class="header-anchor" href="#_3-背景渐变-linear-gradient" aria-hidden="true">#</a> 3.背景渐变 <code>linear-gradient()</code></h3>`,4),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient()",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>在设置<strong>背景图片</strong>时，除了可以使用 <code>url()</code> 加载一张背景图，还可以使用 <code>linear-gradient()</code> 函数设置背景渐变（用于创建一张渐变的图片）</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 设置渐变背景，方向：从上到下，颜色：从#e66465渐变到#9198e5 */</span>
<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom<span class="token punctuation">,</span> #e66465<span class="token punctuation">,</span> #9198e5<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+'" alt=""></p><h3 id="_4-变形-transform" tabindex="-1"><a class="header-anchor" href="#_4-变形-transform" aria-hidden="true">#</a> 4.变形 <code>transform</code></h3>',4),X={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform",target:"_blank",rel:"noopener noreferrer"},Y=t('<ul><li>translate：平移</li><li>scale：缩放</li><li>rotate：旋转</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>无论是哪一种 transform，都只是视觉效果的变化，不会影响盒子的布局</p><p>transform 不会导致浏览器 reflow 和 rerender，因此效率极高</p></div><h4 id="_1-平移-translate" tabindex="-1"><a class="header-anchor" href="#_1-平移-translate" aria-hidden="true">#</a> 1）平移 <code>translate</code></h4><p>让盒子在原来位置上产生位移，类似于相对定位</p><p><img src="'+w+'" alt=""></p><h4 id="_2-缩放-scale" tabindex="-1"><a class="header-anchor" href="#_2-缩放-scale" aria-hidden="true">#</a> 2）缩放 <code>scale</code></h4><p>让盒子基于原来的尺寸发生缩放</p><p><img src="'+z+`" alt=""></p><h4 id="_3-旋转-rotate" tabindex="-1"><a class="header-anchor" href="#_3-旋转-rotate" aria-hidden="true">#</a> 3）旋转 <code>rotate</code></h4><p>让盒子在原图基础上进行旋转</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 在原图的基础上，顺时针旋转45度角 */</span>
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 在原图的基础上，顺时针旋转半圈 */</span>
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0.5turn<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe src="http://mdrs.yuanjin.tech/html/css-manual/rotate.html" style="width:100%;height:400px;"></iframe><h4 id="_4-改变变形原点-transform-origin" tabindex="-1"><a class="header-anchor" href="#_4-改变变形原点-transform-origin" aria-hidden="true">#</a> 4）改变变形原点 <code>transform-origin</code></h4>`,13),Z={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin",target:"_blank",rel:"noopener noreferrer"},$=t(`<ul><li>变形原点的位置，会影响到具体的变形行为</li><li>默认情况下，变形的原点在盒子中心</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transform-origin</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 设置原点在盒子中心 */</span>
<span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span> <span class="token comment">/* 设置原点在盒子左上角 */</span>
<span class="token property">transform-origin</span><span class="token punctuation">:</span> right bottom<span class="token punctuation">;</span> <span class="token comment">/* 设置原点在盒子右下角 */</span>
<span class="token property">transform-origin</span><span class="token punctuation">:</span> 30px 60px<span class="token punctuation">;</span> <span class="token comment">/* 设置原点在盒子坐标 (30, 60) 位置 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><iframe src="http://mdrs.yuanjin.tech/html/css-manual/transform-origin.html?v2" style="width:100%;height:600px;"></iframe><h4 id="_5-多种变形叠加" tabindex="-1"><a class="header-anchor" href="#_5-多种变形叠加" aria-hidden="true">#</a> 5）多种变形叠加</h4><p>可以一次性设置多种变形效果</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 先旋转45度，再平移(100,100) */</span>
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 先平移(100, 100)，再旋转45度 */</span>
<span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>旋转会导致坐标系也跟着旋转，从而可能影响到后续的变形效果</p></div><iframe src="http://mdrs.yuanjin.tech/html/css-manual/multi-transform.html?v2" style="width:100%;height:700px;"></iframe><h2 id="三-过渡和动画" tabindex="-1"><a class="header-anchor" href="#三-过渡和动画" aria-hidden="true">#</a> （三）过渡和动画</h2><ul><li>使用过渡和动画，可以让 css 属性变化更加丝滑</li><li>过渡和动画无法对所有的 CSS 属性产生影响，能够产生影响的只有<strong>数值类属性</strong>，例如：颜色、宽高、字体大小等等</li></ul><h3 id="_1-过渡" tabindex="-1"><a class="header-anchor" href="#_1-过渡" aria-hidden="true">#</a> 1.过渡</h3>`,11),aa={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition",target:"_blank",rel:"noopener noreferrer"},ea=t(`<div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">transition</span><span class="token punctuation">:</span> 过渡属性 持续时间 过渡函数 过渡延迟<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-过渡属性" tabindex="-1"><a class="header-anchor" href="#_1-过渡属性" aria-hidden="true">#</a> 1）过渡属性</h4><ul><li>针对哪个 css 属性应用过渡。</li><li>例如填写 <code>transform</code>，则表示仅针对 transform 属性应用过渡</li><li>若填写 <code>all</code> 或不填写，则表示针对所有 css 属性都应用过渡</li></ul><h4 id="_2-持续时间" tabindex="-1"><a class="header-anchor" href="#_2-持续时间" aria-hidden="true">#</a> 2）持续时间</h4><ul><li>css 属性变化所持续的时间，需要带上单位</li><li>例如 <code>3s</code> 表示 3 秒， <code>0.5s</code> 或 <code>500ms</code> 均表示 500 毫秒</li></ul><h4 id="_3-过渡函数" tabindex="-1"><a class="header-anchor" href="#_3-过渡函数" aria-hidden="true">#</a> 3）过渡函数</h4><ul><li>本质是 css 属性变化的贝塞尔曲线函数，通常直接使用预设值： <ul><li><code>ease-in-out</code>：平滑开始，平滑结束</li><li><code>linear</code>：线性变化</li><li><code>ease-in</code>：仅平滑开始</li><li><code>ease-out</code>：仅平滑结束</li></ul></li></ul><h4 id="_4-过渡延迟" tabindex="-1"><a class="header-anchor" href="#_4-过渡延迟" aria-hidden="true">#</a> 4）过渡延迟</h4><ul><li>书写规则和持续时间一样，表示过渡效果延迟多久后触发，不填则无延迟</li><li>在 JS 中，可以监听元素的 <code>transitionstart</code> 和 <code>transitionend</code> 事件，从而在过渡开始和过渡结束时做一些别的事情</li></ul><h3 id="_2-动画" tabindex="-1"><a class="header-anchor" href="#_2-动画" aria-hidden="true">#</a> 2.动画</h3>`,10),na={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations",target:"_blank",rel:"noopener noreferrer"},sa=t('<p>动画的本质是预先定义的一套 css 变化规则，然后给该规则取个名字</p><p><img src="'+N+`" alt=""></p><p>其他元素即可使用这样的规则：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> 规则名 持续时间<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在应用规则时，还可以指定更多的信息</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> 规则名 持续时间 重复次数 时间函数 动画方向 延迟时间<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>定义规则时， <code>0%</code> 可以书写为 <code>from</code></li><li>定义规则时， <code>100%</code> 可以书写为 <code>to</code></li><li>重复次数为 <code>infinite</code> 时，表示无限重复</li><li>动画方向为 <code>alternate</code> 时，表示交替反向，第 1 次正向，第 2 次反向，第 3 次正向，第 4 次方向，以此类推</li><li>在 JS 中，可以监听元素的 <code>animationstart</code> 和 <code>animationnend</code> 事件，从而在动画开始和动画结束时做一些别的事情</li></ul><h2 id="四-其他属性" tabindex="-1"><a class="header-anchor" href="#四-其他属性" aria-hidden="true">#</a> （四）其他属性</h2><h3 id="_1-box-sizing" tabindex="-1"><a class="header-anchor" href="#_1-box-sizing" aria-hidden="true">#</a> 1.box-sizing</h3><p><img src="`+H+`" alt=""></p><p>使用 <code>border-box</code> 控制尺寸更加直观，因此，很多网站都会加入下面的代码</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-字体图标" tabindex="-1"><a class="header-anchor" href="#_2-字体图标" aria-hidden="true">#</a> 2.字体图标</h3>`,13),ta={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face",target:"_blank",rel:"noopener noreferrer"},oa=a("li",null,[e("css3 新增了 "),a("code",null,"font-face"),e(" 指令，可以加载网络字体")],-1),ra=a("li",null,"最常见的应用就是字体图标",-1),ia=a("li",null,[e("字体图标本质上是文字，即通过 "),a("code",null,"color"),e(" 设置颜色，通过 "),a("code",null,"font-size"),e(" 设置尺寸")],-1),ca={href:"https://www.iconfont.cn/",target:"_blank",rel:"noopener noreferrer"},la=a("h3",{id:"_3-图像内容适应",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-图像内容适应","aria-hidden":"true"},"#"),e(" 3.图像内容适应")],-1),da={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit",target:"_blank",rel:"noopener noreferrer"},pa=t('<ul><li>css3 属性 <code>object-fit</code> 可以控制<strong>多媒体内容和与元素</strong>的适应方式，通常应用在 <code>img</code> 或 <code>video</code> 元素中</li><li>下图中的所有 <code>img</code> 元素均被固定了宽高，溢出的部分实际上均不会显示</li></ul><p><img src="'+M+'" alt=""></p><h3 id="_4-视口单位" tabindex="-1"><a class="header-anchor" href="#_4-视口单位" aria-hidden="true">#</a> 4.视口单位</h3><ul><li>css3 支持使用 <code>vw</code> 和 <code>vh</code> 作为单位，分别表示<strong>视口宽度</strong>和<strong>视口高度</strong></li><li>例如 <code>1vh</code> 表示视口高度的 <code>1%</code> ， <code>100vw</code> 表示视口宽度的 <code>100%</code></li></ul><h3 id="_5-伪元素选择器" tabindex="-1"><a class="header-anchor" href="#_5-伪元素选择器" aria-hidden="true">#</a> 5.伪元素选择器</h3><ul><li>通过 <code>::before</code> 和 <code>::after</code> 选择器，可以通过 css 给元素生成两个子元素</li><li>使用伪元素可以避免在 HTML 中使用过多的空元素</li><li>伪元素必须要有 <code>content</code> 属性，否则不能生效，如果不需要有元素内容，设置 <code>content:&#39;&#39;</code></li></ul><p><img src="'+q+'" alt=""></p><h3 id="_6-平滑滚动" tabindex="-1"><a class="header-anchor" href="#_6-平滑滚动" aria-hidden="true">#</a> 6.平滑滚动</h3>',8),ua={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-behavior",target:"_blank",rel:"noopener noreferrer"},ha=a("ul",null,[a("li",null,[e("使用 "),a("code",null,"scroll-behavior: smooth"),e("，可以让滚动更加丝滑")]),a("li",null,"滚动条在哪个元素上就加到哪个元素上")],-1);function ma(_a,ga){const n=r("ExternalLinkIcon");return i(),c("div",null,[W,a("blockquote",null,[a("p",null,[e("详细文档见 "),a("a",j,[e("MDN"),s(n)])]),a("p",null,[a("a",L,[e("弹性盒小游戏"),s(n)])])]),B,a("blockquote",null,[a("p",null,[a("a",V,[e("MDN 详细文档"),s(n)])]),a("p",null,[a("a",E,[e("阮一峰网格布局教程"),s(n)])]),a("p",null,[a("a",I,[e("网格布局小游戏"),s(n)])])]),J,a("blockquote",null,[a("p",null,[a("a",T,[e("MDN 详细文档"),s(n)])])]),A,F,a("blockquote",null,[a("p",null,[a("a",G,[e("MDN 详细文档"),s(n)])])]),K,O,a("blockquote",null,[a("p",null,[a("a",P,[e("MDN 详细文档"),s(n)])])]),Q,a("blockquote",null,[a("p",null,[a("a",R,[e("MDN 详细文档"),s(n)])])]),U,a("blockquote",null,[a("p",null,[a("a",X,[e("MDN 详细文档"),s(n)])])]),Y,a("blockquote",null,[a("p",null,[a("a",Z,[e("MDN 详细文档"),s(n)])])]),$,a("blockquote",null,[a("p",null,[a("a",aa,[e("MDN 详细文档"),s(n)])])]),ea,a("blockquote",null,[a("p",null,[a("a",na,[e("MDN 详细文档"),s(n)])])]),sa,a("blockquote",null,[a("p",null,[a("a",ta,[e("MDN font-face 指令"),s(n)])])]),a("ul",null,[oa,ra,ia,a("li",null,[e("国内使用最多的字体图标平台是"),a("a",ca,[e("阿里巴巴矢量图标库"),s(n)])])]),la,a("blockquote",null,[a("p",null,[a("a",da,[e("MDN 详细文档"),s(n)])])]),pa,a("blockquote",null,[a("p",null,[a("a",ua,[e("MDN 详细文档"),s(n)])])]),ha])}const ka=o(D,[["render",ma],["__file","05.html.vue"]]);export{ka as default};
