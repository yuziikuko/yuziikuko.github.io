import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-1ca76096.js";const e={},p=t(`<h2 id="一-页面结构" tabindex="-1"><a class="header-anchor" href="#一-页面结构" aria-hidden="true">#</a> （一）页面结构</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page-header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击切换颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid lightblue<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-声明变量" tabindex="-1"><a class="header-anchor" href="#二-声明变量" aria-hidden="true">#</a> （二）声明变量</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">521</span><span class="token punctuation">,</span>
  g <span class="token operator">=</span> <span class="token string">&quot;iloveyou&quot;</span><span class="token punctuation">,</span>
  h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-特性" tabindex="-1"><a class="header-anchor" href="#三-特性" aria-hidden="true">#</a> （三）特性</h2><h3 id="_1-变量不能重复声明" tabindex="-1"><a class="header-anchor" href="#_1-变量不能重复声明" aria-hidden="true">#</a> 1.变量不能重复声明</h3><ul><li><code>var</code> 无此限制</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> star <span class="token operator">=</span> <span class="token string">&quot;伊東&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> star <span class="token operator">=</span> <span class="token string">&quot;itokashitaro&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught SyntaxError: Identifier &#39;star&#39; has already been declared</span>

<span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">&quot;伊東&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token string">&quot;itokashitaro&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-块级作用域" tabindex="-1"><a class="header-anchor" href="#_2-块级作用域" aria-hidden="true">#</a> 2.块级作用域</h3><h4 id="_1-es5" tabindex="-1"><a class="header-anchor" href="#_1-es5" aria-hidden="true">#</a> 1）ES5</h4><ul><li><code>eval</code> 作用域【es5 严格模式才会出现】</li><li>全局作用域</li><li>函数作用域</li></ul><h4 id="_2-es6" tabindex="-1"><a class="header-anchor" href="#_2-es6" aria-hidden="true">#</a> 2）ES6</h4><ul><li><code>eval</code> 作用域【es5 严格模式才会出现】</li><li>全局作用域</li><li>函数作用域</li><li>块级作用域 <ul><li><code>let</code> 只在声明变量的代码块中有效 <ul><li><code>{}</code></li><li><code>if{}</code></li><li><code>else{}</code></li><li><code>while{}</code></li><li><code>for{}</code></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> girl <span class="token operator">=</span> <span class="token string">&quot;祢豆子&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught ReferenceError: girl is not defined</span>

<span class="token punctuation">{</span>
  <span class="token keyword">var</span> girl <span class="token operator">=</span> <span class="token string">&quot;祢豆子&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 祢豆子</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-不存在变量提升" tabindex="-1"><a class="header-anchor" href="#_3-不存在变量提升" aria-hidden="true">#</a> 3.不存在变量提升</h3><ul><li>代码执行前会查找变量和函数</li><li>若未定义则赋初始值 <code>undefined</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> song <span class="token operator">=</span> <span class="token string">&quot;伊豆的舞女&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// undefined（执行时未查找到song，相当于在console前自动补充了：var song;所以不会报错并输出undefined）</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>song<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> song <span class="token operator">=</span> <span class="token string">&quot;伊豆的舞女&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught ReferenceError: Cannot access &#39;song&#39; before initialization</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-不影响作用域链" tabindex="-1"><a class="header-anchor" href="#_4-不影响作用域链" aria-hidden="true">#</a> 4.不影响作用域链</h3><ul><li>块级作用域内部函数体仍有效</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;ikuko&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 函数体内没有name，向上一级寻找</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ikuko</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-案例实操-——-点击方块切换颜色" tabindex="-1"><a class="header-anchor" href="#四-案例实操-——-点击方块切换颜色" aria-hidden="true">#</a> （四）案例实操 —— 点击方块切换颜色</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取div元素对象</span>
<span class="token keyword">let</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历并绑定事件</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 修改当前元素的背景色</span>
    <span class="token comment">// this.style.background = &#39;pink&#39;;</span>

    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// Uncaught TypeError: Cannot read properties of undefined (reading &#39;style&#39;)</span>
    <span class="token comment">/*
     * 循环执行如下：
     * {var i = 0;}{var i = 1;}{var i = 2;}
     * 由于var变量没有块级作用域，所以i变量一直存在于全局
     * 循环结束时，i已经变为3，点击执行回调函数时找不到i，向外层window找i，找到了items[3]
     */</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 <code>var</code> 改为 <code>let</code> 即可</li><li>循环执行如下： <ul><li>三个代码块中的 <code>i</code> 互不影响</li><li>点击执行回调函数时找不到 <code>i</code></li><li>向外层找 <code>i</code> ，找到了 <code>let</code> 声明的 <code>i</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// // 循环如下：</span>
<span class="token comment">// {</span>
<span class="token comment">//     let i = 0;</span>
<span class="token comment">//     items[i].onclick = function() {</span>
<span class="token comment">//         items[i].style.background = &#39;pink&#39;;</span>
<span class="token comment">//     }</span>
<span class="token comment">// } {</span>
<span class="token comment">//     let i = 1;</span>
<span class="token comment">//     items[i].onclick = function() {</span>
<span class="token comment">//         items[i].style.background = &#39;pink&#39;;</span>
<span class="token comment">//     }</span>
<span class="token comment">// } {</span>
<span class="token comment">//     let i = 2;</span>
<span class="token comment">//     items[i].onclick = function() {</span>
<span class="token comment">//         items[i].style.background = &#39;pink&#39;;</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(e,[["render",c],["__file","01.html.vue"]]);export{r as default};
