import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as i,e as a}from"./app-9d848c41.js";const l={},c=a('<h2 id="_1-监视属性" tabindex="-1"><a class="header-anchor" href="#_1-监视属性" aria-hidden="true">#</a> 1.监视属性</h2><ul><li><p>当被监视的属性变化时，回调函数自动调用，进行相关操作。</p></li><li><p>监视的属性必须存在，才能进行监视！</p></li><li><p>监视的两种写法：</p><ul><li><p>new Vue 时传入 watch 配置 =&gt; 创建 Vue 实例时已经明确需要监视什么属性。</p></li><li><p>通过<code>vm.$watch</code>监视 =&gt; Vue 实例挂载后通过某种行为需要监视某些属性。</p></li></ul></li></ul><h2 id="_2-深度监视" tabindex="-1"><a class="header-anchor" href="#_2-深度监视" aria-hidden="true">#</a> 2.深度监视</h2><ul><li><p>Vue 中的 watch 默认不监测对象内部值的改变（一层）。</p></li><li><p>配置<code>deep: true</code>可以监测对象内部值的改变（多层）。</p></li><li><p>备注：</p><ul><li><p>Vue 自身可以监测对象内部值的改变，但 Vue 提供的 watch 默认不可以。</p></li><li><p>使用 watch 时根据数据的具体结构，决定是否采用深度监视。</p></li></ul></li></ul><h2 id="_3-computed-和-watch-的区别" tabindex="-1"><a class="header-anchor" href="#_3-computed-和-watch-的区别" aria-hidden="true">#</a> 3.computed 和 watch 的区别</h2><ul><li><p>computed 能完成的功能，watch 都可以完成。</p></li><li><p>watch 能完成的功能，computed 不一定能完成，如：watch 可以进行异步操作。</p></li></ul><h2 id="_4-两个重要的小原则" tabindex="-1"><a class="header-anchor" href="#_4-两个重要的小原则" aria-hidden="true">#</a> 4.两个重要的小原则</h2><ul><li><p>所有被 Vue 管理的函数，最好写成普通函数，这样 this 的指向才是 <strong>vm</strong> 或 <strong>组件实例对象</strong>。</p></li><li><p>所有不被 Vue 管理的函数（定时器的回调函数、Ajax 的回调函数、Promise 的回调函数等），最好写成箭头函数，这样 this 的指向才是 <strong>vm</strong> 或 <strong>组件实例对象</strong>。</p></li></ul>',8),r=[c];function h(o,p){return t(),i("div",null,r)}const n=e(l,[["render",h],["__file","10.html.vue"]]);export{n as default};
